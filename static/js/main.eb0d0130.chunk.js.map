{"version":3,"sources":["../node_modules/react-sport/dist sync","config/routes.tsx","config/config.tsx","features/history.tsx","features/stores/BasicStore.tsx","config/tabsConfig.tsx","features/stores/Tabs.tsx","features/stores/Matches/MatchesApiStore.tsx","features/stores/Matches/MatchesStore.tsx","config/amplua.tsx","features/stores/PlayerProfile/PlayerProfileStore.tsx","features/stores/PlayerProfile/PlayerProfileApiStore.tsx","config/params.tsx","config/markers.tsx","config/FieldZones.tsx","config/matchSetsConfig.tsx","module/utils/helpers.tsx","features/stores/PlayerStatsHeader/PlayerStatsHeaderApiStore.tsx","features/stores/PlayerStatsHeader/PlayerStatsHeaderStore.tsx","features/stores/TeamStatsHeader/TeamStatsHeaderApiStore.tsx","features/stores/TeamStatsHeader/TeamStatsHeaderStore.tsx","features/stores/InfoItem.tsx","features/stores/Markers/MarkersStore.tsx","features/stores/Markers/MarkersFiltration/MarkersFiltration.tsx","features/stores/Markers/MarkersFiltration/KeysFiltration.tsx","features/stores/Markers/Marker.tsx","features/stores/ToolTips/ToolTipActions.tsx","features/stores/PlayerInfo/FetchPlayerInfo.tsx","features/stores/MapShoot/FetchMapShoot.tsx","features/stores/Markers/FetchMarkerActions.tsx","features/stores/Markers/Actions.tsx","features/stores/Markers/ComposeMarkers.tsx","features/stores/Zones/ZoneActionsMixin.tsx","features/stores/Zones/ZonesStore.tsx","features/stores/ShotType/ShotTypeStore.tsx","features/stores/ShotType/FetchShotType.tsx","features/stores/MapShoot/MapShootStore.tsx","features/stores/PlayerInfo/PlayerInfoStore.tsx","features/stores/ToolTips/ToolTipsStore.tsx","features/stores/ShootsRange/ShootsRange.tsx","features/stores/ShootsRange/RangeActions.tsx","features/stores/VideoCuts/VideoCuts.tsx","features/stores/VideoCuts/PopupItem.tsx","features/stores/VideoCuts/Button.tsx","features/stores/VideoCuts/VideoCutsMixin.tsx","features/stores/VideoCuts/ComposeVideoCuts.tsx","features/stores/MatchLinks/MatchLinksStore.tsx","features/stores/MatchLinks/MatchLinksApiStore.tsx","features/stores/TableReports/filterParams.tsx","features/stores/TableReports/TableReportsStore.tsx","features/stores/TableReports/TableReportsApiStore.tsx","features/Table/components/MatchPopup.tsx","config/teamPopupParams.tsx","module/utils/helpers/getDigits/index.tsx","module/utils/helpers/getFilteredStatsByParamId/index.tsx","module/utils/helpers/getSummaryStatValue/index.tsx","features/Table/components/TFoot.tsx","features/Table/components/THead.tsx","features/components/common/map/RangeSettings/index.tsx","features/TableName/components/EditableInput.tsx","features/TableName/components/EditTableName.tsx","features/GearPopup/components/GearTable/index.tsx","features/GearPopup/components/GearTable/composed.tsx","module/utils/update.js","features/GearPopup/components/DndItem/index.tsx","features/GearPopup/components/DndParams/index.tsx","config/lexics/filters.tsx","config/lexics/login.tsx","config/lexics/player.tsx","config/lexics/team.tsx","config/lexics/match.tsx","config/lexics/markers.tsx","config/lexics/tableParams.tsx","config/lexics/tableParamsShort.tsx","config/lexics/tableParamsNum.tsx","config/lexics/videoCuts.tsx","config/lexics/index.tsx","features/GearPopup/components/composed.tsx","features/GearPopup/components/index.tsx","features/GearPopup/components/PopupItem/index.tsx","features/GearPopup/models/gearPopupViews.tsx","features/GearPopup/models/gearPopupActions.tsx","features/GearPopup/models/GearPopupStore.tsx","config/tables.tsx","features/TableHeader/components/HeaderWithOpp.tsx","hocs/getDropdownBtnsHoc.tsx","features/TableHeader/components/HeaderWithAvatar.tsx","features/TableHeader/components/HeaderWithTeams.tsx","features/TableHeader/components/index.tsx","hocs/setSortedIdHOC.tsx","features/Table/components/Table/composed.tsx","features/Table/models/tableActions/addTable.tsx","features/Table/models/tableActions/changeValueType.tsx","features/Table/models/tableActions/deleteTable.tsx","features/Table/models/tableActions/editTable.tsx","features/Table/models/tableActions/editTempTableName.tsx","features/Table/models/tableActions/moveTable.tsx","features/Table/models/tableActions/resetTable.tsx","features/Table/models/tableActions/saveTempParams.tsx","features/Table/models/tableActions/index.tsx","features/Table/models/tableApiActions.tsx","features/Table/models/tableModel.tsx","features/TournamentPageMatchesTable/models/TournamentMatchesTableApiActions.tsx","features/TournamentPageMatchesTable/config/index.tsx","features/TournamentPageMatchesTable/models/TournamentMatchesTableActions.tsx","features/TournamentPageMatchesTable/models/TournamentMatchesTableViews.tsx","features/TournamentPageMatchesTable/models/TournamentMatchesTableStore.tsx","features/components/common/loader/Loader.tsx","features/TournamentPageMatchesTable/components/index.tsx","module/utils/helpers/emptyStatToZero/index.tsx","hocs/sortedTableItemsHoc.tsx","features/Table/components/TBody.tsx","features/ShowMoreBtn/index.tsx","features/TournamentPageMatchesTable/components/HOCs/TFootHOC.tsx","config/playListTypes.tsx","module/utils/helpers/getStatValue/index.tsx","features/TournamentPageMatchesTable/components/LeftSideTr/composed.tsx","features/TournamentPageMatchesTable/components/LeftSideTr/index.tsx","hocs/getMatchLinksHoc.tsx","hocs/getExtLinkHOC.tsx","hocs/getClickableTdClassNameHoc.tsx","features/TournamentPageMatchesTable/components/Tr/composed.tsx","features/TournamentPageMatchesTable/components/Tr/index.tsx","features/TournamentPageMatchesTable/components/TournamentTable.tsx","features/TournamentPagePlayersTable/models/apiActions.tsx","features/TournamentPagePlayersTable/models/actions.tsx","features/TournamentPagePlayersTable/models/views.tsx","features/TournamentPagePlayersTable/models/playersStore.tsx","features/TournamentPagePlayersTable/components/index.tsx","features/TournamentPagePlayersTable/components/LeftSideTr/composed.tsx","features/TournamentPagePlayersTable/components/LeftSideTr/index.tsx","features/TournamentPagePlayersTable/components/Tr/composed.tsx","features/TournamentPagePlayersTable/components/Tr/index.tsx","features/TournamentPagePlayersTable/components/TournamentPlayers.tsx","features/MatchProfileTable/components/Tr/composed.tsx","features/MatchProfileTable/components/Tr/index.tsx","features/MatchProfileTable/components/TableMatchWrapper/Table.tsx","features/MatchProfileTable/components/TableMatchWrapper/tableComposed.tsx","features/MatchProfileTable/components/TableMatchWrapper/index.tsx","features/CommonTable/HOCs/TFootHOC.tsx","features/CommonTable/Tr/composed.tsx","features/CommonTable/LeftSideTr/index.tsx","features/CommonTable/LeftSideTr/composed.tsx","features/CommonTable/Tr/index.tsx","features/CommonTable/index.tsx","features/Table/components/TableContent/index.tsx","features/Table/components/TableActions.tsx","features/Table/components/Table/index.tsx","features/Table/components/index.tsx","models/Widgets/PlayersCompare/apiActions.tsx","models/Widgets/PlayersCompare/actions.tsx","models/Widgets/PlayersCompare/views.tsx","models/Widgets/PlayersCompare/PlayersCompareStore.tsx","models/Widgets/PlayersCompare/index.tsx","models/StatsTable/TeamTable/TeamPlayers/TeamPlayersApiActions.tsx","models/StatsTable/TeamTable/TeamPlayers/TeamPlayersActions.tsx","models/StatsTable/TeamTable/TeamPlayers/TeamPlayersStore.tsx","models/StatsTable/TeamTable/TeamPlayers/index.tsx","models/SelectedMatches/SelectedMatchesActions.tsx","models/SelectedMatches/SelectedMatchesStore.tsx","models/SelectedMatches/index.tsx","models/TableReports/TableReportsApiActions.tsx","models/TableReports/TableReportsStore.tsx","models/TableReports/index.tsx","models/MatchProfile/MatchProfileApiActions.tsx","models/MatchProfile/MatchProfileStore.tsx","models/MatchProfile/index.tsx","models/ExternalVideoLinks/titles/getHeaderStatsTitle.tsx","models/ExternalVideoLinks/titles/getMapShootsTitle.tsx","models/ExternalVideoLinks/titles/getTableMatchesTitle.tsx","models/ExternalVideoLinks/titles/getTablesFooterTitle.tsx","models/ExternalVideoLinks/titles/getTeamPlayersTitle.tsx","models/ExternalVideoLinks/titles/getWidgetsTitle.tsx","models/ExternalVideoLinks/setTitle.tsx","models/ExternalVideoLinks/ExternalVideoLinksActions.tsx","models/ExternalVideoLinks/ExternalVideoLinksStore.tsx","models/ExternalVideoLinks/index.tsx","features/MapFilters/models/FiltersApiActions.tsx","features/MapFilters/models/FilterActions.tsx","features/MapFilters/models/FiltersStore.tsx","features/MapFilters/models/index.tsx","features/TeamsCompareWidget/models/TeamsCompareActions.tsx","features/TeamsCompareWidget/models/TeamsCompareApiActions.tsx","features/TeamsCompareWidget/models/TeamsCompareStore.tsx","features/TeamsCompareWidget/components/TeamsCompareStats.tsx","features/TeamsCompareWidget/components/TeamsCompareLogos.tsx","features/TeamsCompareWidget/components/TeamsCompareInfo.tsx","features/TeamsCompareWidget/components/TeamsComparePopup/index.tsx","features/TeamsCompareWidget/components/TeamsComparePopup/TeamsComparePopupComposed.tsx","features/TeamsCompareWidget/components/TeamsCompareHeader.tsx","features/TeamsCompareWidget/config/index.tsx","features/TeamsCompareWidget/components/TeamsCompare.tsx","features/TeamPage/models/TeamProfileApiActions.tsx","features/TeamPage/models/TeamProfileStore.tsx","features/TeamPage/models/index.tsx","features/TournamentSeasonSelect/models/TournamentSeasonSelectApiActions.tsx","features/TournamentSeasonSelect/models/TournamentSeasonSelectActions.tsx","features/TournamentSeasonSelect/models/TournamentSeasonSelectStore.tsx","features/TournamentPage/models/TournamentPageApiActions.tsx","features/TournamentPage/models/TournamentPageStore.tsx","features/MatchPagePlayers/models/apiActions.tsx","features/MatchPagePlayers/models/actions.tsx","features/MatchPagePlayers/models/matchPlayersStore.tsx","features/TournamentPageMatches/models/TournamentMatchesStore.tsx","features/TournamentPageMatches/models/TournamentMatchesApiActions.tsx","features/TournamentPageMatches/models/TournamentMatchesViews.tsx","features/TournamentPageMatches/models/index.tsx","features/TournamentHeaderStats/models/TournamentHeaderStatsApiActions.tsx","features/TournamentHeaderStats/models/TournamentHeaderStatsActions.tsx","features/TournamentHeaderStats/models/TournamentHeaderStatsStore.tsx","features/PlayerPageMatches/models/PlayerPageMatchesStore.tsx","features/PlayerPageMatches/models/apiActions.tsx","features/PlayerPageMatches/models/actions.tsx","features/PlayerPageMatches/models/index.tsx","features/ErrorModel/index.tsx","features/FetchModel/index.tsx","features/TeamPageMatches/store/model.tsx","features/TeamPageMatches/store/index.tsx","features/TeamPageMatches/store/actions.tsx","features/TeamPageMatches/store/apiActions.tsx","features/TeamPageMatches/components/index.tsx","features/stores/index.tsx","features/ProfilePopup/index.tsx","features/components/Home/Home.tsx","features/components/Header/Header.tsx","features/components/common/stats-tabs/LinksList/index.tsx","features/components/common/stats-tabs/StatsTabs.tsx","features/components/common/player/Header.tsx","features/components/common/map/Pointer.tsx","features/components/common/map/PlayerName.tsx","features/components/common/map/ToolTip/index.tsx","features/components/common/map/MarkerItem.tsx","features/components/common/map/Markers.tsx","features/components/common/map/SaveScreenShot/index.tsx","features/components/common/map/RangeSettingsPopup/index.tsx","features/components/common/video-player/PlayVideoBtn.tsx","features/MapControls/components/ControlsDropDown/index.tsx","features/MapControls/components/TeamsPopup/index.tsx","features/MapControls/components/config/directionsDropdown.tsx","features/MapControls/components/Directions/index.tsx","features/MapControls/components/Zones/index.tsx","features/MapControls/components/index.tsx","config/zones.tsx","features/components/common/map/ZoneStatistic/index.tsx","features/MapField/config/index.tsx","features/MapField/components/MapFieldSVG.tsx","features/MapField/components/FieldZones.tsx","features/MapField/components/MapField.tsx","features/MapFilters/components/config/index.tsx","config/lexics/filtersById.tsx","features/MapFilters/components/FilterItem/FilterMenu/FilterPopup/PopupHOC/index.tsx","features/MapFilters/components/FilterItem/FilterMenu/FilterPopup/ColumnsPopup/index.tsx","features/MapFilters/components/FilterItem/FilterMenu/FilterPopup/ZonesPopup/index.tsx","features/MapFilters/components/FilterItem/FilterMenu/FilterPopup/PopupSimple/index.tsx","features/MapFilters/components/FilterItem/FilterMenu/FilterPopup/PopupWithPlayers/index.tsx","features/MapFilters/components/FilterItem/FilterMenu/FilterPopup/PopupWithHomePlayers/index.tsx","features/MapFilters/components/FilterItem/FilterMenu/index.tsx","features/MapFilters/components/FilterItem/FilterSubMenu/index.tsx","features/MapFilters/components/FilterItem/index.tsx","features/MapFilters/components/index.tsx","module/utils/helpers/getPlayerFullName/index.tsx","features/components/common/widgets/PlayersCompare/PlayerName.tsx","features/components/common/widgets/PlayersCompare/PlayersSelect.tsx","features/components/common/widgets/PlayersCompare/PlayersStats.tsx","features/components/common/widgets/PlayersCompare/PlayersInfo/composed.tsx","features/components/common/widgets/PlayersCompare/PlayersInfo/index.tsx","features/components/common/widgets/PlayersCompare/PlayersComparePopup/index.tsx","features/components/common/widgets/PlayersCompare/PlayersComparePopup/PlayersComparePopupComposed.tsx","features/components/common/widgets/PlayersCompare/PlayerCompareHeader.tsx","features/components/common/widgets/PlayersCompare/config/index.tsx","features/components/common/widgets/PlayersCompare/index.tsx","features/components/common/widgets/Widgets/MatchWidgets.tsx","features/components/common/widgets/Widgets/index.tsx","features/components/common/player/PlayerField.tsx","features/components/common/Avatar.tsx","features/components/common/InfoItem.tsx","features/components/PlayerPage/PlayerCard/index.tsx","features/HeaderStatsItem/components/ToolTip.tsx","features/HeaderStatsItem/components/index.tsx","features/components/PlayerPage/PlayerStats.tsx","module/utils/dateHelpers.tsx","config/matchesSelection.tsx","features/components/common/SelectLabel.tsx","features/components/common/MatchCheckBox.tsx","module/utils/InfinityLoad.tsx","features/components/common/MatchSelectList.tsx","features/components/common/MatchSelectContainer/index.tsx","features/components/common/MatchSelect.tsx","features/components/common/video-cuts/FilterCheckbox.tsx","features/components/common/video-cuts/FilterPopup.tsx","features/components/common/video-cuts/Checked.tsx","features/components/common/video-cuts/FilterElement.tsx","features/components/common/video-cuts/TableButtons.tsx","features/components/common/video-cuts/VideoCutsContainer.tsx","features/components/common/video-cuts/VideoCuts.tsx","features/PlayerPageMatches/components/index.tsx","features/components/PlayerPage/PlayerPageComposed.tsx","features/components/PlayerPage/PlayerPage.tsx","features/TeamPage/components/TeamPlayers/PlayerTrComposed.tsx","features/TeamPage/components/TeamPlayers/PlayerTr.tsx","features/TeamPage/components/TeamPlayers/PlayersList.tsx","features/TeamPage/components/TeamPlayers/PlayersTable/composed.tsx","features/TeamPage/components/TeamPlayers/PlayersTable/PlayersTableHeader/index.tsx","features/TeamPage/components/TeamPlayers/PlayersTable/PlayersTableHeader/composed.tsx","features/TeamPage/components/TeamPlayers/PlayersTable/index.tsx","features/TeamPage/components/TeamPlayers/index.tsx","features/TeamPage/components/teamPageComposed.tsx","features/TeamPage/components/TeamCard.tsx","features/TeamPage/components/TeamStats/index.tsx","features/TeamPage/components/TeamPageHeader.tsx","features/TeamPage/components/TeamPage.tsx","features/components/MatchPage/Header/VideoLinks/VideoLinks.tsx","features/components/MatchPage/Header/MatchInfo/MatchScore/MatchScore.tsx","features/components/MatchPage/Header/MatchInfo/MatchInfo.tsx","features/components/MatchPage/Header/index.tsx","features/components/MatchPage/MatchPageComposed.tsx","features/components/MatchPage/MainContent/index.tsx","features/components/MatchPage/MainContent/composed.tsx","features/components/MatchPage/MatchPage.tsx","features/DropDownSimple/components/DropDownItem.tsx","features/DropDownSimple/components/index.tsx","features/TournamentSeasonSelect/components/index.tsx","features/TournamentHeaderStats/components/index.tsx","features/TournamentSeasonSelect/models/index.tsx","features/TournamentPage/components/TournamentPageInfo.tsx","features/TournamentHeaderStats/models/index.tsx","features/TournamentPage/components/TournamentPageHeader.tsx","config/lexics/tournamentPage.tsx","features/TournamentPage/components/composed.tsx","features/TournamentPage/components/index.tsx","features/components/App/App.tsx","features/TournamentPage/models/index.tsx","features/index.tsx","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","API_ROOT","dataURL","concat","routes","fieldSize","STANDART","width","length","area","markersWithoutOpponentSide","key","props","checkTab","_ref4","c_action","ownSideMarkers","createHistory","BasicStore","stores","Object","classCallCheck","this","allStores","storeName","tabs","tabsForAmplua5","tabsForAmplua6","tabsForAmplua7","tabsForAmplua8","actions","attack","attack_reception","block","pass","serve","serve_reception","defaultDirections","from","to","mainPageTabs","exact","lexics","link","pages","Tabs","page","getStore","_this$getStore2","isFetching","profile","amplua","observable","computed","action","tab","_this2","active","filters","clear","procedures","player","team","fields","MatchesStore","_onSuccess","json","pageId","setTempSelected","setOpened","data","map","pageProfile","get","assertThisInitialized","_this","matches","offset","list","uniqBy","next","error","firstLoad","_onError","limit","_params","dateFrom","arguments","undefined","dateTo","filteredMatches","filter","_ref","matchDate","match_date","m","isBetween","url","config","method","body","JSON","stringify","proc","params","defineProperty","utils","callApi","onRequest","onSuccess","onError","_this3","fetch","_this4","opposite","wingSpiker","middleBlocker","setter","libero","PlayerProfileStore","changeActive","setDefaultDirections","playerId","player_id","headerPlayerParams","4","lexic_id","param_id","percent","8","6","5","7","additional_params","team_params","zone_params","middleOptions","positions","from_x","from_y","to_x","to_y","attack_with_middle_point","middle_x","middle_y","fetchProps","mapShoot","playerInfo","commonExtraCheckMarkers","157","group","values","158","159","playerExtraCheckMarkers","objectSpread","231","51","teamExtraCheckMarkers","attackZone","attackZoneSpecial","frontLineParams","backLineParams","allBlocks","fieldLines","ALL_LINES","BACK_LINE","FRONT_LINE","zones","ATTACK_ZONE","ATTACK_ZONE_SPECIAL","SERVE_ZONE","blockTypes","ALL_BLOCKS","sets","ALL_SETS","FIRST_SET","SECOND_SET","THIRD_SET","dateWithYear","date","year","format","getSuffix","lang","getLongSuffix","cmToFt","cm","resArr","toFixed","toString","split","noImages","tournament","setCoord","pos_x","pos_y","opponentSide","field","_fieldSize$field","x","y","clamp","convertArrToObj","arr","obj","forEach","item","shifted","slice","applyMarkersState","markers","types","marker","actionTypes","_ref8","convertedProps","prop","_ref9","action_type","c_match_event_prop","c_match_event_prop_value","currentProp","includes","ownSide","some","dontShowOpponentSide","isPlainObject","getPlayers","propList","players","_ref10","convertedProp","push","getAbbr","string","strArr","word","charAt","join","toUpperCase","substring","filterDBStats","_ref15","f_option_0","f_option_3","f_option_5","f_param","f_variant_zone","fieldLine","zone","saveTablesToLocalStorage","_ref16","name","tables","table","parse","window","localStorage","getItem","setItem","getDeleteBtn","deleteTable","size","position","t","buttonType","tableHeaderButtons","handleNewPopupAction","moveTableUp","moveTableDown","resetTable","compact","PlayerStatsApiStore","stats","selectedMatches","playerTypeId","playerParams","_v_match_id","_v_player_id","_v_param_id","PlayerStatsHeaderStore","PlayerStatsHeaderApiStore","TeamStatsApiStore","teamId","teamParams","_v_team_id","TeamStatsHeaderStore","InfoItem","tooltips","preventDefault","clickCnt","Markers","superclass","_class","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_superclass","_getPrototypeOf2","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","initializerDefineProperty","inherits","createClass","checked","store","bind","select","visible","isEmpty","getMarkers","checkedFilters","applyDecoratedDescriptor","prototype","configurable","enumerable","writable","initializer","getOwnPropertyDescriptor","checkMarker","c_match_event_prop_value2","c_match_event_prop2","f_player","filterId","property1IsTrue","find","_ref2","_ref3","slicedToArray","propGroup","propValue","property2IsTrue","_ref5","_ref6","doubleKeyFiltration","additionalCheck","extraCheckMarkers","_extraCheckMarkers$fi","every","groupItem","_ref11","_ref12","valueCheck","_ref13","value","_ref17","singleKeyFiltration","mapForCheck","property","groupedFilters","groups","groupName","groupFilters","markersFilteredByGroup","entries","markersToArray","result","_ref7","markersGroup","neededFilters","pickBy","parseInt","linkedMarkers","toConsumableArray","uniq","MarkersFiltration","Marker","Marker_descriptor","Marker_descriptor2","assign","withMiddlePoint","_getPoints","point","middle","points","coord","p","getPoints","pos_from_x","pos_from_y","pos_middle_x","pos_middle_y","pos_to_x","pos_to_y","getToolTipResult","resultList","markersWithResult","prop_id","prop_value_id","result_lexic","lexical_formula","ToolTipActions","loaded","_p_action_result","remoteUtils","_onRequest","setMarkerPlayer","isBlock","language","_ref$markerField","markerField","markersWithName","playerSource","firstname","prop_player","lastname","getToolTipName","playerIdList","FetchPlayerInfo","basicLoaded","basicData","reject","Promise","getPlayersIdList","getFilteredMarkers","_p_player_id","_basicRequest","_basicError","_basicSuccess","propsList","excludePlayer","remove","getToolTipOpponentTeam","teams","markersWithOpponentTeam","f_team_opponent","opponentTeam","FetchMapShoot","objectWithoutProperties","_p_team_id","_p_match_id","getBody","_p_match_arr","_p_date_from","_p_date_to","_p_c_action_arr","FetchMarkers","setMarkers","_onSuccess2","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","basicFetch","stop","_x","_x2","Actions","defaultDirectionsActive","forIn","handleDirection","setRect","rectWidth","rectLength","fieldWidth","fieldLength","x1","x2","y1","y2","setVisible","xStart","min","xEnd","max","yStart","yEnd","xStartAbs","xEndInAbs","yStartInAbs","yEndInAbs","markersType","toPairs","directions","direction","_get","xCoordAbs","yCoordAbs","inRange","ComposeMarkers","compose","MarkersStore","setParam","Zones","zoneStats","successActions","totalActions","_this5","total","_this6","ZoneActions","left","right","FetchShotType","MapShootStore","reduce","acc","PlayerInfoStore","ToolTipStore","ShootsRangeStore","after","before","setBefore","setAfter","isOpened","allPossession","range","setVideoStart","setVideoEnd","RangeActions","VideoCuts","buttons","event_prop","event_value","moment","duration","events","sumRange","PopupItem","PopupItem_descriptor","PopupItem_descriptor2","PopupItem_descriptor3","lexicalFormula","Button","Button_descriptor","Button_descriptor2","Button_descriptor3","Button_descriptor4","popup","popup_lexic","popupItems","oldActive","currentBtn","setChecked","activeItems","activeItem","popupItem","VideoCutsMixin","_onSuccessButtons","newButtons","lexicIds","_value$","button","button_lexic","buttonInfo","phrases","lexicFetch","rootUrl","uncheckAll","ComposeVideoCuts","MatchLinksStore","links","match_id","type","TableReportsStore","getReportInfo","tableType","commonTable","commonMatches","commonShowOpponentStats","tableReportOptions","matchPlayersTable","playerMatches","showOpponentStats","teamMatches","tournamentMatches","tournamentPlayers","tournamentTeams","_this2$getStore","getLexics","currentProfile","_this2$getReportInfo","prepareConfig","default","lang_id","selectedParams","summaryType","tableName","is_show_opponent","Number","is_total","Boolean","paramId","getParamObj","team1_id","team2_id","activeId","sortInc","sortby","flag","param","getConfig","uri","then","response","blob","catch","MatchPopup","withHandlers","clickOutside","toggleClose","OutsideClick","MatchPopupComposed","f_match","react_default","createElement","className","cx","popup-container__loading","k","target","rel","href","dist","Link","lastElemsInGear","rest","percentageParams","gearColumnsList","0","num","getDigits","getFilteredStatsByParamId","getSummaryStatValue","filteredStats","filteredStatsCount","curr","TFoot","setSummaryType","setType","observer","tFootComposed","getActualMatchesList","getClassName","getExtLink","_ref$table","placeholder","onClick","gear_group_id","forOpps","THead","setSortedId","THeadComposed","react","full_lexical_formula","short_lexical_formula","RangeSettings","inject","withState","shootsRange","setRangeState","setRangeAfter","setRangeBefore","onBlurHandler","rangeAfter","rangeBefore","_ref5$shootsRange","onChangeHandler","_e$target","newValue","rangeSettingsComposed","onChange","onBlur","EditableInputComposed","withStateHandlers","newName","changeTableName","handleFixName","editTableName","editTempTableName","gearPopupStore","handleShowInput","newPopup","handleFocus","onFocus","tabIndex","EditTableName","getTableName","tempTableName","_ref3$currentStore","currentStore","editTable","setShowInput","n","handleTranslateName","EditTableNameComposed","showInput","components_EditableInput","GearTable","withProps","ampluaId","getCurrentGroupInfo","gearParams","getGroupTempSelected","tempSelected","groupParams","isActive","massCheck","_ref6$gearPopupStore","addToTempSelected","removeFromTempSelected","gearTableComposed","checkbox-label_active","components_PopupItem_PopupItem","last","hasOwnProperty","COMMAND_PUSH","COMMAND_UNSHIFT","COMMAND_SPLICE","COMMAND_SET","COMMAND_MERGE","COMMAND_APPLY","ALL_COMMANDS_LIST","ALL_COMMANDS_SET","invariantArrayCase","spec","command","invariant","isArray","specValue","update","nextValue","_assign","constructor","mergeObj","unshift","_nextValue","splice","cardTarget","hover","monitor","component","dragIndex","index","hoverIndex","hoverBoundingRect","findDOMNode","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","moveCard","dndItemComposed","removeParam","pure","DropTarget","connect","connectDropTarget","dropTarget","DragSource","beginDrag","connectDragSource","dragSource","isDragging","DndItem","style","opacity","DndParamsComposed","getId","moveHandler","_ref3$gearPopupStore","fillTempSelected","updatedTempParamsList","$splice","DndParams","_ref$gearPopupStore","lexics_filters","ace","ace_1","ace_for_lose","ace_from_grid","ace_with_touch","advanced_zones","alignment_mistake","all_assistance","all_attack_receptions","all_attacks","all_blocks","all_passes","all_serve_receptions","all_serves","amplua_who_blocked","amplua_who_is_attacking","amplua_who_passed","amplua_who_served","assist","attack_direction","attack_receive_in_zone","attack_reception_result","attack_type","attack_which_receipt","attacks_from_zone","attacks_on_amplua","attacks_to_zone","bad","bad_pass","ball_on_own_side","basic_zones","binding_player","binding_player_attack","block_assists","block_attempt","block_earned_points","block_out","block_out_or_in_your_own_area","block_played_by_striker","block_property","block_type","blocked_players","blocked_second_pass","blocked_shot","bottom_side","bounced_back_from_the_block","center_player","center_player_amplua","central_player_attack","characteristic","coasting","combination","cover","cross","deceptive_shot","deep","deep_serve","defender_out","dense","diagonal_player","diagonal_player_attack","difference","difference_of_attacks","differences","dig","double_back","double_front","finishing_player_attack","first_ball_attackers_home","first_ball_attackers_opp","foot_fault","for_1_block","for_2_blocks","for_3_blocks","four_hits","free_shot","from_zone","good","good_pass","grid_touch","half_power_shot","line_overstep","lose_point","mistake","mistake_while_pass","mistake_while_serve","negative_reception","net_touching","no_value_attacks","on_clean_grid","on_court","opponent","opponent_court","opponent_finished","opponent_side_play","opponents_count","opponents_out_shots","organized","other_body_side","other_players","outside_player","part","pass_direction","pass_from","pass_to","pass_type","pass_types","pass_zone","pipe","pipe_5","planned_attack","planning","position_1","position_2","position_3","position_4","position_5","position_6","positioning","positive_reception","power","power_attack","power_attack_1","power_shot","receive_type","receiver_mistake","reverse_cross","rise","rise_over_head","roll_forward","run_forward","serve_receive_zone","serve_type","serving","short","short_serve","shot_out","simple","soften","softening","splited","step_over","technique_difference","temp","temp1","temp2","to_grid","to_out","to_whom","to_zone","top_side","touched_grid_by_blocker","tough","unforced_opponent_mistakes","wave","which_pass","which_receipt","while_falling","who_attacked","who_attacking","who_blocked","who_blocking","who_else_on_court","who_gave_pass","who_is_attacking","who_is_blocking","who_is_passing","who_is_serving","who_received","who_received_amplua","who_served","who_served_list","with_block_touching","with_blocker_touching","with_step_out","without_zone","won_point","zero_attack","zero_block","zero_block_1","zero_serve","zone_1","zone_2","zone_3","zone_4","zone_5","zone_6","login","contact_us","enter_email","enter_pass","force_aware","force_submit","force_text","log_in","problems_with_sign_in","server_error","sign_in","sign_in_pro","try_instat","wrong_sign_in","lexics_player","tabs_matches","header_my_video","header_my_profile","header_quit","header_team","header_nationality","header_league","header_team_level","header_age","header_contract","header_bodyPart","header_position","header_goals","header_skills","header_instat_index","header_statistics","header_playlists","header_shared_episodes","f_goals","match_show_opponent","average_for_match_opp","home","visitors","total_attack_eff","attack_points","positive_def_receiption","positive_serve_receiptions","setting_assist","setting_assist_percents","good_bad_sets","block_touch_for_own_rally","positive_receiption","params_matches_points","params_matches_rebounds","params_matches_assist","params_matches_steals","params_matches_turnover","average_for_match","average_for_90","group_param_picking_up","group_param_boxscore","group_param_combinations_and_iso","group_param_shots_types","group_param_add_data","amplua_center_short","amplua_pforward_short","amplua_lforward_short","amplua_sguard_short","amplua_pguard_short","header_field_goals_percent","header_3pt_shots_percent","header_free_throws_percent","header_card_age","header_card_birth_data","stat_year","stat_sm","stat_foot","stat_pound","stat_kg","tp_stat_height_sm","tp_stat_height_foot","tp_stat_weght_lbs","tp_stat_weght_kg","match_select_3","match_select_5","match_select_10","match_select_all_season","match_select_this_year","match_selected","match_select_this_season","boxscore_selected_params","boxscore_sec_before","boxscore_sec_after","boxscore_all_range","boxscore_setting_all_ep","boxscore_protocol","boxscore_efficiency","boxscore_combinations","boxscore_with_fouls","boxscore_deff_combine","boxscore_date","boxscore_main_statistics","boxscore_pass","boxscore_challenges","boxscore_lost","boxscore_press","shoots_goals_opponent","shoots_goals","shoots_without_zones","shoots_basic_zones","shoots_extend_zones","shoots_2x_goals","shoots_3x_goals","shoots_opened","shoots_closed","table_popup_dnd_info","match_popup_full_game","match_popup_ball_in_play","match_popup_all_time_player","match_popup_rifling_attack","match_popup_rifling_defense","lexics_team","show_photo","matches_table","players_table","match_show_all_teams","team_leaders","439","441","3178","1327","92","594","755","653","total_attack_points","boxscore_on_average","boxscore_attack","boxscore_flangs","boxscore_type_attack","average_assists","shoots","shoots_opponent","shoots_gate","shoots_field","tabs_players","tabs_lineups","lexics_match","match","teams_statistic","lexics_markers","tooltip_fault","tooltip_opponent_side_receive","tooltip_positive_receive","tooltip_handled_by_attacker","tooltip_ace","tooltip_ace_player","tooltip_ace_from_grid","tooltip_arrangement_mistake_receive","tooltip_arrangement_mistake","tooltip_good_pass","tooltip_bad_pass","tooltip_point_area","tooltip_lost_point","tooltip_lost_point_out","tooltip_lost_point_block","tooltip_point_block","tooltip_useless_opponent_attack","tooltip_lost_point_overstep","tooltip_point_deffender","tooltip_own_useless_attack","tooltip_lost_point_grid","tooltip_lost_point_grid_touch","tooltip_block_area","tooltip_useless_block_softed","tooltip_lost_point_second_pass","tooltip_lost_point_attack","tooltip_useless_opponent_block","tooltip_out_lost_point","tooltip_overstep_lost_point","tooltip_grid_lost_point","tooltip_serve_fault","tooltip_serve_another_fault","tableParams","main_statisctic","total_points_won","attack_realisation","block_points","aces","back_row_attack_eff","positive_attack_receiption","positive_defence_receiption","all_mistakes","attack_mistakes","block_mistakes","serve_mistakes","attack_receiption_mistakes","defence_receiption_mistakes","receive_mistakes","pass_assist","pass_assist_percents","plus_minus_title","plus_minus","attack_play","attacks","attack_points_percents","attack_mistakes_percents","blocked_attacks","blocked_attacks_percents","first_serve_attacks","first_serve_attacks_points","first_serve_attacks_points_percents","first_serve_attacks_mistakes","first_serve_attacks_mistakes_percents","first_serve_attacks_blocked","first_serve_attacks_blocked_percents","positive_receiption_attacks","positive_receiption_attacks_points","positive_receiption_attacks_points_percents","positive_receiption_attacks_mistakes","positive_receiption_attacks_mistakes_percents","positive_receiption_attacks_blocked","positive_receiption_attacks_blocked_percents","first_line_attacks","first_line_attacks_points","first_line_attacks_points_percents","first_line_attacks_mistakes","first_line_attacks_mistakes_percents","first_line_attacks_blocked","first_line_attacks_blocked_percents","negative_receiption_attacks","negative_receiption_attacks_points","negative_receiption_attacks_points_percents","negative_receiption_attacks_mistakes","negative_receiption_attacks_mistakes_percents","negative_receiption_attacks_blocked","negative_receiption_attacks_blocked_percents","back_line_attacks","back_line_attacks_points","back_line_attacks_points_percents","back_line_attacks_mistakes","back_line_attacks_mistakes_percents","back_line_attacks_blocked","back_line_attacks_blocked_percents","serves","negative_receiption_serves","positive_receiption_serves","force_serves","force_serves_eff","planned_serves","planned_serves_eff","serve_play","serves_receiption","negative_serves_receiption","positive_serves_receiption","defence_serve","positive_defence_serve","negative_defence_serve","block_play","passes","assists","assists_mistakes","positive_passes","negative_passes","to_back_line_passes","to_first_line_passes","rallies_won","points_difference","tableParamsShort","8731","8140","8204","8732","7892","8128","8272","8733","8141","8208","7891","8123","8268","8281","8830","8246","8634","8734","8735","8736","8737","8738","8739","8740","8741","8742","8743","8744","8201","8745","8746","8730","8747","8751","8752","8753","8754","8755","8757","8758","8759","8760","8761","8762","8763","8764","8765","8766","8767","8768","8769","8770","8771","8772","8773","8774","8775","8776","8777","8778","8779","8780","8781","8782","8783","8784","8785","8787","8788","8789","8790","8791","8792","8793","8794","7896","7920","8117","7894","7912","8109","8120","8795","8796","8124","8135","8797","8136","8265","8273","8798","8799","8271","8209","8800","8801","8802","8803","8805","8239","8241","8240","8807","8809","8811","8820","8821","8813","8814","8822","8815","8816","8823","8817","8247","8826","8827","8251","8828","8829","9774","tableParamsNum","8724","8725","8617","8726","8727","8053","8806","8808","8810","8812","8818","8819","8952","9006","8954","9007","8487","8022","8496","8956","8957","8958","8959","8960","8961","8962","8963","8964","8965","8966","8967","8968","8969","8970","8971","8972","8973","8974","8975","8976","8977","8978","8979","8980","8981","8982","8983","8984","8985","7933","8543","8986","8987","8988","8989","7917","7911","7958","8992","8993","8096","8995","8994","8059","8058","8054","8662","8996","8997","8998","8999","9000","9001","9002","9003","9004","9005","9473","9470","8859","videoCuts","video_cuts","offensive","deffensive","cuts_favorite_play_list","cuts_positional_atack","cuts_free_throws","cuts_blocks","cuts_fouls","cuts_fouls_drawn","cuts_video_summary","cuts_off_actions","cuts_deff_actions","cuts_partner","cuts_opponent","indexLexic","video_actions","video_select_all_actions","video_select_partner","video_select_opponent","video_reload","video_reset_filters","enter_team_or_player","header_recently_visited","header_my_players","header_invite_players","header_comments","header_flag_search","header_online_translation","header_men","header_women","boxscore_play_video","episodes_duration","user_settings_duration","default_settings_duration","boxscore_popup_subtitle","Playtype","Isolations","Transition","Pick_n_rolls_handler","Post_up","Cuts","Catch_and_shoot","Put_back","Catch_and_drive","Pickn_Pop","Hand_offs","Screens","Miscellaneous","Pick_n_rolls_roller","reset_tables","new_table","main_statistics","passes_table","passes_table_gk","shots_table","shots_table_gk","challenges","add_table","remove_table","move_table_down","move_table_up","downloadXLS","downloadPDF","vertical_view","horizontal_view","markers_from","markers_to","full_trajectory","match_popup_highlights","match_popup_pure_time","match_popup_goals","match_popup_pdf","match_popup_details","cancel","ok","show_more","7341","gearPopupComposed","getTable","onApply","_ref$currentStore","addTable","saveTempParams","eraseTempSelected","handlePopupAction","playerProfile","localStorageName","onClose","lifecycle","componentDidMount","_this$props","GearPopup","popupItemComposed","checkActive","_ref2$gearPopupStore","isActiveParam","data-name","gearPopupViews","model","volatile","gearPopupActions","self","toJS","isEqual","erase","GearPopupStore","tableLexics","tableStatsTypes","tableTypes","HeaderWithOppComposed","setShowOppStat","toggleShowOpponent","HeaderWithOpp","getDropdownBtnsHoc","getDropdownBtns","reverse","HeaderWithAvatarComponent","avatarIsVisible","toggleShowAvatar","setTypeHandler","HeaderWithAvatarComposed","changeValueType","HeaderWithAvatar","HeaderWithTeamsComposed","matchProfile","suffix","teamNames","opp","handleCheckTeam","_ref$teamNames","_ref$teams","showTeam1","showTeam2","tableHeaderComposed","TableHeader","setSortedIdHOC","_ref$param","_ref$sortInc","newParam","clickOnNewParam","sortIsNeedReset","clickCases","newParamClicked","simpleClick","tableComposed","create","matchTable","_ref3$param","playerTable","_ref3$tableType","teamPlayers","teamTable","tournamentMatchesTableStore","tournamentPlayersTableStore","getLinks","_ref5$tableReports","tableReports","pdfIsFetching","xlsIsFetching","xls","pdf","openNewPopup","openPopup","saveReport","getReport","teamProfile","tournamentsProfile","tournaments","document","getElementById","Date","URL","createObjectURL","download","getDate","getMonth","getFullYear","click","tablesList","omitedTables","omit","updatedTables","moveTable","_objectSpread2","_objectSpread3","tableCount","currentTable","prevTable","nextTable","removeItem","saveTables","tableActions","tableApiActions","getGearParamsList","_v_amplua_id","_onSuccessGearParams","totalParams","fetchGroups","_onSuccessGroups","current","sortBy","group_id","String","group_lexical_formula","Param","number","gear_subgroup_id","is_default","maybeNull","param1_id","array","param2_id","identifierNumber","sort_order","GearParam","ParamGroup","group_name","TableCommon","frozen","paramGroups","union","TableStore","TournamentMatchesTableApiActions","fetchTableInfo","flow","fetchTableParams","paramsList","summarySelectedParamsFromTables","defaultParams","matchesToFetch","partFetching","_onSuccesTableParams","flatten","canFetch","isLoaded","TournamentMatchesTableActions","defaultTable","1","addOffset","TournamentMatchesTableViews","views","paramsSummary","currentTableSelectedParams","actualMatchesList","take","getParent","matchesTotal","matchesIds","chunk","ParamExtended","f_match_event_ids","f_match_event_ids_json","f_option_1","f_option_2","f_option_4","f_option_6","f_team","param_name","TournamentMatchesTable","TournamentMatchesTableStore","Loader","TournamentMatchesComposed","tournamentId","_ref$tournamentMatche","components_Tables","common_loader_Loader","emptyStatToZero","TBody","getSortedList","rows","sortType","orderBy","tableStats","Tr","trItem","rowInfo","ShowMoreBtn","show-more-btn_loading","tfootComposed","_ref$lexics","request","videoLink","forOpp","teamTableStats","filteredEvents","event","clickable-cell","percents","sorted-by","TFootComponent","playListTypes","getStatValue","leftSideTrComposed","handleClick","_ref$rowInfo","opponent_score","score","oppTeamName","teamName","rowspan","titleClassName","showOpponent","ownerTeamName","titleScore","shortName","shortNameOpponent","has_video","LeftSideTr","_ref$match","matchPopupOpened","LeftSideTrWrapper","rowSpan","PlayButtonWrapper","MatchDate","MatchNameWrapper","MatchScoreWrapper","MatchScoreForOppWrapper","MatchAbbrName","side","getMatchLinksHoc","getPost","matchLinks","getExtLinkHOC","getFilterCondition","stat","filterType","_ref2$param","playListType","matchTeams","matchInfo","clickableClassNameHOC","TrComposed","opp_team_id","team_id","getStatsListByTeam","matchId","filterOptions","_ref$matchLinks","tournamentTableComposed","getMatchesList","_ref2$tournamentMatch","sortedValue","TournamentTable","Thead","sortedTableItemsHoc_TBody","TFootHOC_TFoot","ShowMoreBtn_ShowMoreBtn","TournamentPagePlayersApiActions","seasonId","_p_tournament_id","_p_season_id","_onSuccesPlayers","TournamentPagePlayersActions","TournamentPagePlayersViews","o","v","Player","shirt_num","name_rus","name_eng","pos1","TournamentPagePlayersTable","TournamentPlayersTableStore","TournamentPlayersTableComposed","tournamentSeasonSelect","selectedSeason","season_id","TournamentPlayersTable","_ref$tournamentPlayer","avatarUrl","helpers","getLogo","playerProfileLink","shirtNumber","playerName","LeftSideTrPlayersWrapper","ResultsAvatar","src","onProfileImageError","PlayerNumber","PlayerName","getStat","LeftSideTr_LeftSideTr","Td","tournamentPlayersComposed","getPlayersList","TournamentPlayers","TrMatchComposed","getCurrentPlayerStats","getPlayerName","playersInfo","firstName","lastName","TrMatch","Table","_ref$matchTable","playerList","playerListByTeams","teamsPlayersStats","filteredPlayerStats","handleSetActiveParam","setActiveParam","componentDidUpdate","prevProps","TableMatchWrapper","_ref$matchProfile$dat","flat","selectedMatchesList","TfootComposed","trComposed","getStatsListByPlayer","home_match","tdClassName","MatchSide","CommonTable_LeftSideTr_LeftSideTr","CommonTable","tableStatsFiltered","CommonTableComposed","HOCs_TFootHOC_TFoot","TableContent","esm_extends","tableContentComposed","TableActions","_ref4$currentStore","_ref5$currentStore","_ref6$currentStore","TableActionsComposed","newPopupOpened","popupOpened","reportHandle","Tables","Table_Table","PlayersCompareApiActions","defaultPlayers","fetchPlayers","updateSelectedPlayers","setDefaultSelectedParams","t0","_p_player_arr","selectedPlayers","_p_param_arr","_p_lang_id","pick","_v_played","_onSuccessPlayers","PlayersCompareActions","newSelectedPlayers","getParamsIds","defaultIds","PlayersCompareViews","sortedStats","ids","findIndex","Stat","param_name_short","clickable","PlayersCompare","boolean","PlayersCompareStore","TeamPlayersApiActions","fetchParams","_onSuccessParams","_p_params_arr","matches_count","averageValue","paramGroupsError","serializedParams","fetchEvents","_p_matches","_p_param_id","_onSuccessEvents","TeamPlayersActions","editTempSelected","_ref3$localStorageNam","_objectSpread6","_objectSpread7","showAvatarToggle","PlayerParam","data_type","option","nickname_eng","nickname_rus","short_name_eng","short_name_rus","TeamPlayers","TeamPlayersStore","SelectedMatchesActions","setSelected","selected","setPeriod","period","selectedPeriod","toggleSelect","opened","onCloseActions","matchesListDidUpdate","_stores$selectedMatch","isPlayerPage","fetchMarkers","eraseAllData","fetchHeaderStats","playerStats","fetchTableStats","teamStats","teamIds","eraseHeaderStats","deleteMarkers","SelectedMatches","SelectedMatchesStore","TableReportsApiActions","fetchData","options","test","changeFetchingStatus","TableReports","MatchProfileApiActions","fetchPeriods","fetchVideoLinks","_onSuccessPeriods","periods","res","_onSuccessVideoLinks","videoLinks","MatchProfile","MatchProfileStore","getHeaderStatsTitle","matchesCount","matchName","paramName","simpleName","playlist_title","playlist_subtitle","getMapShootsTitle","activeTab","getMatchInfo","getTeamOrPlayerMapShootsTitle","_getMatchInfo","activeTeam","oppTeamScore","teamScore","getTableMatchesTitle","longSuffix","title","getTablesFooterTitle","getTeamPlayersTitle","getWidgetsTitle","widgetType","playersCompare","teamsCompare","_getMatchInfo2","setTitle","_ref$tab","_stores$lexics","textForms","dividedBy10","Math","abs","num2str","pop","score_team1","score_team2","tablesFooter","widgets","mapShoots","headerStats","titleTypes","ExternalVideoLinksActions","_ref$lexical_formula","_ref$matchesCount","_ref$matchId","_ref$type","_ref$widgetType","allRange","offset_start","offset_end","open","ExternalVideoLinks","ExternalVideoLinksStore","FiltersApiActions","FilterActions","tempSelectedFilters","toggleOpenMenu","handleTempCheck","popupType","tempClone","filterInfo","findFilterInfo","has","handleAllTempCheck","handleUncheck","checkedCloned","homePlayers","getIdFromString","newObj","FilterElem","filter_name","Filters","FiltersStore","tempChecked","TeamsCompareActions","teamsInfoLoaded","userConfirmedParams","paramsIdList","fetchStats","TeamsCompareApiActions","_p_team_arr","teamsInfo","TeamsCompare","TeamsCompareStore","TeamsStats","team1","team2","TeamsCompareLogos","getImage","alt","TeamsCompareInfoComposed","getSortedStats","_ref2$teamsCompareWid","teamsCompareWidget","uniqStats","indexOf","hasVideo","t-compare__clickable-cell","components_TeamsCompareLogos","TeamsCompareStats","TeamsComparePopupComposed","TeamsCompareHeaderComposed","components_TeamsComparePopup","currentLang","_this$props2","_this$props2$teamsCom","TeamsCompareComposed","_ref$teamsCompareWidg","TeamsCompareHeader","components_TeamsCompareInfo","TeamProfileApiActions","scout_team_inf","TeamProfile","TeamProfileStore","TournamentPageApiActions","fetchSeasons","_onSuccessSeasons","season","seasons","set","defaultSeasonId","head","changeActiveSeason","TournamentSeasonSelectActions","getRoot","fetchMatchesInfo","seasonsList","Season","season_name","TournamentSeasons","TournamentSeasonsStore","TournamentSeasonSelectApiActions","fetchTournamentProfile","TournamentPage","TournamentPageStore","MatchPagePlayersApiActions","playersPlayedThisMatch","fetchPlayersInfo","type_player","_onSuccessPlayersInfo","updatePlayerProfile","_onSuccessStats","setIsLoaded","MatchPagePlayersActions","_stores$matchProfile$","currentTeamPlayers","firstname_eng","firstname_rus","lastname_eng","lastname_rus","PlayerData","PlayerSimpleModel","MatchPagePlayersTable","MatchPagePlayersStore","Match","match_status","win_lose","name_ru","name_en","name_opponent_ru","name_opponent_en","params_opp","TournamentMatches","TournamentMatchesApiActions","_onSuccessMatchesInfo","TournamentMatchesViews","TournamentMatchesStore","TournamentHeaderStatsApiActions","fetchHeaderParams","_onSuccesHeaderParams","allEvents","currentEvents","count","TournamentHeaderStatsActions","countAverageStatValue","denominator","TournamentHeaderStats","TournamentHeaderStatsStore","PlayerPageMatchesApiActions","filteredParams","fetchPlayerMatches","playerMatchesStore","message","stack","maybe","ErrorModel","setError","getPlainError","FetchModel","teamMatchesStore","setTableStats","setTables","fetchTeamMatches","TeamPageMatches","selectedMatchesIds","allMatches","opponentsIds","teamPageMatchesComposed","_ref$teamTable","remoteStore","Lexics","locale","VideoSummaries","mstRootStore","optional","TournamentSeasonSelectStore","tournamentHeaderStats","playersCompareWidget","tableReportsMST","tutorials","Matches","liveSearch","LiveSearch","sport","infoItem","MatchLinks","PlayerProfile","PlayerStats","TeamStats","shotTypes","ShotTypes","MapShoot","PlayerInfo","ToolTips","ShootsRange","videoPlayer","VideoPlayer","header","Header","profilePopup","recent","Recent","searchString","SearchString","auth","Auth","history","playersVS","teamsVS","ProfilePopup","toggleOpened","logoutClick","logout","composed","Home","appPage","homeComposed","data-block","headerComposed","LinksList","linksListComposed","NavLink","activeClassName","StatsTabs","_ref2$markers","selectToggle","_ref2$zones","resetToDefaultDirections","statsTabComposed","isStats","_ref$tabs","StatsTabs_StatsTabs","Pointer","getDirections","_ref2$beginning","beginning","firstX","firstY","_ref2$ending","ending","lastX","lastY","cat1","cat2","sqrt","pow","angle","asin","PI","rotate","getPointers","_ref3$positionsInfo","positionsInfo","pointer1","pointer2","getPointerClass","_ref4$positionsInfo","pointClass","getTransform","pointers","pointerComposed","_ref$pointers","_ref$positionsInfo","transform","PlayerNameComposed","_ref2$point","firstPlayerName","names","tooltipNames","ToolTip","eventToEpisode","half","second","eventId","round","handleShootClick","fetchVideo","toolTipComposed","_cx","_ref$point","score1","score2","map_PlayerName","_ref3$markers$directi","toolTips","toolTipsWithVectors","markerComposed","ToolTip_ToolTip","getActionTypes","fromType","toType","getScore","getList","preparePoint","middleCondition","_getActionTypes","checkPosition","markerType","checkZone","directionType","_ref10$markers","markersComposed","idx","MarkerItem_Marker","SaveScreenShot","handleDownload","_ref2$lexics","currentTeam","getElementsByClassName","elementBackgroundSVG","extra","pageInfo","picName","takeScreenshot","callback","elementToChangeBackground","saveScreenShotComposed","RangeSettingsPopupComposed","handleShowPopup","rangePopup","hidden","PlayVideoBtnComposed","getRange","_ref2$shootsRange","getShoots","_ref3$markers","activeData","loading","handleVideoExternal","shots","externalFetching","ControlDropDown","toggleIsVisible","isVisible","menuType","map-block__select_open","withTitle","controlDropDownComposed","children","Children","child","i","TeamsPopup","team1Name","team2Name","activeTeamShortName","setIsOpened","handleActive","setIsOpenedHandler","checkTeam","teamsPopupComposed","directionsDropDownButtons","endPoint","Directions","directionsBtns","chooseDirection","_ref5$markers","directionsComposed","zoneTitles","checkedZone","zonesComposed","MapFieldControls","selectArea","setZone","mapFieldControlsComposed","Zones_Zones","video_player_PlayVideoBtn","map_RangeSettingsPopup","zoneBorderConfig","basic","zonesList","coords","advanced","zoneAction","ZonesStatistic","getParams","firstConditionId","secondConditionId","propItem","propItemValue","fieldType","zoneTypeX","zoneTypeY","xCoords","yCoords","coordsType","allMarkers","totalZoneMarkers","succesZoneMarkers","percentage","zoneEvents","_ref9$videoPlayer","setModalOpen","zonesStatisticComposed","fieldSVGDimensions","MapFieldSVG","version","xmlns","xlink","viewBox","xmlSpace","height","fill","d","cy","r","FieldZones","getZonesClassName","fieldZonesComposed","MapFieldSVG_MapFieldSVG","MapField","currentMatches","isString","mapFieldComposed","_ref$markers","SelectionField","wrapperClass","onSelect","rect","Markers_Markers","filterPopupByTab","columnTitleId","zoneId","zoneNumber","filterPopupByTabForPlayer","lexic","2","3","9","10","12","13","14","16","17","18","19","20","21","22","24","25","26","28","29","30","31","32","41","42","43","44","45","46","49","50","53","54","55","56","57","58","59","60","70","71","72","73","74","75","102","103","104","105","106","107","128","129","130","131","132","133","134","135","136","137","138","139","142","143","144","145","146","147","148","149","150","151","152","153","154","156","160","161","162","163","166","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","202","203","204","205","208","209","210","217","218","219","232","263","264","265","266","267","268","269","270","271","272","274","275","276","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","PopupHOC","wrappedComponent","getFilterLexics","getItemClassName","popup-column__item_checked","getTitleClassName","popup-column__title_checked","ColumnsPopup","_ref$filters","toggleOpenClose","ZonesPopup","fieldClassName","map-block__popup-zone-list_home","getZoneClassName","map-block__popup-zone_active","zonesPopupComposed","PopupSimple","PopupWithPlayers","getFullName","getPlayersId","popupWithPlayersComposed","popup-column__wrapper_wide","popup-column__wrapper_narrow","playersList","PopupWithHomePlayers","popupWitHomePlayersComposed","FilterMenu","filterMenuComposed","FilterSubMenu","checkedInGroup","filterSubMenuComposed","FilterItem","menuOpened","menuToggle","getMenuClassName","map-block__title_active","idsFromConfig","filtered","getData","popupWithColumns","_ref22","popupWithZones","popupSimple","popupWithPlayers","popupWithHomePlayers","getCheckedFiltersSubMenu","playersIds","getIds","keyNormalized","filterItemComposed","MapFilters","filtersList","_this$props$filters","mapFiltersComposed","getPlayerFullName","long","playerNameComposed","PlayersSelect","getPlayerNumber","selectPlayer","_ref4$playersCompareW","getTeamPlayers","getPlaceholder","defaultPlayer","fullName","playersSelectComposed","PlayersCompare_PlayerName_PlayerName","PlayersStats","playersInfoComposed","getPlayerParams","PlayersInfo","PlayersCompare_PlayersStats","PlayersComparePopup","PlayersComparePupupComposed","PlayerCompareHeaderComposed","_this$props2$playersC","PlayersCompareComposed","_ref$playersCompareWi","PlayersCompare_PlayerCompareHeader","MatchWidgets","TeamsCompare_TeamsCompare","PlayersCompare_PlayersCompare","Widgets","MatchWidgets_MatchWidgets","PlayerField","matchesList","playerFieldComposed","player_Header_Header","Widgets_Widgets","Avatar","image","noImage","variants","clickHandle","PlayerCard","playerCardComposed","weight","_ref$playerProfile","player-card-left_loader","common_Avatar","photo","national_team","citizenship","toLowerCase","age","common_InfoItem","birthday","active_hand","HeaderStatsItem","statsIsFetching","toolTipIsVisible","itemClassName","header-stats-item_clickable","header-stats-item_loading","valueBlockClassName","header-stats-item__value_percentage","setLoader","lexicId","toggleTooltip","toggleVisible","headerStatsItemComposed","statValue","onMouseEnter","onMouseLeave","components_ToolTip","PlayerStatsComposed","getEvents","getYear","changeYear","selectConfig","SelectLabel","_ref$selected","MatchCheckBox","title__score_lose","title__score_win","InfinityLoad","MatchSelectList","matchSelectListComposed","selectItem","MatchCheckBox_MatchCheckBox","InfinityLoad_InfinityLoad","MatchSelectContainer","getSelected","matchSelectContainerComposed","dropDownClick","extendedSelectItem","scrollHandle","common_SelectLabel","onScroll","loading-active_global","MatchSelectComposed","handleInfiniteLoad","offsetHeight","scrollHeight","scrollTop","_ref7$matches","_ref7$selectedMatches","isYear","month","getStartSeason","getNow","getEndOfSeason","FilterCheckboxComposed","pageType","videoSummaries","clickHandler","setActive","_ref$filter","FilterPopupComposed","video_cuts_FilterCheckbox","FilterElementComposed","onOutsideClick","video_cuts_Checked","video_cuts_FilterPopup","uncheckAllPlayers","orderByLodash","btn","video_cuts_FilterElement","VideoCutsCompose","minutes","seconds","totalTime","playersChecked","getCheckedBtn","getGroupedBtns","componentWillUnmount","resetFilters","changeCount","fetchButtons","_props$videoSummaries","reloadCount","cursor","episodes-table-header-title-play_loader","video_cuts_TableButtons","playersCount","VideoCutsComposed","getSelectedMatches","video_cuts_VideoCutsContainer","PlayerPageMatches","playerPageMatchesComposed","_ref$playerTable","playerPageComposed","getPlayerProfile","getGearParams","playerLexic","filtersLexic","markersLexic","tableParamsLexic","tableParamsLexicShort","tableParamsNumLexic","videoCutsLexic","PlayerPage","appName","common_MatchSelect","PlayerPage_PlayerStats","PlayerField_PlayerField","Switch","Route","path","render","common_video_cuts_VideoCuts","PlayerTrComposed","getParamValue","playerParam","PlayersListComposed","_ref2$teamPlayers","TeamPlayers_PlayerTr","playersTableComposed","_ref$tableReportsMST","PlayersTableHeader","_ref7$lexics","is_avatar","playersTableHeaderComposed","PlayersTable","TeamPlayers_PlayersList","TeamPlayersComposed","sort","b","teamPageComposed","getTeamProfile","teamLexic","TeamCardComposed","teamType","_ref$teamProfile","country_id","team_type","player-card-left","player-card-left player-card-left_loader","player-card-avatar_national","teamStatsComposed","TeamPageHeader","components_TeamCard","TeamPage","TeamPageHeader_TeamPageHeader","components_TeamPlayers","VideoLinks","headerVideoButtons","MatchScoreComposed","getScoreByPeriods","scoreTeam","scoreOppTeam","MatchInfo","_ref$matchProfile","MatchInfo_MatchScore_MatchScore","HeaderComposed","Header_MatchInfo_MatchInfo","Header_VideoLinks_VideoLinks","MatchPageComposed","getMatchProfile","matchLexic","MainContent","mainContentComposed","MatchPage_Header_Header","DropDownItemComposed","handleMouseHover","toggleHover","isHovered","primaryColor","listItemStyle","backgroundColor","padding","DropDownSimpleComposed","handleOpen","itemClick","changePlaceholder","React","_ref5$settings","settings","inlineStyles","listItem","minWidth","fontSize","placeHolder","paddingLeft","statePlaceholder","dropdown-container__opened","dropdown-list__hidden","components_DropDownItem","SeasonSelectComposed","onSeasonSelect","_ref$tournamentSeason","DropDownSimple_components","TournamentHeaderStatsComposed","TournamentPageInfoComposed","countryName","_ref$profile","TournamentPageHeader","components_TournamentPageInfo","TournamentSeasonSelect_components","features_TournamentHeaderStats_components","tournamentPage","tournamentPageComposed","tournamentLexic","_ref$tournamentsProfi","profileLoaded","components_TournamentPageHeader","Redirect","AppComposed","DragDropContext","HTML5Backend","isAuth","pathname","location","Header_Header","loginLexics","loginLexic","MatchPage","Features","Router","index_module","components_App_App","onEnter","ReactDOM","features"],"mappings":"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","file":"static/js/main.eb0d0130.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 263;","const API_ROOT = 'https://api-volleyball.instatscout.com'\n\nexport const dataURL = `${API_ROOT}/data`\n\nexport default {\n  // API_ROOT: 'https://api-volleyball.instatscout.com',\n  API_ROOT,\n  // API_ROOT: 'http://localhost:3080'\n}\n","export const primarySportColor = '#dbf0ef'\n\nexport const profilePaths = {\n  header_my_profile: '/profile',\n  header_my_video: '/video/my',\n  header_playlists: '/video/my/playlists',\n  header_shared_episodes: '/video/my/shared-episodes',\n}\n\nexport const langsList = [\n  { locale: 'ru', title: 'Русский', className: 'ru' },\n  { locale: 'en', title: 'English', className: 'gb' },\n  { locale: 'pt', title: 'Português', className: 'pt' },\n  // {locale: 'pt', title: 'Brazil', className: 'br'}, // localStorage.lang = 'pt'\n  // {locale: 'uk', title: 'Українська', className: 'ua'},\n  // {locale: 'it', title: 'Italiano', className: 'it'},\n  // {locale: 'nl', title: 'Nederlands', className: 'nl'},\n  // {locale: 'ro', title: 'Română', className: 'ro'},\n  // {locale: 'fr', title: 'Français', className: 'fr'},\n  // {locale: 'de', title: 'Deutsch', className: 'de'},\n  { locale: 'es', title: 'Español', className: 'es' },\n  // {locale: 'tr', title: 'Türkçe', className: 'tr'},\n  // {locale: 'sr', title: 'Српски', className: 'rs'},\n  // {locale: 'pl', title: 'Polska', className: 'pl'},\n  // {locale: 'cs', title: 'Čeština', className: 'cz'},\n  // {locale: 'hu', title: 'Magyar', className: 'hu'},\n  // {locale: 'bg', title: 'Български', className: 'bg'},\n  // {locale: 'sl', title: 'Slovenščina', className: 'si'},\n  // {locale: 'mk', title: 'Македонски', className: 'mk'},\n  { locale: 'zh', title: '中文(简体)', className: 'cn' },\n  // {locale: 'lv', title: 'Latviešu', className: 'lv'},\n  // {locale: 'he', title: 'עברית', className: 'il'},\n  // {locale: 'ja', title: '日本語', className: 'jp'},\n  // {locale: 'el', title: 'Ελληνικά', className: 'gr'},\n  // {locale: 'sq', title: 'Shqip', className: 'al'},\n  // {locale: 'hr', title: 'Hrvatski', className: 'hr'},\n  // {locale: 'bs', title: 'Bosanski', className: 'ba'},\n  // {locale: 'sv', title: 'Svenska', className: 'se'},\n  // {locale: 'fi', title: 'Suomi', className: 'fi'},\n  // {locale: 'lt', title: 'Lietuvių', className: 'lt'},\n  // {locale: 'th', title: 'ภาษาไทย', className: 'th'},\n  // {locale: 'ka', title: 'ქართული', className: 'ge'},\n  // {locale: 'id', title: 'Bahasa Indonesia', className: 'id'},\n  // {locale: 'ar', title: 'العربية', className: 'sa'},\n  // {locale: 'ko', title: '한국어', className: 'kr'},\n  // {locale: 'ms', title: 'Bahasa Melayu', className: 'my'},\n  // {locale: 'sk', title: 'Slovenčina', className: 'sk'},\n  // {locale: 'fa', title: 'فارسی', className: 'tg'},\n  // {locale: 'vi', title: 'Tiếng Việt', className: 'vn'},\n  // {locale: 'az', title: 'Azərbaycan dili', className: 'az'},\n  // {locale: 'uz', title: 'O‘zbek tili', className: 'uz'},\n]\n\nexport const fieldSize = {\n  STANDART: {\n    width: 9,\n    length: 18,\n    area: 9,\n  },\n}\n\ntype TActions = { c_action: any };\n\nexport const actionTypes = {\n  pass: ({ c_action }: TActions) => c_action === 400100,\n  attack: ({ c_action }: TActions) => c_action === 500100,\n  block: ({ c_action }: TActions) => c_action === 600100,\n  serve: ({ c_action }: TActions) => c_action === 200100,\n  attack_reception: ({ c_action }: TActions) => c_action === 300100,\n  serve_reception: ({ c_action }: TActions) => c_action === 30010,\n}\n\nexport const markersWithoutOpponentSide: Array<number | {}> = [\n  200,\n  169,\n  170,\n  171,\n  119,\n  {\n    key: 15,\n    props: [162, 166],\n    checkTab: actionTypes.serve,\n  },\n]\n\nexport const ownSideMarkers: Array<number> = [120, 118]\n","import createHistory from 'history/createBrowserHistory'\n\nexport default createHistory()\n","export default class BasicStore {\n  //@ts-ignore\n  constructor(stores) {\n    //@ts-ignore\n    this.allStores = stores\n  }\n\n  //@ts-ignore\n  getStore(storeName) {\n    //@ts-ignore\n    return this.allStores[storeName]\n  }\n}\n","/* Табы */\n// по умолчанию\nexport const tabs = [\n  'serve',\n  'serve_reception',\n  'pass',\n  'attack',\n  'block',\n  'attack_reception',\n]\n\n// для центрального блокирующего\nexport const tabsForAmplua5 = ['serve', 'attack', 'block', 'attack_reception']\n// для связующего\nexport const tabsForAmplua6 = [\n  'serve',\n  'pass',\n  'attack',\n  'block',\n  'attack_reception',\n]\n\n// Для либеро\nexport const tabsForAmplua7 = ['serve_reception', 'attack_reception']\n\n// для доигровщика\nexport const tabsForAmplua8 = [\n  'serve',\n  'serve_reception',\n  'attack',\n  'block',\n  'attack_reception',\n]\n\nexport const actions = {\n  attack: 500100, //- Атака\n  attack_reception: 300100, //- Прием\n  block: 600100, //- Блок\n  pass: 400100, //- Передача\n  serve: 200100, //- Подача\n  serve_reception: 300100, //- Прием\n}\n\n//Направление маркеров для каждой вкладки по-умолчанию когда нет выбранных зон\n// @ts-ignore\nexport const directionBtns = (tab) => {\n  switch (tab) {\n    case 'attack_reception':\n    case 'serve_reception':\n      return { from: true, to: false }\n    default:\n      return { from: true, to: true }\n  }\n}\n\nexport const defaultDirections = {\n  attack: { from: false, to: true },\n  attack_reception: { from: true, to: false },\n  block: { from: true, to: false },\n  pass: { from: false, to: true },\n  serve: { from: false, to: true },\n  serve_reception: { from: true, to: false },\n}\n\n/**\n * Массив вкладок для основной страницы\n * pages - страницы, на которых нужно отображать вкладку\n * link - часть url страницы для react-router\n * lexics - название вкладки\n * exact - проп для react-router (для точного совпадения url)\n */\nexport const mainPageTabs = [\n  {\n    // Временно отключаем этот таб (пока не до конца реализован функционал)\n    exact: false,\n    lexics: 2862,\n    link: '/video',\n    pages: [],\n  },\n  {\n    exact: true,\n    lexics: 682,\n    link: '',\n    pages: ['player', 'team'],\n  },\n  {\n    exact: true,\n    lexics: 682,\n    link: '/matches',\n    pages: ['tournaments'],\n  },\n  {\n    exact: true,\n    lexics: 9457,\n    link: '/players',\n    pages: ['team', 'tournaments'],\n  },\n  {\n    exact: true,\n    lexics: 9457,\n    link: '',\n    pages: ['match'],\n  },\n]\n","import { observable, action, computed } from 'mobx'\nimport {\n  tabs,\n  tabsForAmplua5,\n  tabsForAmplua6,\n  tabsForAmplua7,\n  tabsForAmplua8,\n  //@ts-ignore\n} from 'config/tabsConfig'\n// @ts-ignore\nimport stores from 'features/stores'\nimport BasicStore from './BasicStore'\n\nexport default class Tabs extends BasicStore {\n  @observable active = 'serve';\n\n  @observable tabs = tabs;\n\n  @computed get list() {\n    const { page } = this.getStore('lexics')\n    const { isFetching, profile } = this.getStore('playerProfile')\n\n    if (page === 'player') {\n      if (!isFetching && profile) {\n        switch (profile.amplua.id) {\n          case 4:\n          case 5:\n            return tabsForAmplua5\n          case 8:\n            return tabsForAmplua8\n          case 6:\n            return tabsForAmplua6\n          case 7:\n            return tabsForAmplua7\n          default:\n            return this.tabs\n        }\n      }\n    }\n\n    return this.tabs\n  }\n\n  //@ts-ignore\n  @action changeActive = (tab) => {\n    this.active = tab\n    // Очищаем выбранные фильтры\n    //@ts-ignore\n    stores.filters.clear()\n  };\n}\n","import { utils } from 'react-sport'\nimport { action } from 'mobx'\nimport routes from 'config/routes'\nimport get from 'lodash/get'\nimport map from 'lodash/map'\nimport filter from 'lodash/filter'\nimport uniqBy from 'lodash/uniqBy'\nimport concat from 'lodash/concat'\n\n\nimport m from 'moment'\n\nimport BasicStore from 'features/stores/BasicStore'\n\nconst procedures = {\n  player: 'scout_player_matches_list',\n  team: 'scout_team_match_period_1',\n}\n\nconst fields = {\n  player: '_p_player_id',\n  team: '_p_team_id',\n}\n\ninterface IMatchesApiStore {\n  fetch: (\n    page: string,\n    pageId: string | number,\n    offset: number,\n    limit: number,\n    //@ts-ignore\n    dateFrom?: string,\n    //@ts-ignore\n    dateTo?: string,\n    //@ts-ignore\n    setTempSelected?: (filteredMatches: Array<number>) => void,\n    //@ts-ignore\n    setOpened?: (pageId: string | number) => void,\n  ) => void | null,\n  addOffset: (pageId: string | number) => void,\n  changeActive: () => void,\n}\n\n// Стор для загруженных матчей\nexport default class MatchesApiStore extends BasicStore\n  implements IMatchesApiStore {\n  //@ts-ignore\n  @action fetch = (\n    //@ts-ignore\n    page,\n    //@ts-ignore\n    pageId,\n    //@ts-ignore\n    offset,\n    //@ts-ignore\n    limit,\n    // При выборе всего года или сезона в выпадающем меню\n    dateFrom = null,\n    dateTo = null,\n    setTempSelected = null,\n    setOpened = null,\n  ) => {\n    //@ts-ignore\n    if (get(this.list[pageId], 'next') === false) {\n      // Если загружены все матчи, то не делаем запрос далее,\n      // просто выбираем из общего списка матчи за год или за сезон\n      // и закрываем меню\n      if (dateFrom && setTempSelected && setOpened) {\n        //@ts-ignore\n        const checkPeriod = matchDate => m(matchDate).isBetween(dateFrom, dateTo)\n        // фильтруем матчи, даты которых входят в нужный диапазон\n        const filteredMatches = map(\n          //@ts-ignore\n          filter(this.list[pageId].matches, ({ match_date }) => checkPeriod(match_date)),\n          'f_match',\n        )\n        //@ts-ignore\n        setTempSelected(filteredMatches)\n        //@ts-ignore\n        setOpened(pageId)\n      }\n      return null\n    }\n    const url = `${routes.API_ROOT}/data`\n    const config = {\n      method: 'POST',\n      body: JSON.stringify({\n        //@ts-ignore\n        proc: procedures[page],\n        params: {\n          //@ts-ignore\n          [fields[page]]: pageId,\n          _p_date_from: dateFrom,\n          _p_date_to: dateTo,\n          _p_offset: offset,\n          _p_limit: limit,\n        },\n      }),\n    }\n    utils.callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        this.isFetching = true\n      },\n      onSuccess: json => this._onSuccess(\n        json,\n        page,\n        pageId,\n        //@ts-ignore\n        setTempSelected,\n        //@ts-ignore\n        setOpened,\n      ),\n      onError: this._onError,\n    })\n  }\n\n  _onSuccess = (\n    json: {\n      data: Array<any>,\n    },\n    page: string,\n    pageId: string | number,\n    //@ts-ignore\n    setTempSelected?: (filteredMatches: Array<number>) => void,\n    //@ts-ignore\n    setOpened?: (pageId: string | number) => void,\n  ) => {\n    //@ts-ignore\n    const data = json.data[0] ? json.data[0][procedures[page]] : []\n\n    if (setTempSelected && setOpened) {\n      setTempSelected(map(data, 'f_match'))\n      setOpened(pageId)\n    }\n\n    const pageProfile = get(this, ['list', pageId])\n    const matches = get(pageProfile, 'matches', [])\n    const offset = get(pageProfile, 'offset', 0)\n    //@ts-ignore\n    this.list[pageId] = {\n      matches: data ? uniqBy(concat(matches, data), 'f_match') : matches,\n      offset: data\n        ? offset + 20\n        : offset,\n      next: !!data,\n    }\n    //@ts-ignore\n    this.error = null\n    //@ts-ignore\n    this.isFetching = false\n    //@ts-ignore\n    if (this.firstLoad) {\n      //@ts-ignore\n      this.firstLoad = false\n    }\n  }\n\n  _onError = (error: any) => {\n    //@ts-ignore\n    this.isFetching = false\n    //@ts-ignore\n    this.error = error\n  }\n\n  //@ts-ignore\n  @action addOffset = (pageId, limit = 20) => {\n    //@ts-ignore\n    const offset = this.list[pageId] ? this.list[pageId].offset : 0\n    this.fetch(this.getStore('lexics').page, pageId, offset, limit)\n  }\n\n  //@ts-ignore\n  @action changeActive = (active) => {\n    //@ts-ignore\n    this.active = active\n  }\n}\n","import { observable } from 'mobx'\n// @ts-ignore\nimport MatchesApiStore from 'features/stores/Matches/MatchesApiStore'\n\nexport default class MatchesStore extends MatchesApiStore {\n  @observable list = {};\n\n  @observable isFetching = true;\n\n  @observable offset = 0;\n\n  @observable firstLoad = true;\n\n  @observable error = false;\n\n  @observable active = 'team1';\n}\n","export const amplua = {\n  team: 0,\n  opposite: 4,\n  wingSpiker: 8,\n  middleBlocker: 5,\n  setter: 6,\n  libero: 7,\n}\n","import { observable } from 'mobx'\n// @ts-ignore\nimport PlayerProfileApiStore from 'features/stores/PlayerProfile/PlayerProfileApiStore'\n\nexport default class PlayerProfileStore extends PlayerProfileApiStore {\n  @observable profile = null;\n\n  @observable isFetching = true;\n\n  @observable error = false;\n}\n","import { action } from 'mobx'\n\nimport { utils } from 'react-sport'\n\nimport get from 'lodash/get'\n\nimport routes from 'config/routes'\nimport BasicStore from 'features/stores/BasicStore'\nimport { amplua } from 'config/amplua'\n\nexport default class PlayerProfileApiStore extends BasicStore {\n  @action fetch = (playerId: string | number) => {\n    const url = `${routes.API_ROOT}/data`\n    const config = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'scout_player_inf',\n        params: {\n          player_id: playerId,\n        },\n      }),\n    }\n    utils.callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        this.profile = null\n        //@ts-ignore\n        this.isFetching = true\n      },\n      onSuccess: json => this._onSuccess(json),\n      onError: this._onError,\n    })\n  }\n\n  _onSuccess = (json: {data: {}}) => {\n    //@ts-ignore\n    this.isFetching = false\n    //@ts-ignore\n    this.profile = get(json, 'data', null)\n    const ampluaId = get(this, 'profile.amplua.id')\n    if (ampluaId === amplua.libero) {\n      this.getStore('tabs').changeActive('serve_reception')\n      this.getStore('markers').setDefaultDirections()\n    }\n\n    //@ts-ignore\n    this.error = null\n  }\n\n  //@ts-ignore\n  _onError = (error: {}) => {\n    //@ts-ignore\n    this.isFetching = false\n    //@ts-ignore\n    this.error = error\n  }\n}\n","// Параметры, которые отображаются в шапке страницы. Статистика игрока в зависимости от амплуа\nexport const headerPlayerParams = {\n  //Диагональный\n  4: [\n    { lexic_id: 8025, param_id: 175, percent: true },\n    { lexic_id: 7962, param_id: 102, percent: false },\n    { lexic_id: 7788, param_id: 101, percent: false },\n    { lexic_id: 8029, param_id: 103, percent: false },\n    { lexic_id: 8532, param_id: 124, percent: false },\n    { lexic_id: 9472, param_id: 236, percent: true },\n  ],\n  // Доигровщик\n  8: [\n    { lexic_id: 8025, param_id: 175, percent: true },\n    { lexic_id: 7962, param_id: 102, percent: false },\n    { lexic_id: 7788, param_id: 101, percent: false },\n    { lexic_id: 8029, param_id: 103, percent: false },\n    { lexic_id: 7957, param_id: 158, percent: true },\n    { lexic_id: 8532, param_id: 124, percent: false },\n  ],\n  // Связующий\n  6: [\n    { lexic_id: 8068, param_id: 183, percent: false },\n    { lexic_id: 8640, param_id: 184, percent: true },\n    { lexic_id: 7788, param_id: 101, percent: false },\n    { lexic_id: 8029, param_id: 103, percent: false },\n    { lexic_id: 8532, param_id: 124, percent: false },\n    { lexic_id: 9473, param_id: 223, percent: true },\n    { lexic_id: 9470, param_id: 222, percent: true },\n    { lexic_id: 8859, param_id: 224, percent: true },\n  ],\n  // Центральный блокирующий\n  5: [\n    { lexic_id: 8025, param_id: 175, percent: true },\n    { lexic_id: 7962, param_id: 102, percent: false },\n    { lexic_id: 7788, param_id: 101, percent: false },\n    { lexic_id: 8029, param_id: 103, percent: false },\n    { lexic_id: 8605, param_id: 181, percent: false },\n    { lexic_id: 8054, param_id: 148, percent: true },\n    { lexic_id: 8532, param_id: 124, percent: false },\n  ],\n  // Либеро\n  7: [\n    { lexic_id: 7957, param_id: 158, percent: true },\n    { lexic_id: 8095, param_id: 161, percent: true },\n    { lexic_id: 8532, param_id: 124, percent: false },\n  ],\n}\n\nexport const additional_params = [102, 130, 132, 190, 186, 115]\n\n// Параметры, которые отображаются в шапке страницы. Статистика\nexport const team_params = [\n  { lexic_id: '8025', param_id: 175, percent: true },\n  { lexic_id: '7962', param_id: 102, percent: false },\n  { lexic_id: '7788', param_id: 101, percent: false },\n  { lexic_id: '8029', param_id: 103, percent: false },\n  { lexic_id: '7957', param_id: 158, percent: true },\n  { lexic_id: '8532', param_id: 124, percent: false },\n]\n\nexport const zone_params = {\n  attack: [\n    { param_id: 175, percent: true },\n    { param_id: 102, percent: false },\n    { param_id: 104, percent: false },\n  ],\n  block: [\n    { param_id: 144, percent: true },\n    { param_id: 103, percent: false },\n    { param_id: 116, percent: false },\n  ],\n  pass: [\n    { param_id: 191, percent: true },\n    { param_id: 190, percent: false },\n    { param_id: 183, percent: false },\n  ],\n  serve: [\n    { param_id: 154, percent: true },\n    { param_id: 101, percent: false },\n    { param_id: 134, percent: false },\n  ],\n  attack_reception: [\n    { param_id: 161, percent: true },\n    { param_id: 130, percent: false },\n    { param_id: 131, percent: false },\n  ],\n  serve_reception: [\n    { param_id: 158, percent: true },\n    { param_id: 132, percent: false },\n    { param_id: 132, percent: false },\n  ],\n}\n","type TMarker = {\n  [key: string]: {\n    group: Array<number>,\n    values: Array<number> | null,\n  },\n}\n\nconst from_x = 34\nconst from_y = 33\nconst to_x = 36\nconst to_y = 35\n\nexport const middleOptions = [97, 175, 96]\n\nexport const positions = {\n  attack: {\n    from_x: 112,\n    from_y: 111,\n    to_x,\n    to_y,\n  },\n  attack_reception: {\n    from_x,\n    from_y,\n    to_x,\n    to_y,\n  },\n  attack_with_middle_point: {\n    from_x: 112,\n    from_y: 111,\n    middle_x: 141,\n    middle_y: 140,\n    to_x,\n    to_y,\n  },\n  block: {\n    from_x,\n    from_y,\n    to_x,\n    to_y,\n  },\n  pass: {\n    from_x,\n    from_y,\n    to_x,\n    to_y,\n  },\n  serve: {\n    from_x,\n    from_y,\n    to_x,\n    to_y,\n  },\n  serve_reception: {\n    from_x,\n    from_y,\n    to_x,\n    to_y,\n  },\n}\n\nexport const fetchProps = {\n  attack: {\n    mapShoot: [92, 105, 106],\n    playerInfo: [107],\n  },\n  attack_reception: {\n    mapShoot: [107],\n    playerInfo: [107],\n  },\n  block: {\n    playerInfo: [39, 40, 41],\n  },\n  pass: {\n    playerInfo: [67],\n  },\n  serve: {\n    mapShoot: [67],\n    playerInfo: [67],\n  },\n  serve_reception: {\n    mapShoot: [107],\n    playerInfo: [107],\n  },\n}\n\n// объекты с уточняющими значениями для доп. фильтрации маркеров на карте ударов\n// ключ - айди фильтра\n// значение - объект с группой и значением.\n// Проверяем по группе и значению\n// если массив значений (values) null, то проверка идет по айди игрока\n\n//дополнительная проверка маркеров (общая для игрока и команды)\nconst commonExtraCheckMarkers: TMarker = {\n  // Подача в 2 зону\n  157: {\n    group: [15],\n    values: [40, 162],\n  },\n  // Подача в 3 зону\n  158: {\n    group: [15],\n    values: [40, 162],\n  },\n  // Подача в 4 зону\n  159: {\n    group: [15],\n    values: [40, 162],\n  },\n}\n\n//дополнительная проверка маркеров для игроков\nexport const playerExtraCheckMarkers: TMarker = {\n  // Ассисты на блоке\n  231: {\n    group: [118, 119],\n    values: null,\n  },\n  //Заработанные очки на блоке\n  51: {\n    group: [39],\n    values: null,\n  },\n  ...commonExtraCheckMarkers,\n}\n\n//дополнительная проверка маркеров для команды\nexport const teamExtraCheckMarkers = {\n  ...commonExtraCheckMarkers,\n}\n","// attackZone - список параметров, для которых используется\n// в БД f_variant_zone = 125. Относятся только к атаке.\nexport const attackZone = [\n  102,\n  175,\n  105,\n  104,\n  102,\n  175,\n  105,\n  138,\n  137,\n  139,\n  226,\n  227,\n  235,\n  229,\n  233,\n  231,\n  237,\n  225,\n  228,\n  236,\n  230,\n  234,\n  232,\n  238,\n]\n\n// attackZoneSpecial - список специальных параметров, для которых используется\n// в БД f_variant_zone = 127.\nexport const attackZoneSpecial = [\n  210,\n  211,\n  212,\n  213,\n]\n\n// список параметров, для которых f_option_3 = 57, только передняя линия\nexport const frontLineParams = [\n  226,\n  227,\n  235,\n  229,\n  233,\n  231,\n  237,\n  211,\n  213,\n  218,\n]\n\n// список параметров, для которых f_option_3 = 58, только задняя линия\nexport const backLineParams = [\n  225,\n  228,\n  236,\n  230,\n  234,\n  232,\n  238,\n  210,\n  212,\n  217,\n]\n\n// список параметров, для которых f_option_5 = 70, только блоки\nexport const allBlocks = [103, 113, 181, 116, 103, 144, 113, 146, 115, 148]\n\n// Линии поля\nexport const fieldLines = {\n  ALL_LINES: 39, // Все поле\n  BACK_LINE: 58, // Задняя линия\n  FRONT_LINE: 57, // Передняя линия\n}\n\n// Зоны на поле (для атаки или подачи)\nexport const zones = {\n  ATTACK_ZONE: 125, // Зона атаки\n  ATTACK_ZONE_SPECIAL: 127, //особая зона\n  SERVE_ZONE: 123, // Зона подачи\n}\n\n// типы блоков\nexport const blockTypes = {\n  ALL_BLOCKS: 70, // Все блоки\n}\n","const sets = {\n  ALL_SETS: 0,\n  FIRST_SET: 1,\n  SECOND_SET: 2,\n  THIRD_SET: 3,\n}\n\nexport default sets\n","import React from 'react'\nimport m from 'moment'\nimport isPlainObject from 'lodash/isPlainObject'\nimport isArray from 'lodash/isArray'\nimport clamp from 'lodash/clamp'\nimport includes from 'lodash/includes'\nimport filter from 'lodash/filter'\nimport size from 'lodash/size'\nimport compact from 'lodash/compact'\nimport keys from 'lodash/keys'\nimport map from 'lodash/map'\nimport find from 'lodash/find'\nimport flatten from 'lodash/flatten'\n\nimport { getRoot } from 'mobx-state-tree'\nimport {\n  fieldSize,\n  markersWithoutOpponentSide,\n  ownSideMarkers,\n} from 'config/config'\nimport { positions } from 'config/markers'\nimport {\n  zones,\n  fieldLines,\n  blockTypes,\n  attackZone,\n  attackZoneSpecial,\n  frontLineParams,\n  backLineParams,\n  allBlocks,\n} from 'config/FieldZones'\n\nimport sets from 'config/matchSetsConfig'\n\n/**\n * Получение фильтров для маркеров\n * @param {array} filters - массив id фильтров, необходимых для отображения в блоке\n * @param {object || array || number} elem - возвращенное значение от сервера.\n * @param {string} name - если elem объект, то для ключа используем name.\n * Это будет слово для заголовка фильтра в компоненте.\n */\nexport function getFilters(\n  elem: any,\n  filters: Array<any>,\n  name: string = 'items',\n) {\n  const rootObj = {}\n  if (isPlainObject(elem)) {\n    objFilters(rootObj, elem, filters, name)\n  } else if (isArray(elem)) {\n    //@ts-ignore\n    rootObj[name] = arrFilters(elem, filters)\n  } else {\n    //@ts-ignore\n    rootObj[name] = filters.find(({ id }) => id === elem) || elem\n  }\n  return rootObj\n}\n\n/**\n * Обработка значения elem. В случае если от серера пришел объект.\n * @param {object} rootObj - пустой объект по умолчанию, заполняем его парами ключ-значение rootObj[name] = ...\n * @param {object || array || number} elem - возвращенное значение от сервера.\n * @param {array} filters - массив id фильтров, необходимых для отображения в блоке\n * @param {string} name - имя для ключа для нового объекта rootObj\n */\nconst objFilters = (\n  rootObj: {},\n  //@ts-ignore\n  elem: { id: number | string | null, items?: Array<any> },\n  filters: Array<{ id: number }>,\n  name: string,\n) => {\n  if ('id' in elem) {\n    //@ts-ignore\n    rootObj[name] = {\n      info: filters.find(({ id }) => id === elem.id) || elem.id,\n    }\n    if ('items' in elem) {\n      //@ts-ignore\n      rootObj[name] = {\n        //@ts-ignore\n        ...rootObj[name],\n        ...getFilters(elem.items, filters),\n      }\n    }\n  } else {\n    Object.entries(elem).forEach(([groupName, groupElements]) => {\n      //@ts-ignore\n      rootObj[name] = {\n        //@ts-ignore\n        ...rootObj[name],\n        ...getFilters(groupElements, filters, groupName),\n      }\n    })\n  }\n  return rootObj\n}\n/**\n * Обработка значения elem. В случае если от серера пришел массив.\n * @param {array} elem - вовращенное значение от сервера.\n * @param {array} filters - массив id фильтров, необходимых для отображения в блоке.\n */\nconst arrFilters = (elem: any, filters: Array<{ id: number }>) => {\n  //@ts-ignore\n  let arr = []\n  //@ts-ignore\n  elem.forEach((item) => {\n    if (isPlainObject(item)) {\n      let list = {}\n      Object.entries(item).forEach(([groupName, groupElements]) => {\n        list = {\n          ...list,\n          ...getFilters(groupElements, filters, groupName),\n        }\n      })\n      //@ts-ignore\n      arr = [...arr, list]\n    } else {\n      //@ts-ignore\n      arr = [...arr, filters.find(({ id }) => id === item) || item]\n    }\n  })\n  //@ts-ignore\n  return arr\n}\n\n/**\n * Показ даты с годом или без\n * @param {string} date - дата, которая приходит от сервера.\n */\nexport function dateWithYear(date: string) {\n  if (m(date).year() !== m().year()) return m(date).format('DD/MM/YY')\n  return m(date).format('DD/MM')\n}\n\n/**\n * Функция, которая нужна для отображения имени или слова на нужном языке.\n * @param {string} lang - параметр языка\n */\n//@ts-ignore\nexport function getSuffix(lang: string | null) {\n  return lang === 'ru' ? 'ru' : 'en'\n}\n\n/**\n * Функция, которая нужна для отображения длинного имени или длинного слова на нужном языке.\n * @param {string} lang - параметр языка\n */\nexport function getLongSuffix(lang: string) {\n  return lang === 'ru' ? 'rus' : 'eng'\n}\n\n/**\n * Перевод мер измерения в случае англоязычной версии\n * @param {number} cm - число, которе будем менять\n */\nexport function cmToFt(cm: number) {\n  const resArr = (cm / 30.48).toFixed(2).toString().split('.')\n  return `${resArr[0]}' ${resArr[1]}'' `\n}\n\n/**\n * Если нет аватара\n */\nexport const noImages = {\n  player: 'https://instatscout.com/images/players/96/no-photo.png',\n  team: 'https://volleyball.instatscout.com/images/team-no-photo.png',\n  tournament: 'https://volleyball.instatscout.com/images/team-no-photo.png',\n}\n\n/**\n * Получение id матчей из ответа сервера\n * @param {array} array - массив матчей из которых будем выдергивать id\n */\nexport const getMatchesIds = (array: Array<{ f_match: number }>) => {\n  //@ts-ignore\n  const newArray = []\n  array.forEach(elem => newArray.push(elem.f_match))\n  //@ts-ignore\n  return newArray\n}\n\n/**\n * получение изображения\n  TODO. В разработке\n */\nexport const getPic = (ent: string, size: number, id: number) => `https://instatscout.com/images/${ent}/${size}/${id}.png`\n\n/**\n * прелоадер для страницы\n  TODO. В разработке\n */\nexport const pagePreloader = (lexics: {}) => (\n  <img\n    src='http://volleyball.instatscout.com/images/page_preloader.gif'\n    //@ts-ignore\n    alt={lexics}\n    className='t-compare__preloader'\n  />\n)\n\n/**\n * Расчет координат для маркеров, используется для отображения карты ударов (со стралками)\n * @param {number} pos_x - позиция маркера по Х\n * @param {number} pos_y - позиция маркера по Y\n * @param {boolean} opponentSide - для какой стороны поля считаем.\n * @param {string} field - тип поля (для правильно расчета размера для формулы)\n */\nexport const setCoord = (\n  //@ts-ignore\n  pos_x: number | null,\n  //@ts-ignore\n  pos_y: number | null,\n  opponentSide: boolean = false,\n  field: string = 'STANDART',\n) => {\n  if (!pos_x && !pos_y) {\n    return {\n      pos_x: null,\n      pos_y: null,\n    }\n  }\n  //@ts-ignore\n  const { length, width } = fieldSize[field]\n  //@ts-ignore\n  const x = ((width - pos_x) * 100) / width\n  //@ts-ignore\n  const y = ((opponentSide ? pos_y : length - pos_y) * 100) / length\n  return {\n    pos_x: clamp(x, -9, 106),\n    pos_y: clamp(y, -3, 104),\n  }\n}\n\n/**\n * Расчет координат для маркеров, используется для отображения карты ударов (со стралками)\n * @param {string} tab - табы для страницы с маркерами (АТАКА, БЛОК, ПОДАЧА и тд)\n * @param {object} point - данные маркера(точки на поле)\n * @param {boolean} middle - центр\n */\nexport const getPoints = (\n  tab: string,\n  point: { prop: Array<{}> },\n  middle: Array<any> | boolean = false,\n) => {\n  const coordintaions = ['from_x', 'from_y', 'to_x', 'to_y', 'middle_x', 'middle_y']\n  //@ts-ignore\n  const points = positions[middle && tab === 'attack' ? `${tab}_with_middle_point` : tab]\n  const marker = {}\n  coordintaions.forEach((coord) => {\n    if (coord.includes('middle') && !middle) return null\n    //@ts-ignore\n    marker[`pos_${coord}`] = point.prop.find(p => p[0] === points[coord]) || []\n    //@ts-ignore\n  })\n  return marker\n}\n\n/**\n * Конвертация массива в объект\n * @param {array} arr - массив, с которым совершаются действия\n */\n//@ts-ignore\nexport const convertArrToObj = (arr: Array<{ slice: (number) => void }>) => {\n  const obj = {}\n  arr.forEach((item) => {\n    const shifted = item.slice(1)\n    //@ts-ignore\n    if (item[0]) obj[item[0]] = shifted\n  })\n  return obj\n}\n\n/**\n * Запись в стор данных посчитанных\n * @param {array} markers - массив маркеров\n * @param {number} types - тип маркера (из стора shootTypes, тип удара)\n */\nexport const applyMarkersState = (\n  markers: Array<{\n    prop: Array<any>,\n    //@ts-ignore\n    action_type?: string | null,\n    c_action: string | number,\n    ownSide?: boolean,\n    dontShowOpponentSide?: boolean,\n  }>,\n  types: Array<{\n    c_action: string | number,\n    c_match_event_prop: string | number,\n    c_match_event_prop_value: number | Array<number>,\n    //@ts-ignore\n    action_type?: string | null,\n  }>,\n) => {\n  markers.forEach((marker) => {\n    const actionTypes = types.filter(({ c_action }) => c_action === marker.c_action)\n    const convertedProps = convertArrToObj(marker.prop)\n    actionTypes.forEach(({\n      action_type,\n      c_match_event_prop,\n      c_match_event_prop_value,\n    }) => {\n      if (c_match_event_prop in convertedProps) {\n        //@ts-ignore\n        const currentProp = convertedProps[c_match_event_prop]\n        //@ts-ignore\n        if (includes(c_match_event_prop_value, currentProp[1])) {\n          marker.action_type = action_type\n        }\n      }\n\n      // Маркеры с данными ключами должны показываться на левой стороне\n      marker.ownSide = ownSideMarkers.some(key => key in convertedProps)\n\n      // У этих маркеров не должны отображаться точки КУДА\n      marker.dontShowOpponentSide = markersWithoutOpponentSide.some((item) => {\n        //@ts-ignore\n        const { checkTab, key, props } = item\n        if (isPlainObject(item)) {\n          return (\n            key in convertedProps\n            //@ts-ignore\n            && props.includes(convertedProps[key])\n            && checkTab(marker.c_action)\n          )\n        }\n        //@ts-ignore\n        return item in convertedProps\n      })\n    })\n  })\n  return markers\n}\n\nexport const checkArrayElements = (arr: Array<{}>, condition: (item: {}) => void) => {\n  let matchCondition = false\n  arr.forEach((item) => {\n    //@ts-ignore\n    if (condition(item)) return (matchCondition = true)\n  })\n  return matchCondition\n}\n\n/**\n * Формирование списка id игроков для запроса к серверу.\n * @param {array} data - массив маркеров\n * @param {array} propList - массив маркеров только для определенной вкладки (таб, АТАКА, БЛОК, ПОДАЧА и тд)\n */\nexport const getPlayers = (data: Array<{ prop: Array<any> }>, propList: Array<number>) => {\n  //@ts-ignore\n  const players = []\n\n  data.forEach(({ prop }) => {\n    const convertedProp = convertArrToObj(prop)\n    propList.forEach((id) => {\n      //@ts-ignore\n      if (id in convertedProp && !players.includes(convertedProp[id][1])) {\n        //@ts-ignore\n        players.push(convertedProp[id][1])\n      }\n    })\n  })\n  //@ts-ignore\n  return players\n}\n\n/**\n * Расчет процентов для значения статистики, если необходимо\n * @param {number} numerator - id фильтра по которому считаем статистику\n * @param {number} denominator - id фильтра, который нам нужен для расчета %\n * @param {array} stats - статистика по всем параметрам\n */\nexport const getPercents = (\n  numerator: number,\n  denominator: number,\n  stats: Array<{ f_param: number, value: number }>,\n  type?: string,\n) => {\n  const numeratorValue = stats\n    .filter(({ f_param }) => f_param === numerator)\n    .map(({ value }) => value)\n  const denominatorValue = stats\n    .filter(({ f_param }) => f_param === denominator)\n    .map(({ value }) => value)\n  if (numeratorValue.length && denominatorValue.length) {\n    const result = numeratorValue.reduce(\n      (prev, current, index) => prev + current / denominatorValue[index],\n      0,\n    )\n    switch (type) {\n      case 'total':\n        return Math.round((result * 100))\n      default:\n        // По умолчанию берем среднее значение\n        return Math.round((result * 100) / numeratorValue.length)\n    }\n  }\n  return '—'\n}\n\n/**\n * @param {object || array} filters - фильтры\n */\nexport const groupFilters = (filters: any) => {\n  const groups = {}\n  if (isPlainObject(filters)) {\n    filters = Object.values(filters)\n  }\n  //@ts-ignore\n  filters.forEach((filter) => {\n    const key = filter.groupName\n      || filter.c_match_event_prop2\n      || filter.c_match_event_prop\n    if (key in groups) {\n      //@ts-ignore\n      groups[key].push(filter)\n    } else {\n      //@ts-ignore\n      groups[key] = [filter]\n    }\n  })\n  return groups\n}\n\n/** Перевод из кг в фунты\n * @param {number} weight - вес в кг\n */\nexport const kgToPounds = ((weight: number) => +(weight / 0.455).toFixed(0))\n\n/** Получение аббревиатуры\n * @param {string} string - название команды\n */\nexport function getAbbr(string: string) {\n  if (!string) return ''\n  const strArr = string.split(' ')\n  if (strArr.length > 1) {\n    return strArr.map(word => word.charAt(0)).join('').toUpperCase()\n  }\n  return string.substring(0, 3).toUpperCase()\n}\n\n/** Фильтрация входящих параметров со статистикой с бэка (json)\n * @param {array} params - массив с параметрами, из json.data из ответа\n */\n\nexport function filterDBStats(params: Array<any>) {\n  return filter(params, ({\n    f_option_0,\n    f_option_3,\n    f_option_5,\n    f_param,\n    f_variant_zone,\n  }) => {\n    const {\n      ALL_LINES,\n      BACK_LINE,\n      FRONT_LINE,\n    } = fieldLines\n    const { ALL_SETS } = sets\n    const {\n      ATTACK_ZONE,\n      ATTACK_ZONE_SPECIAL,\n      SERVE_ZONE,\n    } = zones\n    const { ALL_BLOCKS } = blockTypes\n\n    // Для блоков фильтруем еще по свойству f_option_5\n    if (includes(allBlocks, f_param)) {\n      return (\n        f_option_0 === ALL_SETS\n        && f_variant_zone === SERVE_ZONE\n        && f_option_3 === ALL_LINES\n        && f_option_5 === ALL_BLOCKS\n      )\n    }\n    // По умолчанию берем статистику по всему полю ALL_LINES\n    // По умолчанию берем статистику по зоне подачи SERVE_ZONE\n    let fieldLine: number = ALL_LINES\n    let zone: number = SERVE_ZONE\n    // Если параметр относится к передней линии, меняем опцию на 57 - передняя линия\n    if (includes(frontLineParams, f_param)) {\n      fieldLine = FRONT_LINE\n    }\n    // Если параметр относится к задней линии, меняем опцию на 58 - задняя линия\n    if (includes(backLineParams, f_param)) {\n      fieldLine = BACK_LINE\n    }\n    // Если параметр относится к атакующему типу, меняем зону на зону атаки\n    if (includes(attackZone, f_param)) {\n      zone = ATTACK_ZONE\n    }\n    // Если параметр относится к специальному атакующему типу,\n    // меняем зону на зону специальную атаки\n    if (includes(attackZoneSpecial, f_param)) {\n      zone = ATTACK_ZONE_SPECIAL\n    }\n\n    return (\n      f_option_0 === ALL_SETS\n      && f_variant_zone === zone\n      && f_option_3 === fieldLine\n    )\n  })\n}\n/** Сохранение таблиц в localStorage\n * @param {string} tableName - имя таблицы для стора\n * @param {string} tables - сам объект таблицы в виде строки\n * @param {number} id - id амплуа игрока.\n */\nexport function saveTablesToLocalStorage(\n  {\n    id,\n    name,\n    tables,\n  }: {\n    name: string,\n    tables: {},\n    id?: number,\n  },\n) {\n  // id передаем, если сохраняем в localStorage таблицу для игрока\n  // Для каждого амплуа идет индивидуальная запись\n  if (id) {\n    //@ts-ignore\n    const table = JSON.parse(window.localStorage.getItem(name)) || {}\n    table[id] = tables\n    window.localStorage.setItem(name, JSON.stringify(table))\n  } else {\n    window.localStorage.setItem(name, JSON.stringify(tables))\n  }\n}\n\n/** Изменение окончания в русском слове в зависимости от числа\n * @param {number} number - число\n * @param {Array} textForms - массив слов, которые применяются ['матч', 'матча', 'матчей'])\n */\nexport function num2str(number: number, textForms: Array<string>) {\n  number = Math.abs(number) % 100\n  const dividedBy10: number = number % 10\n\n  if (number > 10 && number < 20) {\n    return textForms[2]\n  }\n  if (dividedBy10 > 1 && dividedBy10 < 5) {\n    return textForms[1]\n  }\n  if (dividedBy10 === 1) {\n    return textForms[0]\n  }\n  return textForms[2]\n}\n\n/**\n  * Функция, возвращающая объект кнопки удаления таблицы\n  * @param {object} tables - таблицы со статистикой\n  * @param {func} deleteTable - функция удаления таблицы\n  */\nconst getDeleteBtn = (\n  tables: {},\n  deleteTable: (position: number) => void,\n) => {\n  if (size(tables) > 1) {\n    return ({\n      //@ts-ignore\n      action: position => deleteTable(position),\n      t: 'remove_table',\n      buttonType: 'button_remove',\n    })\n  }\n  return false\n}\n\n\n/**\n  * Функция, возвращающая массив кнопок с действиями с таблицей\n  * @param {func} handleNewPopupAction - добавить новую таблицу\n  * @param {func} deleteTable - удалить таблицу\n  * @param {func} moveTableUp - переместить таблицу вверх\n  * @param {func} moveTableDown - переместить таблицу вниз\n  * @param {func} resetTable - возврат к таблицам по-умолчанию\n  * @param {object} tables - список всех таблиц на странице\n  */\ntype TBtnAction = (position: number) => void\n\nexport const tableHeaderButtons = (\n  handleNewPopupAction: () => void,\n  deleteTable: TBtnAction,\n  moveTableUp: TBtnAction,\n  moveTableDown: TBtnAction,\n  resetTable: TBtnAction,\n  tables: {},\n) => compact([\n  {\n    action: () => handleNewPopupAction(),\n    t: 'add_table',\n    buttonType: 'button_add',\n  },\n  getDeleteBtn(tables, deleteTable),\n  {\n    action: position => moveTableUp(position),\n    t: 'move_table_up',\n    buttonType: 'button_up',\n  },\n  {\n    action: position => moveTableDown(position),\n    t: 'move_table_down',\n    buttonType: 'button_down',\n  },\n  {\n    action: position => resetTable(position),\n    t: 'reset_tables',\n    buttonType: 'button_reset',\n  },\n])\n\n/**\n  * Функция, возвращающая количество выбранных чекбоксов в группе\n  * @param {Array} checkboxes - список всех чекбоксов для выпадающего меню\n  * @param {Object} checked - выбранные чекбоксы\n  * @param {String} groupName - название группы\n  */\nexport const getCheckedFiltersNumber = ({\n  checkboxes,\n  checked,\n  groupName,\n}: {\n  checkboxes: Array<any> | {},\n  checked: {},\n  groupName?: string,\n}) => {\n  const filtersCount = size(\n    filter(checkboxes, ({\n      f_player,\n      id,\n      player_id,\n    }) => {\n      const key = id\n        || f_player\n        || player_id\n      const checkedArray = keys(checked)\n      const checkedFilters = groupName\n        ? map(checkedArray, (id) => {\n          const newId = id.match(/(\\d+|\\D+)/g)\n          return newId\n        })\n        : checkedArray\n\n      return groupName\n        //@ts-ignore\n        ? find(checkedFilters, ([id, group]) => (\n          String(key) === id && groupName === group\n        ))\n        //@ts-ignore\n        : includes(checkedFilters, String(key))\n    }),\n  )\n  return filtersCount || null\n}\n\n/**\n  * Оборачиваем любое число в круглые скобки\n  * @param {number || null} number - число\n  */\nexport const addParenthesesToNumber = (number: number | null) => (\n  number ? `(${number})` : null\n)\n\n/**\n  * Получаем число выбранных фильтров в группе и оборачиваем в круглые скобки\n  * @param {Array} checkboxes - список всех чекбоксов для выпадающего меню\n  * @param {Object} checked - выбранные чекбоксы\n  * @param {String} groupName - название группы\n  */\nexport const checkedFiltersCount = ({\n  checkboxes,\n  checked,\n  groupName,\n}: {\n  checkboxes: Array<any> | {},\n  checked: {},\n  groupName?: string,\n}) => {\n  const number = getCheckedFiltersNumber({\n    checkboxes,\n    checked,\n    groupName,\n  })\n  return addParenthesesToNumber(number)\n}\n\n/** Возвращаем список айди выбранных фильтров.\n * В зависимости от типа применяем нужную функцию преобразования\n*/\nexport const getCheckedFiltersSubMenu = (data: any, type: string) => {\n  const getFiltersWithHeader = () => flatten(\n    map(data, ({ ids }) => ids),\n  )\n  const getFiltersWithZones = () => map(data, 'zoneId')\n  const getData = () => data\n\n  const types = {\n    popupWithColumns: getFiltersWithHeader,\n    popupWithZones: getFiltersWithZones,\n    popupSimple: getData,\n    popupWithPlayers: getData,\n    popupWithHomePlayers: getData,\n  }\n  //@ts-ignore\n  return types[type]()\n}\n\n/**\n  * Проверка на тип команды\n  * @param {number} teamType - тип команды\n    тип 2 - сборная\n  */\nexport const isNationalTeam = (teamType: number) => teamType === 2\n//@ts-ignore\nexport const getStore = (self, Store) => getRoot(self)[Store]\n","import { utils } from 'react-sport'\nimport { action } from 'mobx'\nimport routes from 'config/routes'\nimport map from 'lodash/map'\nimport get from 'lodash/get'\n\nimport BasicStore from 'features/stores/BasicStore'\nimport { headerPlayerParams } from 'config/params'\n\nimport { filterDBStats } from 'module/utils/helpers'\n\ntype TConfig = {\n  method: string,\n  body: string,\n}\n\ninterface IPlayerStatsApiStore {\n  fetch: (\n    playerId: number | string,\n    //@ts-ignore\n    selectedMatches: Array<number> | string | null,\n    playerTypeId: number,\n  ) => void,\n  eraseHeaderStats: () => void,\n}\n\n// Действия со стором статистики, получение от БД данных по статистике игрока.\nexport default class PlayerStatsApiStore extends BasicStore\n  implements IPlayerStatsApiStore {\n  @action\n  //@ts-ignore\n  fetch = (playerId, selectedMatches, playerTypeId) => {\n    const url: string = `${routes.API_ROOT}/data`\n    const playerParams: Array<number> = map(get(headerPlayerParams, playerTypeId), 'param_id')\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'ask_player_param_view',\n        params: {\n          _v_match_id: selectedMatches,\n          _v_player_id: [playerId],\n          _v_param_id: playerParams,\n        },\n      }),\n    }\n    utils.callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        this.stats = []\n        //@ts-ignore\n        this.isFetching = true\n      },\n      onSuccess: json => this._onSuccess(json),\n      onError: error => this._onError(error),\n    })\n  }\n\n  //@ts-ignore\n  _onSuccess = (json: { data?: Array<{}> }) => {\n    //@ts-ignore\n    this.isFetching = false\n    //@ts-ignore\n    this.stats = filterDBStats(json.data)\n    //@ts-ignore\n    this.error = null\n  }\n\n  //@ts-ignore\n  _onError = (error: {}) => {\n    //@ts-ignore\n    this.isFetching = false\n    //@ts-ignore\n    this.error = error\n  }\n\n  @action eraseHeaderStats = () => {\n    //@ts-ignore\n    this.stats = []\n  }\n}\n","import { observable } from 'mobx'\n// @ts-ignore\nimport PlayerStatsHeaderApiStore from 'features/stores/PlayerStatsHeader/PlayerStatsHeaderApiStore'\n\nexport default class PlayerStatsHeaderStore extends PlayerStatsHeaderApiStore {\n  @observable stats = [];\n\n  @observable isFetching = true;\n\n  @observable error = false;\n}\n","import { utils } from 'react-sport'\nimport { action } from 'mobx'\nimport routes from 'config/routes'\nimport concat from 'lodash/concat'\nimport map from 'lodash/map'\nimport BasicStore from 'features/stores/BasicStore'\nimport { team_params, additional_params } from 'config/params'\n\nimport { filterDBStats } from 'module/utils/helpers'\n\n\ninterface ITeamStatsApiStore {\n  fetch: (\n    teamId: number | string,\n    //@ts-ignore\n    selectedMatches: Array<number> | string | null,\n  ) => void,\n  eraseHeaderStats: () => void,\n}\n\n// Действия со стором статистики, получение от БД данных по статистике команды.\nexport default class TeamStatsApiStore extends BasicStore\n  implements ITeamStatsApiStore {\n  @action\n  //@ts-ignore\n  fetch = (teamId, selectedMatches) => {\n    const url: string = `${routes.API_ROOT}/data`\n    const teamParams: Array<number> = map(team_params, 'param_id')\n    const config: {\n      method: string,\n      body: string,\n    } = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'ask_team_param_view',\n        params: {\n          _v_match_id: selectedMatches,\n          _v_team_id: [teamId],\n          _v_param_id: concat(teamParams, additional_params),\n        },\n      }),\n    }\n    utils.callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        this.stats = []\n        //@ts-ignore\n        this.isFetching = true\n      },\n      //@ts-ignore\n      onSuccess: (json: { data?: Array<{}> }) => this._onSuccess(json, teamId),\n      onError: (error: any) => this._onError(error),\n    })\n  }\n\n  //@ts-ignore\n  _onSuccess = (json: { data?: Array<{}> }) => {\n    //@ts-ignore\n    this.isFetching = false\n    // Нужна статистика только по целому матчу f_option_0 = 0\n    // Фильтруем ответ от сервера, удаляем ненужные значения и записываем в стор\n    //@ts-ignore\n    this.stats = filterDBStats(json.data)\n    //@ts-ignore\n    this.error = null\n  }\n\n  //@ts-ignore\n  _onError = (error: {}) => {\n    //@ts-ignore\n    this.isFetching = false\n    //@ts-ignore\n    this.error = error\n  }\n\n  @action eraseHeaderStats = () => {\n    //@ts-ignore\n    this.stats = []\n  }\n}\n","import { observable } from 'mobx'\n// @ts-ignore\nimport TeamStatsApiStore from 'features/stores/TeamStatsHeader/TeamStatsHeaderApiStore'\n\nexport default class TeamStatsHeaderStore extends TeamStatsApiStore {\n  @observable stats = [];\n\n  @observable isFetching = false;\n\n  @observable error = false;\n}\n","import { observable, action } from 'mobx'\n\nexport default class InfoItem {\n  @observable clickCnt = 0;\n\n  //@ts-ignore\n  //@ts-ignore\n  @action clickHandle = (e, tooltips) => {\n    e.preventDefault()\n    this.clickCnt = this.clickCnt < tooltips.length - 1 ? this.clickCnt + 1 : 0\n  };\n}\n","// @ts-ignore\nimport { observable, computed } from 'mobx'\nimport isEmpty from 'lodash/isEmpty'\nimport filter from 'lodash/filter'\n\n// @ts-ignore\nimport stores from 'features/stores'\n\n// @ts-ignore\nconst Markers = superclass =>\n  class extends superclass {\n    //@ts-ignore\n    @observable loaded = false;\n\n    //@ts-ignore\n    @observable error = null;\n\n    //@ts-ignore\n    @observable data = [];\n\n    //@ts-ignore\n    @observable select = false;\n\n    //@ts-ignore\n    @observable directions = {\n      to: true,\n      from: true,\n    };\n\n    //@ts-ignore\n    @computed get list() {\n      //@ts-ignore\n      const { checked } = stores.filters\n      const store = this.getStore.bind(this)\n      const markers = this.select\n        //@ts-ignore\n        ? filter(this.data, marker => marker.visible)\n        : this.data\n      if (isEmpty(checked)) return markers\n      return this.getMarkers({\n        checkedFilters: checked,\n        markers,\n        store,\n      })\n    }\n  }\n\nexport default Markers\n","// @ts-ignore\nimport { action } from 'mobx'\nimport isPlainObject from 'lodash/isPlainObject'\nimport get from 'lodash/get'\nimport isEmpty from 'lodash/isEmpty'\nimport uniq from 'lodash/uniq'\nimport pickBy from 'lodash/pickBy'\nimport some from 'lodash/some'\nimport filter from 'lodash/filter'\n\nimport { groupFilters } from 'module/utils/helpers'\n\nimport { fetchProps } from 'config/markers'\n\nimport {\n  TCheckMarkerArgs,\n  TGetMarkersArgs,\n  TFilter,\n} from './types'\nimport { doubleKeyFiltration, singleKeyFiltration } from './KeysFiltration'\n\n//TODO Переписать функции фильтрации\n/**\n * checkMarker - проверка маркеров на соответствие фильтрам\n * @property {object} filter - добавление\n * @property {object} prop - параметры маркера, по которым будет проходить проверка\n * @property {number} player_id - id игрока, нужен в случае если нету 4х параметров ниже\n * @property {array} c_match_event_prop - основной ключ маркера, по которому будет поиск\n * @property {array} c_match_event_prop2 - дополнительный ключ, если есть,\n * то проверяется на соответствие обоим ключам\n * @property {array} c_match_event_prop_value - параметр поиска для первого ключа\n * @property {array} c_match_event_prop_value2 - параметр поиска для второго ключа\n *\n * возврощает значение bool\n */\n\nconst checkMarker = ({\n  c_match_event_prop,\n  c_match_event_prop_value,\n  c_match_event_prop_value2,\n  c_match_event_prop2,\n  f_player,\n  filter,\n  filterId,\n  player_id,\n  prop,\n  store,\n}: TCheckMarkerArgs) => {\n  if (!isPlainObject(filter)) return null\n  if (c_match_event_prop && c_match_event_prop2) {\n    return doubleKeyFiltration({\n      c_match_event_prop,\n      c_match_event_prop_value,\n      c_match_event_prop_value2,\n      c_match_event_prop2,\n      filterId,\n      prop,\n    })\n  }\n  if (c_match_event_prop) {\n    return singleKeyFiltration({\n      c_match_event_prop,\n      c_match_event_prop_value,\n      f_player,\n      filterId,\n      prop,\n    })\n  }\n  if (filter.fetchProps === 'mapShoot') {\n    const mapShoot = get(fetchProps, [store('tabs').active, 'mapShoot'])\n    const mapForCheck = prop.filter(property => mapShoot.includes(property[0]))\n    return (\n      mapForCheck && mapForCheck.some(property => property[2] === player_id)\n    )\n  }\n  if (\n    store('lexics').page === 'player'\n    || store('tabs').active === 'block'\n    || (store('tabs').active === 'attack' && filter.fetchProps === 'playerInfo')\n  ) {\n    const playerInfo = get(fetchProps, [store('tabs').active, 'playerInfo'])\n    const mapForCheck = prop.filter(property =>\n      playerInfo.includes(property[0]))\n    return (\n      mapForCheck && mapForCheck.some(property => property[2] === player_id)\n    )\n  }\n  return player_id === f_player\n}\n\n/**\n * Логика фильтрации следующая:\n * Приходят несколько фильтров и маркеры, если маркеры в одной группе,\n * то надо отдавать маркеры которые совпадают хотя бы с одним фильтром,\n * Если же маркеры из разных групп, то надо отдавать маркеры которые соответствуют всем фильтрам.\n * Но есть момент когда приходят маркеры из одной и из разных групп,\n * в этом случае маркеры разбиваются по группам,\n * и сначала делаем фильтрацию по группам, а после между группами\n */\nconst getMarkers = ({\n  checkedFilters,\n  markers,\n  store,\n}: TGetMarkersArgs) => {\n  const groupedFilters: {\n    [key: string]: Array<{}>,\n  } = groupFilters(checkedFilters)\n  const markersFilteredByGroup: {[key: string]: {}} = {}\n\n  /**\n   * Выше группируем фильтры и в данном цикле отфильтровываем маркеры, после\n   * забиваем тоже по группам.\n   * Здесь фильтрация происходит внутри одной группы, то есть как описал выше\n   * возвращаются маркера соответствующие любому фильтру из списка.\n   */\n  Object.entries(groupedFilters).forEach(([groupName, filters]) => {\n    markersFilteredByGroup[groupName] = filter(markers, ({ f_player, prop }) =>\n      some(filters, (filter: TFilter) => {\n        const {\n          c_match_event_prop,\n          c_match_event_prop_value,\n          c_match_event_prop_value2,\n          c_match_event_prop2,\n          id: filterId,\n          player_id,\n        }: TFilter = filter\n\n        return checkMarker({\n          c_match_event_prop,\n          c_match_event_prop_value,\n          c_match_event_prop_value2,\n          c_match_event_prop2,\n          f_player,\n          filter,\n          filterId,\n          player_id,\n          prop,\n          store,\n        })\n      }))\n  })\n\n  const markersToArray = Object.entries(markersFilteredByGroup)\n\n  /**\n   * если групп меньше 2х, то фильтрации между групп не требуется, поэтому возвращаем\n   * отфильтрованные выше маркеры\n   */\n  if (markersToArray.length < 2) {\n    return !isEmpty(markersFilteredByGroup) ? markersToArray[0][1] : []\n  }\n\n  /**\n   * Здесь делаем фильтрацию маркеров между разных групп.\n   */\n  let result: Array<number> = []\n  markersToArray.forEach(([markersGroup, markers]) => {\n    /**\n     * Отбираем фильтры, из других групп\n     */\n    const neededFilters = pickBy(\n      groupedFilters,\n      (group: Array<{}>) => ('c_match_event_prop' in group[0]\n        //@ts-ignore\n        ? !group[0].c_match_event_prop.includes(parseInt(markersGroup, 10))\n        //@ts-ignore\n        : group[0].groupName !== markersGroup),\n    )\n    /**\n     * Здесь делаем фильтрацию маркеров, на соответствие фильтрам из других групп\n     */\n    const linkedMarkers = filter(markers, ({ f_player, prop }) =>\n      Object.values(neededFilters).every(filters =>\n      //@ts-ignore\n        some(filters, (filter: TFilter) => {\n          const {\n            c_match_event_prop,\n            c_match_event_prop_value,\n            c_match_event_prop_value2,\n            c_match_event_prop2,\n            id: filterId,\n            player_id,\n          }: TFilter = filter\n\n          return checkMarker({\n            c_match_event_prop,\n            c_match_event_prop_value,\n            c_match_event_prop_value2,\n            c_match_event_prop2,\n            f_player,\n            filter,\n            filterId,\n            player_id,\n            prop,\n            store,\n          })\n        })))\n\n    result = [...result, ...linkedMarkers]\n  })\n  // Убираем дубли, если появились в процессе добавления нескольких фильтров\n  // Маркер может совпадать с несколькими фильтрами и добавиться несколько раз\n  return uniq(result)\n}\n\nconst MarkersFiltration = (superclass: any) =>\n  class extends superclass {\n    //@ts-ignore\n    @action getMarkers = (props: TGetMarkersArgs) => getMarkers(props);\n  }\n\nexport default MarkersFiltration\n","import find from 'lodash/find'\nimport size from 'lodash/size'\nimport every from 'lodash/every'\nimport includes from 'lodash/includes'\nimport some from 'lodash/some'\n\nimport {\n  playerExtraCheckMarkers,\n  teamExtraCheckMarkers,\n} from 'config/markers'\n\ntype TKeyFiltration = {\n  c_match_event_prop: Array<number>,\n  c_match_event_prop2?: Array<number> | null,\n  c_match_event_prop_value: Array<number>,\n  c_match_event_prop_value2?: Array<number> | null,\n  f_player?: number,\n  filterId: number,\n  prop: Array<Array<number>>,\n}\n\nexport const doubleKeyFiltration = ({\n  c_match_event_prop,\n  c_match_event_prop_value,\n  c_match_event_prop_value2,\n  c_match_event_prop2,\n  prop,\n}: TKeyFiltration) => {\n  /**\n   * Находим маркеры по группе и ключам, из списка выбранных фильтров,\n   * достаем пропсы и из списка маркеров достаем маркеры со схожими пропсами\n   * c_match_event_prop - группа из фильтра\n   * c_match_event_prop_value - значения из фильтра\n   * propGroup - группа\n   * propValue - значения\n   */\n  if (c_match_event_prop_value && c_match_event_prop_value2) {\n    const property1IsTrue = find(\n      prop,\n      ([propGroup, , propValue]) =>\n        includes(c_match_event_prop, propGroup)\n        && includes(c_match_event_prop_value, propValue),\n    )\n\n    const property2IsTrue = find(\n      prop,\n      ([propGroup, , propValue]) =>\n        includes(c_match_event_prop2, propGroup)\n        && includes(c_match_event_prop_value2, propValue),\n    )\n    return property1IsTrue && property2IsTrue\n  }\n\n  const property1IsTrue = find(prop, ([propGroup]) =>\n    includes(c_match_event_prop, propGroup))\n\n  const property2IsTrue = find(prop, ([propGroup]) =>\n    includes(c_match_event_prop2, propGroup))\n  return property1IsTrue && property2IsTrue\n}\n\nexport const singleKeyFiltration = ({\n  c_match_event_prop,\n  c_match_event_prop_value,\n  f_player,\n  filterId,\n  prop,\n}: TKeyFiltration) => {\n  /**\n   * Функция, которая осуществляет доп. фильтрацию маркера\n   * Работает так: если маркер не нуждается в доп. фильтрации, то возвращаем true\n   * Фильтруем от обратного - если наше условие выполнилось, то маркер НЕ показываем\n   * (не оставляем маркеры, которые подошли, а удаляем, которые не подошли)\n   * Это сделано для того, чтобы была возможность исключать маркеры (напр. с ошибкой)\n   * и наоборот оставлять подходящие под условие в одной функции\n   */\n  const additionalCheck = () => {\n    // Для команды у нас всегда 4 элемента в prop[0], а для игрока по 3 элемента\n    const extraCheckMarkers = size(prop[0]) === 4\n      ? teamExtraCheckMarkers\n      : playerExtraCheckMarkers\n    if (!extraCheckMarkers[filterId]) return true\n    const { group, values } = extraCheckMarkers[filterId]\n    return !every(\n      group,\n      groupItem =>\n        find(\n          prop,\n          ([propGroup, , propValue]) => {\n            // если есть массив values, то проверяем по нему, иначе проверка идет по айди игрока\n            const valueCheck = values\n              ? includes(values, propValue)\n              : propValue !== f_player\n\n            return groupItem === propGroup && valueCheck\n          },\n        ) || !find(prop, ([propGroup]) => propGroup === groupItem),\n    )\n  }\n\n  if (c_match_event_prop_value) {\n    return (\n      !!find(\n        prop,\n        ([propGroup, , propValue]) =>\n          c_match_event_prop.includes(propGroup)\n          && c_match_event_prop_value.includes(propValue),\n      ) && additionalCheck()\n    )\n  }\n\n  /**\n   * Находим маркеры только по группе\n   * c_match_event_prop - группа из фильтра\n   * propGroup - айди группы маркера\n   */\n  return (\n    some(c_match_event_prop, value =>\n      find(prop, ([propGroup]) => propGroup === value)) && additionalCheck()\n  )\n}\n","import { observable, action } from 'mobx'\n// @ts-ignore\nimport { middleOptions } from 'config/markers'\n// @ts-ignore\nimport { setCoord, getPoints } from 'module/utils/helpers'\n\n//функция проверки наличия точки по середине\n// @ts-ignore\n// @ts-ignore\n// @ts-ignore\nconst getMiddlePoint = ({ prop }) =>\n  prop.find(\n    //@ts-ignore\n    //@ts-ignore\n    ([key, property]) => key === 24 && middleOptions.includes(property),\n  )\n\nclass Marker {\n  @observable visible = true;\n\n  //@ts-ignore\n  //@ts-ignore\n  constructor(props, store) {\n    Object.assign(this, props)\n    const { active } = store('tabs')\n    //@ts-ignore\n    const withMiddlePoint = getMiddlePoint(this)\n    //получаем позицию маркера\n    const {\n      //@ts-ignore\n      pos_from_x,\n      //@ts-ignore\n      pos_from_y,\n      //@ts-ignore\n      pos_middle_x,\n      //@ts-ignore\n      pos_middle_y,\n      //@ts-ignore\n      pos_to_x,\n      //@ts-ignore\n      pos_to_y,\n      //@ts-ignore\n    } = getPoints(active, this, withMiddlePoint)\n    //устанавливаем координаты для точек откуда, куда и блок, если есть точка по середине\n    //@ts-ignore\n    this.from = setCoord(pos_from_x[2], pos_from_y[2])\n    //@ts-ignore\n    this.middle = withMiddlePoint && setCoord(pos_middle_x[2], pos_middle_y[2])\n    //@ts-ignore\n    this.to = setCoord(pos_to_x[2], pos_to_y[2])\n  }\n\n  //@ts-ignore\n  @action setVisible = (value) => {\n    this.visible = value\n  };\n}\n\nexport default Marker\n","// @ts-ignore\nimport { action } from 'mobx'\nimport { utils as remoteUtils } from 'react-sport'\nimport get from 'lodash/get'\n\n// @ts-ignore\nimport routes from 'config/routes'\n\n// @ts-ignore\n// @ts-ignore\nexport const getToolTipResult = (markers, resultList) => {\n  //@ts-ignore\n  const markersWithResult = []\n  //@ts-ignore\n  markers.forEach((marker) => {\n    const { prop } = marker\n    const result = resultList.find((\n      {\n        //@ts-ignore\n        //@ts-ignore\n        //@ts-ignore\n        prop_id,\n        //@ts-ignore\n        prop_value_id,\n      }, //@ts-ignore\n    ) =>\n      //@ts-ignore\n      prop.find(\n        //@ts-ignore\n        property => property[0] === prop_id && property[2] === prop_value_id,\n      ))\n    if (result) {\n      marker.result_lexic = result.lexical_formula\n      markersWithResult.push(marker)\n    } else {\n      markersWithResult.push(marker)\n    }\n  })\n  //@ts-ignore\n  return markersWithResult\n}\n\n// @ts-ignore\nconst ToolTipActions = superclass =>\n  class extends superclass {\n    //@ts-ignore\n    @action fetch = () => {\n      const url = `${routes.API_ROOT}/data`\n      const config = {\n        method: 'POST',\n        body: JSON.stringify({\n          proc: 'scout_event_prop_action_result',\n          params: {\n            _p_action_result: true,\n          },\n        }),\n      }\n\n      remoteUtils.callApi({\n        url,\n        config,\n        onRequest: this._onRequest.bind(this),\n        onSuccess: this._onSuccess.bind(this),\n        onError: this._onError.bind(this),\n      })\n    };\n\n    //@ts-ignore\n    _onSuccess({ data }) {\n      //@ts-ignore\n      this.loaded = true\n      //@ts-ignore\n      this.error = false\n      //@ts-ignore\n      this.data = get(data, '[0].scout_event_prop_action_result', [])\n    }\n\n    _onRequest() {\n      //@ts-ignore\n      this.loaded = false\n      //@ts-ignore\n      this.error = false\n    }\n\n    //@ts-ignore\n    _onError(error) {\n      //@ts-ignore\n      this.error = error\n      //@ts-ignore\n      this.loaded = false\n    }\n  }\n\nexport default ToolTipActions\n","// @ts-ignore\nimport { action } from 'mobx'\nimport { utils as remoteUtils } from 'react-sport'\nimport remove from 'lodash/remove'\n\n// @ts-ignore\nimport { getPlayers, getLongSuffix } from 'module/utils/helpers'\n// @ts-ignore\nimport { getFilteredMarkers } from 'features/stores/Markers/FetchMarkerActions'\n// @ts-ignore\nimport routes from 'config/routes'\n\nconst setMarkerPlayer = ({\n  //@ts-ignore\n  isBlock,\n  //@ts-ignore\n  language,\n  //@ts-ignore\n  marker,\n  //@ts-ignore\n  markerField = 'playerName',\n  //@ts-ignore\n  markersWithName,\n  //@ts-ignore\n  players,\n  //@ts-ignore\n  playerSource,\n}) => {\n  //@ts-ignore\n  const player = players.find(\n    //@ts-ignore\n    ({ f_player }) => f_player === (isBlock ? playerSource[2] : playerSource),\n  )\n  if (player) {\n    const firstname = player.prop_player[0][`firstname_${language}`]\n    const lastname = player.prop_player[0][`lastname_${language}`]\n    // Если имя уже есть, то дописываем остальные имена через разделитель\n    if (marker[markerField]) {\n      marker[markerField] = `${marker[markerField]},/ ${firstname} ${lastname}`\n    } else {\n      marker[markerField] = `${firstname} ${lastname}`\n    }\n    markersWithName.push(marker)\n  } else {\n    markersWithName.push(marker)\n  }\n}\n\n// @ts-ignore\n// @ts-ignore\n// @ts-ignore\nconst getPlayersIdList = (data, playerIdList, players) =>\n  //@ts-ignore\n  data.forEach(({ prop }) =>\n    // из маркеров достаем игроков по ключу\n    //@ts-ignore\n    playerIdList.forEach((id) => {\n      //@ts-ignore\n      const player = prop.find(property => property[0] === id)\n      if (player) {\n        players.push(player[2])\n      }\n    }))\n\n// @ts-ignore\n// @ts-ignore\n// @ts-ignore\n// @ts-ignore\nexport const getToolTipName = (markers, players, lang, tab) => {\n  //@ts-ignore\n  const markersWithName = []\n  const playerIdList = [39, 40, 41]\n  const language = getLongSuffix(lang)\n\n  if (tab === 'block') {\n    //@ts-ignore\n    markers.forEach((marker) => {\n      const { prop } = marker\n      // из маркеров достаем игроков по ключу\n      playerIdList.forEach((id) => {\n        //@ts-ignore\n        const player = prop.find(property => property[0] === id)\n        if (player) {\n          setMarkerPlayer({\n            players,\n            playerSource: player,\n            marker,\n            //@ts-ignore\n            markersWithName,\n            language,\n            markerField: 'firstPlayerName',\n            isBlock: true,\n          })\n        }\n      })\n    })\n  } else {\n    //@ts-ignore\n    markers.forEach((marker) => {\n      const { f_player } = marker\n\n      //@ts-ignore\n      setMarkerPlayer({\n        players,\n        playerSource: f_player,\n        marker,\n        //@ts-ignore\n        markersWithName,\n        language,\n      })\n    })\n  }\n  //@ts-ignore\n  return markersWithName\n}\n\n// @ts-ignore\nconst FetchPlayerInfo = superclass =>\n  class extends superclass {\n    //@ts-ignore\n    @action basicFetch = () => {\n      const promise = new Promise((resolve, reject) => {\n        const url = `${routes.API_ROOT}/data`\n        let { data } = this.getStore('markers')\n        //@ts-ignore\n        const players = []\n        if (this.getStore('tabs').active === 'block') {\n          const playerIdList = [39, 40, 41]\n          //@ts-ignore\n          getPlayersIdList(data, playerIdList, players)\n        } else {\n          if (this.getStore('tabs').active === 'serve_reception') {\n            data = getFilteredMarkers(data, 70, 195)\n          } else if (this.getStore('tabs').active === 'attack_reception') {\n            data = getFilteredMarkers(data, 70, 196)\n          }\n          //@ts-ignore\n          data.forEach(({ f_player }) => players.push(f_player))\n        }\n        const config = {\n          method: 'POST',\n          body: JSON.stringify({\n            proc: 'scout_players_info',\n            params: {\n              //@ts-ignore\n              _p_player_id: players,\n            },\n          }),\n        }\n\n        remoteUtils.callApi({\n          url,\n          config,\n          onRequest: this._basicRequest.bind(this),\n          onError: error => this._basicError(error, reject),\n          onSuccess: json => this._basicSuccess(json, resolve),\n        })\n      })\n\n      return promise\n    };\n\n    //@ts-ignore\n    //@ts-ignore\n    //@ts-ignore\n    @action fetch = (markers, propsList, excludePlayer = false) => {\n      const url = `${routes.API_ROOT}/data`\n      const players = getPlayers(markers, propsList)\n      if (excludePlayer) {\n        remove(players, player => player === excludePlayer)\n      }\n      const config = {\n        method: 'POST',\n        body: JSON.stringify({\n          proc: 'scout_players_info',\n          params: {\n            _p_player_id: players,\n          },\n        }),\n      }\n\n      remoteUtils.callApi({\n        url,\n        config,\n        onRequest: this._onRequest.bind(this),\n        onSuccess: this._onSuccess.bind(this),\n        onError: this._onError.bind(this),\n      })\n    };\n\n    _basicRequest() {\n      //@ts-ignore\n      this.basicLoaded = false\n    }\n\n    //@ts-ignore\n    //@ts-ignore\n    _basicSuccess({ data }, resolve) {\n      resolve(data)\n      //@ts-ignore\n      this.basicData = data\n      //@ts-ignore\n      this.basicLoaded = true\n    }\n\n    //@ts-ignore\n    //@ts-ignore\n    _basicError(error, reject) {\n      reject(error)\n      //@ts-ignore\n      this.basicLoaded = false\n    }\n\n    //@ts-ignore\n    _onSuccess({ data }) {\n      //@ts-ignore\n      this.data = data\n      //@ts-ignore\n      this.loaded = true\n      //@ts-ignore\n      this.error = false\n    }\n\n    _onRequest() {\n      //@ts-ignore\n      this.loaded = false\n      //@ts-ignore\n      this.error = false\n    }\n\n    //@ts-ignore\n    _onError(error) {\n      //@ts-ignore\n      this.error = error\n      //@ts-ignore\n      this.loaded = false\n    }\n  }\n\nexport default FetchPlayerInfo\n","// @ts-ignore\nimport { action } from 'mobx'\nimport { utils as remoteUtils } from 'react-sport'\nimport map from 'lodash/map'\nimport uniqBy from 'lodash/uniqBy'\n\n\n// @ts-ignore\nimport { getPlayers, getLongSuffix } from 'module/utils/helpers'\n// @ts-ignore\nimport routes from 'config/routes'\n\n// @ts-ignore\n// @ts-ignore\n// @ts-ignore\nexport const getToolTipOpponentTeam = (markers, teams, lang) => {\n  //@ts-ignore\n  const markersWithOpponentTeam = []\n  //@ts-ignore\n  markers.forEach((marker) => {\n    const { f_team_opponent } = marker\n    //@ts-ignore\n    const team = teams.find(({ f_player }) => f_player === f_team_opponent)\n    if (team) {\n      const name = team.prop_player[0][`name_${getLongSuffix(lang)}`]\n      marker.opponentTeam = name\n      markersWithOpponentTeam.push(marker)\n    } else {\n      markersWithOpponentTeam.push(marker)\n    }\n  })\n  //@ts-ignore\n  return markersWithOpponentTeam\n}\n\n// @ts-ignore\nconst FetchMapShoot = superclass =>\n  class extends superclass {\n    //@ts-ignore\n    @action basicFetch = () => {\n      const promise = new Promise((resolve, reject) => {\n        const url = `${routes.API_ROOT}/data`\n        //@ts-ignore\n        const teams = []\n        //@ts-ignore\n        this.getStore('markers').data.forEach(({ f_team_opponent }) => {\n          //@ts-ignore\n          if (teams.includes(f_team_opponent)) return null\n          return teams.push(f_team_opponent)\n        })\n        const config = {\n          method: 'POST',\n          body: JSON.stringify({\n            proc: 'scout_teams_info',\n            params: {\n              //@ts-ignore\n              _p_team_id: teams,\n            },\n          }),\n        }\n\n        remoteUtils.callApi({\n          url,\n          config,\n          onRequest: this._basicRequest.bind(this),\n          onError: error => this._basicError(error, reject),\n          onSuccess: json => this._basicSuccess(json, resolve),\n        })\n      })\n\n      return promise\n    };\n\n    //@ts-ignore\n    //@ts-ignore\n    //@ts-ignore\n    //@ts-ignore\n    @action fetch = (markers, propsList, matches) => {\n      const url = `${routes.API_ROOT}/data`\n      const players = getPlayers(markers, propsList)\n      const config = {\n        method: 'POST',\n        body: JSON.stringify({\n          proc: 'scout_teams_players_info',\n          params: {\n            _p_match_id: matches,\n            _p_player_id: players,\n          },\n        }),\n      }\n\n      remoteUtils.callApi({\n        url,\n        config,\n        onRequest: this._onRequest.bind(this),\n        onSuccess: this._onSuccess.bind(this),\n        onError: this._onError.bind(this),\n      })\n    };\n\n    _basicRequest() {\n      //@ts-ignore\n      this.basicLoaded = false\n    }\n\n    //@ts-ignore\n    //@ts-ignore\n    _basicSuccess({ data }, resolve) {\n      resolve(data)\n      //@ts-ignore\n      this.basicData = data\n      //@ts-ignore\n      this.basicLoaded = true\n    }\n\n    //@ts-ignore\n    //@ts-ignore\n    _basicError(error, reject) {\n      reject(error)\n      //@ts-ignore\n      this.basicLoaded = false\n    }\n\n    //@ts-ignore\n    _onSuccess({ data }) {\n      //@ts-ignore\n      //@ts-ignore\n      this.data = map(data, ({ prop_player, ...item }) => ({\n        ...item,\n        //@ts-ignore\n        //@ts-ignore\n        prop_player: uniqBy(\n          //@ts-ignore\n          map(prop_player, player => ({\n            ...player,\n            // добавляем поля для полученных игроков\n            groupName: 'who_served',\n            fetchProps: 'mapShoot',\n          })),\n          'player_id',\n        ),\n      }))\n      //@ts-ignore\n      this.loaded = true\n      //@ts-ignore\n      this.error = false\n    }\n\n    _onRequest() {\n      //@ts-ignore\n      this.loaded = false\n      //@ts-ignore\n      this.error = false\n    }\n\n    //@ts-ignore\n    _onError(error) {\n      //@ts-ignore\n      this.error = error\n      //@ts-ignore\n      this.loaded = false\n    }\n  }\n\nexport default FetchMapShoot\n","// @ts-ignore\nimport { action } from 'mobx'\nimport { utils as remoteUtils } from 'react-sport'\nimport uniq from 'lodash/uniq'\nimport find from 'lodash/find'\nimport map from 'lodash/map'\n\n// @ts-ignore\nimport routes from 'config/routes'\n// @ts-ignore\nimport Marker from 'features/stores/Markers/Marker'\n// @ts-ignore\nimport { actions } from 'config/tabsConfig'\n// @ts-ignore\nimport { fetchProps } from 'config/markers'\n// @ts-ignore\nimport { getToolTipResult } from 'features/stores/ToolTips/ToolTipActions'\n// @ts-ignore\nimport { getToolTipName } from 'features/stores/PlayerInfo/FetchPlayerInfo'\n// @ts-ignore\nimport { getToolTipOpponentTeam } from 'features/stores/MapShoot/FetchMapShoot'\n// @ts-ignore\nimport { applyMarkersState } from 'module/utils/helpers'\n\n// @ts-ignore\n// @ts-ignore\n// @ts-ignore\nconst getBody = (getStore, matches, id) => {\n  const tab = getStore('tabs').active\n  const { page } = getStore('lexics')\n  const proc = page === 'player' ? 'scout_player_map_shoot' : 'scout_team_map_shoot'\n  const pageId = page === 'player' ? '_p_player_id' : '_p_team_id'\n  return {\n    proc,\n    params: {\n      _p_match_arr: matches,\n      _p_date_from: null,\n      _p_date_to: null,\n      //@ts-ignore\n      _p_c_action_arr: [actions[tab]],\n      [pageId]: id,\n    },\n  }\n}\n\n// @ts-ignore\n// @ts-ignore\n// @ts-ignore\nexport const getFilteredMarkers = (data, id, value) =>\n  //@ts-ignore\n  data.filter(({ prop }) =>\n    find(prop, property => property[0] === id && property[2] === value))\n\n// @ts-ignore\nconst FetchMarkers = superclass =>\n  class extends superclass {\n    //@ts-ignore\n    //@ts-ignore\n    //@ts-ignore\n    @action fetch = (id, matches) => {\n      const url = `${routes.API_ROOT}/data`\n      const getStore = this.getStore.bind(this)\n      getStore('shotTypes').fetch()\n\n      const config = {\n        method: 'POST',\n        body: JSON.stringify(getBody(getStore, matches, id)),\n      }\n\n      remoteUtils.callApi({\n        url,\n        config,\n        onRequest: this._onRequest.bind(this),\n        onSuccess: this._onSuccess.bind(this, matches),\n        onError: this._onError.bind(this),\n      })\n    };\n\n    //@ts-ignore\n    //@ts-ignore\n    setMarkers = (data, matches) => {\n      const tab = this.getStore('tabs').active\n      let tooltips = this.getStore('tooltips').data\n      switch (tab) {\n        case 'attack':\n          this.getStore('mapShoot').fetch(\n            data,\n            //@ts-ignore\n            fetchProps[tab].mapShoot,\n            matches,\n          )\n          //@ts-ignore\n          this.getStore('playerInfo').fetch(data, fetchProps[tab].playerInfo)\n          //@ts-ignore\n          tooltips = tooltips.filter(({ prop_id }) => prop_id === 24)\n          //@ts-ignore\n          this.data = getToolTipResult(data, tooltips)\n          break\n        case 'block':\n          if (this.getStore('lexics').page === 'player') {\n            const { profile } = this.getStore('playerProfile')\n            this.getStore('playerInfo').fetch(\n              data,\n              //@ts-ignore\n              fetchProps[tab].playerInfo,\n              profile.id,\n            )\n          }\n          //@ts-ignore\n          tooltips = tooltips.filter(({ prop_id }) => prop_id === 27)\n          //@ts-ignore\n          this.data = getToolTipResult(data, tooltips)\n          break\n        case 'pass':\n          //@ts-ignore\n          this.getStore('playerInfo').fetch(data, fetchProps[tab].playerInfo)\n          //@ts-ignore\n          tooltips = tooltips.filter(({ prop_id }) => prop_id === 21)\n          //@ts-ignore\n          this.data = getToolTipResult(data, tooltips)\n          break\n        case 'serve':\n          this.getStore('mapShoot').fetch(\n            data,\n            //@ts-ignore\n            fetchProps[tab].mapShoot,\n            matches,\n          )\n          //@ts-ignore\n          this.getStore('playerInfo').fetch(data, fetchProps[tab].playerInfo)\n          //@ts-ignore\n          tooltips = tooltips.filter(({ prop_id }) => prop_id === 15)\n          //@ts-ignore\n          this.data = getToolTipResult(data, tooltips)\n          break\n        case 'attack_reception':\n          data = getFilteredMarkers(data, 70, 196)\n          //@ts-ignore\n          this.getStore('playerInfo').fetch(data, fetchProps[tab].playerInfo)\n          this.getStore('mapShoot').fetch(\n            data,\n            //@ts-ignore\n            fetchProps[tab].mapShoot,\n            matches,\n          )\n          //@ts-ignore\n          tooltips = tooltips.filter(({ prop_id }) => prop_id === 18)\n          //@ts-ignore\n          this.data = getToolTipResult(data, tooltips)\n          break\n        case 'serve_reception':\n          data = getFilteredMarkers(data, 70, 195)\n          //@ts-ignore\n          this.getStore('playerInfo').fetch(data, fetchProps[tab].playerInfo)\n          this.getStore('mapShoot').fetch(\n            data,\n            //@ts-ignore\n            fetchProps[tab].mapShoot,\n            matches,\n          )\n          //@ts-ignore\n          tooltips = tooltips.filter(({ prop_id }) => prop_id === 18)\n          //@ts-ignore\n          this.data = getToolTipResult(data, tooltips)\n          break\n        default:\n          //@ts-ignore\n          this.data = data\n      }\n    };\n\n    //@ts-ignore\n    //@ts-ignore\n    async _onSuccess(matches, { data }) {\n      const store = this.getStore.bind(this)\n      const markers = map(data, marker => new Marker(marker, store))\n      //@ts-ignore\n      this.data = markers\n      await this.getStore('playerInfo').basicFetch()\n      await this.getStore('mapShoot').basicFetch()\n      const { lang } = this.getStore('lexics')\n      const types = this.getStore('shotTypes').data\n      const players = this.getStore('playerInfo').basicData\n      const teams = this.getStore('mapShoot').basicData\n      //@ts-ignore\n      data = applyMarkersState(markers, types)\n      data = getToolTipOpponentTeam(data, teams, lang)\n      if (this.getStore('tabs').active === 'block') {\n        data = getToolTipName(data, players, lang, 'block')\n      } else {\n        //@ts-ignore\n        data = getToolTipName(data, players, lang)\n      }\n      this.setMarkers(uniq(data), matches)\n      //@ts-ignore\n      this.loaded = true\n      //@ts-ignore\n      this.error = false\n    }\n\n    _onRequest() {\n      //@ts-ignore\n      this.loaded = false\n      //@ts-ignore\n      this.error = false\n    }\n\n    //@ts-ignore\n    _onError(error) {\n      //@ts-ignore\n      this.error = error\n      //@ts-ignore\n      this.loaded = false\n    }\n  }\n\nexport default FetchMarkers\n","// @ts-ignore\nimport { action, toJS } from 'mobx'\n\nimport forIn from 'lodash/forIn'\nimport find from 'lodash/find'\nimport min from 'lodash/min'\nimport max from 'lodash/max'\nimport inRange from 'lodash/inRange'\nimport get from 'lodash/get'\nimport toPairs from 'lodash/toPairs'\n\nimport { defaultDirections } from 'config/tabsConfig'\n\ntype TMarker = {\n  setVisible: (arg: boolean) => void,\n}\n\ntype TRect = {\n  x1: number,\n  x2: number,\n  y1: number,\n  y2 : number,\n}\n\nconst Actions = (superclass: any) =>\n  class extends superclass {\n    //@ts-ignore\n    @action handleDirection = (name, value) => {\n      this.directions[name] = value\n    };\n\n    setDefaultDirections = () => {\n      const { active }: {active: string} = this.getStore('tabs')\n      const defaultDirectionsActive: {from: boolean, to: boolean } = get(\n        defaultDirections,\n        active,\n      )\n\n      return forIn(defaultDirectionsActive, (value, key) =>\n        this.handleDirection(key, value))\n    };\n\n    //@ts-ignore\n    @action selectToggle = (value: boolean) => {\n      //@ts-ignore\n      this.select = value\n    };\n\n    setRect = (\n      {\n        x1,\n        x2,\n        y1,\n        y2,\n      } : TRect,\n      rectWidth: number,\n      rectLength: number,\n      fieldWidth: number,\n      fieldLength: number,\n    ) => {\n      if (x1 === x2 || y1 === y2) {\n        return this.data.forEach(({ setVisible }: TMarker) => setVisible(true))\n      }\n      const xStart = min([x1, x2]) || 0\n      const xEnd = max([x1, x2]) || 0\n      const yStart = min([y1, y2]) || 0\n      const yEnd = max([y1, y2]) || 0\n      // для корректного подсчета нужно перевести в абсолютные значения\n      const xStartAbs = (xStart * rectWidth) / 100\n      const xEndInAbs = (xEnd * rectWidth) / 100\n      const yStartInAbs = (yStart * rectLength) / 100\n      const yEndInAbs = (yEnd * rectLength) / 100\n\n      const markersType = find(\n        toPairs(this.directions),\n        (direction: Array<string | boolean>) => direction[1] === true,\n      ) || ['to', true]\n\n      this.data.forEach((marker: TMarker) => {\n        const { pos_x, pos_y } = get(marker, get(markersType, '[0]'))\n        // координаты переводим в абсолютные значения\n        // (24 и 30 - это отступы у поля, которые необходимо учитывать)\n        const xCoordAbs = (pos_x * fieldWidth) / 100 + 24\n        const yCoordAbs = (pos_y * fieldLength) / 100 + 30\n        if (\n          !inRange(xCoordAbs, xStartAbs, xEndInAbs)\n          || !inRange(yCoordAbs, yStartInAbs, yEndInAbs)\n        ) {\n          marker.setVisible(false)\n        }\n      })\n    };\n\n    //@ts-ignore\n    @action deleteMarkers = () => {\n      //@ts-ignore\n      this.data = []\n    };\n  }\n\nexport default Actions\n","import { compose } from 'recompose'\n\n// @ts-ignore\nimport MarkersStore from 'features/stores/Markers/MarkersStore'\n// @ts-ignore\nimport MarkersFiltration from 'features/stores/Markers/MarkersFiltration/MarkersFiltration'\n// @ts-ignore\nimport FetchMarkers from 'features/stores/Markers/FetchMarkerActions'\n// @ts-ignore\nimport Actions from 'features/stores/Markers/Actions'\n\n// @ts-ignore\nconst ComposeMarkers = superclass =>\n  compose(\n    MarkersStore,\n    MarkersFiltration,\n    FetchMarkers,\n    Actions,\n  )(superclass)\n\nexport default ComposeMarkers\n","import { utils } from 'react-sport'\n// @ts-ignore\nimport { action } from 'mobx'\n\nimport forIn from 'lodash/forIn'\nimport includes from 'lodash/includes'\nimport get from 'lodash/get'\nimport map from 'lodash/map'\nimport filter from 'lodash/filter'\n\nimport routes from 'config/routes'\nimport { zone_params } from 'config/params'\nimport { defaultDirections } from 'config/tabsConfig'\n\ntype TCommonObjOptions = {\n  [key: string]: string,\n}\n\nconst procedures: TCommonObjOptions = {\n  player: 'ask_player_param_view',\n  team: 'ask_team_param_view',\n}\n\nconst fields: TCommonObjOptions = {\n  player: '_v_player_id',\n  team: '_v_team_id',\n}\n\n// @ts-ignore\nconst ZoneActionsMixin = superclass =>\n  class extends superclass {\n    // Ставим активную зону и меняем направления маркеров для этой зоны\n    //@ts-ignore\n    @action setChecked = (name) => {\n      //@ts-ignore\n      this.checked = name\n      const { active } = this.getStore('tabs')\n      const { handleDirection } = this.getStore('markers')\n      // Случай, если пользователь выбирает показывать зоны\n      // Для АТАК, БЛОК, ПЕРЕДАЧА показываем точки откуда, в остальных случаях точки куда\n      if (includes(['attack', 'block', 'pass'], active)) {\n        return forIn({ from: false, to: true }, (value, key) =>\n          handleDirection(key, value))\n      }\n      return forIn({ from: true, to: false }, (value, key) =>\n        handleDirection(key, value))\n    }\n\n    //@ts-ignore\n    @action resetToDefaultDirections = () => {\n      const { active } = this.getStore('tabs')\n      const { handleDirection } = this.getStore('markers')\n\n      const defaultDirectionsActive = get(defaultDirections, active)\n      return forIn(defaultDirectionsActive, (value, key) =>\n        handleDirection(key, value))\n    }\n\n    //@ts-ignore\n    @action setZone = (value) => {\n      //@ts-ignore\n      this.checked = value\n    };\n\n    //@ts-ignore\n    @action setTotal = (value) => {\n      //@ts-ignore\n      this.total = value\n    };\n\n    //@ts-ignore\n    @action fetch = (pageId, matches) => {\n      const url = `${routes.API_ROOT}/data`\n      const tab = this.getStore('tabs').active\n      const page: string = get(this.getStore('lexics'), 'page')\n      const params = map(zone_params, [tab, 'param_id'])\n      const config = {\n        body: JSON.stringify({\n          proc: procedures[page],\n          params: {\n            _v_match_id: matches,\n            [fields[page]]: [pageId],\n            _v_param_id: [params],\n          },\n        }),\n        method: 'POST',\n      }\n      utils.callApi({\n        config,\n        onError: error => this._onError(error),\n        onRequest: () => {\n          //@ts-ignore\n          this.stats = []\n          //@ts-ignore\n          this.loaded = null\n        },\n        onSuccess: json => this._onSuccess(json),\n        url,\n      })\n    };\n\n    //@ts-ignore\n    _onSuccess = ({ data }) => {\n      //@ts-ignore\n      this.loaded = true\n      // Нужна статистика только по целому матчу f_option_0 = 0\n      //@ts-ignore\n      this.stats = filter(data, ({ f_option_0 }) => f_option_0 === 0) || null\n\n      //@ts-ignore\n      this.error = null\n    };\n\n    //@ts-ignore\n    _onError = (error) => {\n      //@ts-ignore\n      this.loaded = true\n      //@ts-ignore\n      this.error = error\n    };\n  }\n\nexport default ZoneActionsMixin\n","import { observable, computed } from 'mobx'\n\n// @ts-ignore\nimport BasicStore from 'features/stores/BasicStore'\n// @ts-ignore\nimport ZoneActions from 'features/stores/Zones/ZoneActionsMixin'\n// @ts-ignore\nimport { zone_params } from 'config/params'\n\n// @ts-ignore\n// @ts-ignore\n// @ts-ignore\nconst setParam = (data, tab, key) =>\n  //@ts-ignore\n  data.filter(({ f_param }) => f_param === zone_params[tab][key].param_id)\n\nclass Zones extends ZoneActions(BasicStore) {\n  @observable checked = 'without_zone';\n\n  @observable total = false;\n\n  @observable stats = null;\n\n  @observable loaded = false;\n\n  //@ts-ignore\n  @observable error;\n\n  @observable basic = {\n    left: {},\n    right: {},\n  };\n\n  @observable advanced = {\n    left: {},\n    right: {},\n  };\n\n  @computed get activeStats() {\n    //@ts-ignore\n    const { active } = this.getStore('tabs')\n    const zoneStats = this.checked === 'advanced_zones'\n    //@ts-ignore\n      ? this.stats.filter(({ f_variant_zone }) => f_variant_zone === 124)\n    //@ts-ignore\n      : this.stats.filter(({ f_variant_zone }) => f_variant_zone !== 124)\n    return {\n      percent: setParam(zoneStats, active, 0),\n      successActions: setParam(zoneStats, active, 1),\n      totalActions: setParam(zoneStats, active, 2),\n    }\n  }\n}\n\nexport default Zones\n","import { observable } from 'mobx'\nimport BasicStore from '../BasicStore'\nimport FetchShotType from './FetchShotType'\n\nclass Markers extends FetchShotType(BasicStore) {\n  @observable loaded = false;\n\n  @observable error = null;\n\n  @observable data = [];\n}\n\nexport default Markers\n","// @ts-ignore\nimport { action } from 'mobx'\nimport { utils as remoteUtils } from 'react-sport'\n\n// @ts-ignore\nimport routes from 'config/routes'\n\n// @ts-ignore\nconst FetchShotType = superclass =>\n  class extends superclass {\n    //@ts-ignore\n    @action fetch = () => {\n      const url = `${routes.API_ROOT}/data`\n      const config = {\n        method: 'POST',\n        body: JSON.stringify({\n          proc: 'ask_type_of_actions_view',\n        }),\n      }\n\n      remoteUtils.callApi({\n        url,\n        config,\n        onRequest: this._onRequest.bind(this),\n        onSuccess: this._onSuccess.bind(this),\n        onError: this._onError.bind(this),\n      })\n    };\n\n    //@ts-ignore\n    _onSuccess({ data }) {\n      //@ts-ignore\n      this.data = data\n      //@ts-ignore\n      this.loaded = true\n      //@ts-ignore\n      this.error = false\n    }\n\n    _onRequest() {\n      //@ts-ignore\n      this.loaded = false\n      //@ts-ignore\n      this.error = false\n    }\n\n    //@ts-ignore\n    _onError(error) {\n      //@ts-ignore\n      this.error = error\n      //@ts-ignore\n      this.loaded = false\n    }\n  }\n\nexport default FetchShotType\n","import { observable, computed } from 'mobx'\nimport reduce from 'lodash/reduce'\n// @ts-ignore\nimport BasicStore from 'features/stores/BasicStore'\nimport FetchMapShoot from './FetchMapShoot'\n\nclass MapShootStore extends FetchMapShoot(BasicStore) {\n  @observable error = null;\n\n  @observable loaded = false;\n\n  @observable data = {};\n\n  @observable basicData = [];\n\n  @observable basicLoaded = false;\n\n  @computed get playersIds() {\n    //@ts-ignore\n    return reduce(\n      this.data,\n      (acc, { prop_player }) => {\n        //@ts-ignore\n        //@ts-ignore\n        //@ts-ignore\n        prop_player.forEach(({ player_id }) => acc.push(`${player_id}_player`))\n        return acc\n      },\n      [],\n    )\n  }\n}\n\nexport default MapShootStore\n","import { observable, computed } from 'mobx'\nimport map from 'lodash/map'\n// @ts-ignore\nimport BasicStore from 'features/stores/BasicStore'\nimport FetchPlayerInfo from './FetchPlayerInfo'\n\nclass PlayerInfoStore extends FetchPlayerInfo(BasicStore) {\n  @observable error = null;\n\n  @observable loaded = false;\n\n  @observable data = [];\n\n  @observable basicLoaded = false;\n\n  @observable basicData = [];\n\n  @computed get playersIds() {\n    //@ts-ignore\n    return map(this.basicData, ({ f_player }) => `${f_player}_player`)\n  }\n}\n\nexport default PlayerInfoStore\n","import { observable } from 'mobx'\n\n// @ts-ignore\nimport BasicStore from 'features/stores/BasicStore'\n// @ts-ignore\nimport ToolTipActions from 'features/stores/ToolTips/ToolTipActions'\n\nclass ToolTipStore extends ToolTipActions(BasicStore) {\n  //@ts-ignore\n  @observable loaded;\n\n  //@ts-ignore\n  @observable error;\n\n  @observable data = [];\n}\n\nexport default ToolTipStore\n","import { observable } from 'mobx'\n\n// @ts-ignore\nimport BasicStore from 'features/stores/BasicStore'\n// @ts-ignore\nimport RangeActions from 'features/stores/ShootsRange/RangeActions'\n\nclass ShootsRangeStore extends RangeActions(BasicStore) {\n  @observable before = 6;\n\n  @observable after = 6;\n\n  @observable allPossession = false;\n\n  @observable range = true;\n\n  @observable isOpened = false;\n}\n\nexport default ShootsRangeStore\n","\n// @ts-ignore\nimport { action, computed } from 'mobx'\n\ninterface IRangeActions {\n  rangePopup: () => void,\n  setAllPossession: () => void,\n  setRange: () => void,\n  setBefore: (value: number) => number | void,\n  setAfter: (value: number) => number | void,\n}\n\n// @ts-ignore\nconst RangeActions = (superclass: Class<any>) =>\n  class extends superclass implements IRangeActions {\n    /** Функция закрытия попап окна\n     */\n    //@ts-ignore\n    @action rangePopup = () => {\n      //@ts-ignore\n      //@ts-ignore\n      if (this.before === '' || this.before < 1) {\n        this.setBefore(6)\n      }\n      //@ts-ignore\n      //@ts-ignore\n      if (this.after === '' || this.after < 1) {\n        this.setAfter(6)\n      }\n      //@ts-ignore\n      //@ts-ignore\n      this.isOpened = !this.isOpened\n    };\n\n    /** Показать все владение (чекбокс)\n     */\n    //@ts-ignore\n    @action setAllPossession = () => {\n      //@ts-ignore\n      //@ts-ignore\n      this.allPossession = !this.allPossession\n    };\n\n    /** Показать диапазон (чекбокс)\n     */\n    //@ts-ignore\n    @action setRange = () => {\n      //@ts-ignore\n      //@ts-ignore\n      this.range = !this.range\n    };\n\n    /** Выставить секунды до события\n     * @param {number} before - секунды до момента\n     */\n    //@ts-ignore\n    @action setBefore = (before: number | string) => {\n      //@ts-ignore\n      this.before = before\n      // TODO переписать на общий\n      // Выставляем секунды во внутреннем плеере тоже\n      //@ts-ignore\n      this.getStore('videoPlayer').range.setVideoStart(before)\n    };\n\n    /** Выставить секунды после события\n     * @param {number} after - секунды до момента\n     */\n    //@ts-ignore\n    @action setAfter = (after: number | string) => {\n      //@ts-ignore\n      this.after = after\n      // TODO переписать на общий\n      // Выставляем секунды во внутреннем плеере тоже\n      //@ts-ignore\n      this.getStore('videoPlayer').range.setVideoEnd(after)\n    };\n\n    /** Считаем всю длительность владения\n     */\n    //@ts-ignore\n    @computed get possessionLength() {\n      //@ts-ignore\n      //@ts-ignore\n      return this.after + this.before\n    }\n  }\n\nexport default RangeActions\n","// @ts-ignore\nimport { observable, computed } from 'mobx'\nimport toString from 'lodash/toString'\nimport isEmpty from 'lodash/isEmpty'\n\nimport moment from 'moment'\n\n/**\n * Стор для видеонарезок, наследуется от стора видеонарезок из спорта\n */\n// @ts-ignore\n// @ts-ignore\nconst VideoCuts = markers => superclass =>\n  class extends superclass {\n    //@ts-ignore\n    @observable groups = {};\n\n    //@ts-ignore\n    @observable markers = markers;\n\n    /** получаем список событий, соответствующий фильтрам **/\n    //@ts-ignore\n    @computed get events() {\n      //@ts-ignore\n      const checked = []\n\n      //@ts-ignore\n      this.buttons.forEach(({ checkedFilters }) => {\n        if (!isEmpty(checkedFilters)) {\n          //@ts-ignore\n          checkedFilters.forEach(filter => checked.push(filter))\n        }\n      })\n\n      //@ts-ignore\n      return this.markers.data.filter(({ prop }) =>\n        //@ts-ignore\n        //@ts-ignore\n        prop.some(property =>\n          //@ts-ignore\n          checked.some(({ event_prop, event_value }) => {\n            const value = event_value.split(',')\n            return (\n              parseInt(event_prop, 10) === property[0]\n              && value.includes(toString(property[2]))\n            )\n          })))\n    }\n\n    /** Получаем общую длительность видео **/\n    //@ts-ignore\n    @computed get duration() {\n      return moment.duration(\n        this.events.length * this.range.sumRange,\n        'seconds',\n      )\n    }\n  }\n\nexport default VideoCuts\n","import { observable, computed, action } from 'mobx'\n\n/**\n * Класс попап-элементов в кнопках из видеонарезок\n */\nclass PopupItem {\n  @observable checked = false;\n\n  @observable items = [];\n\n  //@ts-ignore\n  constructor(props) {\n    Object.assign(this, props)\n  }\n\n  /** Если на попап-элемент активен, то достаем свойства, по которым далее фильтруем **/\n  @computed get checkedFilters() {\n    const filters = []\n    if (this.checked) {\n      filters.push({\n        //@ts-ignore\n        event_prop: this.c_match_event_prop,\n        //@ts-ignore\n        event_value: this.c_match_event_prop_value,\n        //@ts-ignore\n        lexicalFormula: this.lexical_formula,\n      })\n    }\n    return filters\n  }\n\n  //@ts-ignore\n  @action setChecked = value => (this.checked = value);\n}\n\nexport default PopupItem\n","import { observable, computed, action } from 'mobx'\nimport find from 'lodash/find'\nimport isEmpty from 'lodash/isEmpty'\n\nimport PopupItem from './PopupItem'\n\n/**\n * Класс кнопок из видеонарезок, через который задаются нужные параметры для кнопок\n *\n * @property {string} group - имя группы, к которой принадлежит кнопка\n *\n */\nclass Button {\n  @observable checked = false;\n\n  @observable popupItems = [];\n\n  /** Дополнительно передается название группы, к которой принадлежит кнопка **/\n  //@ts-ignore\n  //@ts-ignore\n  constructor(props, group) {\n    Object.assign(this, props)\n    //@ts-ignore\n    this.group = group\n\n    /** Здесь достаются id лексики кнопки и попап кнопок **/\n    //@ts-ignore\n    //@ts-ignore\n    this.popup.forEach((popup) => {\n      popup.lexical_formula = popup.popup_lexic\n    })\n    //@ts-ignore\n    //@ts-ignore\n    this.popupItems = this.popup.map(item => new PopupItem(item))\n  }\n\n  /** Кнопка активна, если хотя бы один из элементов относящихся к этой кнопке активен **/\n  @computed get activeItem() {\n    const active = find(this.popupItems, { checked: true })\n    return active || null\n  }\n\n  /** Получаем активные элементы из кнопки **/\n  @computed get activeItems() {\n    //@ts-ignore\n    return this.popupItems.filter(item => item.checked)\n  }\n\n  /** Получаем все активные фильтры **/\n  @computed get checkedFilters() {\n    //@ts-ignore\n    const filters = []\n\n    if (!isEmpty(this.activeItems)) {\n      this.activeItems.forEach(({ checkedFilters }) => {\n        //@ts-ignore\n        //@ts-ignore\n        checkedFilters.forEach(filter => filters.push(filter))\n      })\n    }\n\n    //@ts-ignore\n    return filters\n  }\n\n  //@ts-ignore\n  @action setActive = item => (this.activeItem = item);\n\n  /** Проходим по всем элементам и делаем их не активными **/\n  @action uncheckAll = () => {\n    this.popupItems.forEach((popupItem) => {\n      //@ts-ignore\n      popupItem.setChecked(false)\n    })\n  };\n\n  /** Устанавлием активную кнопку **/\n  //@ts-ignore\n  //@ts-ignore\n  //@ts-ignore\n  set activeItem({ c_match_event_prop, c_match_event_prop_value, popup }) {\n    const oldActive = find(this.popupItems, { checked: true })\n    const currentBtn = find(this.popupItems, { popup })\n\n    /** если кнопка, на которую нажали уже активна, то делаем её не активной **/\n    //@ts-ignore\n    //@ts-ignore\n    //@ts-ignore\n    //@ts-ignore\n    //@ts-ignore\n    if (currentBtn.checked) return currentBtn.setChecked(false)\n\n    /** Делаем не активным, все другие кнопки **/\n    //@ts-ignore\n    if (oldActive) {\n      //@ts-ignore\n      oldActive.checked = false\n    }\n\n    const newActive = find(this.popupItems, {\n      c_match_event_prop,\n      c_match_event_prop_value,\n    })\n\n    //@ts-ignore\n    //@ts-ignore\n    newActive.setChecked(true)\n  }\n}\nexport default Button\n","// @ts-ignore\nimport { action } from 'mobx'\nimport { utils as remoteUtils } from 'react-sport'\n\nimport Button from './Button'\n\n// @ts-ignore\nconst VideoCutsMixin = superclass =>\n  class extends superclass {\n    /** Получение кнопок **/\n    //@ts-ignore\n    @action fetchButtons = () => {\n      const url = `${this.rootUrl}/data`\n      const config = {\n        method: 'POST',\n        body: JSON.stringify({\n          proc: 'ask_filters_video_cutting_view',\n        }),\n      }\n\n      remoteUtils.callApi({\n        url,\n        config,\n        //@ts-ignore\n        onRequest: () => {\n          //@ts-ignore\n          this.isFetching = true\n        },\n        onSuccess: json => this._onSuccessButtons(json),\n        //@ts-ignore\n        onError: (error) => {\n          //@ts-ignore\n          this.error = error\n        },\n      })\n    };\n\n    //@ts-ignore\n    _onSuccessButtons = ({ data }) => {\n      //@ts-ignore\n      const newButtons = []\n      //@ts-ignore\n      const lexicIds = []\n\n      /** Собираем лексику из кнопок и создаем для каждой кнопки класс **/\n      //@ts-ignore\n      data.forEach(({ value }) => {\n        const { button, group } = value[0]\n        //@ts-ignore\n        //@ts-ignore\n        button.forEach(({ button_lexic, ...buttonInfo }) => {\n          buttonInfo.lexical_formula = button_lexic\n          newButtons.push(new Button(buttonInfo, group))\n          lexicIds.push(button_lexic)\n          //@ts-ignore\n          buttonInfo.popup.forEach(({ popup_lexic }) =>\n            lexicIds.push(popup_lexic))\n        })\n        this.groups[group] = value[0]\n      })\n      //@ts-ignore\n      this.isFetching = false\n\n      //если объект лексики передан\n      //то вытаскиваем всю лексику из кнопок и передаем ее\n      //для запроса в объект лексики\n      if (this.lexics) {\n        const phrases = {}\n        //@ts-ignore\n        //@ts-ignore\n        lexicIds.forEach((id) => { phrases[id] = id })\n        this.lexics.lexicFetch(phrases)\n      }\n\n      //@ts-ignore\n      //@ts-ignore\n      this.buttons = newButtons\n    };\n\n    //@ts-ignore\n    @action resetFilters = () => {\n      //@ts-ignore\n      this.buttons.forEach((button) => {\n        button.uncheckAll()\n      })\n    };\n  }\n\nexport default VideoCutsMixin\n","import { compose } from 'recompose'\n\n// @ts-ignore\nimport VideoCuts from 'features/stores/VideoCuts/VideoCuts'\n// @ts-ignore\nimport VideoCutsMixin from 'features/stores/VideoCuts/VideoCutsMixin'\n\n// @ts-ignore\n// @ts-ignore\nconst ComposeVideoCuts = (superclass, markers) =>\n  compose(\n    VideoCuts(markers),\n    VideoCutsMixin,\n  )(superclass)\n\nexport default ComposeVideoCuts\n","\nimport { observable } from 'mobx'\n// @ts-ignore\nimport MatchLinksApiStore from 'features/stores/MatchLinks/MatchLinksApiStore'\n\ninterface IMatchLinksStore {\n  links: Array<any>,\n  isFetching: boolean,\n  error: {} | null,\n}\n\nexport default class MatchLinksStore extends MatchLinksApiStore\n  implements IMatchLinksStore {\n  @observable links = [];\n\n  @observable isFetching = false;\n\n  @observable error = null;\n}\n","import { action } from 'mobx'\nimport { utils } from 'react-sport'\n\n// @ts-ignore\nimport routes from 'config/routes'\n// @ts-ignore\nimport BasicStore from 'features/stores/BasicStore'\n\ntype TParams = {\n  proc: string,\n  match_id: number,\n  team_id?: number,\n  player_id?: number,\n};\n\ntype TConfig = {\n  method: string,\n  body: string,\n};\n\ninterface IMatchLinksApi {\n  fetch: (match_id: number, id: number, type: string) => void,\n}\nexport default class MatchLinksApiStore extends BasicStore\n  implements IMatchLinksApi {\n  @action fetch = (\n    //@ts-ignore\n    match_id,\n    //@ts-ignore\n    pageId,\n    //@ts-ignore\n    type,\n  ) => {\n    const url = `${routes.API_ROOT}/video/match`\n    const id_type = type === 'team' ? 'team_id' : 'player_id'\n    const proc = type === 'team' ? 'scout_team_match_pop_up' : 'scout_match_pop_up'\n    const params: TParams = {\n      proc,\n      match_id,\n    }\n    params[id_type] = pageId\n\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify(params),\n    }\n\n    utils.callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        this.links = []\n        //@ts-ignore\n        this.isFetching = true\n      },\n      onSuccess: (json: { links: {} | Array<any> | void | null }) =>\n        this._onSuccess(json),\n      onError: (error: any) => this._onError(error),\n    })\n  };\n\n  _onSuccess = ({ links }: { links: {} | Array<any> | null | void }) => {\n    //@ts-ignore\n    this.links = links\n    //@ts-ignore\n    this.isFetching = false\n    //@ts-ignore\n    this.error = null\n  };\n\n  _onError = (error: {}) => {\n    //@ts-ignore\n    this.error = error\n    //@ts-ignore\n    this.isFetching = false\n  };\n}\n","import includes from 'lodash/includes'\n\nimport {\n  attackZone,\n  attackZoneSpecial,\n  frontLineParams,\n  backLineParams,\n  allBlocks,\n  fieldLines,\n  zones,\n  blockTypes,\n} from 'config/FieldZones'\n\nconst { BACK_LINE, FRONT_LINE } = fieldLines\nconst { ATTACK_ZONE, ATTACK_ZONE_SPECIAL } = zones\nconst { ALL_BLOCKS } = blockTypes\n\n// Формирование объекта с параметров для запроса отчета\nexport const getParamObj = (paramId: number) => {\n  const params: {\n    [key: string]: number | null,\n  } = {\n    param_id: paramId,\n  }\n  // Для некоторых параметров считается не вся площадка, добавляем f_option_3\n  if (includes(frontLineParams, paramId)) {\n    params.f_option_3 = FRONT_LINE\n  }\n  // Для некоторых параметров считается не вся площадка, добавляем f_option_3\n  if (includes(backLineParams, paramId)) {\n    params.f_option_3 = BACK_LINE\n  }\n  // Для блоков считается общее количество (без разновидностей), добавляем f_option_5\n  if (includes(allBlocks, paramId)) {\n    params.f_option_5 = ALL_BLOCKS\n  }\n  // для параметров атак, добавляем variant_zone\n  if (includes(attackZone, paramId)) {\n    params.f_variant_zone = ATTACK_ZONE\n  }\n  // Если параметр относится к специальному атакующему типу,\n  // меняем зону на зону специальную атаки\n  if (includes(attackZoneSpecial, paramId)) {\n    params.f_variant_zone = ATTACK_ZONE_SPECIAL\n  }\n\n  return params\n}\n","import { observable } from 'mobx'\n// @ts-ignore\nimport TableReportsApiStore from 'features/stores/TableReports/TableReportsApiStore'\n\nexport default class TableReportsStore extends TableReportsApiStore {\n  @observable pdfIsFetching = false;\n\n  @observable xlsIsFetching = false;\n\n  @observable error = null;\n}\n","import { action } from 'mobx'\n\nimport get from 'lodash/get'\nimport values from 'lodash/values'\nimport map from 'lodash/map'\n\nimport routes from 'config/routes'\nimport BasicStore from 'features/stores/BasicStore'\nimport stores from 'features/stores'\n\nimport { getParamObj } from './filterParams'\n\ninterface ITableReportsApiStore {\n  getReport: (\n    e: {},\n    key: string,\n    tableType?: string\n    //@ts-ignore\n  ) => Promise<void | null>,\n}\n\nexport default class TableReportsApiStore extends BasicStore\n  implements ITableReportsApiStore {\n  //@ts-ignore\n  getReportInfo = (tableType?: string, page: string, pageId: number) => {\n    // Общие методы для доступа к информации об игроке, команде или матче\n    const commonTable = get(this.getStore(`${page}Table`), 'tables')\n    const commonMatches = get(this.getStore('selectedMatches'), [page, pageId])\n    const commonShowOpponentStats = get(\n      this.getStore(`${page}Table`), 'showOpponentStats',\n    )\n\n    const tableReportOptions = {\n      matchPlayersTable: {\n        matches: [pageId],\n        tables: commonTable,\n      },\n      playerMatches: {\n        matches: commonMatches,\n        showOpponentStats: commonShowOpponentStats,\n        tables: commonTable,\n      },\n      teamMatches: {\n        matches: commonMatches,\n        showOpponentStats: commonShowOpponentStats,\n        tables: commonTable,\n      },\n\n      tournamentMatches: {\n        matches: map(get(stores, 'tournamentMatches.matches', []), 'f_match'),\n        showOpponentStats: get(stores, 'tournamentMatchesTableStore.tables'),\n        tables: get(stores, 'tournamentMatchesTableStore.tables'),\n      },\n      tournamentPlayers: {}, //тут пока заглушки TODO\n      tournamentTeams: {}, //тут пока заглушки TODO\n    }\n    //@ts-ignore\n    return get(tableReportOptions, tableType, {})\n  }\n\n  //@ts-ignore\n  @action getReport = (e: {}, key: string, tableType?: string) => {\n    const url: string = `${routes.API_ROOT}/report/tables_report`\n    const {\n      getLexics,\n      lang,\n      page,\n    }: {\n      getLexics: (tableName: string | number) => string | null,\n      lang: string,\n      page: string,\n    } = this.getStore('lexics')\n    const currentProfile: string = `${page}Profile`\n\n    const pageId: number = get(this.getStore(currentProfile).profile, 'id')\n      || +get(this.getStore(currentProfile), 'matchId')\n\n    const {\n      matches,\n      showOpponentStats,\n      tables,\n    } = this.getReportInfo(tableType, page, pageId)\n\n    // Если матчей не выбрано, то не делаем запрос на отчет\n    if (!matches.length) return null\n\n    const prepareMatchPlayersTable = () => {\n      const { team1_id, team2_id } = get(this.getStore('matchProfile'), 'data', {})\n\n      return {\n        lang_id: lang,\n        matches,\n        tables: map(values(tables), ({\n          activeId,\n          selectedParams,\n          sortInc,\n          tableName,\n        }: any) => ({\n          name: getLexics(tableName) || tableName,\n          params: map(selectedParams, 'param_id'),\n          sortby: {\n            flag: !sortInc ? 'ASC' : 'DESC',\n            param: activeId,\n          },\n        })),\n        teams: [team1_id, team2_id],\n        type: key,\n        [`${page}_id`]: pageId,\n      }\n    }\n\n    const prepareDefaultTable = () => ({\n      lang_id: lang,\n      matches,\n      tables: map(values(tables), ({\n        selectedParams,\n        summaryType,\n        tableName,\n      }: any) => ({\n        is_show_opponent: Number(showOpponentStats),\n        is_total: Boolean(summaryType === 'total'),\n        name: getLexics(tableName) || tableName,\n        params: map(selectedParams, ({ param_id }) => getParamObj(param_id)),\n      })),\n      type: key,\n      [`${page}_id`]: pageId,\n    })\n\n    // Для отчета по матчу нужна другая структура,\n    // в зависимости от типа таблицы вызываем нужную\n    // функцию для формирования конфига для запроса\n    const prepareConfig = {\n      default: prepareDefaultTable,\n      matchPlayersTable: prepareMatchPlayersTable,\n    }\n\n    //@ts-ignore\n    const getConfig = tableType => (\n      get(prepareConfig, tableType)\n      || get(prepareConfig, 'default')\n    )\n\n    const config: {\n      params: {},\n      uri: string,\n    } = {\n      params: getConfig(tableType)(),\n      uri: `request_${page}_stat_scout`,\n    }\n\n    //@ts-ignore\n    this[`${key}IsFetching`] = true\n\n    return fetch(url, {\n      body: JSON.stringify(config),\n      method: 'POST',\n    })\n      .then((response: any) => {\n        //@ts-ignore\n        this[`${key}IsFetching`] = false\n        return response.blob()\n      })\n      .catch((error: {}) => {\n        //@ts-ignore\n        this.error = error\n        //@ts-ignore\n        this[`${key}IsFetching`] = false\n      })\n  }\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport { compose, withHandlers } from 'recompose'\nimport cx from 'classnames'\nimport map from 'lodash/map'\n\nimport { T9n, OutsideClick } from 'react-sport'\n\ntype TProps = {\n  isFetching: boolean,\n  links: {} | Array<any>,\n  f_match: number,\n};\n\nconst MatchPopupComponent = ({ f_match, isFetching, links }: TProps) => (\n  <div\n    className={cx(\n      'popup-container',\n      'popup-matches-episodes',\n      'popup-matches-episodes__position-bottom',\n      { 'popup-container__loading': isFetching },\n    )}\n  >\n    {map(links, ({ link }, k) => (\n      <a\n        className='ui-button'\n        target='_blank'\n        rel='noopener noreferrer'\n        href={link}\n        key={k}\n      >\n        <i className='icon-play_volleyball_circle' />\n        <T9n className='ui-button__text' t={`match_popup_${k}`} />\n      </a>\n    ))}\n    <Link className='ui-button' target='_blank' to={`/matches/${f_match}`}>\n      <i className='icon-play_volleyball_circle' />\n      <T9n t='match_popup_details' />\n    </Link>\n  </div>\n)\n\nconst MatchPopupComposed = compose(\n  //@ts-ignore\n  withHandlers({\n    clickOutside: ({ toggleClose }) => () => {\n      toggleClose()\n    },\n  }),\n  OutsideClick,\n)\n\n// @ts-ignore\nexport const MatchPopup = MatchPopupComposed(MatchPopupComponent)\n","// Файл конфигурации для правильного позиционирования параметров в шестеренке\n\n// Список параметров в шестеренке - последние в подгруппе параметров\nexport const lastElemsInGear = {\n  team: [219, 186, 174, 139, 194, 198, 237, 155, 157, 156, 166, 190],\n  rest: [\n    219,\n    186,\n    174,\n    139,\n    194,\n    198,\n    237,\n    155,\n    157,\n    156,\n    166,\n    190,\n    184,\n    203,\n    214,\n    215,\n    216,\n    217,\n  ],\n}\n\nexport const percentageParams = [\n  175,\n  161,\n  158,\n  184,\n  186,\n  174,\n  173,\n  175,\n  138,\n  139,\n  169,\n  188,\n  190,\n  142,\n  192,\n  194,\n  235,\n  233,\n  237,\n  143,\n  196,\n  198,\n  236,\n  234,\n  238,\n  154,\n  155,\n  157,\n  156,\n  166,\n  167,\n  159,\n  160,\n  158,\n  163,\n  161,\n  162,\n  144,\n  146,\n  148,\n  184,\n  222,\n  223,\n  224,\n  214,\n  215,\n  216,\n  217,\n  218,\n]\n\n// Список колонок для шестеренки.\n// Каждая колонка отображает группу параметров в соответствии с макетом\nexport const gearColumnsList: {\n  [key: string]: Array<{\n    className: string,\n    num: number,\n  }>,\n} = {\n  0: [\n    { num: 0, className: 'narrow' },\n    { num: 2, className: 'wide' },\n    { num: 1, className: 'narrow' },\n    { num: 3, className: 'narrow' },\n    { num: 4, className: 'narrow' },\n    { num: 5, className: 'narrow' },\n  ],\n  4: [\n    { num: 0, className: 'narrow' },\n    { num: 2, className: 'wide' },\n    { num: 1, className: 'narrow' },\n    { num: 3, className: 'narrow' },\n    { num: 5, className: 'narrow' },\n  ],\n  5: [\n    { num: 0, className: 'narrow' },\n    { num: 2, className: 'wide' },\n    { num: 1, className: 'narrow' },\n    { num: 3, className: 'narrow' },\n    { num: 5, className: 'narrow' },\n  ],\n  6: [\n    { num: 0, className: 'narrow' },\n    { num: 6, className: 'wide' },\n    { num: 1, className: 'narrow' },\n    { num: 3, className: 'narrow' },\n    { num: 5, className: 'narrow' },\n  ],\n  7: [\n    { num: 0, className: 'narrow' },\n    { num: 1, className: 'narrow' },\n    { num: 4, className: 'narrow' },\n  ],\n  8: [\n    { num: 0, className: 'narrow' },\n    { num: 2, className: 'wide' },\n    { num: 1, className: 'narrow' },\n    { num: 3, className: 'narrow' },\n    { num: 4, className: 'narrow' },\n    { num: 5, className: 'narrow' },\n  ],\n}\n","// Число знаков после запятой\nexport const getDigits = (paramId: number) => (paramId === 219 ? 1 : 0)\n","import filter from 'lodash/filter'\n\nexport const getFilteredStatsByParamId = (\n  stats: Array<{}>,\n  //@ts-ignore\n  paramId: number | null,\n) => filter(stats, { f_param: paramId })\n","import includes from 'lodash/includes'\nimport size from 'lodash/size'\nimport reduce from 'lodash/reduce'\n\nimport { percentageParams } from 'config/teamPopupParams'\nimport { getDigits } from 'module/utils/helpers/getDigits'\nimport { getFilteredStatsByParamId } from 'module/utils/helpers/getFilteredStatsByParamId'\n\n/**\n * Получение значения статистики в итоговой строке в таблице\n * @param {number} param_id - id фильтра по которому считаем статистику\n * @param {array} stats - статистика по всем параметрам\n * @param {string} type - тип итоговой строки, среднее значение или сумма всех значений в столбце\n */\nexport const getSummaryStatValue = (\n  //@ts-ignore\n  param_id: number | null,\n  stats: Array<{ f_param: number, value: number }> = [],\n  type: string,\n) => {\n  const filteredStats = getFilteredStatsByParamId(stats, param_id)\n\n  const filteredStatsCount = size(\n    reduce(filteredStats, (acc, curr) => {\n      //@ts-ignore\n\n      if (acc[curr.f_match]) return acc\n      //@ts-ignore\n\n      acc[curr.f_match] = curr\n      return acc\n    }, {}),\n  )\n\n  if (!filteredStatsCount) return '—'\n  //@ts-ignore\n\n  const value = reduce(filteredStats, (prev, { value }) => prev + value, 0)\n\n  if (includes(percentageParams, param_id)) {\n    //@ts-ignore\n\n    return Number((value / filteredStatsCount).toFixed(getDigits(param_id)))\n  }\n\n  switch (type) {\n    case 'average_for_match':\n    case 'average':\n      //@ts-ignore\n      return Number((value / filteredStatsCount).toFixed(getDigits(param_id)))\n    case 'total':\n      //@ts-ignore\n      return Number(value.toFixed(getDigits(param_id)))\n    default:\n      return '—'\n  }\n}\n","import React from 'react'\nimport { observer } from 'mobx-react'\n\nimport map from 'lodash/map'\nimport get from 'lodash/get'\n\nimport { compose, withHandlers } from 'recompose'\n\nimport { T9n, SimpleDropdown } from 'react-sport'\n\nimport { getSummaryStatValue } from 'module/utils/helpers/getSummaryStatValue'\n\ntype TProps = {\n  activeId?: string,\n  getActualMatchesList: (params: {\n    pageId: string,\n    forOpps?: boolean,\n  }) => Array<any>,\n  getClassName: (param: {}, activeId: string) => void,\n  getExtLink: (\n    param: {},\n    id: number,\n    forOpp: boolean,\n  ) => void,\n  //@ts-ignore\n  param?: { param1_id: {}, param2_id: {} },\n  showOpponentStats?: boolean,\n  page?: string,\n  pageId: string,\n  selectedMatches?: {},\n  setSummaryType: (summaryType: string, position: number) => () => void,\n  table: {\n    selectedParams: Array<{\n      //@ts-ignore\n      param_id: number | null,\n      gear_group_id: number,\n      //@ts-ignore\n      param1_id?: {},\n      //@ts-ignore\n      param2_id?: {},\n    }>,\n    position: number,\n    summaryType?: string,\n  },\n}\n\n// Футер с выбранными параметрами в таблице статистики\nexport const TFootComponent = ({\n  activeId,\n  getActualMatchesList,\n  getClassName,\n  getExtLink,\n  page,\n  pageId,\n  selectedMatches,\n  setSummaryType,\n  showOpponentStats,\n  table: {\n    position,\n    selectedParams,\n    summaryType,\n  },\n}: TProps) => (\n  <tfoot>\n    <tr className='overall'>\n      <td className='overall__summary'>\n        <div>\n          {/*\n            //@ts-ignore */}\n          <SimpleDropdown placeholder={<T9n t='average_for_match' />}>\n            {map(['average_for_match', 'total'], summaryType => (\n              <T9n\n                key={summaryType}\n                t={summaryType}\n                onClick={setSummaryType(summaryType, position)}\n              />\n            ))}\n          </SimpleDropdown>\n        </div>\n      </td>\n      {get(selectedMatches, `${page}.${pageId}`, [])\n          && map(selectedParams, param => (\n            <td\n              //@ts-ignore\n              className={getClassName(param, activeId)}\n              key={`${param.param_id}_${param.gear_group_id}`}\n            >\n              <table>\n                <tbody>\n                  <tr onClick={() =>\n                    getExtLink(\n                      param,\n                      +pageId,\n                      false,\n                    )}\n                  >\n                    <td>\n                      {getSummaryStatValue(\n                        param.param_id,\n                        getActualMatchesList({\n                          pageId,\n                          forOpps: false,\n                        }),\n                        //@ts-ignore\n                        summaryType,\n                      )}\n                    </td>\n                  </tr>\n                  {showOpponentStats && page === 'team'\n                    && (\n                      <tr onClick={() =>\n                        getExtLink(\n                          param,\n                          +pageId,\n                          true,\n                        )}\n                      >\n                        <td>\n                          {getSummaryStatValue(\n                            param.param_id,\n                            getActualMatchesList({\n                              pageId,\n                              forOpps: true,\n                            }),\n                            //@ts-ignore\n                            summaryType,\n                          )}\n                        </td>\n                      </tr>\n                    )\n                  }\n                </tbody>\n              </table>\n            </td>\n          ))}\n    </tr>\n  </tfoot>\n)\n\nconst tFootComposed = compose(\n  //@ts-ignore\n  withHandlers({\n    setSummaryType: ({ setType }) => (\n      summaryType: string, position: number,\n    ) => () => setType(summaryType, position),\n  }),\n  observer,\n)\n\n//@ts-ignore\nexport const TFoot = tFootComposed(TFootComponent)\n","import React, { Fragment } from 'react'\nimport map from 'lodash/map'\nimport { compose, withHandlers } from 'recompose'\n\nimport { T9n } from 'react-sport'\n\ntype TParam = {\n  param_id: number,\n  gear_group_id: number,\n  full_lexical_formula: string,\n  short_lexical_formula: string,\n}\n\ntype TProps = {\n  table: { selectedParams: Array<TParam> },\n  onClick: (param: TParam) => void,\n}\n\n// Шапка с выбранными параметрами в таблице статистики\nexport const THeadComponent = ({\n  onClick,\n  table: { selectedParams },\n}: TProps) => (\n  <Fragment>\n    <th />\n    {map(selectedParams, param => (\n      <th\n        key={`${param.param_id}_${param.gear_group_id}`}\n          //@ts-ignore\n        onClick={onClick(param)}\n      >\n        <div>\n          <span className='th-tooltip'>\n            <T9n t={param.full_lexical_formula} />\n          </span>\n          <T9n t={param.short_lexical_formula} />\n        </div>\n      </th>\n    ))}\n  </Fragment>\n)\n\nconst THeadComposed = compose(\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    onClick: ({ setSortedId }) => param => () => setSortedId(param),\n  }),\n)\n\n// @ts-ignore\nexport const THead = THeadComposed(THeadComponent)\n","\nimport React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withHandlers,\n  withState,\n} from 'recompose'\n\nimport { T9n } from 'react-sport'\n\nimport {\n  TComposeInner,\n  TWithHandlersOuter1,\n  TWithHandlersInner1,\n  TWithHandlersOuter2,\n  TWithHandlersInner2,\n} from './types'\n\nexport const RangeSettingsComponent = ({\n  onBlurHandler,\n  onChangeHandler,\n  rangeAfter,\n  rangeBefore,\n}: TComposeInner) => (\n  <div className='main-page__range-checkboxes'>\n    <div className='main-page__range-fieldset'>\n      <span>\n        <T9n t='boxscore_sec_before' />\n        <input\n          type='number'\n          name='start'\n          className='main-page__range-short-input in'\n          value={rangeBefore}\n          onChange={onChangeHandler}\n          onBlur={onBlurHandler}\n        />\n        <T9n t='boxscore_sec_after' />\n        <input\n          type='number'\n          name='end'\n          className='main-page__range-short-input out'\n          value={rangeAfter}\n          onChange={onChangeHandler}\n          onBlur={onBlurHandler}\n        />\n      </span>\n    </div>\n  </div>\n)\n\nconst rangeSettingsComposed = compose<TComposeInner, {}>(\n  inject('shootsRange'),\n  withState(\n    'rangeBefore',\n    'setRangeBefore',\n    ({ shootsRange: { before } }) => before,\n  ),\n  withState(\n    'rangeAfter',\n    'setRangeAfter',\n    ({ shootsRange: { after } }) => after,\n  ),\n  withHandlers<TWithHandlersOuter1, TWithHandlersInner1>({\n    setRangeState: ({\n      setRangeAfter,\n      setRangeBefore,\n    }) => (name, value) => {\n      const setNewStateRange = name === 'start' ? setRangeBefore : setRangeAfter\n      setNewStateRange(value)\n    },\n  }),\n  withHandlers<TWithHandlersOuter2, TWithHandlersInner2>({\n    onBlurHandler: ({\n      rangeAfter,\n      rangeBefore,\n      shootsRange: { setAfter, setBefore },\n    }) => () => {\n      // Записываем в стор выбранный диапазон\n      setBefore(rangeBefore)\n      setAfter(rangeAfter)\n    },\n    onChangeHandler: ({ setRangeState }) => (e) => {\n      const { name, value } = e.target\n      const newValue = value === '' ? value : parseInt(value, 10)\n      setRangeState(name, newValue)\n    },\n  }),\n  observer,\n)\n\nexport const RangeSettings = rangeSettingsComposed(RangeSettingsComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers, withStateHandlers } from 'recompose'\n\ntype TProps = {\n  changeTableName: () => void,\n  handleFixName: () => void,\n  handleFocus: () => void,\n  newName: string,\n}\n\n// Input для редактирования названия таблицы\nconst EditableInput = ({\n  changeTableName,\n  handleFixName,\n  handleFocus,\n  newName,\n}: TProps) => (\n  <input\n    type='text'\n    onFocus={handleFocus}\n    onBlur={handleFixName}\n      //@ts-ignore\n    tabIndex='0'\n    value={newName}\n    onChange={changeTableName}\n  />\n)\n\nconst EditableInputComposed = compose(\n  inject('gearPopupStore'),\n  withStateHandlers(\n    props => ({\n      //@ts-ignore\n      newName: props.tableName,\n    }),\n    {\n      changeTableName: () => e => ({\n        newName: e.target.value,\n      }),\n    },\n  ),\n  //@ts-ignore\n  withHandlers({\n    /**\n     * Функция сохранения нового имени таблицы\n     * @param {func} handleShowInput - показываем ли инпут вместо блока\n     * @param {func} editTableName - функция редактирования названия таблицы\n     * @param {string} newName - название таблицы, новое\n     * @param {number} position - номер таблицы\n     * @param {string} tableName - название таблицы, изначальное\n     * @param {string} tableType - тип таблицы внутри основной страницы (прим. team/573/players)\n     */\n    handleFixName: ({\n      editTableName,\n      gearPopupStore: { editTempTableName },\n      handleShowInput,\n      newName,\n      newPopup,\n      position,\n      tableName,\n      tableType,\n    }) => () => {\n      // Изменяем название таблицы только если название поменялось на новое\n      if (tableName !== newName && !newPopup) {\n        editTableName(position, newName, tableType)\n      }\n      if (newPopup) {\n        editTempTableName(newName)\n      }\n      return handleShowInput()\n    },\n  }),\n  observer,\n  //@ts-ignore\n)(EditableInput)\n\nexport default EditableInputComposed\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withHandlers,\n  withState,\n\n} from 'recompose'\n\nimport { T9n } from 'react-sport'\n\nimport EditableInput from './EditableInput'\n\ntype TProps = {\n  editTableName: () => void,\n  //@ts-ignore\n  getTableName: (newPopup: string | null) => string,\n  handleFocus: () => void,\n  handleShowInput: () => boolean,\n  handleTranslateName: (tableName: string | number) => string,\n  newPopup?: boolean,\n  showInput: boolean,\n  table: {\n    tableName: string | number,\n    position: number,\n  },\n  currentStore: {},\n}\n\n// Компонент названия таблицы статистики\nconst EditTableNameComponent = ({\n  currentStore,\n  editTableName,\n  getTableName,\n  handleFocus,\n  handleShowInput,\n  handleTranslateName,\n  newPopup,\n  showInput,\n  table,\n}: TProps) => (\n  <div>\n    {showInput\n      ? (\n    //@ts-ignore\n        <EditableInput\n          tableName={handleTranslateName(table.tableName)}\n          handleFocus={handleFocus}\n          handleShowInput={handleShowInput}\n          editTableName={editTableName}\n          position={table.position}\n          newPopup={newPopup}\n          currentStore={currentStore}\n        />\n      )\n        //@ts-ignore\n      : <T9n t={getTableName(newPopup)} onClick={handleShowInput} />\n    }\n  </div>\n)\n\nconst EditTableNameComposed = compose<TProps, any>(\n  inject(\n    'lexics',\n    'teamTable',\n    'playerTable',\n    'teamPlayers',\n    'matchTable',\n    'tournamentMatchesTableStore',\n    'gearPopupStore',\n  ),\n  withState('showInput', 'setShowInput', false),\n  //@ts-ignore\n  withHandlers({\n    getTableName: ({\n      gearPopupStore: { tempTableName },\n      table: { tableName },\n      //@ts-ignore\n    }) => (newPopup) => {\n      if (!newPopup) return tableName\n      return tempTableName\n    },\n    /**\n    * Функция редактирования имени таблицы\n    * @param {number} position - номер таблицы\n    * @param {string} tableName - название таблицы\n    */\n    editTableName: ({\n      currentStore: {\n        editTable,\n        storeName,\n      },\n      gearPopupStore: { editTempTableName },\n      newPopup,\n      //@ts-ignore\n    }) => (position, tableName) => {\n      if (newPopup) {\n        return editTempTableName(tableName)\n      }\n      return editTable(position, tableName, storeName)\n    },\n    // Показываем или input или блок с названием\n    //@ts-ignore\n    handleShowInput: ({ setShowInput }) => () => setShowInput(n => !n),\n    // При фокусе выбираем весь текст в инпуте сразу\n    //@ts-ignore\n    handleFocus: () => e => e.target.select(),\n    // Переводим на нужный язык value в инпуте при фокусе\n    handleTranslateName: ({ lexics: { getLexics } }) => (\n      //@ts-ignore\n      tableName => getLexics(tableName) || tableName\n    ),\n  }),\n  observer,\n)\nexport const EditTableName = EditTableNameComposed(EditTableNameComponent)\n","import React, { Fragment } from 'react'\n\nimport cx from 'classnames'\nimport map from 'lodash/map'\nimport get from 'lodash/get'\nimport includes from 'lodash/includes'\n\nimport { T9n } from 'react-sport'\n\nimport { gearColumnsList } from 'config/teamPopupParams'\n\nimport { PopupItem } from 'features/GearPopup'\nimport { gearTableComposed } from './composed'\n\nimport { TComposeInner } from './types'\n\n/**\n * Компонент внутри попапа. Основной список чекбоксов\n */\nconst GearTableComponent = ({\n  ampluaId,\n  getCurrentGroupInfo,\n  isActive,\n  lastElemsInGear,\n  massCheck,\n}: TComposeInner) => (\n  <Fragment>\n    {map(gearColumnsList[ampluaId], ({ className, num }) => (\n      <div key={num} className={`popup-column-${className}`}>\n        <div className='popup-col-title' onClick={massCheck(num)}>\n          <T9n\n            className={cx(\n              'checkbox-label',\n              { 'checkbox-label_active': isActive(num) },\n            )}\n            t={get(getCurrentGroupInfo(num), 'groupName', '')}\n          />\n        </div>\n        <div className={`popup-column-${className}-table`}>\n          {map(\n            get(getCurrentGroupInfo(num), 'params'), param => (\n              <PopupItem\n                key={param.param_id}\n                last={includes(lastElemsInGear, param.param_id)}\n                param={param}\n              />\n            ),\n          )}\n        </div>\n      </div>\n    ))}\n  </Fragment>\n)\n\nexport const GearTable = gearTableComposed(GearTableComponent)\n","import { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers, withProps } from 'recompose'\nimport get from 'lodash/get'\nimport find from 'lodash/find'\nimport size from 'lodash/size'\nimport filter from 'lodash/filter'\n\nimport { lastElemsInGear } from 'config/teamPopupParams'\nimport { amplua } from 'config/amplua'\n\nimport {\n  TComposeInner,\n  TPropsOuter,\n  TWithPropsInner,\n  TWithPropsOuter,\n  TWithHandlersOuter1,\n  TWithHandlersInner1,\n  TWithHandlersOuter2,\n  TWithHandlersInner2,\n  TParam,\n} from './types'\n\nexport const gearTableComposed = compose<TComposeInner, TPropsOuter>(\n  inject('gearPopupStore'),\n  withProps<TWithPropsInner, TWithPropsOuter>(({ ampluaId }) => {\n    // Id последних параметров в подгруппе\n    const lastElemsIds = ampluaId === amplua.team\n      ? lastElemsInGear.team\n      : lastElemsInGear.rest\n\n    return {\n      lastElemsInGear: lastElemsIds,\n    }\n  }),\n  withHandlers<TWithHandlersOuter1, TWithHandlersInner1>({\n    getCurrentGroupInfo: ({ currentStore: { gearParams } }) => num =>\n      get(gearParams, num, {}),\n\n    getGroupTempSelected: ({ gearPopupStore: { tempSelected } }) => (\n      groupParams: Array<{}>,\n    ) =>\n      filter(\n        tempSelected,\n        ({ gear_group_id }) =>\n          gear_group_id === get(groupParams, '[0].gear_group_id'),\n      ),\n  }),\n  withHandlers<TWithHandlersOuter2, TWithHandlersInner2>({\n    /**\n     * Проверка активного класса для выбранного чекбокса заголовка групп параметров\n     * @param {array} tempSelected - массив выбранных параметров (не сохраненные в сторе)\n     */\n    isActive: ({\n      getCurrentGroupInfo,\n      getGroupTempSelected,\n    }) => (num) => {\n      const groupParams = get(getCurrentGroupInfo(num), 'params')\n\n      return size(getGroupTempSelected(groupParams)) === size(groupParams)\n    },\n    massCheck: ({\n      gearPopupStore: {\n        addToTempSelected,\n        removeFromTempSelected,\n        tempSelected,\n      },\n      getCurrentGroupInfo,\n      getGroupTempSelected,\n    }) => num => () => {\n      const groupParams: Array<TParam> = get(getCurrentGroupInfo(num), 'params')\n      // Если выбраны все чекбоксы в группе, то снимаем с каждого галочку\n      if (size(getGroupTempSelected(groupParams)) === size(groupParams)) {\n        groupParams.forEach((param) => {\n          removeFromTempSelected(param)\n        })\n        // Если нет, то выбираем все чекбоксы в группе\n      } else {\n        groupParams.forEach((param) => {\n          const {\n            gear_group_id,\n            param_id,\n            short_lexical_formula,\n          } = param\n\n          if (\n            find(tempSelected, {\n              gear_group_id,\n              param_id,\n              short_lexical_formula,\n            })\n          ) {\n            // Удаляем из временно выбранных, чтобы не было дублей\n            removeFromTempSelected(param)\n          }\n          addToTempSelected(param)\n        })\n      }\n    },\n  }),\n  observer,\n)\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport _assign from 'object-assign'\nimport invariant from 'fbjs/lib/invariant'\nimport isPlainObject from 'lodash/isPlainObject'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\nfunction shallowCopy(x) {\n  if (Array.isArray(x)) {\n    return x.concat()\n  } if (x && typeof x === 'object') {\n    return _assign(new x.constructor(), x)\n  }\n  return x\n}\n\nconst COMMAND_PUSH = '$push'\nconst COMMAND_UNSHIFT = '$unshift'\nconst COMMAND_SPLICE = '$splice'\nconst COMMAND_SET = '$set'\nconst COMMAND_MERGE = '$merge'\nconst COMMAND_APPLY = '$apply'\n\nconst ALL_COMMANDS_LIST = [\n  COMMAND_PUSH,\n  COMMAND_UNSHIFT,\n  COMMAND_SPLICE,\n  COMMAND_SET,\n  COMMAND_MERGE,\n  COMMAND_APPLY,\n]\n\nconst ALL_COMMANDS_SET = {}\n\nALL_COMMANDS_LIST.forEach((command) => {\n  ALL_COMMANDS_SET[command] = true\n})\n\nfunction invariantArrayCase(value, spec, command) {\n  invariant(\n    Array.isArray(value),\n    'update(): expected target of %s to be an array got %s.',\n    command,\n    value,\n  )\n  const specValue = spec[command]\n  invariant(\n    Array.isArray(specValue),\n    'update(): expected spec of %s to be an array got %s. '\n      + 'Did you forget to wrap your parameter in an array?',\n    command,\n    specValue,\n  )\n}\n\n/**\n * Returns a updated shallow copy of an object without mutating the original.\n * See https://facebook.github.io/react/docs/update.html for details.\n */\nfunction update(value, spec) {\n  invariant(\n    isPlainObject(spec),\n    'update(): You provided a key path to update() that did not contain one '\n      + 'of %s. Did you forget to include {%s: ...}?',\n    ALL_COMMANDS_LIST.join(', '),\n    COMMAND_SET,\n  )\n\n  if (hasOwnProperty.call(spec, COMMAND_SET)) {\n    invariant(\n      Object.keys(spec).length === 1,\n      'Cannot have more than one key in an object with %s',\n      COMMAND_SET,\n    )\n\n    return spec[COMMAND_SET]\n  }\n\n  let nextValue = shallowCopy(value)\n\n  if (hasOwnProperty.call(spec, COMMAND_MERGE)) {\n    const mergeObj = spec[COMMAND_MERGE]\n    invariant(\n      mergeObj && typeof mergeObj === 'object',\n      \"update(): %s expects a spec of type 'object' got %s\",\n      COMMAND_MERGE,\n      mergeObj,\n    )\n    invariant(\n      nextValue && typeof nextValue === 'object',\n      \"update(): %s expects a target of type 'object' got %s\",\n      COMMAND_MERGE,\n      nextValue,\n    )\n    _assign(nextValue, spec[COMMAND_MERGE])\n  }\n\n  if (hasOwnProperty.call(spec, COMMAND_PUSH)) {\n    invariantArrayCase(value, spec, COMMAND_PUSH)\n    spec[COMMAND_PUSH].forEach((item) => {\n      nextValue.push(item)\n    })\n  }\n\n  if (hasOwnProperty.call(spec, COMMAND_UNSHIFT)) {\n    invariantArrayCase(value, spec, COMMAND_UNSHIFT)\n    spec[COMMAND_UNSHIFT].forEach((item) => {\n      nextValue.unshift(item)\n    })\n  }\n\n  if (hasOwnProperty.call(spec, COMMAND_SPLICE)) {\n    invariant(\n      Array.isArray(value),\n      'Expected %s target to be an array got %s',\n      COMMAND_SPLICE,\n      value,\n    )\n    invariant(\n      Array.isArray(spec[COMMAND_SPLICE]),\n      'update(): expected spec of %s to be an array of arrays got %s. '\n        + 'Did you forget to wrap your parameters in an array?',\n      COMMAND_SPLICE,\n      spec[COMMAND_SPLICE],\n    )\n    spec[COMMAND_SPLICE].forEach((args) => {\n      invariant(\n        Array.isArray(args),\n        'update(): expected spec of %s to be an array of arrays got %s. '\n          + 'Did you forget to wrap your parameters in an array?',\n        COMMAND_SPLICE,\n        spec[COMMAND_SPLICE],\n      )\n      nextValue.splice(...args)\n    })\n  }\n\n  if (hasOwnProperty.call(spec, COMMAND_APPLY)) {\n    invariant(\n      typeof spec[COMMAND_APPLY] === 'function',\n      'update(): expected spec of %s to be a function got %s.',\n      COMMAND_APPLY,\n      spec[COMMAND_APPLY],\n    )\n    nextValue = spec[COMMAND_APPLY](nextValue)\n  }\n\n  for (const k in spec) {\n    if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {\n      nextValue[k] = update(value[k], spec[k])\n    }\n  }\n\n  return nextValue\n}\n\nexport default update\n","import React from 'react'\nimport { DragSource, DropTarget } from 'react-dnd'\nimport { compose, pure, withHandlers } from 'recompose'\nimport { findDOMNode } from 'react-dom'\n\nimport { T9n } from 'react-sport'\n\nimport {\n  THover,\n  TTargetProps,\n  TMonitor,\n  TComposedInner,\n  TPropsOuter,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n  TConnectDropTarget,\n  TConnectDragSource,\n  TMonitorDragSource,\n} from './types'\n\nconst cardSource = {\n  beginDrag({ id, index }: { id: number | string, index: number }) {\n    return { id, index }\n  },\n}\n\nconst cardTarget: THover = {\n  hover(\n    props: TTargetProps,\n    monitor: TMonitor,\n    component: React.ReactNode,\n  ): number | boolean {\n    // Это будущий индекс той карточки, которую перетягиваем\n    const dragIndex = monitor.getItem().index\n    // Это индекс той карточки, над которой находимся\n    const hoverIndex = props.index\n\n    // Если карточка находится над самой собой (над бывшим своим расположением),\n    // то ничего не высчитываем\n    if (dragIndex === hoverIndex) return false\n\n    const hoverBoundingRect: { bottom: number, top: number } = findDOMNode(\n      //@ts-ignore\n      component,\n    ).getBoundingClientRect()\n    const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\n    const clientOffset = monitor.getClientOffset()\n    const hoverClientY = clientOffset.y - hoverBoundingRect.top\n\n    // Меняем расположение карточек, только если перетаскиваемая пересекла половину следующей\n    if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) return false\n    if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) return false\n    // Меняем расположение карточек\n    props.moveCard(dragIndex, hoverIndex)\n    monitor.getItem().index = hoverIndex\n    return monitor.getItem().index\n  },\n}\n\nconst DndItemComponent = ({\n  connectDragSource,\n  connectDropTarget,\n  isDragging,\n  item,\n  removeParam,\n}: TComposedInner) =>\n  connectDragSource(\n    connectDropTarget(\n      <li style={{ opacity: Number(!isDragging) }}>\n        <T9n t={item.full_lexical_formula} />\n        <span className='remover' onClick={removeParam(item)}>\n          &times;\n        </span>\n      </li>,\n    ),\n  )\n\nconst dndItemComposed = compose<TComposedInner, TPropsOuter>(\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    removeParam: ({ removeFromTempSelected }) => param => () => {\n      removeFromTempSelected(param)\n    },\n  }),\n  pure,\n\n  DropTarget(\n    'item',\n    //@ts-ignore\n    cardTarget,\n    (connect: TConnectDropTarget) => ({\n      connectDropTarget: connect.dropTarget(),\n    }),\n  ),\n\n  DragSource(\n    'item',\n    cardSource,\n    (connect: TConnectDragSource, monitor: TMonitorDragSource) => ({\n      connectDragSource: connect.dragSource(),\n      isDragging: monitor.isDragging(),\n    }),\n  ),\n)\n\nexport const DndItem = dndItemComposed(DndItemComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers } from 'recompose'\n\nimport map from 'lodash/map'\n\nimport { T9n } from 'react-sport'\n\nimport update from 'module/utils/update'\nimport { DndItem } from '../DndItem'\n\nimport {\n  TComposeInner,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n} from './types'\n\nexport const DndParamsComponent = ({\n  gearPopupStore: { removeFromTempSelected, tempSelected },\n  getId,\n  moveHandler,\n}: TComposeInner) => (\n  <div className='popup-col-inner'>\n    <div className='popup-col-title'>\n      <T9n t='boxscore_selected_params' />\n      <span className='found-param-counter'>\n        {tempSelected && tempSelected.length}\n      </span>\n    </div>\n    <div className='popup-col-comment' />\n    <div className='ul-checked-wrapper'>\n      <ul>\n        {map(tempSelected, (item, index) => (\n          <DndItem\n            index={index}\n            id={getId(item)}\n            key={getId(item)}\n            item={item}\n            removeFromTempSelected={removeFromTempSelected}\n            moveCard={moveHandler}\n          />\n        ))}\n      </ul>\n    </div>\n  </div>\n)\n\nexport const DndParamsComposed = compose<TComposeInner, {}>(\n  inject('gearPopupStore'),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    getId: () => ({\n      gear_group_id,\n      short_lexical_formula,\n    }) => `${short_lexical_formula}_${gear_group_id}`,\n\n    moveHandler: ({\n      gearPopupStore: { fillTempSelected, tempSelected },\n    }) => (dragIndex, hoverIndex) => {\n      // Заменяем обновленный (после перестановки) список карточек с параметрами в правом меню\n      const updatedTempParamsList = update(tempSelected, {\n        $splice: [[dragIndex, 1], [hoverIndex, 0, tempSelected[dragIndex]]],\n      })\n      fillTempSelected(updatedTempParamsList)\n    },\n  }),\n  observer,\n)\n\nexport const DndParams = DndParamsComposed(DndParamsComponent)\n","export default {\n  ace: 7788,\n  ace_1: 10585,\n  ace_for_lose: 7789,\n  ace_from_grid: 7791,\n  ace_with_touch: 7790,\n  advanced_zones: 4311,\n  alignment_mistake: 7795,\n  all_assistance: 8868,\n  all_attack_receptions: 8087,\n  all_attacks: 967,\n  all_blocks: 8551,\n  all_passes: 8552,\n  all_serve_receptions: 8554,\n  all_serves: 8555,\n  amplua_who_blocked: 10666,\n  amplua_who_is_attacking: 10656,\n  amplua_who_passed: 10646,\n  amplua_who_served: 10643,\n  assist: 7783,\n  attack: 223,\n  attack_direction: 10658,\n  attack_receive_in_zone: 8363,\n  attack_reception: 8550,\n  attack_reception_result: 10669,\n  attack_type: 10668,\n  attack_which_receipt: 8348,\n  attacks_from_zone: 8344,\n  attacks_on_amplua: 8580,\n  attacks_to_zone: 8345,\n  bad: 7765,\n  bad_pass: 7780,\n  ball_on_own_side: 8576,\n  basic_zones: 4310,\n  binding_player: 7779,\n  binding_player_attack: 8584,\n  block: 7804,\n  block_assists: 7766,\n  block_attempt: 10659,\n  block_earned_points: 8029,\n  block_out: 7774,\n  block_out_or_in_your_own_area: 7728,\n  block_played_by_striker: 7773,\n  block_property: 8343,\n  block_type: 10668,\n  blocked_players: 8351,\n  blocked_second_pass: 7772,\n  blocked_shot: 7731,\n  bottom_side: 7785,\n  bounced_back_from_the_block: 7750,\n  center_player: 7777,\n  center_player_amplua: 8672,\n  central_player_attack: 8583,\n  characteristic: 10596,\n  coasting: 8371,\n  combination: 8556,\n  cover: 10671,\n  cross: 7743,\n  deceptive_shot: 7748,\n  deep: 8374,\n  deep_serve: 7798,\n  defender_out: 7729,\n  dense: 8373,\n  diagonal_player: 7778,\n  diagonal_player_attack: 8582,\n  difference: 8370,\n  difference_of_attacks: 8341,\n  differences: 8361,\n  dig: 10670,\n  direction: 8882,\n  double_back: 8383,\n  double_front: 8384,\n  filter: 8385,\n  finishing_player_attack: 8581,\n  first_ball_attackers_home: 10657,\n  first_ball_attackers_opp: 10602,\n  foot_fault: 8711,\n  for_1_block: 7753,\n  for_2_blocks: 7754,\n  for_3_blocks: 7755,\n  four_hits: 10653,\n  free_shot: 7751,\n  from_zone: 8358,\n  good: 7764,\n  good_pass: 7781,\n  grid_touch: 7733,\n  half_power_shot: 7742,\n  libero: 7887,\n  line_overstep: 7771,\n  lose_point: 7730,\n  mistake: 737,\n  mistake_while_pass: 7782,\n  mistake_while_serve: 8360,\n  negative_reception: 7787,\n  net_touching: 10654,\n  no_value_attacks: 7735,\n  on_clean_grid: 7752,\n  on_court: 8353,\n  opponent: 422,\n  opponent_court: 7727,\n  opponent_finished: 8577,\n  opponent_side_play: 10663,\n  opponents_count: 8342,\n  opponents_out_shots: 7768,\n  organized: 7756,\n  other_body_side: 7803,\n  other_players: 8673,\n  outside_player: 7776,\n  part: 8684,\n  pass: 8750,\n  pass_direction: 10648,\n  pass_from: 8347,\n  pass_to: 8359,\n  pass_type: 10647,\n  pass_types: 8356,\n  pass_zone: 10649,\n  pipe: 7736,\n  pipe_5: 7737,\n  planned_attack: 8369,\n  planning: 7800,\n  position_1: 9862,\n  position_2: 9863,\n  position_3: 9864,\n  position_4: 9865,\n  position_5: 9866,\n  position_6: 9867,\n  positioning: 10591,\n  positive_reception: 7786,\n  power: 7799,\n  power_attack: 7747,\n  power_attack_1: 8368,\n  power_shot: 7741,\n  receive_type: 8375,\n  receiver_mistake: 7801,\n  result: 10584,\n  reverse_cross: 7744,\n  rise: 7739,\n  rise_over_head: 7738,\n  roll_forward: 7749,\n  run_forward: 7745,\n  serve: 7805,\n  serve_receive_zone: 8376,\n  serve_reception: 7807,\n  serve_type: 8367,\n  serving: 10518,\n  short: 8372,\n  short_serve: 7796,\n  shot_out: 7732,\n  simple: 7746,\n  soften: 8575,\n  softening: 9880,\n  splited: 7757,\n  step_over: 7734,\n  team: 8364,\n  technique_difference: 8378,\n  temp: 9884,\n  temp1: 8541,\n  temp2: 8542,\n  to_grid: 7792,\n  to_out: 7793,\n  to_whom: 8362,\n  to_zone: 8357,\n  top_side: 7784,\n  touched_grid_by_blocker: 7770,\n  tough: 7797,\n  type: 8366,\n  unforced_opponent_mistakes: 7769,\n  wave: 7740,\n  which_pass: 8346,\n  which_receipt: 8380,\n  while_falling: 7802,\n  who_attacked: 8350,\n  who_attacking: 8351,\n  who_blocked: 8831,\n  who_blocking: 8349,\n  who_else_on_court: 8354,\n  who_gave_pass: 8832,\n  who_is_attacking: 10655,\n  who_is_blocking: 10665,\n  who_is_passing: 10645,\n  who_is_serving: 10642,\n  who_received: 8579,\n  who_received_amplua: 8578,\n  who_served: 8377,\n  who_served_list: 8833,\n  with_block_touching: 10650,\n  with_blocker_touching: 10651,\n  with_step_out: 7794,\n  without_zone: 4312,\n  won_point: 7726,\n  zero_attack: 10644,\n  zero_block: 8574,\n  zero_block_1: 10664,\n  zero_serve: 10785,\n  zone: 966,\n  zone_1: 7758,\n  zone_2: 7759,\n  zone_3: 7760,\n  zone_4: 7761,\n  zone_5: 7762,\n  zone_6: 7763,\n}\n","export default {\n  //лексика для формы авторизации\n  contact_us: 2497, //Свяжитесь с нами любым удобным вам способом, и мы вам поможем.\n  enter_email: 2498, //Введите ваш e-mail\n  enter_pass: 902, //Введите пароль для входа\n  force_aware: 655, //Кнопка все равно войти разлогинит другого пользователя...\n  force_submit: 553, //Все равно войти\n  force_text: 640, //Извините, вы уже вошли\n  log_in: 554,\n  problems_with_sign_in: 2501, //Проблемы со входом?\n  server_error: 952, //Нет связи с сервером\n  sign_in: 2500, //Войти\n  sign_in_pro: 4308, //Войти в pro версию\n  try_instat: 1493, //I want to try InStat,\n  wrong_sign_in: 712, //Wrong email or password\n}\n","export default {\n  //tabs\n  tabs_matches: 682, //Матчи\n  //heder\n  header_my_video: 688, //мои видео\n  header_my_profile: 690, //мой профиль\n  header_quit: 1924, //выход\n  header_team: 658, //Команда\n  header_nationality: 583, //Национальность\n  header_league: 675, //Лига\n  header_team_level: 855, //Уровень команды\n  header_age: 542, //Возраст\n  header_contract: 665, //Контракт\n  header_bodyPart: 3994, //Рука\n  header_position: 768, //позиция\n  header_goals: 2932, //очки\n  header_skills: 811, //навыки\n  header_instat_index: 113, //InStat Index\n  header_statistics: 1587, //Статистика\n  header_playlists: 2544,\n  header_shared_episodes: 3949,\n  f_goals: 3173,\n\n  //match select\n  match_show_opponent: 3376, //показать статистику соперника\n  average_for_match_opp: 2787, //Среднее для команд оппонентов\n  total: 416, // всего\n  home: 6609,\n  visitors: 6610,\n\n  //Cтатистика в шапке\n  total_attack_eff: 8025, //Реализация атак, %\n  attack_points: 7926, //Выполненные задачи\n  positive_def_receiption: 8095, //Позит. прием в защите, %\n  positive_serve_receiptions: 7957, //Ошибки\n  setting_assist: 8068, //Ассисты на передачах\n  setting_assist_percents: 8640, //Ассисты на передачах, %\n  good_bad_sets: 8539, //Плохие/Хорошие передачи\n  block_touch_for_own_rally: 8054, //Смягчения на блоке, %\n  positive_receiption: 8104, //Позитивный прием, %\n\n  //параметры таблиц матчей\n  ////дефолтные параметры\n  // params_matches_minutes: 4361, //- Минуты\n  params_matches_points: 3558, //- Набранные очки\n  params_matches_rebounds: 3570, // Подбор\n  params_matches_assist: 3174, // - Голевая передача\n  params_matches_steals: 3564, // = перехват\n  params_matches_turnover: 3565,\n  average_for_match: 426, //В среднем за матч\n  average_for_90: 1238,\n  //группы параметров\n  group_param_picking_up: 412, //подборы\n  group_param_boxscore: 2929, //протокол\n  group_param_combinations_and_iso: 3602, //комбинации и изоляции\n  group_param_shots_types: 4120, //типы бросков\n  group_param_add_data: 3604, //дополнительные показатели\n\n  //амплуа\n  amplua_center_short: 4809,\n  amplua_pforward_short: 4003,\n  amplua_lforward_short: 4002,\n  amplua_sguard_short: 4807,\n  amplua_pguard_short: 4808,\n\n  //Параметры в шапке\n  header_field_goals_percent: 5237,\n  header_3pt_shots_percent: 5238,\n  header_free_throws_percent: 5239,\n\n  //параметры\n  header_card_age: 542, //возраст\n  header_card_birth_data: 1045, //дата рождения\n  stat_year: 673, //лет\n  stat_sm: 817, //см\n  stat_foot: 6488, //футы\n  stat_pound: 6511, //фунты\n  stat_kg: 652, //кг\n  tp_stat_height_sm: 1563, //рост см\n  tp_stat_height_foot: 6509, //рост футы\n  tp_stat_weght_lbs: 6510, // вес фунты\n  tp_stat_weght_kg: 1564, // вес кг\n\n  //match select\n  match_select_3: 777, // последние 3\n  match_select_5: 778, // последние 5\n  match_select_10: 2471, // последние 10\n  match_select_all_season: 4805, //все матчи текущего сезона\n  match_select_this_year: 4806, //все матчи этого года\n  match_selected: 5638, // выбрано матчей\n  match_select_this_season: 2511, // текущий сезон\n\n  //tables Boxscore\n  boxscore_selected_params: 5639, // выбранные параметры\n  boxscore_sec_before: 4779, //сек до\n  boxscore_sec_after: 4780, //сек после\n  boxscore_all_range: 4781, //показать все владения\n  boxscore_setting_all_ep: 5640, //настройка показа всех эпизодов\n  boxscore_protocol: 3605, // протокол\n  boxscore_efficiency: 5229, // Показатели эффективности\n  boxscore_combinations: 5233, // комбинации\n  boxscore_with_fouls: 5252, // с учетом фолов\n  boxscore_deff_combine: 5234, // защита против комбинаций\n  boxscore_date: 473, // дата\n  boxscore_main_statistics: 4269,\n  boxscore_pass: 3180,\n  boxscore_challenges: 3187,\n  boxscore_lost: 6265,\n  boxscore_press: 5478,\n\n  //shoots map\n  shoots_goals_opponent: 7484, //броски соперника\n  shoots_goals: 3559, //Свои броски\n  shoots_without_zones: 4312, //без зон\n  shoots_basic_zones: 4310, //основные\n  shoots_extend_zones: 4311, //основные\n  shoots_2x_goals: 3560, //2х очковые\n  shoots_3x_goals: 3561, //3х очковые\n  shoots_opened: 5208, //Открытый\n  shoots_closed: 5209, //закрытый\n\n  //match popup\n  table_popup_dnd_info: 5725, //Drag params up or down to reorder\n  match_popup_full_game: 1295, // полный матч\n  match_popup_ball_in_play: 2489, // Мяч в игре\n  match_popup_all_time_player: 9477, //Все игровое время\n  match_popup_rifling_attack: 9577, // все розыгрыши с игроком\n  match_popup_rifling_defense: 2947, //Время в атаке\n}\n","export default {\n  //амплуа\n  amplua_center_short: 4809,\n  amplua_pforward_short: 4003,\n  amplua_lforward_short: 4002,\n  amplua_sguard_short: 4807,\n  amplua_pguard_short: 4808,\n  //heder\n  header_playlists: 2544,\n  header_shared_episodes: 3949,\n\n  show_photo: 7507, // Показать фото игрока\n\n  //Табы основные\n  matches_table: 682, // Матчи\n  players_table: 9457, //Игроки\n\n  //match select\n  match_select_3: 777, // последние 3\n  match_select_5: 778, // последние 5\n  match_select_10: 2471, // последние 10\n  match_select_all_season: 4805, //все матчи текущего сезона\n  match_select_this_year: 4806, //все матчи этого года\n  match_selected: 5638, // выбрано матчей\n  match_select_this_season: 2511, // текущий сезон\n  match_show_opponent: 3376, //показать статистику соперника\n  match_show_all_teams: 2867, //показать статистику команд\n  average_for_match: 426, //В среднем за матч\n  average_for_match_opp: 2787, //Среднее для команд оппонентов\n  total: 416, // всего\n  home: 6609,\n  visitors: 6610,\n\n  team_leaders: 449,\n\n  //stats\n  439: 439, //Голы забитые\n  441: 441, //голы пропущенные\n  3178: 3178, //удары\n  1327: 1327, //Удары соперника\n  92: 92, //Владения мячом\n  594: 594, // Единоборства, %\n  755: 755, // Передачи %\n  653: 653, //Ключевые передачи\n\n  total_attack_eff: 8025, // Реализация атаки, %\n  total_attack_points: 7962, //Очки в атаке\n  positive_serve_receiptions: 7957, //Позитивный прием подач, %\n\n  //tables Boxscore\n  boxscore_selected_params: 5639, // выбранные параметры\n  boxscore_sec_before: 4779, //сек до\n  boxscore_sec_after: 4780, //сек после\n  boxscore_all_range: 4781, //показать все владения\n  boxscore_setting_all_ep: 5640, //настройка показа всех эпизодов\n  boxscore_protocol: 3605, // протокол\n  boxscore_efficiency: 5229, // Показатели эффективности\n  boxscore_combinations: 5233, // комбинации\n  boxscore_with_fouls: 5252, // с учетом фолов\n  boxscore_deff_combine: 5234, // защита против комбинаций\n  boxscore_date: 473, // дата\n  boxscore_on_average: 1247, //среднее значение\n  boxscore_main_statistics: 4269, // протокол\n  boxscore_pass: 3180, // протокол\n  boxscore_challenges: 3187,\n  boxscore_lost: 6265,\n  boxscore_press: 5478,\n  boxscore_attack: 4092,\n  boxscore_flangs: 1992,\n  boxscore_type_attack: 6274,\n\n  //shoots map\n  shoots_goals_opponent: 7484, //броски соперника\n  shoots_goals: 3559, //Свои броски\n  shoots_without_zones: 4312, //без зон\n  shoots_basic_zones: 4310, //основные\n  shoots_extend_zones: 4311, //основные\n  shoots_2x_goals: 3560, //2х очковые\n  shoots_3x_goals: 3561, //3х очковые\n  average_assists: 3563,\n  shoots: 6416,\n  shoots_opponent: 1327,\n  shoots_gate: 6038,\n  shoots_field: 6612,\n  shoots_opened: 5208, //Открытый\n  shoots_closed: 5209, //закрытый\n  tabs_matches: 682, //матчи\n  tabs_players: 637, // игроки\n  tabs_lineups: 6175, // лайнапы\n\n  //match popup\n  table_popup_dnd_info: 5725, //Drag params up or down to reorder\n  match_popup_full_game: 1295, //полный матч\n  match_popup_ball_in_play: 2489, //Ball in play\n  match_popup_all_time_player: 5225, //Все игровое время\n  match_popup_rifling_attack: 2946, //Время в атаке\n  match_popup_rifling_defense: 2947, //Время в защите\n}\n","export default {\n  //амплуа\n  amplua_center_short: 4809,\n  amplua_pforward_short: 4003,\n  amplua_lforward_short: 4002,\n  amplua_sguard_short: 4807,\n  amplua_pguard_short: 4808,\n  //heder\n  header_playlists: 2544,\n  header_shared_episodes: 3949,\n\n  //Табы в виджетах\n  matches_table: 682, // Матчи\n  players_table: 9457, //Игроки\n  match: 9680, //Матч\n  teams_statistic: 2, // Статистика команд\n\n  //match select\n  match_select_3: 777, // последние 3\n  match_select_5: 778, // последние 5\n  match_select_10: 2471, // последние 10\n  match_select_all_season: 4805, //все матчи текущего сезона\n  match_select_this_year: 4806, //все матчи этого года\n  match_selected: 5638, // выбрано матчей\n  match_select_this_season: 2511, // текущий сезон\n  match_show_opponent: 3376, //показать статистику соперника\n  average_for_match: 426, //В среднем за матч\n  average_for_match_opp: 2787, //Среднее для команд оппонентов\n  total: 416, // всего\n  home: 6609,\n  visitors: 6610,\n\n  team_leaders: 449,\n\n  //stats\n  439: 439, //Голы забитые\n  441: 441, //голы пропущенные\n  3178: 3178, //удары\n  1327: 1327, //Удары соперника\n  92: 92, //Владения мячом\n  594: 594, // Единоборства, %\n  755: 755, // Передачи %\n  653: 653, //Ключевые передачи\n\n  total_attack_eff: 8025, // Реализация атаки, %\n  total_attack_points: 7962, //Очки в атаке\n  positive_serve_receiptions: 7957, //Позитивный прием подач, %\n\n  //tables Boxscore\n  boxscore_selected_params: 5639, // выбранные параметры\n  boxscore_sec_before: 4779, //сек до\n  boxscore_sec_after: 4780, //сек после\n  boxscore_all_range: 4781, //показать все владения\n  boxscore_setting_all_ep: 5640, //настройка показа всех эпизодов\n  boxscore_protocol: 3605, // протокол\n  boxscore_efficiency: 5229, // Показатели эффективности\n  boxscore_combinations: 5233, // комбинации\n  boxscore_with_fouls: 5252, // с учетом фолов\n  boxscore_deff_combine: 5234, // защита против комбинаций\n  boxscore_date: 473, // дата\n  boxscore_on_average: 1247, //среднее значение\n  boxscore_main_statistics: 4269, // протокол\n  boxscore_pass: 3180, // протокол\n  boxscore_challenges: 3187,\n  boxscore_lost: 6265,\n  boxscore_press: 5478,\n  boxscore_attack: 4092,\n  boxscore_flangs: 1992,\n  boxscore_type_attack: 6274,\n\n  //shoots map\n  shoots_goals_opponent: 7484, //броски соперника\n  shoots_goals: 3559, //Свои броски\n  shoots_without_zones: 4312, //без зон\n  shoots_basic_zones: 4310, //основные\n  shoots_extend_zones: 4311, //основные\n  shoots_2x_goals: 3560, //2х очковые\n  shoots_3x_goals: 3561, //3х очковые\n  average_assists: 3563,\n  shoots: 6416,\n  shoots_opponent: 1327,\n  shoots_gate: 6038,\n  shoots_field: 6612,\n  shoots_opened: 5208, //Открытый\n  shoots_closed: 5209, //закрытый\n  tabs_matches: 682, //матчи\n  tabs_players: 637, // игроки\n  tabs_lineups: 6175, // лайнапы\n\n  //match popup\n  table_popup_dnd_info: 5725, //Drag params up or down to reorder\n  match_popup_full_game: 1295, //полный матч\n  match_popup_ball_in_play: 2489, //Ball in play\n  match_popup_all_time_player: 5225, //Все игровое время\n  match_popup_rifling_attack: 2946, //Время в атаке\n  match_popup_rifling_defense: 2947, //Время в защите\n}\n","export default {\n  tooltip_fault: 8532,\n  tooltip_opponent_side_receive: 8649,\n  tooltip_positive_receive: 7786,\n  tooltip_handled_by_attacker: 7773,\n  tooltip_ace: 7789,\n  tooltip_ace_player: 7790,\n  tooltip_ace_from_grid: 7791,\n  tooltip_arrangement_mistake_receive: 7795,\n  tooltip_arrangement_mistake: 8650,\n  tooltip_good_pass: 7781,\n  tooltip_bad_pass: 7780,\n  tooltip_point_area: 8652,\n  tooltip_lost_point: 7732,\n  tooltip_lost_point_out: 7774,\n  tooltip_lost_point_block: 8654,\n  tooltip_point_block: 7728,\n  tooltip_useless_opponent_attack: 8577,\n  tooltip_lost_point_overstep: 7771,\n  tooltip_point_deffender: 7729,\n  tooltip_own_useless_attack: 8653,\n  tooltip_lost_point_grid: 8655,\n  tooltip_lost_point_grid_touch: 7733,\n  tooltip_block_area: 8656,\n  tooltip_useless_block_softed: 8575,\n  tooltip_lost_point_second_pass: 7772,\n  tooltip_lost_point_attack: 8660,\n  tooltip_useless_opponent_block: 8657,\n  tooltip_out_lost_point: 8659,\n  tooltip_overstep_lost_point: 8658,\n  tooltip_grid_lost_point: 7770,\n  tooltip_serve_fault: 8709,\n  tooltip_serve_another_fault: 8710,\n}\n","export default {\n  // Полное название параметра\n  // TODO Дописать недостающие ключи на англ. + комментарии\n  main_statisctic: 8479,\n  total_points_won: 8668,\n  attack_points: 7926,\n  attack_realisation: 8025,\n  block_points: 8029,\n  aces: 7788,\n  back_row_attack_eff: 9472,\n  block_touch_for_own_rally: 8054,\n  positive_attack_receiption: 7957,\n  positive_defence_receiption: 8095,\n  all_mistakes: 8600,\n  attack_mistakes: 7963,\n  block_mistakes: 8031,\n  serve_mistakes: 7890,\n  attack_receiption_mistakes: 7943,\n  defence_receiption_mistakes: 8090,\n  receive_mistakes: 8102,\n  block_assists: 7766,\n  pass_assist: 8068,\n  pass_assist_percents: 8640,\n  plus_minus_title: 8669,\n  plus_minus: 8669,\n  attack_play: 8529,\n  attacks: 967,\n  attack_points_percents: 8617,\n  attack_mistakes_percents: 8617,\n  blocked_attacks: 8728,\n  blocked_attacks_percents: 8617,\n  first_serve_attacks: 8729,\n  first_serve_attacks_points: 7962,\n  first_serve_attacks_points_percents: 8617,\n  first_serve_attacks_mistakes: 7963,\n  first_serve_attacks_mistakes_percents: 8617,\n  first_serve_attacks_blocked: 8728,\n  first_serve_attacks_blocked_percents: 8617,\n  positive_receiption_attacks: 8756,\n  positive_receiption_attacks_points: 7962,\n  positive_receiption_attacks_points_percents: 8617,\n  positive_receiption_attacks_mistakes: 7963,\n  positive_receiption_attacks_mistakes_percents: 8617,\n  positive_receiption_attacks_blocked: 8728,\n  positive_receiption_attacks_blocked_percents: 8617,\n  first_line_attacks: 7970,\n  first_line_attacks_points: 7962,\n  first_line_attacks_points_percents: 8617,\n  first_line_attacks_mistakes: 7963,\n  first_line_attacks_mistakes_percents: 8617,\n  first_line_attacks_blocked: 8728,\n  first_line_attacks_blocked_percents: 8617,\n  negative_receiption_attacks: 7990,\n  negative_receiption_attacks_points: 7962,\n  negative_receiption_attacks_points_percents: 8617,\n  negative_receiption_attacks_mistakes: 7963,\n  negative_receiption_attacks_mistakes_percents: 8617,\n  negative_receiption_attacks_blocked: 8728,\n  negative_receiption_attacks_blocked_percents: 8617,\n  back_line_attacks: 7965,\n  back_line_attacks_points: 7962,\n  back_line_attacks_points_percents: 8617,\n  back_line_attacks_mistakes: 7963,\n  back_line_attacks_mistakes_percents: 8617,\n  back_line_attacks_blocked: 8728,\n  back_line_attacks_blocked_percents: 8617,\n  serves: 8513,\n  all_serves: 7888,\n  negative_receiption_serves: 7897,\n  positive_receiption_serves: 7909,\n  force_serves: 7895,\n  force_serves_eff: 7929,\n  planned_serves: 7893,\n  planned_serves_eff: 7928,\n  serve_play: 8523,\n  serves_receiption: 7807,\n  negative_serves_receiption: 7945,\n  positive_serves_receiption: 7944,\n  defence_serve: 8087,\n  positive_defence_serve: 8488,\n  negative_defence_serve: 8553,\n  block_play: 8501,\n  all_blocks: 8028,\n  passes: 8847,\n  all_passes: 8804,\n  assists: 8605,\n  assists_mistakes: 8651,\n  positive_passes: 8063,\n  negative_passes: 8062,\n  to_back_line_passes: 8824,\n  to_first_line_passes: 8825,\n  rallies_won: 9469,\n  points_difference: 9773,\n}\n","export default {\n  // Короткое название параметра\n  // TODO переписать ключи на названия на англ.\n  8731: 8731,\n  8140: 8140,\n  8204: 8204,\n  8732: 8732,\n  7892: 7892,\n  8128: 8128,\n  8272: 8272,\n  8733: 8733,\n  8141: 8141,\n  8208: 8208,\n  7891: 7891,\n  8123: 8123,\n  8268: 8268,\n  8281: 8281,\n  8830: 8830,\n  8246: 8246,\n  8634: 8634,\n  8734: 8734,\n  8735: 8735,\n  8736: 8736,\n  8737: 8737,\n  8738: 8738,\n  8739: 8739,\n  8740: 8740,\n  8741: 8741,\n  8742: 8742,\n  8743: 8743,\n  8744: 8744,\n  8201: 8201,\n  8745: 8745,\n  8746: 8746,\n  8730: 8730,\n  8747: 8747,\n  8751: 8751,\n  8752: 8752,\n  8753: 8753,\n  8754: 8754,\n  8755: 8755,\n  8757: 8757,\n  8758: 8758,\n  8759: 8759,\n  8760: 8760,\n  8761: 8761,\n  8762: 8762,\n  8763: 8763,\n  8764: 8764,\n  8765: 8765,\n  8766: 8766,\n  8767: 8767,\n  8768: 8768,\n  8769: 8769,\n  8770: 8770,\n  8771: 8771,\n  8772: 8772,\n  8773: 8773,\n  8774: 8774,\n  8775: 8775,\n  8776: 8776,\n  8777: 8777,\n  8778: 8778,\n  8779: 8779,\n  8780: 8780,\n  8781: 8781,\n  8782: 8782,\n  8783: 8783,\n  8784: 8784,\n  8785: 8785,\n  8787: 8787,\n  8788: 8788,\n  8789: 8789,\n  8790: 8790,\n  8791: 8791,\n  8792: 8792,\n  8793: 8793,\n  8794: 8794,\n  7896: 7896,\n  7920: 7920,\n  8117: 8117,\n  7894: 7894,\n  7912: 7912,\n  8109: 8109,\n  8120: 8120,\n  8795: 8795,\n  8796: 8796,\n  8124: 8124,\n  8135: 8135,\n  8797: 8797,\n  8136: 8136,\n  8265: 8265,\n  8273: 8273,\n  8798: 8798,\n  8799: 8799,\n  8271: 8271,\n  8209: 8209,\n  8800: 8800,\n  8801: 8801,\n  8802: 8802,\n  8803: 8803,\n  8805: 8805,\n  8239: 8239,\n  8241: 8241,\n  8240: 8240,\n  8807: 8807,\n  8809: 8809,\n  8811: 8811,\n  8820: 8820,\n  8821: 8821,\n  8813: 8813,\n  8814: 8814,\n  8822: 8822,\n  8815: 8815,\n  8816: 8816,\n  8823: 8823,\n  8817: 8817,\n  8247: 8247,\n  8826: 8826,\n  8827: 8827,\n  8251: 8251,\n  8828: 8828,\n  8829: 8829,\n  9774: 9774,\n}\n","export default {\n  8724: 8724,\n  8725: 8725,\n  8617: 8617,\n  8726: 8726,\n  8727: 8727,\n  8053: 8053,\n  8806: 8806,\n  8808: 8808,\n  8810: 8810,\n  8812: 8812,\n  8814: 8814,\n  8816: 8816,\n  8818: 8818,\n  8819: 8819,\n  8952: 8952,\n  9006: 9006,\n  8954: 8954,\n  9007: 9007,\n  8487: 8487,\n  8022: 8022,\n  8496: 8496,\n  8956: 8956,\n  8957: 8957,\n  8958: 8958,\n  8959: 8959,\n  8960: 8960,\n  8961: 8961,\n  8962: 8962,\n  8963: 8963,\n  8964: 8964,\n  8965: 8965,\n  8966: 8966,\n  8967: 8967,\n  8968: 8968,\n  8969: 8969,\n  8970: 8970,\n  8971: 8971,\n  8972: 8972,\n  8973: 8973,\n  8974: 8974,\n  8975: 8975,\n  8976: 8976,\n  8977: 8977,\n  8978: 8978,\n  8979: 8979,\n  8980: 8980,\n  8981: 8981,\n  8982: 8982,\n  8983: 8983,\n  8984: 8984,\n  8985: 8985,\n  7933: 7933,\n  8543: 8543,\n  8986: 8986,\n  8987: 8987,\n  8988: 8988,\n  8989: 8989,\n  7917: 7917,\n  7911: 7911,\n  7958: 7958,\n  8992: 8992,\n  8993: 8993,\n  8096: 8096,\n  8995: 8995,\n  8994: 8994,\n  8059: 8059,\n  8058: 8058,\n  8054: 8054,\n  8662: 8662,\n  8996: 8996,\n  8997: 8997,\n  8998: 8998,\n  8999: 8999,\n  9000: 9000,\n  9001: 9001,\n  9002: 9002,\n  9003: 9003,\n  9004: 9004,\n  9005: 9005,\n  9473: 9473,\n  9470: 9470,\n  8859: 8859,\n}\n","export default {\n  video_cuts: 2862,\n  offensive: 8834,\n  deffensive: 8858,\n  cuts_favorite_play_list: 3397, //Плейлист команды\n  cuts_positional_atack: 5265, //позиционное нападение\n  cuts_free_throws: 3562, //штрафные броски\n  cuts_blocks: 3566, //блокшоты\n  cuts_fouls: 5021, //фолы\n  cuts_fouls_drawn: 5266, //фолы на нем\n  cuts_video_summary: 2862, //видео нарезки\n  cuts_off_actions: 2946, //действия в атаке\n  cuts_deff_actions: 5248, //действия в обороне\n  cuts_partner: 5988, // партнеры\n  cuts_opponent: 1024, //оппоненты\n  group_param_add_data: 3604, //дополнительные показатели\n}\n","import filtersLexic from './filters'\nimport loginLexic from './login'\nimport playerLexic from './player'\nimport teamLexic from './team'\nimport matchLexic from './match'\nimport markersLexic from './markers'\nimport tableParamsLexic from './tableParams'\nimport tableParamsLexicShort from './tableParamsShort'\nimport tableParamsNumLexic from './tableParamsNum'\nimport videoCutsLexic from './videoCuts'\n\nconst indexLexic = {\n  video_actions: 588,\n  video_select_all_actions: 6938,\n  video_select_partner: 6840,\n  video_select_opponent: 6841,\n  video_reload: 6939,\n  video_reset_filters: 6593,\n  //header\n  enter_team_or_player: 6575, //введите имя команды или игрока\n  header_my_video: 688, //мои видео\n  header_my_profile: 690, //мой профиль\n  header_recently_visited: 7698, // Посещенные страницы\n  header_quit: 1924, //выход\n  header_team: 658, //Команда\n  header_nationality: 583, //Национальность\n  header_league: 675, //Лига\n  header_team_level: 855, //Уровень команды\n  header_age: 542, //Возраст\n  header_contract: 665, //Контракт\n  header_bodyPart: 3994, //Рука\n  header_position: 768, //позиция\n  header_goals: 55, //очки\n  header_skills: 811, //навыки\n  header_instat_index: 113, //InStat Index\n  header_statistics: 1587, //Статистика\n  header_my_players: 689,\n  header_invite_players: 1491,\n  header_comments: 1285,\n  header_flag_search: 2919,\n  header_playlists: 2638,\n  header_shared_episodes: 3949,\n  header_online_translation: 3518,\n  header_men: 6492, //мужчины\n  header_women: 6491, //женщины\n  boxscore_play_video: 6487, //воспроизвести видео\n  //duration settings\n  episodes_duration: 6227,\n  user_settings_duration: 6229,\n  default_settings_duration: 6228,\n  boxscore_popup_subtitle: 6583,\n\n  //play types\n  Playtype: 4167,\n  Isolations: 4181,\n  Transition: 5905,\n  Pick_n_rolls_handler: 6136,\n  Post_up: 4186,\n  Cuts: 4093,\n  Catch_and_shoot: 6428,\n  Put_back: 5215,\n  Catch_and_drive: 6429,\n  Pickn_Pop: 5918,\n  Hand_offs: 4188,\n  Screens: 4184,\n  Miscellaneous: 7153,\n  Pick_n_rolls_roller: 6135,\n\n  //параметры таблиц матчей\n  ////дефолтные параметры\n  reset_tables: 6945,\n  new_table: '5720', // Передаем специально в виде строки\n\n  // table names\n  main_statistics: 4269,\n  passes_table: 7037,\n  passes_table_gk: 3180,\n  shots_table: 3178,\n  shots_table_gk: 1327,\n  challenges: 251,\n  add_table: 6943,\n  remove_table: 6944,\n  move_table_down: 6947,\n  move_table_up: 6946,\n  downloadXLS: 3148,\n  downloadPDF: 3147,\n  vertical_view: 8687, // Вертикальный вид\n  horizontal_view: 8688, // Горизонтальный вид\n\n  params_matches_points: 3558, //- Набранные очки\n  params_matches_rebounds: 3570, // Подбор\n  params_matches_assist: 3174, // - Голевая передача\n  params_matches_steals: 3564, // = перехват\n  params_matches_turnover: 3565, //- Потеря\n  //\n  average_for_match: 426, //В среднем за матч\n  average_for_90: 1238,\n\n  //группы параметров\n  group_param_picking_up: 412, //подборы\n  group_param_boxscore: 2929, //протокол\n  group_param_combinations_and_iso: 3602, //комбинации и изоляции\n  group_param_shots_types: 4120, //типы бросков\n  group_param_add_data: 3604, //дополнительные показатели\n\n  //амплуа\n  amplua_center_short: 4809,\n  amplua_pforward_short: 4003,\n  amplua_lforward_short: 4002,\n  amplua_sguard_short: 4807,\n  amplua_pguard_short: 4808,\n\n  //Параметры в шапке\n  header_field_goals_percent: 5237,\n  header_3pt_shots_percent: 5238,\n  header_free_throws_percent: 5239,\n\n  //параметры\n  stat_year: 673, //лет\n  stat_sm: 817, //см\n  stat_kg: 652, //кг\n\n  //match select\n  match_select_3: 777, // последние 3\n  match_select_5: 778, // последние 5\n  match_select_10: 2471, // последние 10\n  match_select_all_season: 4805, //все матчи текущего сезона\n  match_select_this_year: 4806, //все матчи этого года\n  match_selected: 5638, // выбрано матчей\n  match_select_this_season: 2511, // текущий сезон\n\n  //tables Boxscore\n  boxscore_selected_params: 5639, // выбранные параметры\n  boxscore_sec_before: 4779, //сек до\n  boxscore_sec_after: 4780, //сек после\n  boxscore_all_range: 4781, //показать все владения\n  boxscore_setting_all_ep: 5640, //настройка показа всех эпизодов\n  boxscore_protocol: 3605, // протокол\n  boxscore_efficiency: 5229, // Показатели эффективности\n  boxscore_combinations: 5233, // комбинации\n  boxscore_with_fouls: 5252, // с учетом фолов\n  boxscore_deff_combine: 5234, // защита против комбинаций\n  boxscore_date: 473, // дата\n\n  //shoots map\n  shoots_goals_opponent: 3036, //броски соперника\n  shoots_goals: 3559, //Свои броски\n  shoots_without_zones: 4312, //без зон\n  shoots_basic_zones: 4310, //основные\n  shoots_extend_zones: 4311, //основные\n  shoots_2x_goals: 3560, //2х очковые\n  shoots_3x_goals: 3561, //3х очковые\n  shoots_opened: 5208, //Открытый\n  shoots_closed: 5209, //закрытый\n  markers_from: 9583, // точки откуда\n  markers_to: 9584, // точки куда\n  full_trajectory: 9585, // полная траектория\n\n  //match popup\n  table_popup_dnd_info: 5725, //Drag params up or down to reorder\n  match_popup_full_game: 1295, //полный матч\n  match_popup_ball_in_play: 2489, //Ball in play\n  match_popup_all_time_player: 5225, //Все игровое время\n  match_popup_rifling_attack: 2947, //Время в защите\n  match_popup_rifling_defense: 2946, //Время в атаке\n  match_popup_highlights: 2108,\n  match_popup_pure_time: 1345,\n  match_popup_goals: 55,\n  match_popup_pdf: 3553,\n  match_popup_details: 3366,\n\n  //video cuts\n  cuts_positional_atack: 5265, //позиционное нападение\n  cuts_free_throws: 3562, //штрафные броски\n  cuts_blocks: 3566, //блокшоты\n  cuts_fouls: 5021, //фолы\n  cuts_fouls_drawn: 5266, //фолы на нем\n  cuts_video_summary: 2862, //видео нарезки\n  cuts_off_actions: 2946, //действия в атаке\n  cuts_deff_actions: 5248, //действия в обороне\n  cuts_partner: 5988, // партнеры\n  cuts_opponent: 1024, //оппоненты\n\n  //common\n  cancel: 732,\n  ok: 724,\n  players: 9457,\n  teams: 660,\n  show_more: 7143, // кнопка 'показать больше'\n\n  //numeric lexics\n  7341: 7341, //external video\n}\n\nexport {\n  indexLexic,\n  filtersLexic,\n  loginLexic,\n  playerLexic,\n  teamLexic,\n  matchLexic,\n  markersLexic,\n  videoCutsLexic,\n  tableParamsLexic,\n  tableParamsLexicShort,\n  tableParamsNumLexic,\n}\n","import { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withHandlers,\n  lifecycle,\n} from 'recompose'\nimport get from 'lodash/get'\n\nimport { indexLexic } from 'config/lexics'\n\nimport {\n  TComposeInner,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n  TLifecycle,\n  TPropsOuter,\n} from './types'\n\nexport const gearPopupComposed = compose<TComposeInner, TPropsOuter>(\n  inject(\n    'lexics',\n    'playerProfile',\n    'gearPopupStore',\n  ),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    /**\n    * Функция для отображения названия для таблицы.\n    * @param {object} table - объект таблицы с параметрами\n    * @param {boolean} newPopup - флаг новое ли окно popup.\n      Если да, то отображаем название по-умолчанию Название таблицы\n  */\n    getTable: () => (table, newPopup) => {\n      if (newPopup) {\n        const newTable = {\n          position: 0,\n          tableName: indexLexic.new_table,\n        }\n        return newTable\n      }\n      return table\n    },\n    /**\n    * Запись в стор выбранных параметров в попапе шестеренки\n    * @param {bool} newPopup - если шестеренка для создания новой таблицы\n    * @param {func} handleNewPopupAction - функция закрытия попапа для новой таблцы\n    * @param {func} saveTempParams - функция сохранения параметров\n    * @param {func} handlePopupAction - функция закрытия попапа\n    * @param {number} position - номер таблицы\n    */\n    onApply: ({\n      currentStore: {\n        addTable,\n        saveTempParams,\n        storeName,\n      },\n      gearPopupStore: {\n        editTempTableName,\n        eraseTempSelected,\n        tempSelected,\n        tempTableName,\n      },\n      handleNewPopupAction,\n      handlePopupAction,\n      newPopup,\n      playerProfile: { profile },\n    }) => position => () => {\n      const ampluaId = get(profile, 'amplua.id')\n      if (newPopup) {\n        addTable(tempTableName, storeName, tempSelected)\n        editTempTableName(indexLexic.new_table, true)\n      } else {\n        saveTempParams({\n          ampluaId,\n          localStorageName: storeName,\n          position,\n          selectedParams: tempSelected,\n        })\n      }\n\n      if (newPopup) {\n        handleNewPopupAction()\n      } else {\n        handlePopupAction()\n      }\n      eraseTempSelected()\n    },\n    /**\n    * Закрытие попапа шестеренки\n    * @param {func} editTempSelected - функция очищения выбранных параметров\n    * @param {func} handlePopupAction - функция закрытия попапа\n    *\n    */\n    onClose: ({\n      gearPopupStore: { eraseTempSelected },\n      handleNewPopupAction,\n      handlePopupAction,\n      newPopup,\n    }) => () => {\n      eraseTempSelected()\n      if (newPopup) {\n        handleNewPopupAction()\n      } else {\n        handlePopupAction()\n      }\n    },\n  }),\n  lifecycle<TLifecycle, {}>({\n    componentDidMount() {\n      const {\n        gearPopupStore: { fillTempSelected },\n        newPopup,\n        table: { selectedParams },\n      } = this.props\n      if (!newPopup) {\n        fillTempSelected(selectedParams)\n      }\n    },\n  }),\n  observer,\n)\n","import React from 'react'\n\nimport get from 'lodash/get'\n\nimport { T9n } from 'react-sport'\n\nimport { RangeSettings } from 'features/components/common/map/RangeSettings'\nimport { EditTableName } from 'features/TableName/components/EditTableName'\nimport { GearTable } from './GearTable'\nimport { DndParams } from './DndParams'\nimport { gearPopupComposed } from './composed'\n\nimport { TComposeInner } from './types'\n\n// Попап окно с параметрами\nconst GearPopupComponent = ({\n  currentStore,\n  getTable,\n  lexics: { getLexics },\n  newPopup,\n  onApply,\n  onClose,\n  playerProfile: { profile },\n  table,\n}: TComposeInner) => (\n  <div className='popup popup-modern popup-modern_position-left popup-modern_active'>\n    <div className='popup-inner'>\n      <div className='popup-row-header'>\n        <h3 className='popup-title'>\n          <EditTableName\n            table={getTable(table, newPopup)}\n            newPopup={newPopup}\n            currentStore={currentStore}\n          />\n          <span className='popup-title__icon' />\n        </h3>\n        <span className='popup-close' onClick={onClose} />\n      </div>\n      <div className='popup-row-container'>\n        <GearTable\n          currentStore={currentStore}\n          ampluaId={get(profile, 'amplua.id', 0)}\n        />\n      </div>\n      <div className='popup-column-aside'>\n        <DndParams />\n        <div className='popup-duration-settings'>\n          <div className='popup-col-title'>\n            <T9n t='boxscore_setting_all_ep' />\n          </div>\n          <RangeSettings />\n        </div>\n      </div>\n      <div className='popup-row-footer'>\n        <div className='popup-buttons'>\n          <input\n            onClick={onClose}\n            type='button'\n            value={getLexics('cancel')}\n            className='popup-cancel'\n          />\n          <input\n            onClick={onApply(table.position)}\n            type='button'\n            value={getLexics('ok')}\n            className='popup-submit'\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n)\n\nexport const GearPopup = gearPopupComposed(GearPopupComponent)\n","import React, { Fragment } from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers } from 'recompose'\nimport cx from 'classnames'\nimport find from 'lodash/find'\n\nimport { T9n } from 'react-sport'\n\nimport {\n  TComposeInner,\n  TPropsOuter,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n} from './types'\n\nconst PopupItemComponent = ({\n  checkActive,\n  isActiveParam,\n  last,\n  param,\n  param: { lexical_formula },\n}: TComposeInner) => (\n  <Fragment>\n    <div className='checkbox-wrapper'>\n      <span\n        className={cx(\n          'checkbox-label',\n          { 'checkbox-label_active': isActiveParam(param) },\n        )}\n        data-name='param'\n        onClick={checkActive(param)}\n      >\n        <T9n t={lexical_formula} />\n      </span>\n    </div>\n    {last && <br />}\n  </Fragment>\n)\n\nexport const popupItemComposed = compose<TComposeInner, TPropsOuter>(\n  inject('gearPopupStore'),\n  withHandlers <TWithHandlersOuter, TWithHandlersInner>({\n    /**\n     * Функция выбора чекбокса\n     * @param {array} tempSelected - массив выбранных параметров (не сохраненные в сторе)\n     * @param {number} editTempSelected - функция действия с чекбоксом ('add', 'delete')\n     * @param {number} param_id - id параметра\n     * @param {number} gear_group_id - id группы параметров\n     * @param {string} short_lexical_formula - лексика параметра\n     * @param {object} param - весь параметр\n     */\n    checkActive: ({\n      gearPopupStore: {\n        addToTempSelected,\n        removeFromTempSelected,\n        tempSelected,\n      },\n    }) => param => () => {\n      const {\n        gear_group_id,\n        param_id,\n        short_lexical_formula,\n      } = param\n\n      if (\n        find(tempSelected, {\n          gear_group_id,\n          param_id,\n          short_lexical_formula,\n        })\n      ) {\n        removeFromTempSelected(param)\n      } else {\n        addToTempSelected(param)\n      }\n    },\n    /**\n     * Проверка активного класса для выбранного чекбокса\n     * @param {array} tempSelected - массив выбранных параметров (не сохраненные в сторе)\n     * @param {number} param_id - id параметра\n     * @param {number} gear_group_id - id группы параметров\n     * @param {string} short_lexical_formula - лексика параметра\n     */\n    isActiveParam: ({ gearPopupStore: { tempSelected } }) => ({\n      gear_group_id,\n      param_id,\n      short_lexical_formula,\n    }) => (\n      !!find(tempSelected, {\n        gear_group_id,\n        param_id,\n        short_lexical_formula,\n      })\n    ),\n  }),\n  observer,\n)\n\nexport const PopupItem = popupItemComposed(PopupItemComponent)\n","import { types } from 'mobx-state-tree'\n\n// @ts-ignore\nimport { indexLexic } from 'config/lexics'\n\nexport const gearPopupViews = types.model({}).volatile(() => ({\n  tempSelected: [], //Временно выбранные параметры (чекбоксы)\n  tempTableName: indexLexic.new_table, //Временно выбранное название таблицы\n}))\n","import { types } from 'mobx-state-tree'\nimport { toJS } from 'mobx'\n\nimport filter from 'lodash/filter'\nimport isEqual from 'lodash/isEqual'\nimport map from 'lodash/map'\n\n// @ts-ignore\nimport { indexLexic } from 'config/lexics'\n\nexport const gearPopupActions = types.model({}).actions(self => ({\n  //@ts-ignore\n  addToTempSelected(param) {\n    //@ts-ignore\n    //@ts-ignore\n    self.tempSelected = [...self.tempSelected, toJS(param)]\n  },\n\n  //@ts-ignore\n  removeFromTempSelected(param) {\n    //@ts-ignore\n    self.tempSelected = filter(\n      //@ts-ignore\n      self.tempSelected,\n      item => !isEqual(param, item),\n    )\n  },\n\n  eraseTempSelected() {\n    //@ts-ignore\n    self.tempSelected = []\n  },\n\n  //@ts-ignore\n  fillTempSelected(params) {\n    //@ts-ignore\n    self.tempSelected = map(params, param => toJS(param))\n  },\n  /** Редактирование названия таблицы\n   * @param {string} name - название таблицы\n   * @param {bool} erase - возврат к значению по-умолчанию\n   */\n  editTempTableName(name: string, erase: boolean = false) {\n    if (erase) {\n      //@ts-ignore\n      self.tempTableName = indexLexic.new_table\n    } else {\n      //@ts-ignore\n      self.tempTableName = name\n    }\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\nimport { gearPopupViews } from './gearPopupViews'\nimport { gearPopupActions } from './gearPopupActions'\n\nexport const GearPopupStore = types.compose(\n  gearPopupActions,\n  gearPopupViews,\n)\n","export const defaultTableName = '8479'\n\nexport const tableLexics = {\n  teamMatches: 'match_show_opponent',\n  tournamentMatches: 'match_show_all_teams',\n}\n\n// Типы итогового значения в ячейках таблицы\nexport const tableStatsTypes = ['total', 'average_for_match']\n\nexport const tableTypes = {\n  //Профиль турнира\n  tournamentMatches: 'tournamentMatches', //таблица матчей по турниру\n  tournamentPlayers: 'tournamentPlayers', //таблица игроков по турниру\n  //Профиль команды\n  teamMatches: 'teamMatches', // таблица матчей на профиле команды\n  teamPlayers: 'teamPlayers', // таблица игроков на профиле команды\n  //Профиль игрока\n  playerMatches: 'playerMatches', //таблица матчей на профиле игрока\n  //Профиль матча\n  matchPlayersTable: 'matchPlayersTable', //таблица игроков на профиле матча\n}\n","import React from 'react'\nimport { compose, withHandlers } from 'recompose'\nimport { observer } from 'mobx-react'\nimport { T9n } from 'react-sport'\n// @ts-ignore\nimport { tableLexics } from 'config/tables'\n\ntype TProps = {\n  getClassName: (value: boolean) => string,\n  currentStore: { showOpponentStats: boolean },\n  setShowOppStat: () => void,\n  tableType: string,\n};\n\n// Компонент шапки таблицы, где есть статистика соперника\nconst HeaderWithOppComponent = ({\n  currentStore: { showOpponentStats },\n  getClassName,\n  setShowOppStat,\n  tableType,\n}: TProps) => (\n  <a className={getClassName(showOpponentStats)} onClick={setShowOppStat}>\n    {/*\n    //@ts-ignore */}\n    <T9n t={tableLexics[tableType]} />\n  </a>\n)\n\nconst HeaderWithOppComposed = compose(\n  //@ts-ignore\n  withHandlers({\n    setShowOppStat: ({ currentStore: { toggleShowOpponent } }) => () =>\n      toggleShowOpponent(),\n  }),\n  observer,\n)\n\n// @ts-ignore\nexport const HeaderWithOpp = HeaderWithOppComposed(HeaderWithOppComponent)\n","\nimport * as React from 'react'\nimport { compose, withHandlers } from 'recompose'\n\nimport { T9n } from 'react-sport'\n\n// @ts-ignore\nimport { tableStatsTypes } from 'config/tables'\n\n// Хок для получения кнопок для выпадашки с типами значений для ячеек таблицы\n// тип *  - т.к. хок универсальный и мы не знаем, какие пропсы в компонентах\nexport const getDropdownBtnsHoc = compose<any, any>(\n  withHandlers({\n    getDropdownBtns: () => ({\n      //@ts-ignore\n      onClick,\n      //@ts-ignore\n      position,\n      //@ts-ignore\n      summaryType,\n    }) => {\n      const types = summaryType === 'total' ? tableStatsTypes : tableStatsTypes.reverse()\n\n      //@ts-ignore\n      return types.map(type => (\n        <T9n key={type} t={type} onClick={onClick(type, position)} />\n      ))\n    },\n  }),\n)\n","import React, { Fragment } from 'react'\nimport { observer } from 'mobx-react'\nimport { compose, withHandlers } from 'recompose'\n\nimport { T9n, SimpleDropdown } from 'react-sport'\n\n// @ts-ignore\nimport { getDropdownBtnsHoc } from 'hocs/getDropdownBtnsHoc'\n\ntype TProps = {\n  getClassName: (value: boolean) => string,\n  currentStore: {\n    avatarIsVisible: boolean,\n    toggleShowAvatar: () => void,\n    changeValueType: (type: string, position: number) => void,\n  },\n  getDropdownBtns: (options: {}) => Array<any>,\n  table: {\n    position: number,\n    summaryType: string,\n  },\n  setTypeHandler: () => void,\n}\n\n// Компонент левой части шапки таблицы, где есть статистика соперника\nconst HeaderWithAvatarComponent = observer(\n  ({\n    currentStore: { avatarIsVisible, toggleShowAvatar },\n    getClassName,\n    getDropdownBtns,\n    setTypeHandler,\n    table: { position, summaryType },\n  }: TProps) => (\n    <Fragment>\n      {/*\n      //@ts-ignore */}\n      <SimpleDropdown placeholder={<T9n t='total' />}>\n        {getDropdownBtns({\n          summaryType,\n          position,\n          onClick: setTypeHandler,\n        })}\n      </SimpleDropdown>\n      <a className={getClassName(avatarIsVisible)} onClick={toggleShowAvatar}>\n        <T9n t='show_photo' />\n      </a>\n    </Fragment>\n  ),\n)\n\nconst HeaderWithAvatarComposed = compose<any, TProps>(\n  //@ts-ignore\n  withHandlers({\n    setTypeHandler: ({ currentStore: { changeValueType } }) =>\n      //@ts-ignore\n      //@ts-ignore\n      (type, position) => () => changeValueType(type, position),\n  }),\n  getDropdownBtnsHoc,\n)\n\nexport const HeaderWithAvatar = HeaderWithAvatarComposed(\n  HeaderWithAvatarComponent,\n)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withProps, withHandlers } from 'recompose'\nimport get from 'lodash/get'\n\n// @ts-ignore\nimport { getSuffix } from 'module/utils/helpers'\n\ntype TProps = {\n  getClassName: (value: boolean) => string,\n  onClick: (team: string) => void,\n  teams: {\n    showTeam1: boolean,\n    showTeam2: boolean,\n  },\n  teamNames: {\n    home: string,\n    opp: string,\n  },\n}\n\n// Компонент шапки таблицы, где есть выбор у пользователя какую команду показывать\nconst HeaderWithTeams = ({\n  getClassName,\n  onClick,\n  teamNames: { home, opp },\n  teams: { showTeam1, showTeam2 },\n}: TProps) => (\n  <div className='stats-table-checkbox-opp'>\n    {/*\n    //@ts-ignore */}\n    <a className={getClassName(showTeam1)} onClick={onClick('showTeam1')}>\n      {home}\n    </a>\n    {/*\n    //@ts-ignore */}\n    <a className={getClassName(showTeam2)} onClick={onClick('showTeam2')}>\n      {opp}\n    </a>\n  </div>\n)\n\nexport const HeaderWithTeamsComposed = compose(\n  inject('matchProfile', 'lexics'),\n  observer,\n  //@ts-ignore\n  withProps(({ lexics: { lang }, matchProfile: { data } }) => {\n    const suffix = getSuffix(lang)\n    return {\n      teamNames: {\n        home: get(data, `team1_name_${suffix}`, 'home'),\n        opp: get(data, `team2_name_${suffix}`, 'opp'),\n      },\n    }\n  }),\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    onClick: ({ handleCheckTeam }) => team => () => handleCheckTeam(team),\n  }),\n  observer,\n  //@ts-ignore\n)(HeaderWithTeams)\n","import * as React from 'react'\nimport {\n  compose,\n  withHandlers,\n} from 'recompose'\n\nimport { HeaderWithOpp } from './HeaderWithOpp'\nimport { HeaderWithAvatar } from './HeaderWithAvatar'\nimport { HeaderWithTeamsComposed as HeaderWithTeams } from './HeaderWithTeams'\n\ntype TProps = {\n  //@ts-ignore\n  tableType: string | null,\n  currentStore: {},\n}\n\ntype TPropsComposed = {\n  //@ts-ignore\n  getTable: (type: string | null) => React.Node | null,\n}\n\nconst TableHeaderComponent = ({\n  getTable,\n  tableType,\n}: TProps & TPropsComposed) => getTable(tableType)\n\nconst tableHeaderComposed = compose<TProps & TPropsComposed, TProps>(\n  withHandlers({\n    //@ts-ignore\n    getTable: props => (tableType) => {\n      const tables = {\n        //@ts-ignore\n        teamMatches: <HeaderWithOpp {...props} />,\n        //@ts-ignore\n\n        matchPlayersTable: <HeaderWithTeams {...props} />,\n        //@ts-ignore\n        tournamentMatches: <HeaderWithOpp {...props} />,\n        //@ts-ignore\n        tournamentPlayers: <HeaderWithAvatar {...props} />,\n      }\n      //@ts-ignore\n      return tables[tableType] || null\n    },\n  }),\n)\n\nexport const TableHeader = tableHeaderComposed(TableHeaderComponent)\n","import { withStateHandlers } from 'recompose'\nimport isEmpty from 'lodash/isEmpty'\n/**\n * Получение отсортированных полей в таблице\n * @param {number} param - id параметра\n * @param {boolean} sortInc - порядок сортировки (по возрастанию)\n */\nexport const setSortedIdHOC = withStateHandlers(\n  //@ts-ignore\n  //@ts-ignore\n  ({ param = {}, sortInc = true }) => ({\n    param,\n    sortInc,\n  }),\n  {\n    setSortedId: ({ param, sortInc }) => (newParam) => {\n      const clickOnNewParam = param.param_id !== newParam.param_id\n      const sortIsNeedReset = Boolean(!clickOnNewParam && sortInc)\n      const clickCases = {\n        newParamClicked: {\n          param: newParam,\n          sortInc: false,\n        },\n        simpleClick: {\n          param: newParam,\n          sortInc: !sortInc,\n        },\n        default: {\n          param: {},\n          sortInc: true,\n        },\n      }\n      // При клике на другой столбец счетчик обнуляется и выделяется новый столбец\n      if (!isEmpty(param) && clickOnNewParam) return clickCases.newParamClicked\n      // При клике третий раз на одном и том же столбце, сбрасываем сортировку\n      if (sortIsNeedReset) return clickCases.default\n\n      return clickCases.simpleClick\n    },\n  },\n)\n","\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withHandlers,\n  withState,\n  withProps,\n  withStateHandlers,\n} from 'recompose'\n\nimport cx from 'classnames'\nimport get from 'lodash/get'\n\nimport { setSortedIdHOC } from 'hocs/setSortedIdHOC'\n\nimport {\n  TPropsInner,\n  TPropsOuter,\n  TWithStateHandlersState,\n  TWithHandlers,\n  TWithPropsInner,\n  TWithPropsOuter,\n  TStoreObj,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n  TProfileNames,\n} from './types'\n\nexport const tableComposed = compose<TPropsInner, TPropsOuter>(\n  inject(\n    'matchProfile',\n    'teamTable',\n    'playerTable',\n    'matchTable',\n    'lexics',\n    'tableReports',\n    'teamProfile',\n    'playerProfile',\n    'tournamentMatchesTableStore',\n    'tournamentsProfile',\n    'teamPlayers',\n    'tournamentPlayersTableStore',\n  ),\n  withState('popupOpened', 'openPopup', false),\n  withState('newPopupOpened', 'openNewPopup', false),\n  // Хок хендлера сортировки\n  setSortedIdHOC,\n  withStateHandlers<TWithStateHandlersState, TWithHandlers, TWithStateHandlersState>(\n    ({ teams = { showTeam1: true, showTeam2: true } }) => ({ teams }),\n    {\n      /**\n       * Выбор видимых команд в таблице\n       * @param {string} team - команда, с которой совершается действие\n       */\n      handleCheckTeam: ({ teams }) => (team) => {\n        teams[team] = !teams[team]\n        return {\n          teams: Object.create(teams),\n        }\n      },\n    },\n  ),\n\n  withProps<TWithPropsInner, TWithPropsOuter>(\n    ({\n      matchTable,\n      param: {\n        gear_group_id,\n        param_id,\n      },\n      playerTable,\n      tableType = 'default',\n      teamPlayers,\n      teamTable,\n      tournamentMatchesTableStore,\n      tournamentPlayersTableStore,\n    }) => {\n      // Используем нужный стор для использования методов\n      const stores: TStoreObj = {\n        matchPlayersTable: matchTable,\n        playerMatches: playerTable,\n        teamMatches: teamTable,\n        teamPlayers,\n        tournamentMatches: tournamentMatchesTableStore,\n        tournamentPlayers: tournamentPlayersTableStore,\n      }\n\n      return {\n        activeId: `${param_id}_${gear_group_id}`,\n        currentStore: stores[tableType],\n      }\n    },\n  ),\n\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    getClassName: ({ currentStore: { showOpponentStats } }) => checked =>\n      cx('team-stats-header-opponents-toggler', {\n        checked: showOpponentStats || checked,\n      }),\n\n    getLinks: ({ tableReports: { pdfIsFetching, xlsIsFetching } }) => () => [\n      { xls: xlsIsFetching },\n      { pdf: pdfIsFetching },\n    ],\n\n    handleNewPopupAction: ({ openNewPopup }) => () => openNewPopup(n => !n),\n\n    handlePopupAction: ({ openPopup }) => () => openPopup(n => !n),\n\n    saveReport: ({\n      lexics: { page },\n      matchProfile,\n      playerProfile,\n      tableReports: { getReport },\n      tableType,\n      teamProfile,\n      tournamentsProfile,\n    }) => (e, key) => {\n      const profilesNames: TProfileNames = {\n        match: get(matchProfile, ['data', 'match_date'], ''),\n        player: get(playerProfile, 'profile.short_name_eng'),\n        team: get(teamProfile, 'profile.name_eng'),\n        tournaments: get(tournamentsProfile, 'profile.name_eng'),\n      }\n      const name = profilesNames[page]\n      getReport(e, key, tableType)\n        .then((blob) => {\n          const link: any = document.getElementById('download-link')\n          const date = new Date()\n          link.href = URL.createObjectURL(blob)\n          link.download = `${date.getDate()}_${date.getMonth()\n            + 1}_${date.getFullYear()}_matches_${name}.${key}`\n          link.click()\n        })\n    },\n  }),\n  observer,\n)\n","import { types } from 'mobx-state-tree'\n\nimport size from 'lodash/size'\n\n// @ts-ignore\nimport { saveTablesToLocalStorage } from 'module/utils/helpers'\n\nexport const addTable = types.model({}).actions(self => ({\n  /**\n   * Добавляем новую таблицу\n   * @param {string | number} name - название таблицы\n   * @param {string} localStorageName - ключ для записи в localStorage\n   */\n  addTable(\n    name: string | number,\n    localStorageName: string,\n    selectedParams: Array<{}>,\n  ) {\n    //@ts-ignore\n    const position: number = size(self.tables) + 1\n    //@ts-ignore\n    self.tables = {\n      //@ts-ignore\n      ...self.tables,\n      [position]: {\n        position,\n        selectedParams,\n        tableName: name,\n        summaryType: 'average_for_match',\n      },\n    }\n    //@ts-ignore\n    saveTablesToLocalStorage({ name: localStorageName, tables: self.tables })\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\nimport get from 'lodash/get'\n\nexport const changeValueType = types.model({}).actions(self => ({\n  /** Меняем стиль отображения ячеек (итоговое по всем матчам или среднее значение)\n   * @param {string} type - тип отображения\n   */\n  changeValueType(type: string, position: number) {\n    // Если тип не меняется, то ничего не делаем\n    //@ts-ignore\n    //@ts-ignore\n    //@ts-ignore\n    if (get(self.tables, type === [position, 'summaryType'])) return null\n    //@ts-ignore\n    self.tables = {\n      //@ts-ignore\n      ...self.tables,\n      [position]: {\n        //@ts-ignore\n        ...self.tables[position],\n        summaryType: type,\n      },\n    }\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\nimport size from 'lodash/size'\nimport keys from 'lodash/keys'\nimport omit from 'lodash/omit'\nimport reduce from 'lodash/reduce'\n\n// @ts-ignore\nimport { saveTablesToLocalStorage } from 'module/utils/helpers'\n\nexport const deleteTable = types.model({}).actions(self => ({\n  /** удаления таблицы\n   * @param {number} position - порядковый номер таблицы\n   * @param {string} localStorageName - ключ для записи в localStorage\n   */\n  deleteTable(position: number, localStorageName: string) {\n    //@ts-ignore\n    const tablesList: Array<any> = keys(self.tables)\n    // Удаляем текущую таблицу\n    //@ts-ignore\n    const omitedTables = omit(self.tables, position)\n    // // Перезаписываем все таблицы, позиция которых после удаленной. Передвигаем весь список\n    const updatedTables = reduce(\n      omitedTables,\n      (acc, curr, key) => {\n        //@ts-ignore\n        if (key > position) {\n          //@ts-ignore\n          //@ts-ignore\n          acc[key - 1] = {\n            //@ts-ignore\n            ...self.tables[key],\n            //@ts-ignore\n            position: key - 1,\n          }\n        }\n        //@ts-ignore\n        //@ts-ignore\n        acc[key] = self.tables[key]\n        return acc\n      },\n      {},\n    )\n\n    // Удаляем последнюю таблицу, дубль при перемещении всех наверх\n    //@ts-ignore\n    self.tables = omit(updatedTables, size(tablesList))\n\n    //@ts-ignore\n    saveTablesToLocalStorage({ name: localStorageName, tables: self.tables })\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\n// @ts-ignore\nimport { saveTablesToLocalStorage } from 'module/utils/helpers'\n\nexport const editTable = types.model({}).actions(self => ({\n  /** Редактирование таблицы\n   * @param {number} position - порядковый номер таблицы\n   * @param {string | number} name - новое название таблицы\n   * @param {string} localStorageName - ключ для записи в localStorage\n   */\n  editTable(position: number, name: string | number, localStorageName: string) {\n    //@ts-ignore\n    self.tables = {\n      //@ts-ignore\n      ...self.tables,\n      [position]: {\n        //@ts-ignore\n        ...self.tables[position],\n        tableName: name,\n      },\n    }\n    //@ts-ignore\n    saveTablesToLocalStorage({ name: localStorageName, tables: self.tables })\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\n// @ts-ignore\nimport { indexLexic } from 'config/lexics'\n\nexport const editTempTableName = types.model({}).actions(self => ({\n  /** Редактирование названия таблицы\n   * @param {string} name - название таблицы\n   * @param {bool} erase - возврат к значению по-умолчанию\n   */\n  editTempTableName(name: string, erase: boolean = false) {\n    if (erase) {\n      //@ts-ignore\n      self.tempTableName = indexLexic.new_table\n    } else {\n      //@ts-ignore\n      self.tempTableName = name\n    }\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\nimport size from 'lodash/size'\n\nimport { saveTablesToLocalStorage } from 'module/utils/helpers'\n\nexport const moveTable = types.model({}).actions(self => ({\n  /** Перемещение таблицы вверх/вниз\n* @param {number} position - порядковый номер таблицы\n* @param {string} type - тип перемещения (вверх или вниз)\n* @param {string} localStorageName - ключ для записи в localStorage\n  */\n  moveTable(\n    position: number,\n    type: string,\n    localStorageName: string,\n  ) {\n    //@ts-ignore\n    const tableCount: number = size(self.tables)\n    //@ts-ignore\n    const currentTable: {} = self.tables[position]\n    //@ts-ignore\n    const prevTable: {} = self.tables[position - 1]\n    //@ts-ignore\n    const nextTable: {} = self.tables[position + 1]\n\n    if (\n      (type === 'up' && position === 1)\n      || (type === 'down' && position === tableCount)\n    ) return null\n\n    if (type === 'up') {\n      //@ts-ignore\n      self.tables = {\n        //@ts-ignore\n        ...self.tables,\n        [position - 1]: {\n          ...currentTable,\n          position: position - 1,\n        },\n        [position]: {\n          ...prevTable,\n          position,\n        },\n      }\n    }\n\n    if (type === 'down') {\n      //@ts-ignore\n      self.tables = {\n        //@ts-ignore\n        ...self.tables,\n        [position]: {\n          ...nextTable,\n          position,\n        },\n        [position + 1]: {\n          ...currentTable,\n          position: position + 1,\n        },\n      }\n    }\n    //@ts-ignore\n    saveTablesToLocalStorage({ name: localStorageName, tables: self.tables })\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\nexport const resetTable = types.model({}).actions(self => ({\n  /** Сброс всех таблиц по-умолчанию\n   * @param {string} localStorageName - ключ для записи в localStorage\n   */\n  resetTable(localStorageName: string) {\n    // Сначала удаляем таблицы уже сформированные\n    window.localStorage.removeItem(localStorageName)\n    //@ts-ignore\n    self.tables = {}\n    //@ts-ignore\n    self.saveTables(localStorageName)\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\nimport { saveTablesToLocalStorage } from 'module/utils/helpers'\n\nexport const saveTempParams = types.model({}).actions(self => ({\n  /**\n   * Выбранные параметры (чекбоксы) сохраняем в стор\n   * @param {number} position - порядковый номер таблицы\n   * @param {string} localStorageName - ключ для записи в localStorage\n   * @param {array} selectedParams - выбранные параметры, которые мы записываем в постоянные\n   */\n  saveTempParams({\n    ampluaId,\n    localStorageName,\n    position,\n    selectedParams,\n  }: {\n    ampluaId?: number,\n    localStorageName: string,\n    position: number,\n    selectedParams: Array<{}>,\n  }) {\n    //@ts-ignore\n    self.tables = {\n      //@ts-ignore\n      ...self.tables,\n      [position]: {\n        //@ts-ignore\n        ...self.tables[position],\n        selectedParams,\n      },\n    }\n    // Сохраняем выбранные параметры в localStorage\n    saveTablesToLocalStorage({\n      id: ampluaId,\n      name: localStorageName,\n      //@ts-ignore\n      tables: self.tables,\n    })\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\nimport { addTable } from './addTable'\nimport { changeValueType } from './changeValueType'\nimport { deleteTable } from './deleteTable'\nimport { editTable } from './editTable'\nimport { editTempTableName } from './editTempTableName'\nimport { moveTable } from './moveTable'\nimport { resetTable } from './resetTable'\nimport { saveTempParams } from './saveTempParams'\n\nexport const tableActions = types.compose(\n  addTable,\n  changeValueType,\n  deleteTable,\n  editTable,\n  editTempTableName,\n  moveTable,\n  resetTable,\n  saveTempParams,\n)\n","import { types } from 'mobx-state-tree'\nimport { toJS } from 'mobx'\nimport reduce from 'lodash/reduce'\nimport filter from 'lodash/filter'\nimport sortBy from 'lodash/sortBy'\n\nimport { callApi } from 'react-sport'\n\nimport routes from 'config/routes'\n\nconst url: string = `${routes.API_ROOT}/data`\n\nexport const tableApiActions = types.model({}).actions(self => ({\n  getGearParamsList(ampluaId: number) {\n    //@ts-ignore\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'ask_gear_params',\n        params: {\n          _v_amplua_id: ampluaId,\n        },\n      }),\n    }\n\n    return callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        self.error = null\n      },\n      //@ts-ignore\n      onSuccess: self._onSuccessGearParams,\n      //@ts-ignore\n      onError: self._onError,\n    })\n  },\n\n  //@ts-ignore\n  _onSuccessGearParams({ data }) {\n    //@ts-ignore\n    self.totalParams = data\n    //@ts-ignore\n    self.fetchGroups()\n  },\n\n  fetchGroups() {\n    //@ts-ignore\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'ask_gear_group_view',\n      }),\n    }\n    return callApi({\n      url,\n      config,\n      onRequest: () => {},\n      //@ts-ignore\n      onSuccess: self._onSuccessGroups,\n      //@ts-ignore\n      onError: self._onError,\n    })\n  },\n\n  _onSuccessGroups(json: {\n    data: Array<{\n      group_id: number,\n      group_lexical_formula: number,\n      group_name: string,\n    }>,\n  }) {\n    //@ts-ignore\n    self.gearParams = reduce(\n      json.data,\n      //@ts-ignore\n      (prev, curr) => {\n        const current = {\n          params: sortBy(\n            filter(\n              //@ts-ignore\n              toJS(self.totalParams),\n              ({ gear_group_id }) => gear_group_id === curr.group_id,\n            ),\n            'sort_order',\n          ),\n          groupName: String(curr.group_lexical_formula),\n        }\n        return [...prev, current]\n      },\n      [],\n    )\n  },\n\n  _onError(error: any) {\n    //@ts-ignore\n    self.error = error\n  },\n}))\n","import { types, Instance } from 'mobx-state-tree'\n\nimport { tableActions } from './tableActions'\nimport { tableApiActions } from './tableApiActions'\n\nconst Param = types.model('Param', {\n  f_option_3: types.number,\n  full_lexical_formula: types.string,\n  gear_group_id: types.number,\n  gear_subgroup_id: types.number,\n  is_default: types.maybeNull(types.string),\n  lexical_formula: types.string,\n  name: types.string,\n  param1_id: types.maybeNull(types.array(types.string)),\n  param2_id: types.maybeNull(types.array(types.string)),\n  param_id: types.identifierNumber,\n  short_lexical_formula: types.string,\n  sort_order: types.number,\n})\n\nconst GearParam = types.model('GearParam', {\n  groupName: types.maybeNull(types.string),\n  params: types.array(Param),\n})\n\n// Модель группы с названием\nconst ParamGroup = types.model('ParamGroup', {\n  group_id: types.number,\n  group_lexical_formula: types.number,\n  group_name: types.string,\n})\n\nexport const TableCommon = types.model('tableCommon', {\n  error: types.frozen({}),\n  gearParams: types.array(GearParam),\n  paramGroups: types.array(ParamGroup),\n  tempSelected: types.array(Param),\n  tempTableName: types.union(types.string, types.number, types.undefined),\n  totalParams: types.array(Param),\n})\n\nexport const TableStore = types.compose(\n  TableCommon,\n  tableActions,\n  tableApiActions,\n)\n\nexport type TParam = Instance<typeof Param>\n","\nimport { types, flow } from 'mobx-state-tree'\nimport isEmpty from 'lodash/isEmpty'\nimport flatten from 'lodash/flatten'\nimport uniqBy from 'lodash/uniqBy'\nimport size from 'lodash/size'\n\nimport { callApi } from 'react-sport'\n\n// @ts-ignore\nimport routes from 'config/routes'\n// @ts-ignore\nimport { filterDBStats } from 'module/utils/helpers'\nimport { matchesToShow } from '../config'\n\ntype TConfig = {\n  method: string,\n  body: string,\n};\n\nconst url: string = `${routes.API_ROOT}/data`\n\nexport const TournamentMatchesTableApiActions = types\n  .model({})\n  .actions(self => ({\n    fetchTableInfo: flow(function* fetchTableInfo() {\n      //@ts-ignore\n      yield self.getGearParamsList(0)\n      //@ts-ignore\n      yield self.fetchTableParams()\n    }),\n\n    fetchTableParams() {\n      //@ts-ignore\n      const paramsList: Array<number> = isEmpty(\n        //@ts-ignore\n        self.summarySelectedParamsFromTables,\n      )\n        //@ts-ignore\n        ? self.defaultParams\n        //@ts-ignore\n        : self.summarySelectedParamsFromTables\n      const config: TConfig = {\n        method: 'POST',\n        body: JSON.stringify({\n          proc: 'ask_tournament_param_view',\n          params: {\n            //@ts-ignore\n            _v_match_id: self.matchesToFetch,\n            _v_param_id: paramsList,\n          },\n        }),\n      }\n\n      return callApi({\n        url,\n        config,\n        onRequest: () => {\n          //@ts-ignore\n          self.partFetching = true\n          //@ts-ignore\n          self.error = null\n        },\n        //@ts-ignore\n        onSuccess: self._onSuccesTableParams,\n        //@ts-ignore\n        onError: self._onError,\n      })\n    },\n\n    _onSuccesTableParams(json: { data: Array<{}> }) {\n      //@ts-ignore\n      //@ts-ignore\n      self.stats = uniqBy(\n        //@ts-ignore\n        flatten([...self.stats, filterDBStats(json.data)]),\n        'id',\n      )\n      //@ts-ignore\n      if (size(self.matchesToFetch) < matchesToShow) {\n        //@ts-ignore\n        self.canFetch = false\n      }\n      if (window.localStorage.getItem('tournamentMatchesTableStore') === null) {\n        //@ts-ignore\n        self.saveTables()\n      } else {\n        //@ts-ignore\n        //@ts-ignore\n        self.tables = JSON.parse(\n          //@ts-ignore\n          window.localStorage.getItem('tournamentMatchesTableStore'),\n        )\n      }\n      //@ts-ignore\n      self.partFetching = false\n      //@ts-ignore\n      self.isLoaded = true\n    },\n\n    _onError(error: any) {\n      //@ts-ignore\n      self.error = error\n    },\n  }))\n","export const matchesToShow = 5\n","import { types } from 'mobx-state-tree'\n\nimport filter from 'lodash/fp/filter'\nimport sortBy from 'lodash/fp/sortBy'\nimport flow from 'lodash/fp/flow'\n\n// @ts-ignore\nimport { saveTablesToLocalStorage } from 'module/utils/helpers'\n// @ts-ignore\nimport { defaultTableName } from 'config/tables'\n\nexport const TournamentMatchesTableActions = types.model({}).actions(self => ({\n  saveTables() {\n    const defaultTable = {\n      position: 1,\n      selectedParams: flow(\n        filter('is_default'),\n        sortBy(['gear_group_id', 'sort_order']),\n        //@ts-ignore\n      )(self.totalParams),\n      tableName: defaultTableName,\n      summaryType: 'average_for_match',\n    }\n    //@ts-ignore\n    self.tables = {\n      1: defaultTable,\n    }\n    //@ts-ignore\n    saveTablesToLocalStorage({\n      name: 'tournamentMatchesTableStore',\n      //@ts-ignore\n      tables: self.tables,\n    })\n  },\n\n  addOffset() {\n    //@ts-ignore\n    self.offset += 1\n    //@ts-ignore\n    return self.fetchTableParams()\n  },\n\n  toggleShowOpponent() {\n    //@ts-ignore\n    //@ts-ignore\n    self.showOpponentStats = !self.showOpponentStats\n  },\n}))\n","import { types, getParent } from 'mobx-state-tree'\n\nimport map from 'lodash/map'\nimport reduce from 'lodash/reduce'\nimport values from 'lodash/values'\nimport flatten from 'lodash/flatten'\nimport take from 'lodash/take'\nimport chunk from 'lodash/chunk'\n\nimport { matchesToShow } from '../config'\n\nexport const TournamentMatchesTableViews = types\n  .model({})\n  .volatile(() => ({\n    // offSet - кол-во частей запрашиваемых матчей.\n    //Т.к. их очень много, запрашивать будем по частям\n    offset: 1,\n    canFetch: true,\n    showOpponentStats: false,\n    partFetching: false,\n  }))\n  .views(self => ({\n    get summarySelectedParamsFromTables() {\n      const paramsSummary = reduce(\n        //@ts-ignore\n        values(self.tables),\n        (acc, curr) => {\n          const currentTableSelectedParams = map(\n            curr.selectedParams,\n            'param_id',\n          )\n          //@ts-ignore\n          acc.push(currentTableSelectedParams)\n          return acc\n        },\n        [],\n      )\n      return flatten(paramsSummary)\n    },\n\n    get defaultParams() {\n      return reduce(\n        //@ts-ignore\n        self.totalParams,\n        (acc, { is_default, param_id }) => {\n          if (is_default) {\n            //@ts-ignore\n            acc.push(param_id)\n          }\n          return acc\n        },\n        [],\n      )\n    },\n\n    get actualMatchesList() {\n      return take(\n        map(getParent(self).tournamentMatches.matches),\n        self.offset * matchesToShow,\n      )\n    },\n\n    // Считаем кол-во матчей для запроса\n    get matchesToFetch() {\n      const matchesTotal = getParent(self).tournamentMatches.matchesIds // Общее коли-во матчей\n      // Разбиваем общее кол-во матчей на части\n      const chunkedMatchesList = chunk(matchesTotal, matchesToShow)\n      return chunkedMatchesList[self.offset - 1]\n    },\n  }))\n","import { types } from 'mobx-state-tree'\n\n// @ts-ignore\nimport { TableStore } from 'features/Table/models/tableModel'\n\nimport { TournamentMatchesTableApiActions } from './TournamentMatchesTableApiActions'\nimport { TournamentMatchesTableActions } from './TournamentMatchesTableActions'\nimport { TournamentMatchesTableViews } from './TournamentMatchesTableViews'\n\nconst ParamExtended = types.model('Param', {\n  f_match: types.number,\n  f_match_event_ids: types.maybeNull(types.array(types.number)),\n  f_match_event_ids_json: types.maybeNull(types.array(types.number)),\n  f_option_0: types.number,\n  f_option_1: types.maybeNull(types.number),\n  f_option_2: types.maybeNull(types.number),\n  f_option_3: types.maybeNull(types.number),\n  f_option_4: types.maybeNull(types.number),\n  f_option_5: types.maybeNull(types.number),\n  f_option_6: types.maybeNull(types.number),\n  f_param: types.maybeNull(types.number),\n  f_team: types.maybeNull(types.number),\n  f_variant_zone: types.maybeNull(types.number),\n  id: types.string,\n  param_name: types.string,\n  value: types.maybeNull(types.number),\n})\n\nexport const TournamentMatchesTable = types.model('TournamentMatches', {\n  storeName: 'tournamentMatchesTableStore',\n  isLoaded: false,\n  error: types.maybeNull(types.frozen({})),\n  tables: types.frozen({}),\n  stats: types.array(ParamExtended),\n})\n\nexport const TournamentMatchesTableStore = types.compose(\n  // общие методы и свойства таблиц\n  TableStore,\n  // Собственные методы и свойства\n  TournamentMatchesTable,\n  TournamentMatchesTableActions,\n  TournamentMatchesTableApiActions,\n  TournamentMatchesTableViews,\n)\n","import React from 'react'\nimport './Loader.scss'\n\nconst Loader = () => <div className='loader-wrapper' />\n\nexport default Loader\n","\nimport React from 'react'\nimport { lifecycle, compose } from 'recompose'\nimport { inject, observer } from 'mobx-react'\n// @ts-ignore\nimport { Tables } from 'features/Table'\n// @ts-ignore\nimport Loader from 'features/components/common/loader/Loader'\n// @ts-ignore\nimport { tableTypes } from 'config/tables'\n\ntype TProps = {\n  tournamentMatchesTableStore: {\n    isLoaded: boolean,\n    tables: {},\n  },\n  lexics: { page: string },\n  tournamentId: number,\n};\n\nconst TournamentMatches = ({\n  tournamentId,\n  tournamentMatchesTableStore: { isLoaded, tables },\n}: TProps) =>\n  (isLoaded ? (\n    <Tables\n      tableType={tableTypes.tournamentMatches}\n      tables={tables}\n      pageId={String(tournamentId)}\n    />\n  ) : (\n    <Loader />\n  ))\n\nexport const TournamentMatchesComposed = compose(\n  inject('lexics', 'tournamentMatchesTableStore'),\n  lifecycle({\n    componentDidMount() {\n      //@ts-ignore\n      const {\n        //@ts-ignore\n        tournamentMatchesTableStore: { fetchTableInfo },\n      } = this.props\n      fetchTableInfo()\n    },\n  }),\n  observer,\n  //@ts-ignore\n)(TournamentMatches)\n","\n\n//Функция перевода '-' в 0 для правильной сортировки по значению в таблице\nexport const emptyStatToZero = (value: string | number): number =>\n  (typeof value === 'string' ? 0 : value)\n","import { observer } from 'mobx-react'\nimport { compose, withHandlers } from 'recompose'\n\nimport orderBy from 'lodash/orderBy'\n// @ts-ignore\nimport { TBody as TBodyComponent } from 'features/Table'\n\nexport const TBody = compose(\n  //@ts-ignore\n  withHandlers({\n    /**\n     * Получение списка матчей или игроков, отсортированного по значению выбранного параметра\n     * в таблице\n     * @param {boolean} sortInc - флаг для сортировки (по убыванию или по возрастанию)\n     */\n    getSortedList: ({ rows }) => (sortInc: boolean) => {\n      const sortType = sortInc ? 'acs' : 'desc'\n      //@ts-ignore\n      //@ts-ignore\n      return orderBy(rows, 'sortBy', sortType)\n    },\n  }),\n  observer,\n  //@ts-ignore\n)(TBodyComponent)\n","import * as React from 'react'\n\ntype TProps = {\n  //@ts-ignore\n  tableStats?: Array<{}>,\n  selectedParams: Array<{}>,\n  getSortedList: (value: boolean) => (\n    Array<{ f_match?: number, f_player?: number }>\n  ),\n  sortInc: boolean,\n  pageId: string,\n  activeId?: string,\n  showOpponentStats?: boolean,\n  Tr: any,\n}\n\n// Основной блок таблицы со статистикой\nexport const TBody = ({\n  activeId,\n  getSortedList,\n  pageId,\n  selectedParams,\n  showOpponentStats,\n  sortInc,\n  tableStats,\n  Tr,\n}: TProps) => (\n  <tbody>\n    {getSortedList(sortInc)\n      .map((trItem: { f_match?: number, f_player?: number }) => (\n        <Tr\n          key={trItem.f_player || trItem.f_match}\n          rowInfo={trItem}\n          pageId={pageId}\n          selectedParams={selectedParams}\n          tableStats={tableStats}\n          activeId={activeId}\n          showOpponentStats={showOpponentStats}\n        />\n      ))\n    }\n  </tbody>\n)\n","\nimport React from 'react'\nimport cx from 'classnames'\n\nimport { T9n } from 'react-sport'\n\nimport './styles.scss'\n\ntype TProps = {\n  isFetching: boolean,\n  onClick: () => void,\n};\n\nexport const ShowMoreBtn = ({ isFetching, onClick }: TProps) => (\n  <div\n    className={cx('show-more-btn', { 'show-more-btn_loading': isFetching })}\n    onClick={onClick}\n  >\n    {!isFetching && <T9n t='show_more' />}\n  </div>\n)\n","import { inject, observer } from 'mobx-react'\nimport {\n  compose,\n  withHandlers,\n\n} from 'recompose'\nimport cx from 'classnames'\nimport { TFoot as TFootComponent } from 'features/Table'\nimport isEmpty from 'lodash/isEmpty'\nimport reduce from 'lodash/reduce'\nimport filter from 'lodash/filter'\nimport forEach from 'lodash/forEach'\n\ntype TProps = {\n  activeId: string,\n  getActualMatchesList: (\n    page: string,\n    pageId: string,\n    tableStats: Array<{}>,\n    opps?: boolean,\n  ) => Array<any>,\n  //@ts-ignore\n  getClassName: (param: {}, activeId: string) => void,\n  getExtLink: (\n    param?: {},\n    //@ts-ignore\n    tableStats: Array<{}>,\n    id: number,\n    forOpp: boolean,\n  ) => void,\n  //@ts-ignore\n  param?: { param1_id: {}, param2_id: {} },\n  showOpponentStats: boolean,\n  page?: string,\n  pageId: string,\n  selectedMatches: {},\n  setType: (arg: string) => void,\n  table: {\n    selectedParams: Array<{\n      //@ts-ignore\n      param_id: number | null,\n      gear_group_id: number,\n      //@ts-ignore\n      param1_id?: {},\n      //@ts-ignore\n      param2_id?: {},\n    }>,\n  },\n  tableStats: Array<{}>,\n}\n\nexport const tfootComposed = compose<any, TProps>(\n  inject(\n    'shootsRange',\n    'lexics',\n    'videoLink',\n    'tournamentMatchesTableStore',\n  ),\n  //@ts-ignore\n  withHandlers({\n    /**\n    * Функция для открытия попап окна с видео повторами\n    * @param {number} param_id - id параметра\n    * @param {string} lexical_formula - название параметра\n    * @param {array} tableStats - массив всех параметров\n    * @param {number} id - id игрока или команды\n    * @param {boolean} forOpp - флаг для фильтрации. Ищем для своей команды или для команд соперника\n    */\n    getExtLink: ({\n      lexics: { lang, page },\n      shootsRange,\n      tableStats,\n      videoLink: { request },\n    }) => (\n      {\n        //@ts-ignore\n        lexical_formula,\n        //@ts-ignore\n        param_id,\n      },\n      //@ts-ignore\n      id,\n      //@ts-ignore\n      forOpp,\n    ) => {\n      //@ts-ignore\n      const checkId = (teamId) => {\n        if (page === 'player') return true\n\n        if (forOpp) return teamId !== id\n\n        return teamId === id\n      }\n\n      // Фильтруем сначала по команде\n      const teamTableStats = filter(\n        tableStats,\n        ({ f_param, f_team }) => (\n          f_param === param_id && checkId(f_team)),\n      )\n\n      if (isEmpty(teamTableStats)) return null\n\n      // Выдергиваем только ивенты из массива статистики для конкретной команды\n      // и делаем из них просто общий массив [number]\n      const filteredEvents = reduce(\n        teamTableStats,\n        (acc, { f_match_event_ids_json: events }) => {\n          if (!events) return acc\n          //@ts-ignore\n          forEach(events, event => acc.push(event))\n          return acc\n        }, [],\n      )\n\n      return request({\n        events: filteredEvents,\n        lang,\n        lexical_formula,\n        range: shootsRange,\n        type: 'tablesFooter',\n      })\n    },\n    /**\n    * Функция установки выбранного типа итогового значения в таблице\n    * @param {string} type - типа итогового значения\n    */\n    setType: ({\n      tournamentMatchesTableStore: { changeValueType },\n    }) => (type: string, position: number) => changeValueType(type, position),\n    /**\n    * Функция фильтрации статистики по всем матчам только по выбранным матчам.\n    И для команды соперника или нашей\n    * @param {string} page - игрок или команда\n    * @param {string} pageId - id игрока/команды\n    * @param {array} tableStats - массив параметров\n    */\n    getActualMatchesList: ({ tableStats }) => () => tableStats,\n    /**\n    * Получение класса\n    * @param {number} param_id - id параметра\n    * @param {number} param1_id - id параметра необходимого для вычисления значения (проверка на %)\n    * @param {number} gear_group_id - айди группы параметров\n    * @param {number} activeId - активный id параметра (для отображения отсортированного)\n    */\n    getClassName: () => (\n      {\n        gear_group_id,\n        param_id,\n        param1_id,\n      }:\n      {\n        param_id: number,\n        //@ts-ignore\n        param1_id?: {},\n        gear_group_id: number,\n      },\n      activeId?: string,\n    ) => cx(\n      {\n        'clickable-cell': !param1_id,\n        percents: param1_id,\n        'sorted-by': `${param_id}_${gear_group_id}` === activeId,\n      },\n    ),\n  }),\n  observer,\n)\n\nexport const TFoot = tfootComposed(TFootComponent)\n","export const playListTypes = {\n  tournamentMatches: 'tournamentMatches',\n  matches: 'matches',\n}\n","import get from 'lodash/get'\nimport size from 'lodash/size'\n\nimport { getDigits } from 'module/utils/helpers/getDigits'\nimport { getFilteredStatsByParamId } from 'module/utils/helpers/getFilteredStatsByParamId'\n/**\n * Получение значения статистики\n * @param {number} param_id - id фильтра по которому считаем статистику\n * @param {array} stats - статистика по всем параметрам\n */\nexport const getStatValue = (\n  //@ts-ignore\n  { param_id }: { param_id?: number | null },\n  stats: Array<{ f_param: number, value: number }> = [],\n) => {\n  //@ts-ignore\n  const filteredStats = getFilteredStatsByParamId(stats, param_id)\n  if (size(filteredStats) === 1) {\n    const value = get(filteredStats, '[0].value')\n    //@ts-ignore\n    return Number(value.toFixed(getDigits(param_id)))\n  }\n\n  return '—'\n}\n","import { observer, inject } from 'mobx-react'\n\nimport {\n  dateWithYear,\n  getSuffix,\n  getAbbr,\n  //@ts-ignore\n} from 'module/utils/helpers'\n\nimport { compose, withProps } from 'recompose'\nimport get from 'lodash/get'\n\nexport const leftSideTrComposed = compose(\n  inject('lexics'),\n  observer,\n  //@ts-ignore\n  withProps(\n    //@ts-ignore\n    ({\n      handleClick,\n      lexics: { lang },\n      pageId,\n      rowInfo: { f_match, match_date, opponent_score, score, ...rowInfo },\n      showOpponentStats,\n    }) => {\n      const suffix = getSuffix(lang)\n      const oppTeamName = get(rowInfo, `name_opponent_${suffix}`)\n      const teamName = get(rowInfo, `name_${suffix}`)\n\n      return {\n        rowspan: '',\n        handleClick: handleClick(f_match, pageId),\n        titleClassName: 'match-score',\n        showOpponent: showOpponentStats,\n        ownerTeamName: getAbbr(teamName),\n        oppTeamName: getAbbr(oppTeamName),\n        titleScore: `${score}:${opponent_score}`,\n        shortName: teamName,\n        shortNameOpponent: oppTeamName,\n        matchDate: dateWithYear(match_date),\n        match: {\n          has_video: true,\n          f_match,\n        },\n      }\n    },\n  ),\n)\n","import * as React from 'react'\nimport { PlayButton, MatchName, TableUI } from 'react-sport'\nimport { MatchPopup } from 'features/Table'\nimport { leftSideTrComposed } from './composed'\n\ntype TProps = {\n  showOpponent: boolean,\n  rowspan: string,\n  match: {\n    has_video: boolean,\n    f_match: number,\n  },\n  //@ts-ignore\n  handleClick: (value: SyntheticEvent<HTMLButtonElement>) => void,\n  titleScore: string,\n  titleClassName: string,\n  matchDate: string,\n  shortNameOpponent: string,\n  shortName: string,\n  ownerTeamName: string,\n  oppTeamName: string,\n  matchPopupOpened: boolean,\n  isFetching: boolean,\n  links: {},\n  toggleClose: () => {},\n}\n\n// @ts-ignore\nexport const LeftSideTr = leftSideTrComposed(\n  //@ts-ignore\n  ({\n    handleClick,\n    isFetching,\n    links,\n    match: { f_match, has_video },\n    matchDate,\n    matchPopupOpened,\n    oppTeamName,\n    ownerTeamName,\n    rowspan,\n    shortName,\n    shortNameOpponent,\n    showOpponent,\n    titleClassName,\n    titleScore,\n    toggleClose,\n  }: TProps) => (\n    //@ts-ignore\n    <TableUI.LeftSideTrWrapper rowSpan={rowspan}>\n      {matchPopupOpened && (\n      //@ts-ignore\n        <MatchPopup\n          isFetching={isFetching}\n          links={links}\n          f_match={f_match}\n          toggleClose={toggleClose}\n        />\n      )}\n      <TableUI.PlayButtonWrapper>\n        {has_video && (\n          <PlayButton\n            //@ts-ignore\n            handleClick={handleClick}\n          />\n        )}\n      </TableUI.PlayButtonWrapper>\n\n      <TableUI.MatchDate>{matchDate}</TableUI.MatchDate>\n\n      <TableUI.MatchNameWrapper>\n        <MatchName\n          //@ts-ignore\n          handleClick={handleClick}\n          teamName={shortNameOpponent}\n        />\n      </TableUI.MatchNameWrapper>\n      {/*\n        //@ts-ignore */}\n      <TableUI.MatchScoreWrapper className={titleClassName}>\n        {titleScore}\n      </TableUI.MatchScoreWrapper>\n\n      <TableUI.MatchNameWrapper>\n        {/*\n        //@ts-ignore */}\n        <MatchName handleClick={handleClick} teamName={shortName} />\n      </TableUI.MatchNameWrapper>\n\n      {showOpponent && (\n        <TableUI.MatchScoreForOppWrapper>\n          <TableUI.MatchAbbrName side='home'>\n            {ownerTeamName}\n          </TableUI.MatchAbbrName>\n          <TableUI.MatchAbbrName side='opp'>\n            {oppTeamName}\n          </TableUI.MatchAbbrName>\n        </TableUI.MatchScoreForOppWrapper>\n      )}\n    </TableUI.LeftSideTrWrapper>\n  ),\n)\n","import { compose, withHandlers, withState } from 'recompose'\nimport { inject } from 'mobx-react'\n\n// Хок для компонента c выпадашкой, в которой содержится информация о матче.\n// При клике на матч делается запрос на получение ссылок с бэка.\n// в компоненте который оборачиваестя хоком появляется метод toggleClose\n// для открытия/закрытие попап окна со списком ссылок\nconst getMatchLinksHoc = compose(\n  inject('lexics', 'matchLinks'),\n  withState('matchPopupOpened', 'setOpened', false),\n  //@ts-ignore\n  withHandlers({\n    toggleClose: ({ matchPopupOpened, setOpened }) => () =>\n      setOpened(!matchPopupOpened),\n\n    getPost: ({\n      lexics: { page },\n      matchLinks: { fetch },\n      matchPopupOpened,\n      setOpened,\n      //@ts-ignore\n      //@ts-ignore\n    }) => (f_match, pageId) => () => {\n      fetch(f_match, pageId, page)\n      setOpened(!matchPopupOpened)\n    },\n  }),\n)\n\nexport default getMatchLinksHoc\n","import { compose, withHandlers } from 'recompose'\nimport isEmpty from 'lodash/isEmpty'\nimport filter from 'lodash/filter'\nimport reduce from 'lodash/reduce'\n\nimport { inject } from 'mobx-react'\n\nconst getExtLinkHOC = compose(\n  inject('lexics', 'videoLink', 'shootsRange'),\n  withHandlers({\n    getFilterCondition: () => (\n      stat: { f_match: number, f_param: number },\n      filterType?: string,\n      //@ts-ignore\n      id: number,\n    ) => {\n      // Проверяем дополнительно по команде или игроку, если необходимо\n      //@ts-ignore\n      const checkByTeam = filterType ? stat[`f_${filterType}`] === id : true\n      return checkByTeam\n    },\n  }),\n  //@ts-ignore\n  withHandlers({\n    getExtLink: ({\n      getFilterCondition,\n      lexics: { lang },\n      shootsRange,\n      tableStats,\n      videoLink: { request },\n    }) => ({\n      //@ts-ignore\n      //@ts-ignore\n      filterType,\n      //@ts-ignore\n      id,\n      //@ts-ignore\n      match,\n      //@ts-ignore\n      param: { lexical_formula, param_id },\n      //@ts-ignore\n      playListType,\n    }) => () => {\n      const matchTeams = filter(\n        tableStats,\n        stat =>\n          stat.f_match === match.f_match\n          && stat.f_param === param_id\n          && getFilterCondition(stat, filterType, id),\n      )\n\n      const events = reduce(\n        matchTeams,\n        (acc, { f_match_event_ids_json }) => {\n          if (f_match_event_ids_json) {\n            //@ts-ignore\n            //@ts-ignore\n            f_match_event_ids_json.forEach(event => acc.push(event))\n          }\n          return acc\n        },\n        [],\n      )\n\n      if (!isEmpty(events)) {\n        request({\n          events,\n          range: shootsRange,\n          lang,\n          lexical_formula,\n          matchInfo: match,\n          type: playListType,\n        })\n      }\n    },\n  }),\n)\n\nexport default getExtLinkHOC\n","import { compose, withHandlers } from 'recompose'\nimport cx from 'classnames'\n\ntype TParam = {\n  gear_group_id: number,\n  param1_id: number | null,\n  param_id: number,\n}\n\nexport const clickableClassNameHOC = compose(\n  withHandlers({\n    /**\n     * Получение класса\n     * @param {number} param_id - id параметра\n     * @param {number} param1_id - id параметра необходимого для вычисления значения (проверка на %)\n     * @param {number} gear_group_id - айди группы параметров\n     * @param {number} activeId - активный id параметра (для отображения отсортированного)\n     */\n    getClassName: () => ({\n      gear_group_id,\n      param_id,\n      param1_id,\n    }: TParam,\n    activeId: string) => cx({\n      'clickable-cell': !param1_id,\n      percents: param1_id,\n      'sorted-by': `${param_id}_${gear_group_id}` === activeId,\n    }),\n\n  }),\n)\n","import { inject, observer } from 'mobx-react'\nimport filter from 'lodash/filter'\nimport {\n  compose,\n  withProps,\n  withHandlers,\n\n} from 'recompose'\n\nimport getMatchLinksHoc from 'hocs/getMatchLinksHoc'\nimport getExtLinkHOC from 'hocs/getExtLinkHOC'\nimport { clickableClassNameHOC } from 'hocs/getClickableTdClassNameHoc'\n\nimport { TPropsTrComposed } from './types'\n\nexport const TrComposed = compose<any, TPropsTrComposed>(\n  inject(\n    'videoLink',\n    'lexics',\n    'shootsRange',\n    'matchLinks',\n  ),\n  getMatchLinksHoc,\n  getExtLinkHOC,\n  observer,\n  //@ts-ignore\n  withProps(({\n    rowInfo: {\n      f_match,\n      opp_team_id,\n      team_id,\n    },\n    tableStats,\n  }) => {\n    //@ts-ignore\n    const checkMatchId = stat => stat.f_match === f_match\n    return ({\n      teams: [team_id, opp_team_id],\n      tableStats: filter(tableStats, checkMatchId),\n    })\n  }),\n  clickableClassNameHOC,\n  withHandlers({\n    // Фильтруем всю статистику только по конкретной команде\n    getStatsListByTeam: (\n      { tableStats }: { tableStats: Array<any> | void },\n      //@ts-ignore\n    ) => (teamId?: number | null, matchId?: number) => {\n      let filterOptions = { f_match: matchId }\n      if (teamId) {\n        filterOptions = {\n          ...filterOptions,\n          //@ts-ignore\n          f_team: teamId,\n        }\n      }\n      //@ts-ignore\n      return filter(tableStats, filterOptions)\n    },\n  }),\n  observer,\n)\n","import React from 'react'\nimport map from 'lodash/map'\n\n// @ts-ignore\nimport { playListTypes } from 'config/playListTypes'\n// @ts-ignore\nimport { getStatValue } from 'module/utils/helpers/getStatValue'\n// @ts-ignore\nimport { getSummaryStatValue } from 'module/utils/helpers/getSummaryStatValue'\n\nimport { LeftSideTr } from '../LeftSideTr'\nimport { TrComposed } from './composed'\nimport { TPropsTr } from './types'\n\n// Строка со статистикой по матчу\nexport const Tr = TrComposed(\n  ({\n    activeId,\n    getClassName,\n    getExtLink,\n    getPost,\n    getStatsListByTeam,\n    matchLinks: { isFetching, links },\n    matchPopupOpened,\n    pageId,\n    rowInfo,\n    rowInfo: { f_match },\n    selectedParams,\n    showOpponentStats,\n    teams,\n    toggleClose,\n  }: TPropsTr) => (\n    <tr className='stats-table__table-row'>\n      {/*\n        //@ts-ignore */}\n      <LeftSideTr\n        showOpponentStats={showOpponentStats}\n        rowInfo={rowInfo}\n        pageId={pageId}\n        handleClick={getPost}\n        matchPopupOpened={matchPopupOpened}\n        isFetching={isFetching}\n        links={links}\n        toggleClose={toggleClose}\n      />\n      {map(selectedParams, param => (\n        <td\n          key={`${param.param_id}_${param.gear_group_id}`}\n            //@ts-ignore\n          className={getClassName(param, activeId)}\n        >\n          {showOpponentStats ? (\n            <table>\n              <tbody>\n                {map(teams, team => (\n                  <tr\n                    key={team}\n                      //@ts-ignore\n                    onClick={getExtLink({\n                      param,\n                      id: team,\n                      match: rowInfo,\n                      filterType: 'team',\n                      playListType: playListTypes.tournamentMatches,\n                    })}\n                  >\n                    <td>\n                      {getStatValue(param, getStatsListByTeam(team, f_match))}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          ) : (\n            <table>\n              <tbody>\n                <tr\n                  //@ts-ignore\n                  onClick={getExtLink({\n                    param,\n                    id: +pageId,\n                    match: rowInfo,\n                    playListType: playListTypes.tournamentMatches,\n                  })}\n                >\n                  <td>\n                    {getSummaryStatValue(\n                      param.param_id,\n                      //@ts-ignore\n                      getStatsListByTeam(null, f_match),\n                      'total',\n                    )}\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          )}\n        </td>\n      ))}\n    </tr>\n  ),\n)\n","import React, { Fragment } from 'react'\nimport { inject, observer } from 'mobx-react'\nimport { compose, withHandlers } from 'recompose'\nimport map from 'lodash/map'\nimport filter from 'lodash/filter'\n\nimport { TableUI } from 'react-sport'\n\n// @ts-ignore\nimport { getSummaryStatValue } from 'module/utils/helpers/getSummaryStatValue'\n// @ts-ignore\nimport { emptyStatToZero } from 'module/utils/helpers/emptyStatToZero'\n\n// @ts-ignore\nimport Loader from 'features/components/common/loader/Loader'\n// @ts-ignore\nimport { THead } from 'features/Table'\n// @ts-ignore\nimport { TBody } from 'hocs/sortedTableItemsHoc'\n// @ts-ignore\nimport { ShowMoreBtn } from 'features/ShowMoreBtn'\n\nimport { TFoot } from './HOCs/TFootHOC'\nimport { Tr } from './Tr'\n\nimport './styles.scss'\n\ntype TParam = {\n  param_id: number,\n  gear_group_id: number,\n  full_lexical_formula: string,\n  short_lexical_formula: string,\n}\n\ntype TProps = {\n  pageId: string,\n  sortInc: boolean,\n  activeId: string,\n  table: {\n    selectedParams: Array<TParam>,\n  },\n  setSortedId: () => {},\n  getMatchesList: () => Array<{}>,\n  currentStore: {\n    isLoaded: boolean,\n    showOpponentStats: boolean,\n    stats: Array<{}>,\n    addOffset: () => void,\n    partFetching: boolean,\n    canFetch: boolean,\n  },\n  param?: {},\n}\n\n// Основной блок таблицы со статистикой для страницы турнира\nconst TournamentTableComponent = ({\n  activeId,\n  currentStore: {\n    addOffset,\n    canFetch,\n    isLoaded,\n    partFetching,\n    showOpponentStats,\n    stats,\n  },\n  getMatchesList,\n  pageId,\n  setSortedId,\n  sortInc,\n  table,\n}: TProps) => (\n\n  <Fragment>\n    <div className='stats-table__wrapper'>\n\n      <table className='stats-table__table'>\n        <TableUI.Thead>\n          {/*\n          //@ts-ignore */}\n          <THead table={table} setSortedId={setSortedId} />\n        </TableUI.Thead>\n        {isLoaded ? (\n          <Fragment>\n            {/*\n            //@ts-ignore */}\n            <TBody\n              selectedParams={table.selectedParams}\n              rows={getMatchesList()}\n              tableStats={stats}\n              pageId={pageId}\n              sortInc={sortInc}\n              activeId={activeId}\n              showOpponentStats={showOpponentStats}\n              Tr={Tr}\n            />\n            {/*\n            //@ts-ignore */}\n            <TFoot\n              table={table}\n              tableStats={stats}\n              pageId={pageId}\n              activeId={activeId}\n              showOpponentStats={showOpponentStats}\n            />\n          </Fragment>\n        ) : (\n          <Loader />\n        )}\n      </table>\n    </div>\n    {canFetch && (\n      <div className='show-btn-container'>\n        <ShowMoreBtn onClick={addOffset} isFetching={partFetching} />\n      </div>\n    )}\n  </Fragment>\n)\n\nconst tournamentTableComposed = compose(\n  inject('tournamentMatchesTableStore'),\n  //@ts-ignore\n  withHandlers({\n    /**\n     * Получение списка матчей, отсортированного по значению выбранного параметра\n     * @param {boolean} sortInc - флаг для сортировки (по убыванию или по возрастанию)\n     */\n    getMatchesList: ({\n      param,\n      tournamentMatchesTableStore: { actualMatchesList, stats },\n    }) => () =>\n      map(actualMatchesList, (match) => {\n        const sortedValue = getSummaryStatValue(\n          param.param_id,\n          filter(stats, { f_match: match.f_match }),\n          'total',\n        )\n        return {\n          ...match,\n          param,\n          sortBy: emptyStatToZero(sortedValue),\n        }\n      }),\n  }),\n  observer,\n)\n\n// @ts-ignore\nexport const TournamentTable = tournamentTableComposed(\n  //@ts-ignore\n  TournamentTableComponent,\n)\n","\nimport { types } from 'mobx-state-tree'\n\nimport { callApi } from 'react-sport'\n\nimport get from 'lodash/get'\n\n// @ts-ignore\nimport routes from 'config/routes'\n\ntype TConfig = {\n  method: string,\n  body: string,\n};\n\nconst url: string = `${routes.API_ROOT}/data`\n\nexport const TournamentPagePlayersApiActions = types\n  .model({})\n  .actions(self => ({\n    fetchTableParams(tournamentId: number, seasonId: number) {\n      const config: TConfig = {\n        method: 'POST',\n        body: JSON.stringify({\n          proc: 'scout_tournament_players_stat',\n          params: {\n            _p_tournament_id: tournamentId,\n            _p_season_id: seasonId,\n          },\n        }),\n      }\n\n      // Делаем также запрос для параметров шестеренки\n      //@ts-ignore\n      self.getGearParamsList(0)\n\n      return callApi({\n        url,\n        config,\n        onRequest: () => {\n          //@ts-ignore\n          self.error = null\n          //@ts-ignore\n          self.isLoaded = false\n        },\n        //@ts-ignore\n        onSuccess: self._onSuccesPlayers,\n        //@ts-ignore\n        onError: self._onError,\n      })\n    },\n\n    //@ts-ignore\n    _onSuccesPlayers({ data }: {}) {\n      //@ts-ignore\n      self.players = get(data, '[0].scout_tournament_players_stat') || []\n\n      if (window.localStorage.getItem('tournamentPlayersTableStore') === null) {\n        //@ts-ignore\n        self.saveTables()\n      } else {\n        //@ts-ignore\n        //@ts-ignore\n        self.tables = JSON.parse(\n          //@ts-ignore\n          window.localStorage.getItem('tournamentPlayersTableStore'),\n        )\n      }\n\n      //@ts-ignore\n      self.isLoaded = true\n    },\n\n    _onError(error: any) {\n      //@ts-ignore\n      self.error = error\n    },\n  }))\n","import { types } from 'mobx-state-tree'\n\nimport filter from 'lodash/fp/filter'\nimport sortBy from 'lodash/fp/sortBy'\nimport flow from 'lodash/fp/flow'\n\n// @ts-ignore\nimport { saveTablesToLocalStorage } from 'module/utils/helpers'\n// @ts-ignore\nimport { defaultTableName } from 'config/tables'\n\nexport const TournamentPagePlayersActions = types.model({}).actions(self => ({\n  saveTables() {\n    const defaultTable = {\n      position: 1,\n      selectedParams: flow(\n        filter('is_default'),\n        sortBy(['gear_group_id', 'sort_order']),\n        //@ts-ignore\n      )(self.totalParams),\n      tableName: defaultTableName,\n      summaryType: 'total',\n    }\n    //@ts-ignore\n    self.tables = {\n      1: defaultTable,\n    }\n    //@ts-ignore\n    saveTablesToLocalStorage({\n      name: 'tournamentPlayersTableStore',\n      //@ts-ignore\n      tables: self.tables,\n    })\n  },\n\n  toggleShowAvatar() {\n    //@ts-ignore\n    //@ts-ignore\n    self.avatarIsVisible = !self.avatarIsVisible\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\nexport const TournamentPagePlayersViews = types.model({}).volatile(() => ({\n  avatarIsVisible: false,\n}))\n","import { types } from 'mobx-state-tree'\n\n// @ts-ignore\nimport { TableStore } from 'features/Table/models/tableModel'\n\nimport { TournamentPagePlayersApiActions } from './apiActions'\nimport { TournamentPagePlayersActions } from './actions'\nimport { TournamentPagePlayersViews } from './views'\n\nconst Param = types.model('Param', {\n  p: types.number,\n  o: types.number,\n  v: types.number,\n})\n\nconst Player = types.model('Player', {\n  f_player: types.number,\n  shirt_num: types.maybeNull(types.string),\n  name_rus: types.string,\n  name_eng: types.string,\n  f_team: types.maybeNull(types.number),\n  pos1: types.maybeNull(types.number),\n  params: types.maybeNull(types.array(Param)),\n})\n\nexport const TournamentPagePlayersTable = types.model('TournamentPlayers', {\n  storeName: 'tournamentPlayersTableStore',\n  isLoaded: false,\n  error: types.maybeNull(types.frozen({})),\n  tables: types.frozen({}),\n  players: types.array(Player),\n})\n\nexport const TournamentPlayersTableStore = types.compose(\n  // общие методы и свойства таблиц\n  TableStore,\n  // Собственные методы и свойства\n  TournamentPagePlayersTable,\n  TournamentPagePlayersApiActions,\n  TournamentPagePlayersActions,\n  TournamentPagePlayersViews,\n)\n","\nimport React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { lifecycle, compose } from 'recompose'\n\n// @ts-ignore\nimport { Tables } from 'features/Table'\n// @ts-ignore\nimport Loader from 'features/components/common/loader/Loader'\n// @ts-ignore\nimport { tableTypes } from 'config/tables'\n\ntype TProps = {\n  lexics: { page: string },\n  tournamentId: number,\n  tournamentPlayersTableStore: { isLoaded: boolean, tables: {} },\n};\n\nconst TournamentPlayersTableComponent = ({\n  tournamentId,\n  tournamentPlayersTableStore: { isLoaded, tables },\n}: TProps) =>\n  (isLoaded ? (\n    <Tables\n      tableType={tableTypes.tournamentPlayers}\n      tables={tables}\n      pageId={String(tournamentId)}\n    />\n  ) : (\n    <Loader />\n  ))\n\nexport const TournamentPlayersTableComposed = compose(\n  inject('lexics', 'tournamentPlayersTableStore', 'tournamentSeasonSelect'),\n  lifecycle({\n    componentDidMount() {\n      const {\n        //@ts-ignore\n        tournamentId,\n        //@ts-ignore\n        tournamentPlayersTableStore: { fetchTableParams },\n        //@ts-ignore\n        tournamentSeasonSelect: { selectedSeason },\n      } = this.props\n      fetchTableParams(tournamentId, selectedSeason.season_id)\n    },\n  }),\n  observer,\n)\n\n// @ts-ignore\nexport const TournamentPlayersTable = TournamentPlayersTableComposed(\n  //@ts-ignore\n  TournamentPlayersTableComponent,\n)\n","import { observer, inject } from 'mobx-react'\n\nimport get from 'lodash/get'\nimport { compose, withProps } from 'recompose'\n\nimport { utils } from 'react-sport'\n\n// @ts-ignore\nimport { getLongSuffix } from 'module/utils/helpers'\n\nexport const leftSideTrComposed = compose(\n  inject('lexics', 'tournamentPlayersTableStore'),\n  observer,\n  //@ts-ignore\n  withProps(\n    //@ts-ignore\n    ({\n      lexics: { lang },\n      rowInfo: {\n        f_player,\n        ...rowInfo\n      },\n      tournamentPlayersTableStore: { avatarIsVisible },\n    }) => {\n      const suffix = getLongSuffix(lang)\n\n      return {\n        rowspan: '',\n        avatarUrl: utils.helpers.getLogo({\n          type: 'players_volleyball',\n          id: f_player,\n        }),\n        avatarIsVisible,\n        playerProfileLink: `/players/${f_player}`,\n        shirtNumber: get(rowInfo, 'shirt_num'),\n        playerName: get(rowInfo, `name_${suffix}`),\n      }\n    },\n  ),\n)\n","import * as React from 'react'\n\nimport { TableUI, utils } from 'react-sport'\n\nimport { leftSideTrComposed } from './composed'\n\ntype TProps = {\n  rowspan: string,\n  //@ts-ignore\n  shirtNumber: string | null,\n  playerName: string,\n  avatarUrl: string,\n  playerProfileLink: string,\n  avatarIsVisible: boolean,\n}\n//@ts-ignore\nexport const LeftSideTr = leftSideTrComposed(({\n  avatarIsVisible,\n  avatarUrl,\n  playerName,\n  playerProfileLink,\n  shirtNumber,\n}: TProps) => (\n  <TableUI.LeftSideTrPlayersWrapper>\n    {avatarIsVisible && (\n      <TableUI.ResultsAvatar\n        src={avatarUrl}\n        onError={utils.helpers.onProfileImageError}\n      />\n    )}\n    <TableUI.PlayerNumber>\n      {shirtNumber}\n    </TableUI.PlayerNumber>\n    {/*\n        //@ts-ignore */}\n    <TableUI.PlayerName href={playerProfileLink}>\n      {playerName}\n    </TableUI.PlayerName>\n  </TableUI.LeftSideTrPlayersWrapper>\n))\n","import { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers } from 'recompose'\n\nimport get from 'lodash/get'\nimport find from 'lodash/find'\n\n// @ts-ignore\nimport getMatchLinksHoc from 'hocs/getMatchLinksHoc'\n// @ts-ignore\nimport getExtLinkHOC from 'hocs/getExtLinkHOC'\n// @ts-ignore\nimport { clickableClassNameHOC } from 'hocs/getClickableTdClassNameHoc'\n\nimport { TPropsTrComposed } from './types'\n\nexport const TrComposed = compose<any, TPropsTrComposed>(\n  inject('videoLink', 'lexics', 'shootsRange', 'matchLinks'),\n  getMatchLinksHoc,\n  getExtLinkHOC,\n  clickableClassNameHOC,\n  //@ts-ignore\n  withHandlers({\n    getStat: ({ rowInfo: { params } }) =>\n      //@ts-ignore\n      paramId => String(get(find(params, { p: paramId }), 'v', 0)),\n  }),\n  observer,\n)\n","import React from 'react'\nimport map from 'lodash/map'\n\nimport { TableUI } from 'react-sport'\nimport { LeftSideTr } from '../LeftSideTr'\nimport { TrComposed } from './composed'\n\n// import { TPropsTr } from './types'\n\ntype TProps = {\n  activeId: string,\n  //@ts-ignore\n  getClassName: (param: {}, activeId: string) => void,\n  rowInfo: {},\n  pageId: string,\n  selectedParams: Array<{}>,\n  getStat: (param: number) => string,\n}\n\n// Строка со статистикой по игроку\nexport const Tr = TrComposed(\n  ({\n    activeId,\n    getClassName,\n    getStat,\n    pageId,\n    rowInfo,\n    selectedParams,\n  }: TProps) => (\n    <tr className='stats-table__table-row'>\n      {/*\n          //@ts-ignore */}\n      <LeftSideTr rowInfo={rowInfo} pageId={pageId} />\n      {map(selectedParams, param => (\n        <TableUI.Td\n          //@ts-ignore\n          key={`${param.param_id}_${param.gear_group_id}`}\n            //@ts-ignore\n          className={getClassName(param, activeId)}\n            //@ts-ignore\n          value={getStat(param.param_id)}\n          onClick={() => { }}\n        />\n      ))}\n    </tr>\n  ),\n)\n","import React, { Fragment } from 'react'\nimport { inject } from 'mobx-react'\n\nimport { compose, withHandlers } from 'recompose'\n\nimport map from 'lodash/map'\nimport find from 'lodash/find'\nimport get from 'lodash/get'\n\nimport { TableUI } from 'react-sport'\n\n// @ts-ignore\nimport { emptyStatToZero } from 'module/utils/helpers/emptyStatToZero'\n\n// @ts-ignore\nimport Loader from 'features/components/common/loader/Loader'\n// @ts-ignore\nimport { THead } from 'features/Table'\n// @ts-ignore\nimport { TBody } from 'hocs/sortedTableItemsHoc'\n\nimport { Tr } from './Tr'\n\ntype TParam = {\n  param_id: number,\n  gear_group_id: number,\n  full_lexical_formula: string,\n  short_lexical_formula: string,\n};\n\ntype TProps = {\n  pageId: string,\n  sortInc: boolean,\n  activeId: string,\n  table: {\n    selectedParams: Array<TParam>,\n  },\n  setSortedId: () => {},\n  currentStore: {\n    isLoaded: boolean,\n  },\n  param?: {},\n  getPlayersList: () => Array<{}>,\n};\n\n// Основной блок таблицы со статистикой для страницы турнира\nconst TournamentPlayersComponent = ({\n  activeId,\n  currentStore: { isLoaded },\n  getPlayersList,\n  pageId,\n  setSortedId,\n  sortInc,\n  table,\n}: TProps) => (\n  <Fragment>\n    <div className='stats-table__wrapper'>\n      <table className='stats-table__table'>\n        <TableUI.Thead>\n          {/*\n              // @ts-ignore */}\n          <THead table={table} setSortedId={setSortedId} />\n        </TableUI.Thead>\n        {isLoaded ? (\n          <Fragment>\n            {/*\n                //@ts-ignore */}\n            <TBody\n              selectedParams={table.selectedParams}\n              rows={getPlayersList()}\n              pageId={pageId}\n              sortInc={sortInc}\n              activeId={activeId}\n              Tr={Tr}\n            />\n          </Fragment>\n        ) : (\n          <Loader />\n        )}\n      </table>\n    </div>\n  </Fragment>\n)\n\nconst tournamentPlayersComposed = compose(\n  inject('tournamentPlayersTableStore'),\n  //@ts-ignore\n  withHandlers({\n    /**\n     * Получение списка матчей, отсортированного по значению выбранного параметра\n     * @param {boolean} sortInc - флаг для сортировки (по убыванию или по возрастанию)\n     */\n    getPlayersList: ({\n      param,\n      tournamentPlayersTableStore: { players },\n    }) => () =>\n      map(players, (player) => {\n        const sortedValue = get(\n          find(player.params, { p: param.param_id }),\n          'v',\n          0,\n        )\n        return {\n          ...player,\n          param,\n          sortBy: emptyStatToZero(sortedValue),\n        }\n      }),\n  }),\n)\n\n// @ts-ignore\nexport const TournamentPlayers = tournamentPlayersComposed(\n  //@ts-ignore\n  TournamentPlayersComponent,\n)\n","\nimport { inject, observer } from 'mobx-react'\nimport { compose, withHandlers } from 'recompose'\nimport get from 'lodash/get'\nimport find from 'lodash/find'\nimport filter from 'lodash/filter'\nimport isEmpty from 'lodash/isEmpty'\n\n// @ts-ignore\nimport { getLongSuffix } from 'module/utils/helpers'\n// @ts-ignore\nimport { clickableClassNameHOC } from 'hocs/getClickableTdClassNameHoc'\n\ntype TProps = {\n  videoLink: {\n    request: (boby: {}) => void,\n  },\n  lexics: {\n    lang: string,\n  },\n  shootsRange: {},\n  matchTable: {},\n  matchProfile: {},\n  tableStats: Array<any>,\n};\n\nexport const TrMatchComposed = compose<any, TProps>(\n  inject('videoLink', 'lexics', 'shootsRange', 'matchTable', 'matchProfile'),\n  //@ts-ignore\n  withHandlers({\n    /**\n     * Получение списка параметров для конкретного игрока\n     * @param {array} tableStats - весь список параметров\n     * @param {number} f_player - id игрока\n     */\n    //@ts-ignore\n    getCurrentPlayerStats: ({ tableStats }) => playerId =>\n      filter(tableStats, ({ f_player }) => f_player === playerId),\n    /**\n     * Получение информации об игроке\n     * @param {number} f_player - id игрока\n     * @param {string} lang - язык из настроек\n     */\n    getPlayerName: ({\n      matchTable: { playersInfo },\n      //@ts-ignore\n      //@ts-ignore\n    }) => (playerId, lang) => {\n      const player = get(\n        find(playersInfo, { f_player: playerId }),\n        'prop_player[0]',\n      )\n      const suffix = getLongSuffix(lang)\n      const firstName = player[`firstname_${suffix}`]\n      const lastName = player[`lastname_${suffix}`]\n\n      return `${firstName} ${lastName}`\n    },\n    /**\n     * Функция открытия окна с видео\n     * @param {number} param_id - id параметра для поиска в таблице со статистикой\n     * @param {number} f_player - id игрока\n     */\n    getExtLink: ({\n      lexics: { lang },\n      shootsRange,\n      tableStats,\n      videoLink: { request },\n    }) => (\n      //@ts-ignore\n      //@ts-ignore\n      { lexical_formula, param_id },\n      //@ts-ignore\n      playerId,\n      //@ts-ignore\n      playerName,\n    ) => () => {\n      const events = get(\n        find(tableStats, { f_param: param_id, f_player: playerId }),\n        'f_match_event_ids_json',\n        [],\n      )\n\n      if (!isEmpty(events)) {\n        request({\n          events,\n          range: shootsRange,\n          lang,\n          lexical_formula,\n          playerInfo: playerName,\n          type: 'matches',\n        })\n      }\n    },\n  }),\n  clickableClassNameHOC,\n  observer,\n)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport map from 'lodash/map'\n\n// @ts-ignore\nimport { getStatValue } from 'module/utils/helpers/getStatValue'\n\nimport { TrMatchComposed } from './composed'\n\ntype TProps = {\n  activeId: string,\n  getClassName: (param: {}, activeId: string) => string,\n  getCurrentPlayerStats: (f_player: number) => Array<any>,\n  getExtLink: (param: {}, f_player: number, playerName: string) => void,\n  getPlayerName: (f_player: number, lang: string) => string,\n  lexics: { lang: string },\n  rowInfo: {\n    f_player: number,\n    num: number,\n  },\n  selectedParams: Array<{}>,\n}\n\n// Строка со статистикой по матчу\nconst TrMatchComponent = ({\n  activeId,\n  getClassName,\n  getCurrentPlayerStats,\n  getExtLink,\n  getPlayerName,\n  lexics: { lang },\n  rowInfo: { f_player, num },\n  selectedParams,\n}: TProps) => (\n  <tr className='stats-table__table-row'>\n    <td>\n      <Link target='_blank' to={`/players/${f_player}`}>\n        <div className='stats-cell'>\n          <div className='player-number'>{num}</div>\n          <div className='player-name'>{getPlayerName(f_player, lang)}</div>\n        </div>\n      </Link>\n    </td>\n    {map(selectedParams, param => (\n      <td\n        //@ts-ignore\n        key={`${param.param_id}_${param.gear_group_id}`}\n        className={getClassName(param, activeId)}\n      >\n        <table>\n          <tbody>\n            <tr\n              //@ts-ignore\n              onClick={getExtLink(\n                param,\n                f_player,\n                getPlayerName(f_player, lang),\n              )}\n            >\n              <td>{getStatValue(param, getCurrentPlayerStats(f_player))}</td>\n            </tr>\n          </tbody>\n        </table>\n      </td>\n    ))}\n  </tr>\n)\n\nexport const TrMatch = TrMatchComposed(TrMatchComponent)\n","import React, { Fragment } from 'react'\nimport { observer } from 'mobx-react'\n\nimport { TableUI } from 'react-sport'\n\nimport { THead } from 'features/Table'\nimport { TBody } from 'hocs/sortedTableItemsHoc'\n\nimport { TrMatch } from '../Tr'\n\ntype TProps = {\n  table: {},\n  setSortedId: () => {},\n  tableStats: Array<{}>,\n  pageId: string,\n  sortInc: boolean,\n  activeId: string,\n  param: {},\n  rows: Array<{}>,\n}\n\nexport const Table = observer(\n  ({\n    activeId,\n    pageId,\n    param,\n    rows,\n    setSortedId,\n    sortInc,\n    table,\n    tableStats,\n  }: TProps) => (\n    <Fragment>\n      <TableUI.Thead>\n        {/*\n        //@ts-ignore */}\n        <THead table={table} setSortedId={setSortedId} />\n      </TableUI.Thead>\n      {/*\n      //@ts-ignore */}\n      <TBody\n        //@ts-ignore\n        selectedParams={table.selectedParams}\n        rows={rows}\n        tableStats={tableStats}\n        pageId={pageId}\n        sortInc={sortInc}\n        activeId={activeId}\n        param={param}\n        Tr={TrMatch}\n      />\n    </Fragment>\n  ),\n)\n","import { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withProps,\n  withHandlers,\n  lifecycle,\n} from 'recompose'\nimport reduce from 'lodash/reduce'\nimport map from 'lodash/map'\nimport isEmpty from 'lodash/isEmpty'\nimport filter from 'lodash/filter'\n\nimport { emptyStatToZero } from 'module/utils/helpers/emptyStatToZero'\nimport { getStatValue } from 'module/utils/helpers/getStatValue'\n\nimport {\n  TProps,\n  TWithPropsInner,\n  TWithPropsOuter,\n  THocInner,\n  TParam,\n  TComposedInner,\n  TWithHandlersInner,\n  TStats,\n} from './types'\n\nexport const tableComposed = compose<TComposedInner, TProps>(\n  inject('matchTable', 'matchProfile'),\n\n  withProps<TWithPropsOuter, TWithPropsInner>(({\n    matchTable: { playerList, tableStats },\n    param,\n  }) => {\n    const playerListByTeams = playerList || []\n    const filteredPlayerStats = ({ f_player }: { f_player: number }): TStats =>\n      filter(tableStats, { f_player })\n\n    // Добавляем поле sortBy для каждого игрока, если есть параметр, по которому сортировать\n    const teamsPlayersStats = isEmpty(param)\n      ? playerListByTeams\n      : reduce(\n        playerListByTeams,\n        (\n          acc: {[key: number] : {}},\n          curr: {},\n          team: number,\n        ) => {\n          acc[team] = map(curr, (player: {f_player: number}) => {\n            const sortedValue = getStatValue(\n              param,\n              filteredPlayerStats(player),\n            )\n            return {\n              ...player,\n              sortBy: emptyStatToZero(sortedValue),\n            }\n          })\n          return acc\n        },\n        {},\n      )\n\n    return {\n      teamsPlayersStats,\n    }\n  }),\n\n  withHandlers<THocInner, TWithHandlersInner>({\n    // Дополняем метод записью в сторе для таблицы\n    // Устанавливаем активный параметр - по нему идет сортировка в таблице\n    handleSetActiveParam: ({\n      matchTable: { setActiveParam },\n      setSortedId,\n      table,\n    }) => (param: {}) => {\n      setSortedId(param)\n      setActiveParam(table, param)\n    },\n  }),\n  lifecycle<THocInner & TParam, {}>({\n    componentDidUpdate(prevProps) {\n      const {\n        matchTable: { setActiveParam },\n        param,\n        table,\n      } = this.props\n      if (isEmpty(param) && !isEmpty(prevProps.param)) {\n        setActiveParam(table, param)\n      }\n    },\n  }),\n  observer,\n)\n","import React, { Fragment } from 'react'\n\nimport { Table } from './Table'\nimport { tableComposed } from './tableComposed'\n\ntype TProps = {\n  activeId: string,\n  currentStore: { tableStats: Array<{}> },\n  matchTable: {\n    playerList: [] | {},\n  },\n  matchProfile: {\n    data: {\n      team1_id: number,\n      team2_id: number,\n    },\n  },\n  pageId: string,\n  param: {},\n  handleSetActiveParam: () => void,\n  sortInc: boolean,\n  table: {},\n  teams: {\n    showTeam1: boolean,\n    showTeam2: boolean,\n  },\n  teamsPlayersStats: {},\n}\n\n// Основной блок таблицы со статистикой для страницы матча\nexport const TableMatchWrapper = tableComposed(\n  ({\n    activeId,\n    currentStore: { tableStats },\n    handleSetActiveParam,\n    matchProfile: {\n      data: { team1_id, team2_id },\n    },\n    pageId,\n    param,\n    sortInc,\n    table,\n    teams: { showTeam1, showTeam2 },\n    teamsPlayersStats,\n  }: TProps) => (\n    <div className='stats-table__wrapper'>\n      <table className='stats-table__table'>\n        <Fragment>\n          {showTeam1 && (\n            <Table\n              //@ts-ignore\n              rows={teamsPlayersStats[team1_id]}\n              tableStats={tableStats}\n              table={table}\n                //@ts-ignore\n              setSortedId={handleSetActiveParam}\n              pageId={pageId}\n              sortInc={sortInc}\n              activeId={activeId}\n              param={param}\n            />\n          )}\n          {showTeam2 && (\n            <Table\n              //@ts-ignore\n              rows={teamsPlayersStats[team2_id]}\n              tableStats={tableStats}\n              table={table}\n                //@ts-ignore\n              setSortedId={handleSetActiveParam}\n              pageId={pageId}\n              sortInc={sortInc}\n              activeId={activeId}\n              param={param}\n            />\n          )}\n        </Fragment>\n      </table>\n    </div>\n  ),\n)\n","import { inject, observer } from 'mobx-react'\nimport {\n  compose,\n  withHandlers,\n} from 'recompose'\nimport cx from 'classnames'\nimport get from 'lodash/get'\n\nimport { TFoot as TFootComponent } from 'features/Table'\n\nconst TfootComposed = compose(\n  inject(\n    'selectedMatches',\n    'matches',\n    'shootsRange',\n    'lexics',\n    'videoLink',\n    'teamTable',\n    'playerTable',\n  ),\n  //@ts-ignore\n  withHandlers({\n    /**\n    * Функция для открытия попап окна с видео повторами\n    * @param {number} param_id - id параметра\n    * @param {string} lexical_formula - название параметра\n    * @param {array} tableStats - массив всех параметров\n    * @param {number} id - id игрока или команды\n    * @param {boolean} forOpp - флаг для фильтрации. Ищем для своей команды или для команд соперника\n    */\n    getExtLink: ({\n      lexics: { lang, page },\n      shootsRange,\n      tableStats,\n      videoLink: { request },\n    }) => (\n      {\n        //@ts-ignore\n        lexical_formula,\n        //@ts-ignore\n        param_id,\n      },\n      //@ts-ignore\n      id,\n      //@ts-ignore\n      forOpp,\n    ) => {\n      //@ts-ignore\n      const checkId = (teamId) => {\n        if (page === 'player') {\n          return true\n        }\n        if (forOpp) {\n          return teamId !== id\n        }\n        return teamId === id\n      }\n\n      // Фильтруем сначала по команде\n      const events = tableStats.filter(\n        //@ts-ignore\n        ({ f_param, f_team }) => (\n          f_param === param_id && checkId(f_team)),\n      )\n      const filteredEvents = events.map(\n        (\n          { f_match_event_ids_json }\n          //@ts-ignore\n          : { f_match_event_ids_json: Array<number | null> },\n        ) => f_match_event_ids_json,\n      )\n        .flat()\n      // удаляем все null из массива эвентов\n        .filter(Boolean)\n\n      if (events.length) {\n        request({\n          events: filteredEvents,\n          lang,\n          lexical_formula,\n          range: shootsRange,\n          type: 'tablesFooter',\n        })\n      }\n    },\n    /**\n    * Функция установки выбранного типа итогового значения в таблице\n    * @param {string} type - типа итогового значения\n    */\n    setType: ({\n      lexics: { page },\n      playerTable,\n      teamTable,\n    }) => (type: string, position: number) => {\n      if (page === 'team') {\n        return teamTable.changeValueType(type, position)\n      }\n      return playerTable.changeValueType(type, position)\n    },\n    /**\n    * Функция фильтрации статистики по всем матчам только по выбранным матчам.\n    И для команды соперника или нашей\n    * @param {string} page - игрок или команда\n    * @param {string} pageId - id игрока/команды\n    * @param {array} tableStats - массив параметров\n    */\n    getActualMatchesList: ({\n      lexics: { page },\n      selectedMatches,\n      tableStats,\n    }) => ({\n      forOpps,\n      pageId,\n    }: {\n      pageId: string,\n      forOpps: boolean,\n    }) => {\n      const selectedMatchesList: Array<number> = get(selectedMatches, `${page}.${pageId}`, [])\n      // Для команды соперника\n      if (forOpps) {\n        //@ts-ignore\n        return tableStats.filter(({ f_match, f_team }) => (\n          f_team !== +pageId && selectedMatchesList.includes(f_match)))\n      }\n      // для страницы игрока возвращем просто весь массив со значением параметров\n      // (нам нужны все для среднего значения)\n      if (page === 'player') {\n        //@ts-ignore\n\n        return tableStats.filter(({ f_match }) => (\n          selectedMatchesList.includes(f_match)))\n      }\n      // Для текущей команды\n      //@ts-ignore\n      return tableStats.filter(({ f_match, f_team }) => (\n        f_team === +pageId && selectedMatchesList.includes(f_match)))\n    },\n    /**\n    * Получение класса\n    * @param {number} param_id - id параметра\n    * @param {number} param1_id - id параметра необходимого для вычисления значения (проверка на %)\n    * @param {number} gear_group_id - айди группы параметров\n    * @param {number} activeId - активный id параметра (для отображения отсортированного)\n    */\n    getClassName: () => (\n      {\n        gear_group_id,\n        param_id,\n        param1_id,\n      }:\n      {\n        param_id: number,\n        //@ts-ignore\n        param1_id?: {},\n        gear_group_id: number,\n      },\n      activeId: string,\n    ) => cx(\n      {\n        'clickable-cell': !param1_id,\n        percents: param1_id,\n        'sorted-by': `${param_id}_${gear_group_id}` === activeId,\n      },\n    ),\n  }),\n  observer,\n)\n\nexport const TFoot = TfootComposed(TFootComponent)\n","import { observer, inject } from 'mobx-react'\nimport get from 'lodash/get'\nimport filter from 'lodash/filter'\nimport find from 'lodash/find'\n\nimport { compose, withProps, withHandlers } from 'recompose'\n\n// @ts-ignore\nimport getMatchLinksHoc from 'hocs/getMatchLinksHoc'\n// @ts-ignore\nimport getExtLinkHOC from 'hocs/getExtLinkHOC'\n// @ts-ignore\nimport { clickableClassNameHOC } from 'hocs/getClickableTdClassNameHoc'\n\nexport const trComposed = compose(\n  inject('videoLink', 'lexics', 'shootsRange', 'matchLinks', 'matches'),\n  getMatchLinksHoc,\n  getExtLinkHOC,\n  observer,\n  //@ts-ignore\n  withProps(({ matches: { list }, pageId, rowInfo: { f_match } }) => {\n    //@ts-ignore\n    const checkMatchId = stat => stat.f_match === f_match\n    return {\n      rowInfo: find(get(list, `${pageId}.matches`, []), checkMatchId),\n    }\n  }),\n  clickableClassNameHOC,\n  //@ts-ignore\n  withHandlers({\n    // Фильтруем всю статистику только по конкретной команде\n    getStatsListByTeam: ({ tableStats }: { tableStats: Array<any> | void }) => (\n      teamId?: number,\n      matchId?: number,\n    ) =>\n      //@ts-ignore\n      filter(tableStats, { f_team: teamId, f_match: matchId }),\n    // Фильтруем всю статистику только по конкретному матчу для строки\n    getStatsListByPlayer: ({ tableStats }) => (matchId: number) =>\n      filter(tableStats, { f_match: matchId }),\n  }),\n  observer,\n)\n","import * as React from 'react'\nimport { PlayButton, MatchName, TableUI } from 'react-sport'\n// @ts-ignore\nimport { MatchPopup } from 'features/Table'\nimport { leftSideTrComposed } from './composed'\n\ntype TProps = {\n  showOpponent?: boolean,\n  tdClassName: string,\n  rowspan: string,\n  match: {\n    has_video: boolean,\n    home_match: string,\n    f_match: number,\n  },\n  //@ts-ignore\n  handleClick: (value: SyntheticEvent<HTMLButtonElement>) => void,\n  titleScore: string,\n  titleClassName: string,\n  matchDate: string,\n  shortNameOpponent: string,\n  ownerTeamName: string,\n  oppTeamName: string,\n  matchPopupOpened: boolean,\n  isFetching: boolean,\n  links: {},\n  toggleClose: () => {},\n}\n\n// @ts-ignore\nexport const LeftSideTr = leftSideTrComposed(\n  //@ts-ignore\n  ({\n    handleClick,\n    isFetching,\n    links,\n    match: { f_match, has_video, home_match },\n    matchDate,\n    matchPopupOpened,\n    oppTeamName,\n    ownerTeamName,\n    rowspan,\n    shortNameOpponent,\n    showOpponent,\n    tdClassName,\n    titleClassName,\n    titleScore,\n    toggleClose,\n  }: TProps) => (\n    //@ts-ignore\n    <TableUI.LeftSideTrWrapper rowSpan={rowspan}>\n      {matchPopupOpened && (\n      //@ts-ignore\n        <MatchPopup\n          isFetching={isFetching}\n          links={links}\n          f_match={f_match}\n          toggleClose={toggleClose}\n        />\n      )}\n      <TableUI.PlayButtonWrapper>\n        {/*\n        //@ts-ignore */}\n        {has_video && <PlayButton handleClick={handleClick} />}\n      </TableUI.PlayButtonWrapper>\n\n      <TableUI.MatchDate>{matchDate}</TableUI.MatchDate>\n      {/*\n        //@ts-ignore */}\n      <TableUI.MatchNameWrapper home_match={home_match}>\n        {/*\n        //@ts-ignore */}\n        <TableUI.MatchSide className={tdClassName}>\n          {home_match}\n        </TableUI.MatchSide>\n        {/*\n        //@ts-ignore */}\n        <MatchName handleClick={handleClick} teamName={shortNameOpponent} />\n      </TableUI.MatchNameWrapper>\n      {/*\n        //@ts-ignore */}\n      <TableUI.MatchScoreWrapper className={titleClassName}>\n        {titleScore}\n      </TableUI.MatchScoreWrapper>\n\n      {showOpponent && (\n        <TableUI.MatchScoreForOppWrapper>\n          <TableUI.MatchAbbrName side='home'>\n            {ownerTeamName}\n          </TableUI.MatchAbbrName>\n          <TableUI.MatchAbbrName side='opp'>\n            {oppTeamName}\n          </TableUI.MatchAbbrName>\n        </TableUI.MatchScoreForOppWrapper>\n      )}\n    </TableUI.LeftSideTrWrapper>\n  ),\n)\n","import { observer, inject } from 'mobx-react'\n\nimport {\n  dateWithYear,\n  getSuffix,\n  getAbbr,\n  //@ts-ignore\n} from 'module/utils/helpers'\n\nimport { compose, withProps } from 'recompose'\nimport get from 'lodash/get'\n\nexport const leftSideTrComposed = compose(\n  inject('lexics'),\n  observer,\n  //@ts-ignore\n  withProps(\n    //@ts-ignore\n    ({\n      handleClick,\n      lexics: { lang },\n      pageId,\n      rowInfo: {\n        f_match,\n        home_match,\n        match_date,\n        opponent_score,\n        score,\n        ...rowInfo\n      },\n      showOpponentStats,\n    }) => {\n      const suffix = getSuffix(lang)\n      const oppTeamName = get(rowInfo, `name_opponent_${suffix}`)\n      const teamName = get(rowInfo, `name_${suffix}`)\n\n      return {\n        tdClassName: home_match === '@' ? 'opponent' : '',\n        rowspan: '',\n        handleClick: handleClick(f_match, pageId),\n        titleClassName: 'match-score',\n        showOpponent: showOpponentStats,\n        ownerTeamName: getAbbr(teamName),\n        oppTeamName: getAbbr(oppTeamName),\n        titleScore: `${score}:${opponent_score}`,\n        shortNameOpponent: oppTeamName,\n        matchDate: dateWithYear(match_date),\n        match: {\n          has_video: false,\n          home_match,\n          f_match,\n        },\n      }\n    },\n  ),\n)\n","import React from 'react'\nimport map from 'lodash/map'\n\n// @ts-ignore\nimport { playListTypes } from 'config/playListTypes'\n// @ts-ignore\nimport { getStatValue } from 'module/utils/helpers/getStatValue'\n\nimport { trComposed } from './composed'\nimport { LeftSideTr } from '../LeftSideTr'\nimport { TPropsTr } from './types'\n\n// Строка со статистикой по матчу\n// @ts-ignore\nexport const Tr = trComposed(\n  //@ts-ignore\n  ({\n    activeId,\n    getClassName,\n    getExtLink,\n    getPost,\n    getStatsListByPlayer,\n    getStatsListByTeam,\n    lexics: { page },\n    matchLinks: { isFetching, links },\n    matchPopupOpened,\n    pageId,\n    rowInfo,\n    rowInfo: { f_match, f_team_opponent },\n    selectedParams,\n    showOpponentStats,\n    toggleClose,\n  }: TPropsTr) => (\n    <tr className='stats-table__table-row'>\n      {/*\n      //@ts-ignore */}\n      <LeftSideTr\n        showOpponentStats={showOpponentStats}\n        rowInfo={rowInfo}\n        pageId={pageId}\n        handleClick={getPost}\n        matchPopupOpened={matchPopupOpened}\n        isFetching={isFetching}\n        links={links}\n        toggleClose={toggleClose}\n      />\n      {map(selectedParams, param => (\n        <td\n          //@ts-ignore\n          key={`${param.param_id}_${param.gear_group_id}`}\n            //@ts-ignore\n          className={getClassName(param, activeId)}\n        >\n          <table>\n            <tbody>\n              <tr\n                //@ts-ignore\n                onClick={getExtLink({\n                  param,\n                  id: +pageId,\n                  match: rowInfo,\n                  filterType: page,\n                  playListType: playListTypes.matches,\n                })}\n              >\n                <td>\n                  {page === 'team'\n                      //@ts-ignore\n                      && getStatValue(param, getStatsListByTeam(+pageId, f_match))}\n                  {page === 'player'\n                      //@ts-ignore\n                      && getStatValue(param, getStatsListByPlayer(f_match))}\n                </td>\n              </tr>\n            </tbody>\n          </table>\n          {showOpponentStats && (\n            <table>\n              <tbody>\n                <tr\n                  //@ts-ignore\n                  onClick={getExtLink({\n                    param,\n                    id: f_team_opponent,\n                    match: rowInfo,\n                    filterType: page,\n                    playListType: playListTypes.matches,\n                  })}\n                >\n                  <td>\n                    {getStatValue(\n                      //@ts-ignore\n                      param,\n                      getStatsListByTeam(f_team_opponent, f_match),\n                    )}\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          )}\n        </td>\n      ))}\n    </tr>\n  ),\n)\n","import React, { Fragment } from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers } from 'recompose'\nimport get from 'lodash/get'\nimport filter from 'lodash/filter'\nimport map from 'lodash/map'\n\nimport { TableUI } from 'react-sport'\n\nimport { getStatValue } from 'module/utils/helpers/getStatValue'\nimport { emptyStatToZero } from 'module/utils/helpers/emptyStatToZero'\n\nimport { THead } from 'features/Table'\nimport { TBody } from 'hocs/sortedTableItemsHoc'\n\nimport { TFoot } from './HOCs/TFootHOC'\nimport { Tr } from './Tr'\n\nimport {\n  TProps,\n  TPropsOuter,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n} from './types'\n\nexport const CommonTableComponent = ({\n  activeId,\n  currentStore,\n  getMatchesList,\n  lexics: { page },\n  pageId,\n  param,\n  setSortedId,\n  sortInc,\n  table,\n}: TProps) => (\n  <div className='stats-table__wrapper'>\n    <table className='stats-table__table'>\n      <TableUI.Thead>\n        {/*\n        //@ts-ignore */}\n        <THead table={table} setSortedId={setSortedId} />\n      </TableUI.Thead>\n      {/* Тут пока используем в т.ч. isFetching, т.к. не все сторы переписаны на один стиль */}\n      {currentStore.isLoaded || !currentStore.isFetching ? (\n        <Fragment>\n          {/*\n          //@ts-ignore */}\n          <TBody\n            selectedParams={table.selectedParams}\n            rows={getMatchesList(pageId, param)}\n            pageId={pageId}\n            tableStats={currentStore.tableStats}\n            sortInc={sortInc}\n            activeId={activeId}\n            showOpponentStats={currentStore.showOpponentStats}\n            Tr={Tr}\n          />\n          {/*\n          //@ts-ignore */}\n          <TFoot\n            table={table}\n            tableStats={currentStore.tableStats}\n            pageId={pageId}\n            page={page}\n            activeId={activeId}\n            showOpponentStats={currentStore.showOpponentStats}\n          />\n        </Fragment>\n      ) : (\n        <tbody className='loader-wrapper' />\n      )}\n    </table>\n  </div>\n)\n\nconst CommonTableComposed = compose<TProps, TPropsOuter>(\n  inject('lexics', 'selectedMatches'),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    getMatchesList: ({\n      currentStore: { tableStats },\n      lexics: { page },\n      selectedMatches,\n    }) => (pageId, param) => {\n      const selectedMatchesList = get(selectedMatches, `${page}.${pageId}`, [])\n      const tableStatsFiltered = (match: number) => (\n        filter(\n          tableStats,\n          ({\n            f_match,\n            f_param,\n            f_player,\n            f_team,\n          }) => {\n            const pageType = page === 'player' ? f_player : f_team\n            return (\n              f_match === match\n            && pageType === +pageId\n            && f_param === param.param_id\n            )\n          },\n        )\n      )\n\n      return map(selectedMatchesList, (match) => {\n        const sortedValue = getStatValue(param, tableStatsFiltered(match))\n        return {\n          f_match: match,\n          param,\n          sortBy: emptyStatToZero(sortedValue),\n        }\n      })\n    },\n  }),\n  observer,\n)\n\nexport const CommonTable = CommonTableComposed(CommonTableComponent)\n","import React from 'react'\nimport {\n  compose,\n  withHandlers,\n} from 'recompose'\n\nimport { TournamentTable } from 'features/TournamentPageMatchesTable'\nimport { TournamentPlayers } from 'features/TournamentPagePlayersTable'\nimport { TableMatchWrapper } from 'features/MatchProfileTable'\nimport { CommonTable } from 'features/CommonTable'\n\nimport {\n  TPropsInner,\n  TPropsOuter,\n  TWithHandlersInner,\n  TTables,\n} from './types'\n\nconst TableContentComponent = ({\n  getTable,\n  tableType,\n}: TPropsInner) => getTable(tableType) || null\n\nconst tableContentComposed = compose<TPropsInner, TPropsOuter>(\n  withHandlers<TPropsOuter, TWithHandlersInner>({\n    getTable: ({ ...props }) => (tableType) => {\n      const tables: TTables = {\n        //@ts-ignore\n        matchPlayersTable: <TableMatchWrapper {...props} />,\n        playerMatches: <CommonTable {...props} />,\n        teamMatches: <CommonTable {...props} />,\n        tournamentMatches: <TournamentTable {...props} />,\n        tournamentPlayers: <TournamentPlayers {...props} />,\n      }\n\n      if (!tableType) return null\n\n      return tables[tableType]\n    },\n  }),\n)\n\nexport const TableContent = tableContentComposed(TableContentComponent)\n","\nimport React, { Fragment } from 'react'\n\nimport { compose, withHandlers } from 'recompose'\n\nimport { TableHeaderSettingsButton, T9n } from 'react-sport'\n\n// @ts-ignore\nimport { tableHeaderButtons } from 'module/utils/helpers'\n\ntype TProps = {\n  handleNewPopupAction: () => void,\n  handlePopupAction: () => void,\n  deleteTable: () => void,\n  moveTableUp: () => void,\n  moveTableDown: () => void,\n  resetTable: () => void,\n  currentStore: {\n    tables: {},\n  },\n  table: {},\n}\n\nconst TableActionsComponent = ({\n  currentStore,\n  deleteTable,\n  handleNewPopupAction,\n  handlePopupAction,\n  moveTableDown,\n  moveTableUp,\n  resetTable,\n}: TProps) => (\n  <Fragment>\n    {tableHeaderButtons(\n      handleNewPopupAction,\n      deleteTable,\n      moveTableUp,\n      moveTableDown,\n      resetTable,\n      currentStore.tables,\n    ).map(({ action, buttonType, t }) => (\n      <TableHeaderSettingsButton\n        onClick={action}\n        buttonType={buttonType}\n        key={t}\n      >\n        <T9n t={t} />\n      </TableHeaderSettingsButton>\n    ))}\n    <a className='stats-table__action-link' onClick={handlePopupAction}>\n      <i className='icon-settings' />\n    </a>\n  </Fragment>\n)\n\nconst TableActionsComposed = compose(\n  //@ts-ignore\n  withHandlers({\n    // Функция удаления таблицы\n    deleteTable: ({\n      currentStore: { deleteTable, storeName },\n      table: { position },\n    }) => () => deleteTable(position, storeName),\n\n    // Поднятие таблицы в списке\n    moveTableUp: ({\n      currentStore: { moveTable, storeName },\n      table: { position },\n    }) => () => moveTable(position, 'up', storeName),\n\n    // Спуск таблицы вниз по списку\n    moveTableDown: ({\n      currentStore: { moveTable, storeName },\n      table: { position },\n    }) => () => moveTable(position, 'down', storeName),\n\n    // Функция возврата таблице значений по-умолчанию\n    resetTable: ({ currentStore: { resetTable, storeName } }) => () =>\n      resetTable(storeName),\n  }),\n)\n\n// @ts-ignore\nexport const TableActions = TableActionsComposed(TableActionsComponent)\n","import React from 'react'\n\nimport { DownloadLinksComponent } from 'react-sport'\n\nimport { GearPopup } from 'features/GearPopup'\nimport { TableHeader } from 'features/TableHeader/components/'\nimport { EditTableName } from 'features/TableName/components/EditTableName'\n\nimport { tableComposed } from './composed'\nimport { TableContent } from '../TableContent'\nimport { TableActions } from '../TableActions'\n\nimport 'features/Table/styles/StatsTable.scss'\nimport 'features/Table/styles/TablePopup.scss'\n\nimport { TPropsInner } from './types'\n\n// Таблица со статистикой по выбранным матчам\nconst TableComponent = ({\n  activeId,\n  currentStore,\n  getClassName,\n  getLinks,\n  handleCheckTeam, // объект таблицы\n  handleNewPopupAction,\n  handlePopupAction,\n  newPopupOpened,\n  pageId,\n  param,\n  popupOpened,\n  saveReport,\n  setSortedId,\n  sortInc,\n  table,\n  tableType,\n  teams,\n}: TPropsInner) => (\n  <div className='stats-table'>\n    <div className='stats-table__header'>\n      <div className='stats-table__header-left'>\n        <TableHeader\n          table={table}\n            //@ts-ignore\n          tableType={tableType}\n          currentStore={currentStore}\n          getClassName={getClassName}\n          teams={teams}\n          handleCheckTeam={handleCheckTeam}\n        />\n      </div>\n      <div className='stats-table__name'>\n        <EditTableName table={table} currentStore={currentStore} />\n      </div>\n      <div className='stats-table__actions'>\n        {/*\n          //@ts-ignore */}\n        <DownloadLinksComponent links={getLinks()} reportHandle={saveReport} />\n        {/*\n          //@ts-ignore */}\n        <TableActions\n          currentStore={currentStore}\n          handleNewPopupAction={handleNewPopupAction}\n          handlePopupAction={handlePopupAction}\n          table={table}\n        />\n      </div>\n    </div>\n    <TableContent\n      activeId={activeId}\n      currentStore={currentStore}\n      pageId={pageId}\n      param={param}\n      setSortedId={setSortedId}\n      sortInc={sortInc}\n      table={table}\n        //@ts-ignore\n      tableType={tableType}\n      teams={teams}\n    />\n    {(popupOpened || newPopupOpened) && (\n      <GearPopup\n        table={table}\n        handlePopupAction={handlePopupAction}\n        handleNewPopupAction={handleNewPopupAction}\n        popupOpened={popupOpened}\n        newPopupOpened={newPopupOpened}\n        currentStore={currentStore}\n        newPopup={newPopupOpened}\n      />\n    )}\n  </div>\n)\n\nexport const Table = tableComposed(TableComponent)\n","import React, { Fragment } from 'react'\n\nimport map from 'lodash/map'\n\nimport { Table } from './Table'\nimport { TParam } from '../models/tableModel'\n\ntype TProps = {\n  pageId: string,\n  tableType?: string,\n  tables: {\n    [key: number]: {\n      position: number,\n      selectedParams: Array<TParam>,\n    },\n  },\n}\n\nexport const Tables = ({\n  pageId,\n  tables,\n  tableType,\n}: TProps) => (\n  <Fragment>\n    {map(\n      tables,\n      table => (\n        <Table\n          tableType={tableType}\n          key={table.position}\n          pageId={pageId}\n          table={table}\n        />\n      ),\n    )}\n  </Fragment>\n)\n","\nimport { types, flow } from 'mobx-state-tree'\n\nimport get from 'lodash/get'\nimport reduce from 'lodash/reduce'\nimport find from 'lodash/find'\nimport pick from 'lodash/pick'\nimport filter from 'lodash/filter'\n\nimport { callApi } from 'react-sport'\n// @ts-ignore\nimport routes from 'config/routes'\n\ntype TConfig = {\n  method: string,\n  body: string,\n};\n\ntype TFetch = {\n  lang: string,\n  matchId: string,\n  params: Array<number>,\n};\n\nconst url: string = `${routes.API_ROOT}/data`\n\nexport const PlayersCompareApiActions = types.model({}).actions(self => ({\n  // Запрос при первом рендере компонента.\n  basicFetch: flow(function* basicFetch({ lang, matchId, params }: TFetch) {\n    try {\n      // Запрашиваем список всех игроков для обеих команд\n      //@ts-ignore\n      yield self.fetchPlayers(matchId)\n\n      // Предвыбираем по умолчанию первых игроков в каждой команде\n      //@ts-ignore\n      const defaultPlayers = reduce(\n        //@ts-ignore\n        self.playerList,\n        (acc, curr) => {\n          if (!find(acc, { f_team: curr.f_team })) {\n            //@ts-ignore\n            acc.push(curr)\n          }\n          return acc\n        },\n        [],\n      )\n      //@ts-ignore\n      self.updateSelectedPlayers({\n        lang,\n        matchId,\n        players: defaultPlayers,\n      })\n\n      // Запрашиваем данные по выбранным игрокам\n      //@ts-ignore\n      yield self.fetch({\n        lang,\n        matchId,\n        params,\n      })\n\n      // Запрашиваем список всех параметров для шестеренки и групп\n      //@ts-ignore\n      yield self.getGearParamsList(1)\n      // Ставим по умолчанию выбранные параметры (чтобы при открытии шестеренки они были выбраны)\n      //@ts-ignore\n      self.setDefaultSelectedParams()\n    } catch (error) {\n      //@ts-ignore\n      self._onError(error)\n    }\n  }),\n\n  fetch({ lang, matchId, params }: TFetch) {\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'scout_players_all_stat',\n        params: {\n          _p_match_id: +matchId,\n          //@ts-ignore\n          _p_player_arr: Object.values(self.selectedPlayers),\n          _p_param_arr: params,\n          _p_lang_id: Number(lang !== 'ru'),\n        },\n      }),\n    }\n    return callApi({\n      url,\n      config,\n      //@ts-ignore\n      onRequest: self._onRequest,\n      //@ts-ignore\n      onSuccess: self._onSuccess,\n      //@ts-ignore\n      onError: self._onError,\n    })\n  },\n\n  _onRequest() {\n    //@ts-ignore\n    self.stats = []\n    //@ts-ignore\n    self.playersInfo = null\n    //@ts-ignore\n    self.isLoaded = false\n  },\n\n  _onSuccess(json: { data: Array<{}> } = { data: [] }) {\n    const players = get(json.data, '[0].scout_players_all_stat') || []\n    //@ts-ignore\n    self.stats = get(\n      //@ts-ignore\n      find(players, 'params_info', {}),\n      'params_info',\n      [],\n    )\n    //@ts-ignore\n    //@ts-ignore\n    //@ts-ignore\n    self.playersInfo = players.reduce((acc, current) => {\n      acc[current.f_player] = pick(current, [\n        'f_player',\n        'f_team',\n        'params',\n        'photo_player',\n        'photo_team',\n      ])\n      return acc\n    }, {})\n    //@ts-ignore\n    self.error = null\n    //@ts-ignore\n    self.isLoaded = true\n  },\n\n  fetchPlayers(matchId: number | string) {\n    const url: string = `${routes.API_ROOT}/data`\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'ask_players_list_match',\n        params: {\n          _v_match_id: matchId,\n          _v_played: true,\n        },\n      }),\n    }\n    return callApi({\n      url,\n      config,\n      onRequest: () => {},\n      //@ts-ignore\n      onSuccess: self._onSuccessPlayers,\n      //@ts-ignore\n      onError: self._onError,\n    })\n  },\n\n  //@ts-ignore\n  _onSuccessPlayers(json: { data?: Array<any> | null } = []) {\n    //@ts-ignore\n    self.playerList = filter(json.data, 'played')\n  },\n\n  _onError(error: any) {\n    //@ts-ignore\n    self.isLoaded = false\n    //@ts-ignore\n    self.error = error\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\nimport map from 'lodash/map'\nimport size from 'lodash/size'\nimport isEmpty from 'lodash/isEmpty'\nimport compact from 'lodash/compact'\nimport forEach from 'lodash/forEach'\nimport filter from 'lodash/filter'\nimport includes from 'lodash/includes'\n\ntype TUpdateSelectedPlayers = {\n  lang: string,\n  matchId: string,\n  players: Array<{\n    f_team: number,\n    f_player: number,\n  } | null>,\n};\n\ntype TSaveTempParams = {\n  lang: string,\n  matchId: string,\n  params: Array<{}>,\n};\n\nexport const PlayersCompareActions = types.model({}).actions(self => ({\n  // Обновляем список игроков при выборе нового игрока из раскрывающегося списка\n  updateSelectedPlayers({ lang, matchId, players }: TUpdateSelectedPlayers) {\n    if (isEmpty(compact(players))) return null\n    // При инициализации стора у нас нет игроков,\n    // но при изменении пользователем игрока учитываем предыдущее состояние\n    //@ts-ignore\n    const newSelectedPlayers = { ...self.selectedPlayers }\n    // При обновлении одного игрока из команды мы меняем только нужного, второй остается в объекте\n    forEach(\n      players,\n      //@ts-ignore\n      //@ts-ignore\n      ({ f_player, f_team }) => { newSelectedPlayers[f_team] = f_player },\n    )\n    // Заменяем в сторе обновленный список игроков для дальнейшего запроса к API\n    //@ts-ignore\n    self.selectedPlayers = newSelectedPlayers\n    if (size(players) === 1) {\n      //@ts-ignore\n      self.fetch({\n        lang,\n        matchId,\n        //@ts-ignore\n        params: self.getParamsIds,\n      })\n    }\n  },\n\n  // Сохранение временно выбранных параметров (при закрытии шестеренки)\n  saveTempParams({ lang, matchId, params }: TSaveTempParams) {\n    //@ts-ignore\n    self.selectedParams = params\n    //@ts-ignore\n    self.fetch({\n      lang,\n      matchId,\n      //@ts-ignore\n      params: self.getParamsIds,\n    })\n  },\n\n  //Сохраняем все параметры в шестеренке и предвыбираем дефолтные (при первом открытии)\n  setDefaultSelectedParams() {\n    // По умолчанию предвыбираем дефолтные параметры\n    //@ts-ignore\n    const defaultIds = map(self.stats, 'param')\n    //@ts-ignore\n    self.selectedParams = filter(\n      //@ts-ignore\n      self.totalParams,\n      ({ param_id }) => includes(defaultIds, param_id),\n    )\n  },\n}))\n","\nimport { types } from 'mobx-state-tree'\n\nimport sortBy from 'lodash/sortBy'\nimport findIndex from 'lodash/findIndex'\nimport map from 'lodash/map'\n\nexport const PlayersCompareViews = types.model({}).views(self => ({\n  get sortedStats() {\n    //@ts-ignore\n    const ids = self.getParamsIds\n    return sortBy(\n      //@ts-ignore\n      self.stats,\n      ({ param }) => findIndex(ids, o => o === Number(param)),\n    )\n  },\n\n  get getParamsIds(): Array<number> {\n    //@ts-ignore\n    return map(self.selectedParams, 'param_id')\n  },\n}))\n","\nimport { types } from 'mobx-state-tree'\n\n// @ts-ignore\nimport { tableApiActions } from 'features/Table'\n\nimport { PlayersCompareApiActions } from './apiActions'\nimport { PlayersCompareActions } from './actions'\nimport { PlayersCompareViews } from './views'\n\nconst Stat = types.model('Stat', {\n  param: types.number,\n  param_name: types.maybeNull(types.string),\n  param_name_short: types.maybeNull(types.string),\n})\n\nconst GearParam = types.model('SelectedGearParam', {\n  clickable: types.number,\n  f_option_3: types.number,\n  full_lexical_formula: types.string,\n  gear_group_id: types.number,\n  gear_subgroup_id: types.number,\n  is_default: types.maybeNull(types.string),\n  lexical_formula: types.string,\n  name: types.string,\n  param1_id: types.maybeNull(types.array(types.string)),\n  param2_id: types.maybeNull(types.array(types.string)),\n  param_id: types.number,\n  short_lexical_formula: types.string,\n  sort_order: types.number,\n})\n\nexport const PlayersCompare = types.model('PlayersCompareWidget', {\n  stats: types.maybeNull(types.array(Stat)),\n  playersInfo: types.frozen({}),\n  isLoaded: types.boolean,\n  error: types.frozen({}),\n  selectedPlayers: types.frozen({}),\n  selectedParams: types.maybeNull(types.array(GearParam)),\n  tempSelected: types.array(GearParam),\n})\n\nexport const PlayersCompareStore = types.compose(\n  // Общие методы для получения параметров для шестеренки\n  tableApiActions,\n  // Собственные методы\n  PlayersCompare,\n  PlayersCompareApiActions,\n  PlayersCompareActions,\n  PlayersCompareViews,\n)\n","import { PlayersCompareStore } from './PlayersCompareStore'\n\nexport default PlayersCompareStore.create({\n  playersInfo: {},\n  stats: [],\n  isLoaded: false,\n  error: {},\n  selectedPlayers: {},\n  selectedParams: [],\n  tempSelected: [],\n})\n","import { types } from 'mobx-state-tree'\nimport includes from 'lodash/includes'\nimport get from 'lodash/get'\nimport map from 'lodash/map'\nimport sortBy from 'lodash/sortBy'\nimport filter from 'lodash/filter'\nimport reduce from 'lodash/reduce'\n\nimport { toJS } from 'mobx'\nimport { callApi } from 'react-sport'\nimport { percentageParams } from 'config/teamPopupParams'\nimport routes from 'config/routes'\n\ntype TConfig = {\n  method: string,\n  body: string,\n}\n\nconst TeamPlayersApiActions = types.model({}).actions(self => ({\n  // Получение всех параметров для игроков в команде\n  //@ts-ignore\n  fetchParams(id, selectedMatches) {\n    const url: string = `${routes.API_ROOT}/data`\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'ask_gear_params',\n        params: {\n          _v_amplua_id: 0,\n        },\n      }),\n    }\n    callApi({\n      url,\n      config,\n      //@ts-ignore\n      onRequest: () => self._onRequest(),\n      onSuccess: (\n        //@ts-ignore\n        json: { data: Array<{}> },\n        //@ts-ignore\n      ) => self._onSuccessParams(json, id, selectedMatches),\n      //@ts-ignore\n      onError: (error: any) => self._onError(error),\n    })\n  },\n\n  _onRequest() {\n    //@ts-ignore\n    self.isFetching = true\n    //@ts-ignore\n    self.error = null\n  },\n\n  _onSuccessParams(\n    //@ts-ignore\n    json: { data: Array<{}> },\n    //@ts-ignore\n    id,\n    //@ts-ignore\n    selectedMatches,\n  ) {\n    //@ts-ignore\n    self.totalParams = get(json, 'data', [])\n    //@ts-ignore\n    self.error = null\n    //@ts-ignore\n    self.fetchGroups()\n    //@ts-ignore\n    self.fetchPlayers(id, selectedMatches)\n  },\n\n  //@ts-ignore\n  _onError(error: {}) {\n    //@ts-ignore\n    self.isFetching = false\n    //@ts-ignore\n    self.error = error\n  },\n\n  // Получение общего списка игроков\n  //@ts-ignore\n  fetchPlayers(id, selectedMatches) {\n    const url: string = `${routes.API_ROOT}/data`\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'scout_team_players_stat',\n        params: {\n          _p_team_id: id,\n          _p_match_arr: selectedMatches.team[id],\n          //@ts-ignore\n          _p_params_arr: map(self.totalParams, 'param_id'),\n        },\n      }),\n    }\n    callApi({\n      url,\n      config,\n      //@ts-ignore\n      onRequest: () => self._onRequest(),\n      //@ts-ignore\n      onSuccess: (json: { data: Array<{}> }) => self._onSuccessPlayers(json),\n      //@ts-ignore\n      onError: (error: any) => self._onError(error),\n    })\n  },\n  //@ts-ignore\n  _onSuccessPlayers(json: { data: Array<{}> }) {\n    //@ts-ignore\n    self.isFetching = false\n    //@ts-ignore\n    self.players = map(\n      get(json.data, '[0].scout_team_players_stat', []),\n      player => ({\n        ...player,\n        params: get(player, 'params') && map(player.params, param => ({\n          ...param,\n          // для % параметров не используем формулу, не меняем значение\n          // % параметры берем из конфига\n          value: includes(percentageParams, param.param)\n            ? param.value / param.matches_count\n            : param.value,\n          averageValue: param.value / param.matches_count,\n        })),\n      }),\n    )\n    //@ts-ignore\n    self.error = null\n  },\n\n  // Получение списка групп для шестеренки\n  fetchGroups() {\n    const url: string = `${routes.API_ROOT}/data`\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'ask_gear_group_view',\n      }),\n    }\n    callApi({\n      url,\n      config,\n      //@ts-ignore\n      onRequest: () => self._onRequest(),\n      //@ts-ignore\n      onSuccess: (json: { data: Array<any> }) => self._onSuccessGroups(json),\n      //@ts-ignore\n      onError: (error: any) => self._onError(error),\n    })\n  },\n\n  //@ts-ignore\n  _onSuccessGroups(json: { data: Array<any> }) {\n    //@ts-ignore\n    self.paramGroups = get(json, 'data', [])\n    //@ts-ignore\n    self.paramGroupsError = null\n    //@ts-ignore\n    const serializedParams = map(self.totalParams, item => toJS(item))\n    //@ts-ignore\n    self.gearParams = reduce(self.paramGroups, (prev, curr) => {\n      const current = {\n        params: sortBy(\n          filter(\n            serializedParams, ({ gear_group_id }) => gear_group_id === curr.group_id,\n          ), 'sort_order',\n        ),\n        groupName: String(curr.group_lexical_formula),\n      }\n      return [...prev, current]\n    }, [])\n    if (window.localStorage.getItem('teamPlayersTable') === null) {\n      //@ts-ignore\n      self.saveTables()\n    } else {\n      //@ts-ignore\n      self.tables = JSON.parse(window.localStorage.getItem('teamPlayersTable'))\n    }\n  },\n\n  // Получение списка ивентов для игрока\n  fetchEvents(\n    //@ts-ignore\n    lang,\n    //@ts-ignore\n    lexical_formula,\n    //@ts-ignore\n    playerId,\n    //@ts-ignore\n    paramId,\n    //@ts-ignore\n    request,\n    //@ts-ignore\n    selectedMatches,\n    //@ts-ignore\n    shootsRange,\n  ) {\n    const url: string = `${routes.API_ROOT}/data`\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'scout_events_sec_by_param',\n        params: {\n          _p_matches: selectedMatches,\n          _p_param_id: paramId,\n          _p_player_id: playerId,\n        },\n      }),\n    }\n    callApi({\n      url,\n      config,\n      onRequest: () => { },\n      //@ts-ignore\n      onSuccess: (json: { data: Array<any> }) => (\n        //@ts-ignore\n        self._onSuccessEvents(\n          json,\n          lang,\n          lexical_formula,\n          request,\n          shootsRange,\n          playerId,\n        )\n      ),\n      //@ts-ignore\n      onError: (error: any) => self._onError(error),\n    })\n  },\n\n  _onSuccessEvents(\n    //@ts-ignore\n    json: { data: Array<any> },\n    lang: string,\n    lexical_formula: string,\n    request: (arg: { }) => void,\n    shootsRange: {},\n    playerId: number,\n  ) {\n    //@ts-ignore\n    self.events = map(\n      get(json.data, '[0].scout_events_sec_by_param', []), 'id',\n    )\n    //@ts-ignore\n    if (self.events.length) {\n      request({\n        //@ts-ignore\n        events: self.events,\n        range: shootsRange,\n        lang,\n        lexical_formula,\n        playerInfo: playerId,\n        type: 'teamPlayers',\n      })\n    }\n  },\n}))\n\nexport default TeamPlayersApiActions\n","import { toJS } from 'mobx'\nimport { types } from 'mobx-state-tree'\n\nimport filter from 'lodash/filter'\nimport omit from 'lodash/omit'\nimport get from 'lodash/get'\nimport reduce from 'lodash/reduce'\nimport isEqual from 'lodash/isEqual'\n\nimport { indexLexic } from 'config/lexics'\nimport { saveTablesToLocalStorage } from 'module/utils/helpers'\n\nconst TeamPlayersActions = types.model({}).actions(self => ({\n  // Записываем в стор таблицы после получения параметров\n  saveTables() {\n    //@ts-ignore\n    self.gearParams.forEach(({ groupName, params }, index) => {\n      const position: number = index + 1\n      const table: {\n        position: number,\n        selectedParams: Array<{ is_default: string }>,\n        tableName: string | number,\n      } = {\n        position,\n        //@ts-ignore\n        selectedParams: params.filter(({ is_default }) => is_default === 'default'),\n        tableName: String(groupName),\n        //@ts-ignore\n        summaryType: 'average_for_match',\n        avatarIsVisible: false,\n      }\n      //@ts-ignore\n      if (table.selectedParams.length) {\n        //@ts-ignore\n        self.tables = {\n          //@ts-ignore\n          ...self.tables,\n          [position]: {\n            ...table,\n            sortInc: false,\n            activeId: null,\n          },\n        }\n      }\n      //@ts-ignore\n      saveTablesToLocalStorage({ name: 'teamPlayersTable', tables: self.tables })\n    })\n  },\n  /**\n   * Действия с выбранными в шестеренке параметрами\n   * (добавление, удаление, очищение выбранных параметров, перемещение карточек в правом меню)\n   * @param {string} action - название действия\n   * @param {object} param - параметр, с которым выполняем действие или список параметров\n   */\n  //@ts-ignore\n  editTempSelected(action = null, param) {\n    switch (action) {\n      //@ts-ignore\n      case 'add':\n        //@ts-ignore\n        self.tempSelected = [...self.tempSelected, toJS(param)]\n        break\n      //@ts-ignore\n      case 'delete':\n        //@ts-ignore\n        self.tempSelected = filter(\n          //@ts-ignore\n          self.tempSelected,\n          item => !isEqual(param, item),\n        )\n        break\n      //@ts-ignore\n      case 'erase':\n        //@ts-ignore\n        self.tempSelected = []\n        break\n      default:\n        //@ts-ignore\n        self.tempSelected = param.map(param => toJS(param))\n        break\n    }\n  },\n  /**\n   * Выбранные параметры (чекбоксы) сохраняем в стор\n   * @param {number} position - порядковый номер таблицы\n   */\n  saveTempParams({\n    localStorageName = 'teamPlayersTable',\n    position,\n    selectedParams,\n  }: {\n    localStorageName: string,\n    position: number,\n    selectedParams: Array<{}>,\n  }) {\n    //@ts-ignore\n    self.tables = {\n      //@ts-ignore\n      ...self.tables,\n      [position]: {\n        //@ts-ignore\n        ...self.tables[position],\n        selectedParams,\n      },\n    }\n    // Сохраняем выбранные параметры в localStorage\n    //@ts-ignore\n    saveTablesToLocalStorage({ name: localStorageName, tables: self.tables })\n    // Очищаем временно выбранные параметры из popup\n    //@ts-ignore\n    self.editTempSelected('erase')\n  },\n  /**\n   * Добавляем новую таблицу\n   * @param {string | number} name - название таблицы\n   */\n  addTable(\n    name: string | number,\n    localStorageName: string = 'teamPlayersTable',\n    selectedParams: Array<{}>,\n  ) {\n    //@ts-ignore\n    const position: number = Object.keys(self.tables).length + 1\n    //@ts-ignore\n    self.tables = {\n      //@ts-ignore\n      ...self.tables,\n      [position]: {\n        position,\n        selectedParams,\n        tableName: name,\n        summaryType: 'average_for_match',\n        avatarIsVisible: false,\n      },\n    }\n    // Сохраняем таблицы в localStorage\n    //@ts-ignore\n    saveTablesToLocalStorage({ name: localStorageName, tables: self.tables })\n  },\n\n  /** удаления таблицы\n* @param {number} position - порядковый номер таблицы\n*/\n  deleteTable(position: number) {\n    //@ts-ignore\n    const tablesList: Array<any> = Object.keys(self.tables)\n    // Удаляем текущую таблицу\n    //@ts-ignore\n    const omitedTables = omit(self.tables, position)\n    // Перезаписываем все таблицы, позиция которых после удаленной. Передвигаем весь список\n    const updatedTables = reduce(omitedTables, (acc, curr, key) => {\n      //@ts-ignore\n      if (key > position) {\n        //@ts-ignore\n        acc[key - 1] = {\n          //@ts-ignore\n          ...self.tables[key],\n          //@ts-ignore\n          position: key - 1,\n        }\n      }\n      //@ts-ignore\n      acc[key] = self.tables[key]\n      return acc\n    }, {})\n    //@ts-ignore\n    self.tables = omit(updatedTables, tablesList.length)\n    // Удаляем и из localStorage\n    //@ts-ignore\n    saveTablesToLocalStorage({ name: 'teamPlayersTable', tables: self.tables })\n  },\n\n  /** Редактирование таблицы\n* @param {number} position - порядковый номер таблицы\n* @param {string | number} name - новое название таблицы\n*/\n  editTable(position: number, name: string | number) {\n    //@ts-ignore\n    self.tables = {\n      //@ts-ignore\n      ...self.tables,\n      [position]: {\n        //@ts-ignore\n        ...self.tables[position],\n        tableName: name,\n      },\n    }\n    //@ts-ignore\n    saveTablesToLocalStorage({ name: 'teamPlayersTable', tables: self.tables })\n  },\n\n  /** Сброс всех таблиц по-умолчанию*/\n  resetTable() {\n    // Сначала удаляем таблицы уже сформированные\n    window.localStorage.removeItem('teamPlayersTable')\n    //@ts-ignore\n    self.tables = {}\n    //@ts-ignore\n    self.saveTables()\n  },\n\n  /** Перемещение таблицы вверх/вниз\n  * @param {number} position - порядковый номер таблицы\n  * @param {string} type - тип перемещения (вверх или вниз)\n  */\n  moveTable(position: number, type: string) {\n    //@ts-ignore\n    const tableCount: number = Object.keys(self.tables).length\n    //@ts-ignore\n    const current: {} = self.tables[position]\n    //@ts-ignore\n    const prev: {} = self.tables[position - 1]\n    //@ts-ignore\n    const next: {} = self.tables[position + 1]\n    if (type === 'up') {\n      //@ts-ignore\n      self.tables = {\n        //@ts-ignore\n        ...self.tables,\n        [position - 1]: {\n          ...current,\n          position: position - 1,\n        },\n        [position]: {\n          ...prev,\n          position,\n        },\n      }\n    }\n    if (type === 'down') {\n      // Если мы опускаем последнюю таблицу вниз, то ничего не происходит\n      if (position === tableCount) return null\n      //@ts-ignore\n      self.tables = {\n        //@ts-ignore\n        ...self.tables,\n        [position]: {\n          ...next,\n          position,\n        },\n        [position + 1]: {\n          ...current,\n          position: position + 1,\n        },\n      }\n    }\n    //@ts-ignore\n    saveTablesToLocalStorage({ name: 'teamPlayersTable', tables: self.tables })\n  },\n\n  /** Редактирование названия таблицы\n  * @param {string | number} name - название таблицы\n  * @param {bool} erase - возврат к значению по-умолчанию\n  */\n  editTempTableName(name: string | number, erase: boolean = false) {\n    if (erase) {\n      //@ts-ignore\n      self.tempTableName = indexLexic.new_table\n    } else {\n      //@ts-ignore\n      self.tempTableName = name\n    }\n  },\n\n  /** Меняем стиль отображения ячеек (итоговое по всем матчам или среднее значение)\n  * @param {string} type - тип отображения\n  */\n  changeValueType(type: string, position: number) {\n    // Если тип не меняется, то не используем формулу\n    //@ts-ignore\n    if (get(self.tables, `${position}.summaryType`) === type) return null\n    //@ts-ignore\n    self.tables = {\n      //@ts-ignore\n      ...self.tables,\n      [position]: {\n        //@ts-ignore\n        ...self.tables[position],\n        summaryType: type,\n      },\n    }\n  },\n  showAvatarToggle(position: number) {\n    //@ts-ignore\n    self.tables = {\n      //@ts-ignore\n      ...self.tables,\n      [position]: {\n        //@ts-ignore\n        ...self.tables[position],\n        //@ts-ignore\n        avatarIsVisible: !self.tables[position].avatarIsVisible,\n      },\n    }\n  },\n  //@ts-ignore\n  setActiveParam(table, param) {\n    const { position } = table\n    //@ts-ignore\n    self.tables = {\n      //@ts-ignore\n      ...self.tables,\n      [position]: {\n        ...table,\n        //@ts-ignore\n        sortInc: !get(self.tables, [position, 'sortInc']),\n        activeId: param.param_id,\n      },\n    }\n  },\n}))\n\nexport default TeamPlayersActions\n","\nimport { types } from 'mobx-state-tree'\nimport TeamPlayersApiActions from './TeamPlayersApiActions'\nimport TeamPlayersActions from './TeamPlayersActions'\n\n// Модель параметра для игрока\nconst PlayerParam = types.model('PlayerParam', {\n  data_type: types.string,\n  f_match_event_ids: types.maybeNull(types.number),\n  matches_count: types.maybeNull(types.number),\n  option: types.number,\n  param: types.number,\n  value: types.number,\n  averageValue: types.number,\n})\n\n// Модель параметра(шестеренка)\nconst Param = types.model('Param', {\n  f_option_3: types.number,\n  full_lexical_formula: types.string,\n  gear_group_id: types.number,\n  gear_subgroup_id: types.number,\n  is_default: types.maybeNull(types.string),\n  lexical_formula: types.string,\n  name: types.string,\n  param1_id: types.maybeNull(types.array(types.string)),\n  param2_id: types.maybeNull(types.array(types.string)),\n  param_id: types.identifierNumber,\n  short_lexical_formula: types.string,\n  sort_order: types.number,\n})\n\n// Модель параметров, разбитых на логические группы (основные, подачи и тд)\nconst GearParam = types.model('GearParam', {\n  groupName: types.maybeNull(types.string),\n  params: types.array(Param),\n})\n\n//Модель игрока\nconst Player = types.model('Player', {\n  f_player: types.number,\n  matches_count: types.number,\n  nickname_eng: types.maybeNull(types.string),\n  nickname_rus: types.maybeNull(types.string),\n  params: types.maybeNull(types.array(PlayerParam)),\n  shirt_num: types.string,\n  short_name_eng: types.string,\n  short_name_rus: types.string,\n})\n\n// Модель группы с названием\nconst ParamGroup = types.model('ParamGroup', {\n  group_id: types.number,\n  group_lexical_formula: types.number,\n  group_name: types.string,\n})\n\nexport const TeamPlayers = types.model('TeamPlayers', {\n  totalParams: types.array(Param),\n  gearParams: types.array(GearParam),\n  tables: types.frozen({\n    position: types.number,\n    selectedParams: types.array(Param),\n    tableName: types.string,\n    summaryType: types.string,\n    avatarIsVisible: types.boolean,\n  }),\n  tempSelected: types.array(Param),\n  players: types.array(Player),\n  tempTableName: types.union(types.string, types.number, types.undefined),\n  isFetching: types.boolean,\n  error: types.frozen({}),\n  paramGroups: types.array(ParamGroup),\n  events: types.array(types.number),\n})\n\nconst TeamPlayersStore = types.compose(\n  TeamPlayers,\n  TeamPlayersActions,\n  TeamPlayersApiActions,\n)\n\nexport default TeamPlayersStore\n","// @ts-ignore\nimport { indexLexic } from 'config/lexics'\n\nimport TeamPlayersStore from './TeamPlayersStore'\n\n// @ts-ignore\nexport default TeamPlayersStore.create({\n  gearParams: [],\n  totalParams: [],\n  tables: {},\n  tempSelected: [],\n  players: [],\n  tempTableName: indexLexic.new_table,\n  isFetching: false,\n  error: {},\n  events: [],\n})\n","import { types } from 'mobx-state-tree'\nimport isEqual from 'lodash/isEqual'\nimport isEmpty from 'lodash/isEmpty'\nimport reduce from 'lodash/reduce'\nimport uniq from 'lodash/uniq'\n\nimport stores from 'features/stores'\n\nconst SelectedMatchesActions = types.model({}).actions(self => ({\n  // запись выбранных матчей в стор\n  //@ts-ignore\n  setSelected(selected: Array<number>, pageId: string) {\n    //@ts-ignore\n    const { page } = stores.lexics\n    //@ts-ignore\n    self[page] = {\n      [pageId]: selected,\n    }\n  },\n\n  // запись выбранных матчей как временно выбранные (пока меню не закрыто)\n  setTempSelected(selected: Array<number>) {\n    //@ts-ignore\n    self.tempSelected = selected\n  },\n\n  // указываем выбранный период (за последний год, за последний сезон)\n  //@ts-ignore\n  setPeriod(period?: (string | number)) {\n    //@ts-ignore\n    self.selectedPeriod = period\n  },\n\n  // действия при открытии/закрытии меню\n  //@ts-ignore\n  setOpened(pageId) {\n    //@ts-ignore\n    const { page } = stores.lexics\n    //@ts-ignore\n    self.toggleSelect(!self.opened)\n\n    //@ts-ignore\n    if (self.opened) {\n      // При открытии раскрывающегося меню с матчами сразу записываем выбранные\n      //@ts-ignore\n      self.setTempSelected(self[page][pageId])\n    } else {\n      // При закрытии меню делаем запросы к API для получения статистики по выбранным матчам\n      // и сохраняем выбранные матчи\n      //@ts-ignore\n      self.onCloseActions(page, pageId)\n      //@ts-ignore\n      self.setSelected([...self.tempSelected], pageId)\n    }\n  },\n  //@ts-ignore\n  toggleSelect(select) {\n    //@ts-ignore\n    self.opened = select\n  },\n\n  onCloseActions(page: string, pageId: string) {\n    // Проверка, обновился ли список выбранных матчей.\n    const matchesListDidUpdate = (page: {}) => (\n      //@ts-ignore\n      !isEqual(self.tempSelected, page[pageId])\n    )\n    //@ts-ignore\n    const { profile } = stores.playerProfile\n    //@ts-ignore\n    const { player, team } = stores.selectedMatches\n    const isPlayerPage = page === 'player'\n    //@ts-ignore\n    const { fetch: fetchMarkers } = stores.markers\n    //@ts-ignore\n    if (isEmpty(self.tempSelected)) return self.eraseAllData(isPlayerPage)\n\n    if (isPlayerPage && matchesListDidUpdate(player)) {\n      //@ts-ignore\n      const { fetch: fetchHeaderStats } = stores.playerStats\n      //@ts-ignore\n      const { fetchTableStats } = stores.playerTable\n      // Запрашиваем новую статистику для таблиц с матчами\n      //@ts-ignore\n      fetchTableStats(self.tempSelected, pageId)\n      // Запрашиваем новую статистику для шапки\n      //@ts-ignore\n      fetchHeaderStats(pageId, self.tempSelected, profile.amplua.id)\n      // Запрашиваем новые маркеры\n      //@ts-ignore\n      fetchMarkers(pageId, self.tempSelected)\n    }\n\n    if (!isPlayerPage && matchesListDidUpdate(team)) {\n      //@ts-ignore\n      const { fetch: fetchHeaderStats } = stores.teamStats\n      //@ts-ignore\n      const { list } = stores.matches\n      //@ts-ignore\n      const { fetchTableStats } = stores.teamTable\n      //@ts-ignore\n      const { fetchParams } = stores.teamPlayers\n      const teamIds = reduce(list[pageId].matches,\n        (ids, { f_match, f_team_opponent }) => {\n          //@ts-ignore\n          if (self.tempSelected.includes(f_match)) {\n            //@ts-ignore\n            ids.push(f_team_opponent)\n          }\n          // Добавляем айди текущей команды в массив\n          //@ts-ignore\n          ids.push(+pageId)\n          return uniq(ids)\n        }, [])\n\n      // Запрашиваем новую статистику для шапки\n      //@ts-ignore\n      fetchHeaderStats(pageId, self.tempSelected)\n      // Запрашиваем новую статистику для таблиц с матчами\n      //@ts-ignore\n      fetchTableStats(self.tempSelected, teamIds)\n      // Запрашиваем новый список игроков\n      //@ts-ignore\n      fetchParams(+pageId, stores.selectedMatches)\n      // Запрашиваем новые маркеры\n      //@ts-ignore\n      fetchMarkers(pageId, self.tempSelected)\n    }\n  },\n\n  // Если выбрали 0 матчей, полостью очищам всю статистику и маркеры\n  eraseAllData(isPlayerPage: boolean) {\n    const { eraseHeaderStats } = isPlayerPage\n      //@ts-ignore\n      ? stores.playerStats\n      //@ts-ignore\n      : stores.teamStats\n    eraseHeaderStats()\n    //@ts-ignore\n    stores.markers.deleteMarkers()\n  },\n}))\n\nexport default SelectedMatchesActions\n","\nimport { types } from 'mobx-state-tree'\nimport SelectedMatchesActions from './SelectedMatchesActions'\n\nexport const SelectedMatches = types.model('SelectedMatches', {\n  opened: types.boolean,\n  pageId: types.string,\n  player: types.frozen({}),\n  team: types.frozen({}),\n  tempSelected: types.array(types.number),\n  selectedPeriod: types.maybeNull(types.union(types.string, types.number)),\n})\n\nconst SelectedMatchesStore = types.compose(\n  SelectedMatches,\n  SelectedMatchesActions,\n)\n\nexport default SelectedMatchesStore\n","import SelectedMatchesStore from './SelectedMatchesStore'\n\nexport default SelectedMatchesStore.create({\n  opened: false,\n  pageId: '',\n  player: {},\n  team: {},\n  tempSelected: [],\n  selectedPeriod: null,\n})\n","import { types } from 'mobx-state-tree'\n// @ts-ignore\nimport routes from 'config/routes'\n\ntype TOptions = {\n  lang_id: string,\n  team: number,\n  matches: Array<any>,\n  tables: {},\n};\n\nconst TableReportsApiActions = types.model({}).actions(self => ({\n  //@ts-ignore\n  //@ts-ignore\n  //@ts-ignore\n  fetchData(e, key, options) {\n    const url: string = `${routes.API_ROOT}/report/tables_report`\n    const { lang_id, matches, tables, team }: TOptions = options\n    const body = {\n      uri: 'request_players_stat_scout',\n      test: true,\n      params: {\n        type: key,\n        lang_id,\n        team,\n        matches,\n        tables,\n      },\n    }\n    //@ts-ignore\n    self.changeFetchingStatus(key)\n    return fetch(url, { method: 'POST', body: JSON.stringify(body) })\n      .then((response: any) => {\n        //@ts-ignore\n        self.changeFetchingStatus(key)\n        return response.blob()\n      })\n      .catch((error: {}) => {\n        //@ts-ignore\n        self.onError(error)\n        //@ts-ignore\n        self.changeFetchingStatus(key)\n      })\n  },\n  //@ts-ignore\n  changeFetchingStatus(key) {\n    //@ts-ignore\n    //@ts-ignore\n    self[`${key}IsFetching`] = !self[`${key}IsFetching`]\n  },\n  //@ts-ignore\n  onError(error) {\n    //@ts-ignore\n    self.error = error\n  },\n}))\n\nexport default TableReportsApiActions\n","\nimport { types } from 'mobx-state-tree'\nimport TableReportsApiActions from './TableReportsApiActions'\n\nconst TableReports = types.model('TableReports', {\n  pdfIsFetching: types.boolean,\n  xlsIsFetching: types.boolean,\n  error: types.frozen({}),\n})\n\nconst TableReportsStore = types.compose(\n  TableReports,\n  TableReportsApiActions,\n)\n\nexport default TableReportsStore\n","import TableReportsStore from './TableReportsStore'\n\nexport default TableReportsStore.create({\n  pdfIsFetching: false,\n  xlsIsFetching: false,\n  error: {},\n})\n","import { types } from 'mobx-state-tree'\nimport get from 'lodash/get'\nimport values from 'lodash/values'\nimport reduce from 'lodash/reduce'\nimport filter from 'lodash/filter'\n\n\nimport { callApi } from 'react-sport'\nimport routes from 'config/routes'\n\nconst MatchProfileApiActions = types.model({}).actions(self => ({\n  //@ts-ignore\n  fetch(matchId) {\n    const url = `${routes.API_ROOT}/data`\n    const config = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'scout_match_inf',\n        params: {\n          _p_match_id: matchId,\n        },\n      }),\n    }\n\n    callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        self.data = {}\n        //@ts-ignore\n        self.isFetching = true\n      },\n      //@ts-ignore\n      onSuccess: json => self._onSuccess(json, matchId),\n      //@ts-ignore\n      onError: error => self._onError(error),\n    })\n  },\n\n  _onSuccess({ data }: { data: {} }, matchId: string) {\n    //@ts-ignore\n    self.data = get(data, '[0].scout_match_inf', {})\n    //@ts-ignore\n    self.fetchPeriods(matchId)\n    //@ts-ignore\n    self.fetchVideoLinks(matchId)\n    //@ts-ignore\n    self.error = null\n    //@ts-ignore\n    self.matchId = matchId\n  },\n\n  _onError(error: any) {\n    //@ts-ignore\n    self.error = error\n    //@ts-ignore\n    self.isFetching = false\n  },\n\n  fetchPeriods(matchId: string) {\n    const url = `${routes.API_ROOT}/data`\n    const config = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'ask_team_param_view',\n        params: {\n          _v_match_id: [matchId],\n          //@ts-ignore\n          //@ts-ignore\n          _v_team_id: [self.data.team1_id, self.data.team2_id],\n          _v_param_id: [239],\n        },\n      }),\n    }\n\n    callApi({\n      url,\n      config,\n      onRequest: () => {},\n      //@ts-ignore\n      onSuccess: json => self._onSuccessPeriods(json),\n      //@ts-ignore\n      onError: error => self._onError(error),\n    })\n  },\n\n  _onSuccessPeriods(json: {\n    data: Array<{\n      value: number,\n      f_option_0: number,\n      f_team: number,\n    }>,\n  }) {\n    const data = json.data.map(({ f_option_0, f_team, value }) => ({\n      value,\n      period: f_option_0,\n      team: f_team,\n    }))\n    //@ts-ignore\n    self.periods = values(\n      reduce(\n        data,\n        (res, { period }) => {\n          if (period !== 0) {\n            //@ts-ignore\n            res[period] = filter(data, item => item.period === period)\n          }\n          return res\n        },\n        {},\n      ),\n    )\n  },\n\n  fetchVideoLinks(matchId: string) {\n    const url = `${routes.API_ROOT}/video/match`\n    const config = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'scout_team_match_pop_up',\n        //@ts-ignore\n        team_id: `${get(self.data, 'team1_id', '')}`,\n        match_id: +matchId,\n      }),\n    }\n\n    callApi({\n      url,\n      config,\n      onRequest: () => {},\n      //@ts-ignore\n      onSuccess: json => self._onSuccessVideoLinks(json),\n      //@ts-ignore\n      onError: error => self._onError(error),\n    })\n  },\n\n  _onSuccessVideoLinks(json: { links: {} }) {\n    //@ts-ignore\n    self.videoLinks = json.links\n    //@ts-ignore\n    self.isFetching = false\n  },\n}))\n\nexport default MatchProfileApiActions\n","\nimport { types } from 'mobx-state-tree'\nimport MatchProfileApiActions from './MatchProfileApiActions'\n\nexport const MatchProfile = types.model('MatchProfile', {\n  data: types.frozen({}),\n  periods: types.array(types.array(types.frozen({}))),\n  isFetching: types.boolean,\n  matchId: types.maybeNull(types.string),\n  videoLinks: types.frozen({}),\n  error: types.maybeNull(types.frozen({})),\n})\n\nconst MatchProfileStore = types.compose(\n  MatchProfile,\n  MatchProfileApiActions,\n)\n\nexport default MatchProfileStore\n","import MatchProfileStore from './MatchProfileStore'\n\nexport default MatchProfileStore.create({\n  data: {},\n  periods: [],\n  isFetching: true,\n  matchId: null,\n  videoLinks: {},\n  error: null,\n})\n","\n// Получение тайтлов для шапки профиля команды/игрока\n\ntype TArgs = {\n  simpleName: string,\n  matchesCount: number,\n  matchName: string,\n  paramName: string | number,\n};\n\nconst getHeaderStatsTitle = ({\n  matchesCount,\n  matchName,\n  paramName,\n  simpleName,\n}: TArgs) => () => ({\n  playlist_title: `${simpleName}`,\n  playlist_subtitle: `${matchesCount} ${matchName} - ${paramName}`,\n})\n\nexport default getHeaderStatsTitle\n","type TArgs = {\n  getMatchInfo: () => {\n    teamName: string,\n    oppTeamName: string,\n    teamScore: number,\n    oppTeamScore: number,\n    activeTeam: string,\n  },\n  //@ts-ignore\n  activeTab: string | null,\n  page: string,\n  simpleName: string,\n  matchesCount: number,\n  matchName: string,\n}\n\n// Получение тайтлов для карты ударов\nconst getMapShootsTitle = ({\n  activeTab,\n  getMatchInfo,\n  matchesCount,\n  matchName,\n  page,\n  simpleName,\n}: TArgs) => () => {\n  // Для страницы матча\n  const getMatchMapShootsTitle = () => {\n    const {\n      activeTeam,\n      oppTeamName,\n      oppTeamScore,\n      teamName,\n      teamScore,\n    } = getMatchInfo()\n    return {\n      playlist_title: `${activeTeam}`,\n      playlist_subtitle: `${teamName} ${teamScore}:${oppTeamScore} ${oppTeamName} - ${activeTab}`,\n    }\n  }\n\n  // Для страницы команды или игрока\n  const getTeamOrPlayerMapShootsTitle = () => ({\n    playlist_title: `${simpleName}`,\n    playlist_subtitle: `${matchesCount} ${matchName} - ${activeTab}`,\n  })\n\n  const pages = {\n    team: getTeamOrPlayerMapShootsTitle,\n    player: getTeamOrPlayerMapShootsTitle,\n    match: getMatchMapShootsTitle,\n  }\n  // запускаем для каждой страницы свою функцию\n  //@ts-ignore\n  if (!pages[page]) return null\n  //@ts-ignore\n  return pages[page]()\n}\n\nexport default getMapShootsTitle\n","import get from 'lodash/get'\n\ntype TArgs = {\n  getMatchInfo: () => {\n    teamName: string,\n    oppTeamName: string,\n    teamScore: number,\n    oppTeamScore: number,\n  },\n  matchInfo: any,\n  page: string,\n  suffix: string,\n  longSuffix: string,\n  paramName: string | number,\n  stores: {\n    //@ts-ignore\n    playerProfile: { profile: {} },\n  },\n  playerInfo: any,\n}\n\n// Получение тайтлов для ячеек таблиц со статистикой по матчам\nconst getTableMatchesTitle = ({\n  getMatchInfo,\n  longSuffix,\n  matchInfo,\n  page,\n  paramName,\n  playerInfo,\n  stores,\n  suffix,\n}: TArgs) => () => {\n  const oppTeamName: string = get(matchInfo, `name_opponent_${suffix}`, '')\n  const teamName: string = get(matchInfo, `name_${suffix}`, '')\n    || get(matchInfo, `name_${longSuffix}`, '')\n\n  // Матчи с профиля команды\n  const getTeamTableMatchesTitle = () => ({\n    playlist_title: `${teamName}`,\n    playlist_subtitle: `vs ${oppTeamName} - ${paramName}`,\n    title: '',\n  })\n\n  // Матчи с профиля игрока\n  const getPlayerTableMatchesTitle = () => {\n    const { playerProfile: { profile } } = stores\n    const firstName: string = get(profile, `firstname_${longSuffix}`)\n    const lastName: string = get(profile, `lastname_${longSuffix}`)\n    const playerName = `${firstName} ${lastName}`\n\n    return {\n      playlist_title: `${playerName} - ${teamName}`,\n      playlist_subtitle: `vs ${oppTeamName} - ${paramName}`,\n      title: '',\n    }\n  }\n\n  // Таблица со статистикой с профиля матча\n  const getStatsTableMatchesTitle = () => {\n    const { oppTeamName, teamName } = getMatchInfo()\n    return {\n      playlist_title: `${playerInfo} - ${teamName}`,\n      playlist_subtitle: `vs ${oppTeamName} - ${paramName}`,\n      title: '',\n    }\n  }\n\n  const pages = {\n    team: getTeamTableMatchesTitle,\n    player: getPlayerTableMatchesTitle,\n    match: getStatsTableMatchesTitle,\n  }\n  //@ts-ignore\n  if (!pages[page]) return null\n  //@ts-ignore\n  return pages[page]()\n}\n\nexport default getTableMatchesTitle\n","\n\ntype TArgs = {\n  paramName: string | number,\n  simpleName: string,\n  matchesCount: number,\n  matchName: string,\n};\n\n// Получение тайтлов для футера таблиц со статистикой по матчам\nconst getTablesFooterTitle = ({\n  matchesCount,\n  matchName,\n  paramName,\n  simpleName,\n}: TArgs) => () => ({\n  playlist_title: `${simpleName}`,\n  playlist_subtitle: `${matchesCount} ${matchName} - ${paramName}`,\n})\n\nexport default getTablesFooterTitle\n","\nimport find from 'lodash/find'\nimport get from 'lodash/get'\n\ntype TArgs = {\n  teamPlayers: {},\n  paramName: string | number,\n  playerInfo: any,\n  longSuffix: string,\n};\n\n// Получение тайтлов для игроков в команде на вкладке ИГРОКИ\nconst getTeamPlayersTitle = ({\n  longSuffix,\n  paramName,\n  playerInfo,\n  teamPlayers,\n}: TArgs) => () => {\n  const player = find(\n    get(teamPlayers, 'players'),\n    ({ f_player }) => f_player === playerInfo,\n  )\n  const playerName = get(player, `short_name_${longSuffix}`, '')\n\n  return {\n    playlist_title: `${playerName}`,\n    playlist_subtitle: `${paramName}`,\n  }\n}\n\nexport default getTeamPlayersTitle\n","\ntype TArgs = {\n  getMatchInfo: () => {\n    teamName: string,\n    oppTeamName: string,\n    teamScore: number,\n    oppTeamScore: number,\n  },\n  playerInfo: any,\n  paramName: string | number,\n};\n\n// Получение тайтлов для виджетов\nconst getWidgetsTitle = ({ getMatchInfo, paramName, playerInfo }: TArgs) => (\n  widgetType: string,\n) => {\n  // Виджет сравнения игроков из 2 команд\n  const getPlayersCompareWidgetsTitle = () => {\n    const { oppTeamName, oppTeamScore, teamName, teamScore } = getMatchInfo()\n    const title = `${teamName} ${teamScore}:${oppTeamScore} ${oppTeamName} - ${playerInfo}`\n    return {\n      playlist_title: title,\n      playlist_subtitle: `${paramName}`,\n      title,\n    }\n  }\n\n  const getTeamsCompareWidgterTitle = () => {\n    const { oppTeamName, oppTeamScore, teamName, teamScore } = getMatchInfo()\n    const title = `${teamName} ${teamScore}:${oppTeamScore} ${oppTeamName}`\n    return {\n      playlist_title: title,\n      playlist_subtitle: `${paramName}`,\n      title,\n    }\n  }\n\n  // Все виджеты тут\n  const widgetTypes = {\n    playersCompare: getPlayersCompareWidgetsTitle,\n    teamsCompare: getTeamsCompareWidgterTitle,\n  }\n\n  //@ts-ignore\n  return widgetTypes[widgetType]()\n}\n\nexport default getWidgetsTitle\n","import get from 'lodash/get'\nimport size from 'lodash/size'\n\nimport { getSuffix, getLongSuffix, num2str } from 'module/utils/helpers'\nimport stores from 'features/stores'\n\nimport getHeaderStatsTitle from './titles/getHeaderStatsTitle'\nimport getMapShootsTitle from './titles/getMapShootsTitle'\nimport getTableMatchesTitle from './titles/getTableMatchesTitle'\nimport getTablesFooterTitle from './titles/getTablesFooterTitle'\nimport getTeamPlayersTitle from './titles/getTeamPlayersTitle'\nimport getWidgetsTitle from './titles/getWidgetsTitle'\n\n/** создаем объект с названием плейлиста для внешней видео ссылки\n * @param {string} lexical_formula - название параметра\n * @param {object} matchInfo - Информация о матче. Нужна для имен команд\n * @param {string} tab - активный таб на карте ударов\n * @param {string} lang - язык\n * @param {string} playerInfo - Информация об игроке, если доступна.\n * @param {string} type - тип запроса, для составления title (приходит из компонента)\n * @param {string} widgetType - тип виджета, если доступен\n\n * @returns {object} возвращаемое значение - объект с полями тайтлов\n */\nconst setTitle = ({\n  lang,\n  lexical_formula,\n  matchInfo,\n  playerInfo,\n  tab = '',\n  type,\n  widgetType,\n}: {\n  lexical_formula: string | number,\n  matchInfo: any,\n  tab: string,\n  lang: string,\n  playerInfo: any,\n  type: string,\n  widgetType: string,\n}) => {\n  const {\n    //@ts-ignore\n    lexics: { getLexics, page },\n    //@ts-ignore\n    playerProfile,\n    //@ts-ignore\n    selectedMatches,\n    //@ts-ignore\n    teamPlayers,\n    //@ts-ignore\n    teamProfile,\n  } = stores\n  //@ts-ignore\n  const activeTab: string | null = getLexics(tab)\n  const suffix: string = getSuffix(lang)\n  const longSuffix: string = getLongSuffix(lang)\n  const paramName: string | number = getLexics(lexical_formula) || lexical_formula\n\n  const pageId: string | number = get(stores, `${page}Profile.profile.id`, '')\n  const matchesCount: number = size(get(selectedMatches, `${page}.${pageId}`))\n  let matchName: string\n  if (lang === 'ru') {\n    matchName = num2str(matchesCount, ['матч', 'матча', 'матчей'])\n  } else {\n    //@ts-ignore\n    matchName = matchesCount.toString().split('').pop() === 1\n      ? 'match'\n      : 'matches'\n  }\n\n  const simpleName: string = get(teamProfile, `profile.name_${longSuffix}`, '')\n    || get(playerProfile, `profile.short_name_${longSuffix}`, '')\n\n  const getMatchInfo = () => {\n    const {\n      //@ts-ignore\n      matches: { active },\n      //@ts-ignore\n      matchProfile: { data },\n    } = stores\n    const {\n      score_team1: teamScore,\n      score_team2: oppTeamScore,\n    } = data\n    const teamName: string = get(data, `team1_name_${suffix}`, '')\n    const oppTeamName: string = get(data, `team2_name_${suffix}`, '')\n    const activeTeam: string = get(data, `${active}_name_${suffix}`)\n    return {\n      teamScore,\n      oppTeamScore,\n      teamName,\n      oppTeamName,\n      activeTeam,\n    }\n  }\n\n  // Аргументы для передачи в функцию создания тайтлов\n  const args = {\n    matches: {\n      matchInfo,\n      suffix,\n      longSuffix,\n      paramName,\n      stores,\n      getMatchInfo,\n      playerInfo,\n      page,\n    },\n    tablesFooter: {\n      simpleName,\n      matchesCount,\n      matchName,\n      paramName,\n    },\n    widgets: {\n      getMatchInfo,\n      playerInfo,\n      paramName,\n    },\n    mapShoots: {\n      getMatchInfo,\n      activeTab,\n      page,\n      simpleName,\n      matchesCount,\n      matchName,\n    },\n    headerStats: {\n      simpleName,\n      matchesCount,\n      matchName,\n      paramName,\n    },\n    teamPlayers: {\n      teamPlayers,\n      paramName,\n      playerInfo,\n      longSuffix,\n    },\n  }\n\n  // Объект со ссылками на функции для составления названия плейлиста\n  // В зависимости от type вызывается нужная функция\n  const titleTypes = {\n    //@ts-ignore\n    matches: getTableMatchesTitle(args.matches),\n    tablesFooter: getTablesFooterTitle(args.tablesFooter),\n    widgets: getWidgetsTitle(args.widgets),\n    mapShoots: getMapShootsTitle(args.mapShoots),\n    headerStats: getHeaderStatsTitle(args.headerStats),\n    teamPlayers: getTeamPlayersTitle(args.teamPlayers),\n  }\n  //@ts-ignore\n  if (!titleTypes[type]) return null\n\n  if (type === 'widgets') {\n    return titleTypes[type](widgetType)\n  }\n  //@ts-ignore\n  return titleTypes[type]()\n}\n\nexport default setTitle\n","import { types } from 'mobx-state-tree'\nimport { callApi } from 'react-sport'\n\nimport routes from 'config/routes'\nimport setTitle from './setTitle'\n\nconst ExternalVideoLinksActions = types.model({}).actions(self => ({\n  /** Запрос ссылки для попап окна для видео повторов\n   * @param {Array} events - список ивентов для повтора\n   * @param {Object} range - Объект с диапазонами с секундами до ивента и после\n   * @param {string} lang - язык\n   * @param {number || null} matchId - айди матча, пока не передаем\n   * @param {string} lexical_formula - название параметра\n   * @param {number || null} matchesCount - количество выбранных матчей\n   * @param {object} matchInfo - Информация о матче. Нужна для имен команд\n   * @param {string} playerInfo - Информация об игроке, если доступна.\n   * @param {string} tab - активный таб на карте ударов\n   * @param {string} type - тип запроса, для составления title (приходит из компонента)\n   * @param {string} widgetType - тип виджета, если доступен\n   */\n  request({\n    //@ts-ignore\n    events,\n    //@ts-ignore\n    lang,\n    lexical_formula = '',\n    matchesCount = null,\n    matchId = null,\n    //@ts-ignore\n    matchInfo,\n    //@ts-ignore\n    playerInfo,\n    //@ts-ignore\n    range,\n    tab = '',\n    type = '',\n    widgetType = '',\n  }) {\n    const title = setTitle({\n      lexical_formula,\n      //@ts-ignore\n      matchesCount,\n      matchInfo,\n      tab,\n      lang,\n      playerInfo,\n      type,\n      widgetType,\n    })\n    const url: string = `${routes.API_ROOT}/video`\n    const body: {\n      allRange: boolean,\n      //@ts-ignore\n      events: Array<string | number | null>,\n      lang: string,\n      //@ts-ignore\n      matchId: number | null,\n      //@ts-ignore\n      offset_start: number | null,\n      //@ts-ignore\n      offset_end: number | null,\n    } = {\n      allRange: false,\n      events,\n      lang,\n      matchId,\n      offset_start: range.before,\n      offset_end: range.after,\n      ...title,\n    }\n\n    return callApi({\n      url,\n      config: {\n        method: 'POST',\n        body: JSON.stringify(body),\n      },\n      //@ts-ignore\n      onRequest: () => self._onRequest(),\n      //@ts-ignore\n      onSuccess: ({ link }) => self._onSuccess(link),\n      //@ts-ignore\n      onError: (error: any) => self._onError(error),\n    })\n  },\n\n  _onRequest() {\n    //@ts-ignore\n    self.isFetching = true\n  },\n  //@ts-ignore\n  _onSuccess(link) {\n    if (link) {\n      window.open(link, '_blank')\n    }\n    //@ts-ignore\n    self.isFetching = false\n  },\n  //@ts-ignore\n  _onError(error) {\n    //@ts-ignore\n    self.error = error\n    //@ts-ignore\n    self.isFetching = false\n  },\n}))\n\nexport default ExternalVideoLinksActions\n","\nimport { types } from 'mobx-state-tree'\nimport ExternalVideoLinksActions from './ExternalVideoLinksActions'\n\nexport const ExternalVideoLinks = types.model('ExternalVideoLinks', {\n  isFetching: types.boolean,\n})\n\nconst ExternalVideoLinksStore = types.compose(\n  ExternalVideoLinks,\n  ExternalVideoLinksActions,\n)\n\nexport default ExternalVideoLinksStore\n","import ExternalVideoLinksStore from './ExternalVideoLinksStore'\n\nexport default ExternalVideoLinksStore.create({\n  isFetching: false,\n})\n","import { types } from 'mobx-state-tree'\nimport { callApi } from 'react-sport'\n// @ts-ignore\nimport routes from 'config/routes'\n\nconst FiltersApiActions = types.model({}).actions(self => ({\n  fetch() {\n    const url = `${routes.API_ROOT}/data`\n    const config = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'ask_filters_manual_view',\n      }),\n    }\n\n    callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        self.data = []\n        //@ts-ignore\n        self.error = null\n        //@ts-ignore\n        self.loaded = false\n      },\n      //@ts-ignore\n      onSuccess: json => self._onSuccess(json),\n      //@ts-ignore\n      onError: error => self._onError(error),\n    })\n  },\n\n  _onSuccess({ data }: { data: {} }) {\n    //@ts-ignore\n    self.data = data\n    //@ts-ignore\n    self.loaded = true\n    //@ts-ignore\n    self.error = null\n  },\n\n  _onError(error: any) {\n    //@ts-ignore\n    self.error = error\n    //@ts-ignore\n    self.loaded = true\n  },\n}))\n\nexport default FiltersApiActions\n","import { types } from 'mobx-state-tree'\nimport has from 'lodash/has'\nimport every from 'lodash/every'\nimport forEach from 'lodash/forEach'\nimport find from 'lodash/find'\nimport get from 'lodash/get'\nimport reduce from 'lodash/reduce'\n\nimport { toJS } from 'mobx'\n// @ts-ignore\nimport stores from 'features/stores'\n\nconst FilterActions = types\n  .model({})\n  .volatile(() => ({\n    tempSelectedFilters: {},\n  }))\n  .actions(self => ({\n    clear() {\n      //@ts-ignore\n      self.checked = {}\n    },\n\n    //@ts-ignore\n    toggleOpenMenu(type) {\n      //@ts-ignore\n      //@ts-ignore\n      self.opened = !self.opened\n      if (type === 'reset') {\n        self.tempSelectedFilters = {}\n        return null\n      }\n      //@ts-ignore\n      if (self.opened) {\n        //@ts-ignore\n        self.tempSelectedFilters = self.checked\n      } else {\n        //@ts-ignore\n        self.checked = self.tempSelectedFilters\n        self.tempSelectedFilters = {}\n      }\n      return null\n    },\n\n    handleTempCheck(id: number | string, popupType?: string) {\n      const tempClone = { ...self.tempSelectedFilters }\n      //@ts-ignore\n      const filterInfo = toJS(self.findFilterInfo(id, popupType))\n      if (has(tempClone, id)) {\n        //@ts-ignore\n        delete tempClone[id]\n      } else if (filterInfo) {\n        //@ts-ignore\n        tempClone[id] = filterInfo\n      }\n      self.tempSelectedFilters = tempClone\n      return null\n    },\n\n    //@ts-ignore\n    handleAllTempCheck(ids, popupType?: string) {\n      const tempClone = { ...self.tempSelectedFilters }\n      if (every(ids, id => has(tempClone, id))) {\n        forEach(ids, (id) => {\n          //@ts-ignore\n          delete tempClone[id]\n        })\n      } else {\n        forEach(ids, (id) => {\n          //@ts-ignore\n          const filterInfo = toJS(self.findFilterInfo(id, popupType))\n          if (filterInfo) {\n            //@ts-ignore\n            tempClone[id] = filterInfo\n          }\n        })\n      }\n      self.tempSelectedFilters = tempClone\n    },\n\n    handleUncheck(id: number | string) {\n      //@ts-ignore\n      const checkedCloned = { ...self.checked }\n      delete checkedCloned[id]\n      //@ts-ignore\n      self.checked = checkedCloned\n    },\n  }))\n  .views(self => ({\n    findFilterInfo(id: number | string, popupType?: string) {\n      //@ts-ignore\n      if (!popupType) return find(self.data, { id })\n\n      //@ts-ignore\n      const getIdFromString = id => Number(id.split('_')[0])\n      const players = popupType === 'popupWithHomePlayers'\n        //@ts-ignore\n        ? self.homePlayers\n        //@ts-ignore\n        : self.teamPlayers\n      return find(players, { player_id: getIdFromString(id) })\n    },\n\n    get teamPlayers() {\n      const players = get(stores, 'mapShoot.data')\n      return reduce(\n        players,\n        (acc, { prop_player }) => {\n          //@ts-ignore\n          //@ts-ignore\n          prop_player.forEach(player => acc.push(player))\n          return acc\n        },\n        [],\n      )\n    },\n\n    get homePlayers() {\n      const players = get(stores, 'playerInfo.basicData')\n      //@ts-ignore\n      return reduce(\n        players,\n        //@ts-ignore\n        (acc, { f_player, prop_player }) => {\n          const newObj = prop_player[0]\n          newObj.player_id = f_player\n          return [...acc, newObj]\n        },\n        [],\n      )\n    },\n  }))\n\nexport default FilterActions\n","\nimport { types } from 'mobx-state-tree'\nimport FiltersApiActions from './FiltersApiActions'\nimport FilterActions from './FilterActions'\n\n// Модель группы с названием\nconst FilterElem = types.model('FilterElem', {\n  c_action: types.maybeNull(types.number),\n  c_match_event_prop: types.maybeNull(types.array(types.number)),\n  c_match_event_prop2: types.maybeNull(types.array(types.number)),\n  c_match_event_prop_value: types.maybeNull(types.array(types.number)),\n  c_match_event_prop_value2: types.maybeNull(types.array(types.number)),\n  filter_name: types.string,\n  id: types.number,\n  lexic_id: types.maybeNull(types.number),\n})\n\nexport const Filters = types.model('Filters', {\n  data: types.array(FilterElem),\n  checked: types.frozen({}),\n  opened: types.boolean,\n  loaded: types.boolean,\n  error: types.maybeNull(types.frozen({})),\n})\n\nconst FiltersStore = types.compose(\n  Filters,\n  FiltersApiActions,\n  FilterActions,\n)\n\nexport default FiltersStore\n","import FiltersStore from './FiltersStore'\n\nexport default FiltersStore.create({\n  data: [],\n  checked: {},\n  opened: false,\n  loaded: false,\n  //@ts-ignore\n  tempChecked: {},\n  error: null,\n})\n","import { types } from 'mobx-state-tree'\n\nimport filter from 'lodash/filter'\nimport includes from 'lodash/includes'\nimport map from 'lodash/map'\n\nexport const TeamsCompareActions = types\n  .model({})\n  .volatile(() => ({\n    teamsInfoLoaded: false,\n  }))\n  .actions(self => ({\n    // Сохранение временно выбранных параметров (при закрытии шестеренки)\n    saveTempParams(\n      lang: string,\n      matchId: string,\n      userConfirmedParams: Array<{}>,\n    ) {\n      //@ts-ignore\n      const paramsIdList = map(userConfirmedParams, 'param_id', [])\n\n      //@ts-ignore\n      self.selectedParams = userConfirmedParams\n      //@ts-ignore\n      self.fetchStats(lang, matchId, paramsIdList)\n    },\n\n    //Сохраняем все параметры в шестеренке и предвыбираем дефолтные (при первом открытии)\n    setDefaultSelectedParams() {\n      // По умолчанию предвыбираем дефолтные параметры\n      //@ts-ignore\n      const defaultIds = map(self.stats, 'param')\n      //@ts-ignore\n      self.selectedParams = filter(\n        //@ts-ignore\n        self.totalParams,\n        ({ param_id }) => includes(defaultIds, param_id),\n      )\n    },\n  }))\n","import { types, flow } from 'mobx-state-tree'\n\nimport { utils } from 'react-sport'\n\nimport get from 'lodash/get'\nimport find from 'lodash/find'\nimport reduce from 'lodash/reduce'\nimport pick from 'lodash/pick'\n\nimport stores from 'features/stores'\n\nimport routes from 'config/routes'\n\ntype TConfig = {\n  method: string,\n  body: string,\n}\n\nexport const TeamsCompareApiActions = types.model({})\n  .actions(self => ({\n    // Запрос при первом рендере компонента.\n    // Нам нужны все параметры для шестеренки\n    // После ответа делаем запрос на получение данных для виджета\n    basicFetch: flow(function* basicFetch(\n      //@ts-ignore\n      lang,\n      //@ts-ignore\n      matchId,\n      //@ts-ignore\n      paramsList,\n    ) {\n      // Делаем запрос данных для таблицы\n      //@ts-ignore\n      yield self.fetchStats(lang, matchId, paramsList)\n      // Делаем запрос всех параметров (для шестеренки)\n      //@ts-ignore\n      yield self.getGearParamsList(1)\n      // Устанавливаем выбранные параметры по-умолчанию\n      //@ts-ignore\n      self.setDefaultSelectedParams()\n    }),\n    // Запрос к API для получения статистики команд\n    fetchStats(\n      lang: string,\n      matchId: string,\n      params: Array<number>,\n    ) {\n      const matchInfo = get(stores, 'matchProfile.data', {})\n      const teams = [matchInfo.team1_id, matchInfo.team2_id]\n      const url: string = `${routes.API_ROOT}/data`\n      const config: TConfig = {\n        method: 'POST',\n        body: JSON.stringify({\n          proc: 'scout_teams_all_stat',\n          params: {\n            _p_match_id: Number(matchId),\n            _p_season_id: null,\n            _p_team_arr: teams,\n            _p_param_arr: params,\n            _p_lang_id: Number(lang !== 'ru'),\n          },\n        }),\n      }\n      return utils.callApi({\n        url,\n        config,\n        //@ts-ignore\n        onRequest: self._onRequest,\n        //@ts-ignore\n        onSuccess: self._onSuccess,\n        //@ts-ignore\n        onError: self._onError,\n      })\n    },\n\n    _onRequest() {\n      //@ts-ignore\n      self.stats = []\n      //@ts-ignore\n      self.teamsInfo = null\n      //@ts-ignore\n      self.teamsInfoLoaded = false\n    },\n\n    //@ts-ignore\n    _onSuccess(json: { data?: Array<{}> }) {\n      const teams = get(json.data, '[0].scout_teams_all_stat', [])\n      //@ts-ignore\n      self.stats = get(find(teams, 'params_info', {}), 'params_info')\n      //@ts-ignore\n      self.teamsInfo = reduce(teams, (acc, current) => {\n        //@ts-ignore\n        acc[current.f_team] = pick(\n          current,\n          ['f_team', 'params', 'photo_team'],\n        )\n        return acc\n      }, {})\n      //@ts-ignore\n      self.error = null\n      //@ts-ignore\n      self.teamsInfoLoaded = true\n    },\n\n    _onError(error: any) {\n      //@ts-ignore\n      self.error = error\n      //@ts-ignore\n      self.teamsInfoLoaded = false\n    },\n  }))\n","\nimport { types } from 'mobx-state-tree'\n\n// @ts-ignore\nimport { tableApiActions } from 'features/Table'\n\nimport { TeamsCompareActions } from './TeamsCompareActions'\nimport { TeamsCompareApiActions } from './TeamsCompareApiActions'\n\nconst Stat = types.model('Stat', {\n  param: types.number,\n  param_name: types.maybeNull(types.string),\n  param_name_short: types.maybeNull(types.string),\n})\n\nconst GearParam = types.model('SelectedGearParam', {\n  clickable: types.number,\n  f_option_3: types.number,\n  full_lexical_formula: types.string,\n  gear_group_id: types.number,\n  gear_subgroup_id: types.number,\n  is_default: types.maybeNull(types.string),\n  lexical_formula: types.string,\n  name: types.string,\n  param1_id: types.maybeNull(types.array(types.string)),\n  param2_id: types.maybeNull(types.array(types.string)),\n  param_id: types.number,\n  short_lexical_formula: types.string,\n  sort_order: types.number,\n})\n\nconst TeamsCompare = types.model('TeamsCompareWidget', {\n  stats: types.maybeNull(types.array(Stat)),\n  teamsInfo: types.frozen({}),\n  isLoaded: false,\n  error: types.frozen({}),\n  selectedParams: types.maybeNull(types.array(GearParam)),\n})\n\nexport const TeamsCompareStore = types.compose(\n  // Общие методы для получения параметров для шестеренки\n  tableApiActions,\n  // Собственные методы\n  TeamsCompare,\n  TeamsCompareActions,\n  TeamsCompareApiActions,\n)\n","import React from 'react'\nimport map from 'lodash/map'\nimport { TTeamStats } from '../types'\n\nexport const TeamsStats = ({\n  getClassName,\n  getExtLink,\n  getStatValue,\n  stats,\n  team1,\n  team2,\n}: TTeamStats) => (\n  <div className='t-compare__stats-container'>\n    {map(stats, ({ param, param_name, param_name_short }, index) => (\n      <div\n        key={`${param}_${param_name_short}_${index}`}\n        className='t-compare__stats-row'\n      >\n        <span\n          className={getClassName(param, team1)}\n            //@ts-ignore\n          onClick={getExtLink(param, param_name, team1)}\n        >\n          {getStatValue(param, team1)}\n        </span>\n        <span className='t-compare__stats-name'>{param_name}</span>\n        <span\n          className={getClassName(param, team2)}\n            //@ts-ignore\n          onClick={getExtLink(param, param_name, team2)}\n        >\n          {getStatValue(param, team2)}\n        </span>\n      </div>\n    ))}\n  </div>\n)\n\nexport default TeamsStats\n","import React from 'react'\nimport { T9n, utils } from 'react-sport'\nimport { TTeamsCompareLogos } from '../types'\n\nconst {\n  helpers: { onProfileImageError },\n} = utils\n\nexport const TeamsCompareLogos = ({\n  getImage,\n  team1,\n  team2,\n}: TTeamsCompareLogos) => (\n  <div className='t-compare__control-row'>\n    <div className='t-compare__logo-container t-compare__logo-container_teams'>\n      <img\n        className='t-compare__logo t-compare__logo_team'\n        //@ts-ignore\n        src={getImage(team1)}\n        alt='logoTeam'\n        onError={e => onProfileImageError(e, 'team')}\n      />\n    </div>\n\n    <div className='t-compare__controls t-compare__controls_player'>\n      <T9n className='t-compare__toggler' t='match' />\n    </div>\n    <div className='t-compare__logo-container t-compare__logo-container_teams'>\n      <img\n        className='t-compare__logo t-compare__logo_team t-compare__logo_team-right'\n        //@ts-ignore\n        src={getImage(team2)}\n        alt='logoTeam'\n        onError={e => onProfileImageError(e, 'team')}\n      />\n    </div>\n  </div>\n)\n\nexport default TeamsCompareLogos\n","import React, { Fragment } from 'react'\nimport { inject, observer } from 'mobx-react'\nimport { withHandlers, compose } from 'recompose'\nimport cx from 'classnames'\nimport uniqBy from 'lodash/uniqBy'\nimport sortBy from 'lodash/sortBy'\nimport map from 'lodash/map'\nimport get from 'lodash/get'\nimport find from 'lodash/find'\n\nimport TeamsCompareStats from './TeamsCompareStats'\nimport TeamsCompareLogos from './TeamsCompareLogos'\nimport { TTeamsCompareInfo } from '../types'\n\nexport const TeamsCompareInfo = ({\n  getClassName,\n  getExtLink,\n  getImage,\n  getSortedStats,\n  getStatValue,\n  team1,\n  team2,\n}: TTeamsCompareInfo) => (\n  <Fragment>\n    <TeamsCompareLogos\n      getImage={getImage}\n      team1={team1}\n      team2={team2}\n    />\n    <TeamsCompareStats\n      stats={getSortedStats()}\n      team1={team1}\n      team2={team2}\n      getStatValue={getStatValue}\n      getClassName={getClassName}\n      getExtLink={getExtLink}\n    />\n  </Fragment>\n)\n\nconst TeamsCompareInfoComposed = compose(\n  inject(\n    'lexics',\n    'videoLink',\n    'shootsRange',\n    'matchTable',\n    'teamsCompareWidget',\n  ),\n  //@ts-ignore\n  withHandlers({\n    getSortedStats: ({\n      teamsCompareWidget: {\n        selectedParams,\n        stats,\n      },\n    }) => () => {\n      if (stats) {\n        const uniqStats = uniqBy(stats, 'param')\n        //@ts-ignore\n        return sortBy(uniqStats, ({ param }) => {\n          const selectedParamsIds = map(selectedParams, 'param_id')\n          return selectedParamsIds.indexOf(param)\n        })\n      }\n      return []\n    },\n    //@ts-ignore\n    getImage: ({ teamsCompareWidget: { teamsInfo } }) => teamId => (\n      get(teamsInfo, `${teamId}.photo_team`, '')\n    ),\n    //@ts-ignore\n    getStatValue: ({ teamsCompareWidget: { teamsInfo } }) => (param, teamId) => {\n      const value = get(\n        find(teamsInfo[teamId].params, { param }),\n        'value',\n      )\n      return value ? value.toFixed() : '-'\n    },\n    //@ts-ignore\n    getClassName: ({ teamsCompareWidget: { teamsInfo } }) => (param, teamId) => {\n      const hasVideo = get(\n        find(teamsInfo[teamId].params, { param }),\n        'f_match_event_ids',\n      )\n      return cx(\n        't-compare__stats-num',\n        { 't-compare__clickable-cell': hasVideo },\n      )\n    },\n    getExtLink: ({\n      lexics: { lang },\n      shootsRange,\n      teamsCompareWidget: { teamsInfo },\n      videoLink: { request },\n      //@ts-ignore\n    }) => (param, param_name, teamId) => () => {\n      //@ts-ignore\n      const events: Array<any> = get(\n        find(teamsInfo[teamId].params, { param }), 'f_match_event_ids',\n      )\n      if (events) {\n        request({\n          events,\n          range: shootsRange,\n          lang,\n          lexical_formula: param_name,\n          type: 'widgets',\n          widgetType: 'teamsCompare',\n        })\n      }\n    },\n  }),\n  observer,\n  //@ts-ignore\n)(TeamsCompareInfo)\n\nexport default TeamsCompareInfoComposed\n","import React from 'react'\n\nimport { T9n } from 'react-sport'\n\nimport { DndParams, GearTable } from 'features/GearPopup'\n\nimport TeamsComparePopupComposed from './TeamsComparePopupComposed'\n\ntype TProps = {\n  //@ts-ignore\n  lexics: { getLexics: (string) => string },\n  onApply: () => void,\n  //@ts-ignore\n  onClose: (value: string | null) => void,\n  teamsCompareWidget: {},\n}\n\n// Попап окно с параметрами (шестеренка)\nexport const TeamsComparePopup = ({\n  lexics: { getLexics },\n  onApply,\n  onClose,\n  teamsCompareWidget,\n}: TProps) => (\n  <div className='popup popup-modern popup-modern_position-left popup-modern_active'>\n    <div className='popup-inner'>\n      <div className='popup-row-header'>\n        <h3 className='popup-title'>\n          <T9n t='main_statisctic' />\n        </h3>\n        {/*\n          //@ts-ignore */}\n        <span className='popup-close' onClick={onClose} />\n\n      </div>\n      <div className='popup-row-container'>\n        <GearTable\n          tableType='teamsCompareWidget'\n          currentStore={teamsCompareWidget}\n          ampluaId={0}\n        />\n      </div>\n      <div className='popup-column-aside'>\n        <DndParams />\n      </div>\n      <div className='popup-row-footer'>\n        <div className='popup-buttons'>\n          <input\n            //@ts-ignore\n            onClick={onClose}\n            type='button'\n            value={getLexics('cancel')}\n            className='popup-cancel'\n          />\n          <input\n            onClick={onApply}\n            type='button'\n            value={getLexics('ok')}\n            className='popup-submit'\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n)\n\n//@ts-ignore\nexport default TeamsComparePopupComposed(TeamsComparePopup)\n","\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers, lifecycle } from 'recompose'\n\nconst TeamsComparePupupComposed = compose(\n  inject(\n    'matchProfile',\n    'teamProfile',\n    'matchTable',\n    'lexics',\n    'teamsCompareWidget',\n    'gearPopupStore',\n  ),\n  //@ts-ignore\n  withHandlers({\n    /**\n     * Запись в стор выбранных параметров в попапе шестеренки\n     * @param {func} saveTempParams - функция сохранения параметров\n     * @param {func} handlePopupAction - функция закрытия попапа\n     * @param {string} lang - выбранный язык\n     * @param {string} matchId - id матча\n     */\n    onApply: ({\n      gearPopupStore: { tempSelected },\n      handlePopupAction,\n      lexics: { lang },\n      matchProfile: { matchId },\n      teamsCompareWidget: { saveTempParams },\n    }) => () => {\n      saveTempParams(lang, matchId, tempSelected)\n      handlePopupAction()\n    },\n    /**\n     * Закрытие попапа шестеренки\n     * @param {func} editTempSelected - функция очищения выбранных параметров\n     * @param {func} handlePopupAction - функция закрытия попапа\n     *\n     */\n    onClose: ({\n      gearPopupStore: { eraseTempSelected },\n      handlePopupAction,\n    }) => () => {\n      eraseTempSelected()\n      handlePopupAction()\n    },\n  }),\n  lifecycle({\n    componentDidMount() {\n      const {\n        //@ts-ignore\n        gearPopupStore: { fillTempSelected },\n        //@ts-ignore\n        teamsCompareWidget: { selectedParams },\n      } = this.props\n      fillTempSelected(selectedParams)\n    },\n  }),\n  observer,\n)\n\nexport default TeamsComparePupupComposed\n","\nimport React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers, withState } from 'recompose'\n\nimport { T9n } from 'react-sport'\n\nimport TeamsComparePopup from './TeamsComparePopup'\nimport { TTeamsCompareHeder } from '../types'\n\nexport const TeamsCompareHeder = ({\n  handlePopupAction,\n  popupOpened,\n}: TTeamsCompareHeder) => (\n  <div className='t-compare__header'>\n    <T9n className='t-compare__title' t='teams_statistic' />\n    <a className='t-compare__gear-options' onClick={handlePopupAction}>\n      <i className='icon-settings' />\n    </a>\n    {popupOpened && <TeamsComparePopup handlePopupAction={handlePopupAction} />}\n  </div>\n)\n\nconst TeamsCompareHeaderComposed = compose(\n  inject('lexics', 'videoLink', 'shootsRange', 'teamsCompareWidget'),\n  withState('popupOpened', 'openPopup', false),\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    handlePopupAction: ({ openPopup }) => () => openPopup(n => !n),\n  }),\n  observer,\n  //@ts-ignore\n)(TeamsCompareHeder)\n\nexport default TeamsCompareHeaderComposed\n","const defaultParams = [\n  101,\n  102,\n  103,\n  124,\n  137,\n  142,\n  158,\n  169,\n  171,\n  172,\n  175,\n  239,\n]\n\nexport default defaultParams\n","import React from 'react'\nimport { observer, inject } from 'mobx-react'\n\nimport map from 'lodash/map'\nimport { compose, lifecycle, withProps } from 'recompose'\n\n// @ts-ignore\nimport { getSuffix } from 'module/utils/helpers'\n\nimport TeamsCompareInfo from './TeamsCompareInfo'\nimport TeamsCompareHeader from './TeamsCompareHeader'\n\nimport { TTeamsCompare } from '../types'\n\nimport defaultParams from '../config'\n\nexport const TeamsCompareComponent = ({\n  matchProfile: {\n    data: { team1_id, team2_id, ...data },\n  },\n  suffix,\n  teamsCompareWidget: { stats, teamsInfoLoaded },\n}: TTeamsCompare) => (\n  <div className='t-compare'>\n    <TeamsCompareHeader />\n    <div className='t-compare__container'>\n      <div className='t-compare__teams'>\n        <div className='t-compare__team'>\n          <span className='t-compare__team-name'>\n            {/*\n              //@ts-ignore */}\n            {data[`team1_name_${suffix}`]}\n          </span>\n        </div>\n        <div className='t-compare__team'>\n          <span className='t-compare__team-name'>\n            {/*\n              //@ts-ignore */}\n            {data[`team2_name_${suffix}`]}\n          </span>\n        </div>\n      </div>\n      {teamsInfoLoaded ? (\n      //@ts-ignore\n        <TeamsCompareInfo team1={team1_id} team2={team2_id} stats={stats} />\n      ) : (\n        <div className='loading' />\n      )}\n    </div>\n  </div>\n)\n\nconst TeamsCompareComposed = compose(\n  inject('lexics', 'teamsCompareWidget', 'matchProfile'),\n  observer,\n  //@ts-ignore\n  withProps(({ lexics: { lang } }) => ({\n    lang,\n    suffix: getSuffix(lang),\n  })),\n  lifecycle({\n    componentDidMount() {\n      const {\n        //@ts-ignore\n        lang: currentLang,\n        //@ts-ignore\n        matchProfile: { matchId },\n        //@ts-ignore\n        teamsCompareWidget: { basicFetch },\n      } = this.props\n      basicFetch(currentLang, matchId, defaultParams)\n    },\n    componentDidUpdate(prevProps) {\n      const {\n        //@ts-ignore\n        lang: currentLang,\n        //@ts-ignore\n        matchProfile: { matchId },\n        //@ts-ignore\n        teamsCompareWidget: { fetchStats, selectedParams },\n      } = this.props\n\n      //@ts-ignore\n      if (prevProps.lang !== currentLang) {\n        const paramsIds = map(selectedParams, 'param_id')\n        fetchStats(currentLang, matchId, paramsIds)\n      }\n    },\n  }),\n  observer,\n)\n\n// @ts-ignore\nexport const TeamsCompare = TeamsCompareComposed(TeamsCompareComponent)\n","import { types } from 'mobx-state-tree'\nimport { callApi } from 'react-sport'\n// @ts-ignore\nimport routes from 'config/routes'\n\nconst TeamProfileApiActions = types.model({}).actions(self => ({\n  fetch(teamId: string | number) {\n    const url = `${routes.API_ROOT}/data`\n    const config = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'scout_team_inf',\n        params: {\n          _p_team_id: teamId,\n        },\n      }),\n    }\n    callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        self.profile = null\n        //@ts-ignore\n        self.isLoaded = false\n      },\n      //@ts-ignore\n      onSuccess: self._onSuccess,\n      //@ts-ignore\n      onError: self._onError,\n    })\n  },\n\n  _onSuccess(json: {\n    data: Array<{\n      scout_team_inf: Array<{}>,\n    }>,\n  }) {\n    //@ts-ignore\n    self.isLoaded = true\n    //@ts-ignore\n    self.profile = json.data[0].scout_team_inf[0] || null\n    //@ts-ignore\n    self.error = null\n  },\n\n  _onError(error: any) {\n    //@ts-ignore\n    self.error = error\n  },\n}))\n\nexport default TeamProfileApiActions\n","import { types } from 'mobx-state-tree'\nimport TeamProfileApiActions from './TeamProfileApiActions'\n\nexport const TeamProfile = types.model('TeamProfile', {\n  profile: types.maybeNull(types.frozen({})),\n  isLoaded: types.boolean,\n  error: types.maybeNull(types.frozen({})),\n})\n\nconst TeamProfileStore = types.compose(\n  TeamProfile,\n  TeamProfileApiActions,\n)\n\nexport default TeamProfileStore\n","import TeamProfileStore from './TeamProfileStore'\n\nexport default TeamProfileStore.create({\n  profile: null,\n  isLoaded: false,\n  error: null,\n})\n","import { types } from 'mobx-state-tree'\nimport { values } from 'mobx'\n\nimport orderBy from 'lodash/orderBy'\nimport get from 'lodash/get'\nimport head from 'lodash/head'\n\nimport { callApi } from 'react-sport'\n// @ts-ignore\nimport routes from 'config/routes'\n\nconst TournamentPageApiActions = types.model({}).actions(self => ({\n  fetchSeasons(tournamentId: number) {\n    const url = `${routes.API_ROOT}/data`\n    const config = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'scout_tournament_season_list',\n        params: {\n          _p_tournament_id: tournamentId,\n        },\n      }),\n    }\n\n    return callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        self.isLoaded = false\n        //@ts-ignore\n        self.error = null\n      },\n      //@ts-ignore\n      onSuccess: json => self._onSuccessSeasons(json, tournamentId),\n      //@ts-ignore\n      onError: self._onError,\n    })\n  },\n\n  _onSuccessSeasons(\n    json: {\n      data: Array<{\n        scout_tournament_season_list: Array<{}>,\n      }>,\n    },\n    tournamentId: number,\n  ) {\n    const apiResponse = orderBy(\n      get(json, 'data[0].scout_tournament_season_list', []),\n      ['season_id'],\n      ['desc'],\n    )\n    //@ts-ignore\n    apiResponse.forEach(season => self.seasons.set(season.season_id, season))\n    //@ts-ignore\n    const defaultSeasonId = head(values(self.seasons)).season_id\n    //@ts-ignore\n    self.changeActiveSeason(tournamentId, defaultSeasonId)\n    //@ts-ignore\n    self.error = null\n    //@ts-ignore\n    self.isLoaded = true\n  },\n\n  _onError(error: any) {\n    //@ts-ignore\n    self.error = error\n  },\n}))\n\nexport default TournamentPageApiActions\n","import { types, getRoot } from 'mobx-state-tree'\nimport { values } from 'mobx'\n\nconst TournamentSeasonSelectActions = types\n  .model({})\n  .volatile(() => ({\n    selectedSeason: {},\n    opened: false,\n  }))\n  .actions(self => ({\n    changeActiveSeason: (tournamentId: number, id: number) => {\n      //@ts-ignore\n      self.selectedSeason = self.seasons.get(id)\n      getRoot(self).tournamentMatches.fetchMatchesInfo(tournamentId, id)\n    },\n  }))\n  .views(self => ({\n    get seasonsList() {\n      //@ts-ignore\n      return values(self.seasons)\n    },\n  }))\n\nexport default TournamentSeasonSelectActions\n","import { types } from 'mobx-state-tree'\nimport TournamentSeasonSelectApiActions from './TournamentSeasonSelectApiActions'\nimport TournamentSeasonSelectActions from './TournamentSeasonSelectActions'\n\nconst Season = types.model('Season', {\n  season_id: types.maybeNull(types.number),\n  season_name: types.maybeNull(types.string),\n})\n\nexport const TournamentSeasons = types.model('TournamentSeasons', {\n  seasons: types.map(Season),\n  isLoaded: false,\n  error: types.maybeNull(types.frozen({})),\n})\n\nconst TournamentSeasonsStore = types.compose(\n  TournamentSeasons,\n  TournamentSeasonSelectApiActions,\n  TournamentSeasonSelectActions,\n)\n\nexport default TournamentSeasonsStore\n","import { types } from 'mobx-state-tree'\n\nimport get from 'lodash/get'\n\nimport { callApi } from 'react-sport'\n\n// @ts-ignore\nimport routes from 'config/routes'\n\nconst TournamentPageApiActions = types.model({}).actions(self => ({\n  fetchTournamentProfile(tournamentId: number) {\n    const url = `${routes.API_ROOT}/data`\n    const config = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'scout_tournament_inf',\n        params: {\n          _p_tournament_id: tournamentId,\n        },\n      }),\n    }\n\n    return callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        self.profile = {}\n        //@ts-ignore\n        self.isLoaded = false\n      },\n      //@ts-ignore\n      onSuccess: self._onSuccess,\n      //@ts-ignore\n      onError: self._onError,\n    })\n  },\n\n  _onSuccess(json: {\n    data: Array<{\n      scout_tournament_inf: {},\n    }>,\n  }) {\n    //@ts-ignore\n    self.profile = get(json, 'data[0].scout_tournament_inf', {})\n    //@ts-ignore\n    self.error = null\n    //@ts-ignore\n    self.isLoaded = true\n  },\n\n  _onError(error: any) {\n    //@ts-ignore\n    self.error = error\n  },\n}))\n\nexport default TournamentPageApiActions\n","import { types } from 'mobx-state-tree'\nimport TournamentPageApiActions from './TournamentPageApiActions'\n\nexport const TournamentPage = types.model('TournamentProfile', {\n  profile: types.maybeNull(types.frozen({})),\n  isLoaded: false,\n  error: types.maybeNull(types.frozen({})),\n})\n\nconst TournamentPageStore = types.compose(\n  TournamentPage,\n  TournamentPageApiActions,\n)\n\nexport default TournamentPageStore\n","import { types, flow } from 'mobx-state-tree'\n\nimport map from 'lodash/fp/map'\nimport isEmpty from 'lodash/isEmpty'\nimport values from 'lodash/fp/values'\nimport flatten from 'lodash/fp/flatten'\nimport filter from 'lodash/fp/filter'\nimport reduce from 'lodash/reduce'\nimport pipe from 'lodash/fp/pipe'\n\nimport { callApi } from 'react-sport'\n\nimport { filterDBStats } from 'module/utils/helpers'\nimport routes from 'config/routes'\n\ntype TConfig = {\n  method: string,\n  body: string,\n}\n\nexport const MatchPagePlayersApiActions = types.model({})\n  .actions(self => ({\n    fetchMatchesInfo: flow(\n      //@ts-ignore\n      function* fetchMatchesInfo(matchId) {\n        try {\n          // Делаем запрос для получения списка игроков в командах\n          //@ts-ignore\n          yield self.fetchPlayers(matchId)\n          // Делаем запрос для получения списка всех параметров\n          //@ts-ignore\n          yield self.getGearParamsList(1)\n          // Делаем запрос для получения значений для игроков\n          //@ts-ignore\n          yield self.fetchTableStats(matchId)\n        } catch (error) {\n          //@ts-ignore\n          self._onError(error)\n        }\n      },\n    ),\n\n    fetchPlayers(matchId: number | string) {\n      const url: string = `${routes.API_ROOT}/data`\n      const config: TConfig = {\n        method: 'POST',\n        body: JSON.stringify({\n          proc: 'ask_players_list_match',\n          params: {\n            _v_match_id: matchId,\n            _v_played: true,\n          },\n        }),\n      }\n      return callApi({\n        url,\n        config,\n        //@ts-ignore\n        onRequest: () => { self.isLoaded = false },\n        //@ts-ignore\n        onSuccess: self._onSuccessPlayers,\n        //@ts-ignore\n        onError: self._onError,\n      })\n    },\n\n    //@ts-ignore\n    _onSuccessPlayers(json: { data?: Array<any> } = []) {\n      const playersPlayedThisMatch = filter('played')(json.data)\n      //@ts-ignore\n      self.playerList = reduce(\n        playersPlayedThisMatch,\n        (acc, curr) => {\n          //@ts-ignore\n          const players = acc[curr.f_team] || []\n          //@ts-ignore\n          acc[curr.f_team] = [\n            ...players,\n            {\n              ...curr,\n              sortBy: 0,\n            },\n          ]\n          return acc\n        }, {},\n      )\n\n      //@ts-ignore\n      self.error = null\n      // Делаем запрос для получения данных по полученным игрокам\n      //@ts-ignore\n      self.fetchPlayersInfo()\n    },\n\n    fetchPlayersInfo() {\n      const url: string = `${routes.API_ROOT}/data`\n      const players = pipe(\n        values,\n        flatten,\n        filter({ type_player: 'p' }),\n        map('f_player'),\n        //@ts-ignore\n      )(self.playerList)\n\n      const config: TConfig = {\n        method: 'POST',\n        body: JSON.stringify({\n          proc: 'scout_players_info',\n          params: {\n            _p_player_id: players,\n          },\n        }),\n      }\n      return callApi({\n        url,\n        config,\n        //@ts-ignore\n        onRequest: () => { self.isLoaded = false },\n        //@ts-ignore\n        onSuccess: self._onSuccessPlayersInfo,\n        //@ts-ignore\n        onError: self._onError,\n      })\n    },\n\n    //@ts-ignore\n    _onSuccessPlayersInfo(json: { data: Array<any> }) {\n      //@ts-ignore\n      self.playersInfo = json.data || []\n      //@ts-ignore\n      self.error = null\n      //@ts-ignore\n      self.updatePlayerProfile()\n    },\n\n    fetchTableStats(matchId: number | string) {\n      const url: string = `${routes.API_ROOT}/data`\n      const config: TConfig = {\n        method: 'POST',\n        body: JSON.stringify({\n          proc: 'ask_player_param_view',\n          params: {\n            _v_match_id: [matchId],\n            _v_player_id:\n              pipe(\n                values,\n                flatten,\n                map('f_player'),\n                //@ts-ignore\n              )(self.playerList),\n            //@ts-ignore\n            _v_param_id: map('param_id')(self.totalParams),\n          },\n        }),\n      }\n      return callApi({\n        url,\n        config,\n        onRequest: () => {\n          //@ts-ignore\n          self.error = null\n        },\n        //@ts-ignore\n        onSuccess: self._onSuccessStats,\n        //@ts-ignore\n        onError: self._onError,\n      })\n    },\n\n    //@ts-ignore\n    _onSuccessStats(json: { data: Array<{}> }) {\n      //@ts-ignore\n      self.tableStats = filterDBStats(json.data)\n      if (\n        //@ts-ignore\n        isEmpty(self.tables)\n        && window.localStorage.getItem('matchPagePlayers') === null\n      ) {\n        //@ts-ignore\n        self.saveTables()\n      } else {\n        //@ts-ignore\n        self.tables = JSON.parse(window.localStorage.getItem('matchPagePlayers'))\n      }\n      //@ts-ignore\n      self.isLoaded = true\n      //@ts-ignore\n      self.error = null\n    },\n\n    //@ts-ignore\n    _onError(error: {}) {\n      //@ts-ignore\n      self.error = error\n    },\n\n    setIsLoaded() {\n      //@ts-ignore\n      self.isLoaded = !self.isLoaded\n    },\n  }))\n","import { types } from 'mobx-state-tree'\n\nimport filter from 'lodash/fp/filter'\nimport sortBy from 'lodash/fp/sortBy'\nimport flow from 'lodash/fp/flow'\nimport reduce from 'lodash/reduce'\nimport map from 'lodash/map'\nimport get from 'lodash/get'\nimport find from 'lodash/find'\nimport forEach from 'lodash/forEach'\n\n// @ts-ignore\nimport stores from 'features/stores'\n\n// @ts-ignore\nimport { saveTablesToLocalStorage } from 'module/utils/helpers'\n\nexport const MatchPagePlayersActions = types.model({}).actions(self => ({\n  saveTables() {\n    //@ts-ignore\n    forEach(self.gearParams, ({ groupName, params }, index) => {\n      //@ts-ignore\n      const position: number = index + 1\n      const table: {\n        position: number,\n        selectedParams: Array<{ is_default: string }>,\n        tableName: string | number,\n      } = {\n        position,\n        //@ts-ignore\n        selectedParams: flow(\n          filter('is_default'),\n          sortBy(['gear_group_id', 'sort_order']),\n        )(params),\n        tableName: String(groupName),\n        summaryType: 'average_for_match',\n      }\n      if (table.selectedParams.length) {\n        //@ts-ignore\n        self.tables = {\n          //@ts-ignore\n          ...self.tables,\n          [position]: {\n            ...table,\n            sortInc: false,\n            activeId: null,\n          },\n        }\n      }\n      //@ts-ignore\n      saveTablesToLocalStorage({\n        name: 'matchPagePlayers',\n        //@ts-ignore\n        tables: self.tables,\n      })\n    })\n  },\n\n  // Дополняем профиль игрока именем и фамилией\n  updatePlayerProfile() {\n    const {\n      data: { team1_id, team2_id },\n      //@ts-ignore\n    } = stores.matchProfile\n    const teams = [team1_id, team2_id]\n\n    //@ts-ignore\n    self.playerList = reduce(\n      teams,\n      (acc, curr) => {\n        //@ts-ignore\n        const currentTeamPlayers = get(self.playerList, curr, [])\n        //@ts-ignore\n        acc[curr] = map(currentTeamPlayers, (player) => {\n          const {\n            firstname_eng,\n            firstname_rus,\n            lastname_eng,\n            lastname_rus,\n          } = get(\n            //@ts-ignore\n            find(self.playersInfo, { f_player: player.f_player }),\n            'prop_player[0]',\n            {},\n          )\n\n          return {\n            ...player,\n            firstname_eng,\n            firstname_rus,\n            lastname_eng,\n            lastname_rus,\n          }\n        })\n        return acc\n      },\n      {},\n    )\n  },\n\n  //@ts-ignore\n  //@ts-ignore\n  setActiveParam(table, param) {\n    const { position } = table\n    //@ts-ignore\n    self.tables = {\n      //@ts-ignore\n      ...self.tables,\n      [position]: {\n        ...table,\n        //@ts-ignore\n        sortInc: !get(self.tables, [position, 'sortInc']),\n        activeId: param.param_id,\n      },\n    }\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\nimport { TableStore } from 'features/Table/models/tableModel'\n\nimport { MatchPagePlayersApiActions } from './apiActions'\nimport { MatchPagePlayersActions } from './actions'\n\nconst PlayerData = types.model('PlayerData', {\n  firstname_eng: types.maybeNull(types.string),\n  firstname_rus: types.maybeNull(types.string),\n  lastname_eng: types.maybeNull(types.string),\n  lastname_rus: types.maybeNull(types.string),\n  nickname_eng: types.maybeNull(types.string),\n  nickname_rus: types.maybeNull(types.string),\n})\n\nconst PlayerSimpleModel = types.model('PlayerSimple', {\n  f_player: types.number,\n  prop_player: types.array(PlayerData),\n})\n\nconst ParamExtended = types.model('Param', {\n  f_match: types.number,\n  f_match_event_ids: types.maybeNull(types.array(types.number)),\n  f_match_event_ids_json: types.maybeNull(types.array(types.number)),\n  f_option_0: types.number,\n  f_option_1: types.maybeNull(types.number),\n  f_option_2: types.maybeNull(types.number),\n  f_option_3: types.maybeNull(types.number),\n  f_option_4: types.maybeNull(types.number),\n  f_option_5: types.maybeNull(types.number),\n  f_option_6: types.maybeNull(types.number),\n  f_param: types.maybeNull(types.number),\n  f_team: types.maybeNull(types.number),\n  f_player: types.maybeNull(types.number),\n  f_variant_zone: types.maybeNull(types.number),\n  id: types.string,\n  param_name: types.string,\n  value: types.maybeNull(types.number),\n})\n\nexport const MatchPagePlayersTable = types.model('MatchPagePlayers', {\n  storeName: 'matchPagePlayers',\n  isLoaded: false,\n  tableStats: types.array(ParamExtended),\n  error: types.maybeNull(types.frozen({})),\n  playersInfo: types.array(PlayerSimpleModel),\n  tables: types.frozen({}),\n  playerList: types.frozen({}),\n})\n\nexport const MatchPagePlayersStore = types.compose(\n  // общие методы и свойства таблиц\n  TableStore,\n  // Собственные методы и свойства\n  MatchPagePlayersTable,\n  MatchPagePlayersApiActions,\n  MatchPagePlayersActions,\n)\n","import { types } from 'mobx-state-tree'\n\nconst Param = types.model('ParamSimple', {\n  p: types.number,\n  o: types.number,\n  v: types.number,\n})\n\nconst Match = types.model('Match', {\n  f_match: types.number,\n  match_date: types.string,\n  match_status: types.number,\n  home_match: types.string,\n  win_lose: types.string,\n  name_ru: types.string,\n  name_en: types.string,\n  name_opponent_ru: types.string,\n  name_opponent_en: types.string,\n  score: types.number,\n  opponent_score: types.number,\n  team_id: types.number,\n  opp_team_id: types.number,\n  params: types.maybeNull(types.array(Param)),\n  params_opp: types.maybeNull(types.array(Param)),\n})\n\nexport const TournamentMatches = types.model('TournamentSeasons', {\n  storeName: 'tournamentMatches',\n  matches: types.array(Match),\n  isLoaded: false,\n  error: types.maybeNull(types.frozen({})),\n})\n","\nimport { types } from 'mobx-state-tree'\nimport orderBy from 'lodash/orderBy'\nimport get from 'lodash/get'\n\nimport { callApi } from 'react-sport'\n\n// @ts-ignore\nimport routes from 'config/routes'\n\ntype TConfig = {\n  method: string,\n  body: string,\n};\n\nconst url: string = `${routes.API_ROOT}/data`\n\nexport const TournamentMatchesApiActions = types.model({}).actions(self => ({\n  fetchMatchesInfo(tournamentId: number, seasonId: number) {\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'scout_tournament_matches_stat',\n        params: {\n          _p_tournament_id: tournamentId,\n          _p_season_id: seasonId,\n        },\n      }),\n    }\n\n    return callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        self.isLoaded = false\n        //@ts-ignore\n        self.error = null\n        //@ts-ignore\n        self.matches = []\n      },\n      //@ts-ignore\n      onSuccess: self._onSuccessMatchesInfo,\n      //@ts-ignore\n      onError: self._onError,\n    })\n  },\n\n  _onSuccessMatchesInfo(json: {\n    data: Array<{\n      scout_tournament_matches_stat: Array<{}>,\n    }>,\n  }) {\n    //@ts-ignore\n    self.matches = orderBy(\n      get(json, 'data[0].scout_tournament_matches_stat', []),\n      'match_date',\n      'desc',\n    )\n    //@ts-ignore\n    self.error = null\n    //@ts-ignore\n    self.isLoaded = true\n  },\n\n  _onError(error: any) {\n    //@ts-ignore\n    self.error = error\n  },\n}))\n","\nimport { types } from 'mobx-state-tree'\n\nimport map from 'lodash/map'\n\nexport const TournamentMatchesViews = types.model({}).views(self => ({\n  // Считаем кол-во матчей для запроса\n  get matchesIds() {\n    //@ts-ignore\n    return map(self.matches, 'f_match')\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\nimport { TournamentMatches } from './TournamentMatchesStore'\nimport { TournamentMatchesApiActions } from './TournamentMatchesApiActions'\nimport { TournamentMatchesViews } from './TournamentMatchesViews'\n\nexport const TournamentMatchesStore = types.compose(\n  TournamentMatches,\n  TournamentMatchesApiActions,\n  TournamentMatchesViews,\n)\n","import { types } from 'mobx-state-tree'\n\nimport set from 'lodash/set'\nimport reduce from 'lodash/reduce'\nimport uniq from 'lodash/uniq'\nimport get from 'lodash/get'\nimport map from 'lodash/map'\n\nimport { callApi } from 'react-sport'\n\nimport routes from 'config/routes'\n\nimport { team_params } from 'config/params'\nimport { filterDBStats } from 'module/utils/helpers'\n\ntype TConfig = {\n  method: string,\n  body: string,\n}\n\nconst TournamentHeaderStatsApiActions = types.model({}).actions(self => ({\n  fetchHeaderParams() {\n    const url: string = `${routes.API_ROOT}/data`\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'ask_tournament_param_view',\n        params: {\n          //@ts-ignore\n          _v_match_id: self.matchesIds,\n          _v_param_id: map(team_params, 'param_id'),\n        },\n      }),\n    }\n    return callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        self.loaded = false\n        //@ts-ignore\n        self.error = null\n      },\n      //@ts-ignore\n      onSuccess: (json: { data: Array<{}> }) => self._onSuccesHeaderParams(json),\n      //@ts-ignore\n      onError: (error: any) => self._onError(error),\n    })\n  },\n\n  _onSuccesHeaderParams(json: { data: Array<{}> }) {\n    // Фильтруем ответ. Нужно отсеить параметры для части поля и тд\n    const filteredStats = filterDBStats(json.data)\n    //@ts-ignore\n    self.stats = reduce(\n      filteredStats,\n      (acc, { f_match, f_match_event_ids_json, f_param, value }) => {\n        //@ts-ignore\n        if (acc[f_param]) {\n          const allEvents = get(acc, `${f_param}.events`) || []\n          const matches = get(acc, `${f_param}.matches`) || []\n          const currentEvents = f_match_event_ids_json || []\n\n          //@ts-ignore\n          acc[f_param] = {\n            //@ts-ignore\n            count: acc[f_param].count + 1,\n            //@ts-ignore\n            value: acc[f_param].value + value,\n            matches: [...matches, f_match],\n            events: [...allEvents, ...currentEvents],\n          }\n        } else {\n          //@ts-ignore\n          acc[f_param] = {\n            count: 1,\n            matches: [f_match],\n            value,\n            events: f_match_event_ids_json,\n          }\n        }\n        //@ts-ignore\n        const { matches } = acc[f_param]\n        set(acc, `${f_param}.matches`, uniq(matches))\n\n        return acc\n      }, {},\n    )\n    //@ts-ignore\n    self.loaded = true\n  },\n\n  _onError(error: any) {\n    //@ts-ignore\n    self.error = error\n  },\n\n}))\n\nexport default TournamentHeaderStatsApiActions\n","import { types, getParent } from 'mobx-state-tree'\n\nimport reduce from 'lodash/reduce'\nimport size from 'lodash/size'\nimport includes from 'lodash/includes'\n\n// @ts-ignore\nimport { percentageParams } from 'config/teamPopupParams'\n\nconst TournamentHeaderStatsActions = types\n  .model({})\n  .volatile(() => ({\n    stats: {},\n  }))\n  .views(self => ({\n    get matchesIds() {\n      return getParent(self).tournamentMatches.matchesIds\n    },\n\n    get countAverageStatValue() {\n      return reduce(\n        self.stats,\n        (result, { count, matches, value }, key) => {\n          const denominator = includes(percentageParams, Number(key))\n            ? count\n            : size(matches)\n\n          return {\n            ...result,\n            [key]: value / denominator,\n          }\n        },\n        {},\n      )\n    },\n  }))\n\nexport default TournamentHeaderStatsActions\n","import { types } from 'mobx-state-tree'\nimport TournamentHeaderStatsApiActions from './TournamentHeaderStatsApiActions'\nimport TournamentHeaderStatsActions from './TournamentHeaderStatsActions'\n\nconst Param = types.model('Param', {\n  p: types.number,\n  o: types.number,\n  v: types.number,\n})\n\nconst GearParam = types.model('GearParam', {\n  f_option_3: types.number,\n  full_lexical_formula: types.string,\n  gear_group_id: types.number,\n  gear_subgroup_id: types.number,\n  is_default: types.maybeNull(types.string),\n  lexical_formula: types.string,\n  name: types.string,\n  param1_id: types.maybeNull(types.array(types.string)),\n  param2_id: types.maybeNull(types.array(types.string)),\n  param_id: types.number,\n  short_lexical_formula: types.string,\n  sort_order: types.number,\n})\n\nconst Match = types.model('Match', {\n  f_match: types.number,\n  match_date: types.string,\n  match_status: types.number,\n  home_match: types.string,\n  win_lose: types.string,\n  name_ru: types.string,\n  name_en: types.string,\n  name_opponent_ru: types.string,\n  name_opponent_en: types.string,\n  score: types.number,\n  opponent_score: types.number,\n  team_id: types.number,\n  opp_team_id: types.number,\n  params: types.maybeNull(types.array(Param)),\n  params_opp: types.maybeNull(types.array(Param)),\n})\n\nexport const TournamentHeaderStats = types.model('TournamentHeaderStats', {\n  matches: types.map(Match),\n  loaded: false,\n  error: types.maybeNull(types.frozen({})),\n  gearParams: types.maybeNull(types.array(GearParam)),\n})\n\nconst TournamentHeaderStatsStore = types.compose(\n  TournamentHeaderStats,\n  TournamentHeaderStatsApiActions,\n  TournamentHeaderStatsActions,\n)\n\nexport default TournamentHeaderStatsStore\n","import { types, Instance } from 'mobx-state-tree'\n\nimport { TableStore } from 'features/Table/models/tableModel'\n\nconst ParamExtended = types.model('Param', {\n  f_match: types.number,\n  f_match_event_ids: types.maybeNull(types.array(types.number)),\n  f_match_event_ids_json: types.maybeNull(types.array(types.number)),\n  f_option_0: types.number,\n  f_option_1: types.maybeNull(types.number),\n  f_option_2: types.maybeNull(types.number),\n  f_option_3: types.maybeNull(types.number),\n  f_option_4: types.maybeNull(types.number),\n  f_option_5: types.maybeNull(types.number),\n  f_option_6: types.maybeNull(types.number),\n  f_param: types.maybeNull(types.number),\n  f_player: types.maybeNull(types.number),\n  f_team: types.maybeNull(types.number),\n  f_variant_zone: types.maybeNull(types.number),\n  id: types.string,\n  param_name: types.string,\n  value: types.maybeNull(types.number),\n})\n\nexport const PlayerMatchesModel = types.compose(\n  types.model('PlayerMatchesModel', {\n    error: types.maybeNull(types.frozen({})),\n    isLoaded: false,\n    storeName: 'playerMatches',\n    tableStats: types.array(ParamExtended),\n    tables: types.frozen({}),\n    url: types.string,\n  }),\n  // общие методы и свойства таблиц\n  TableStore,\n)\n\nexport type TParamExtended = Instance<typeof ParamExtended>\n","import { flow } from 'mobx-state-tree'\n\nimport map from 'lodash/map'\nimport get from 'lodash/get'\n\nimport { callApi } from 'react-sport'\n\nimport { filterDBStats } from 'module/utils/helpers'\nimport stores from 'features/stores'\n\nimport { TParamExtended } from './PlayerPageMatchesStore'\n\nimport { PlayerPageMatchesActions } from './actions'\n\ntype TConfig = {\n  body: string,\n  method: string,\n}\n\ntype TFetchPlayerMatches = {\n  ampluaId: number,\n  matches: Array<number>,\n  playerId: number,\n}\n\nexport const PlayerPageMatchesApiActions = PlayerPageMatchesActions\n  .actions(self => ({\n    _onError(error: {}) {\n      self.error = error\n      self.isLoaded = false\n    },\n\n    _onSuccessStats(json: { data: Array<TParamExtended> }) {\n      //@ts-ignore\n      self.tableStats = filterDBStats(json.data)\n      const playerMatches = get(\n        JSON.parse(window.localStorage.getItem('playerMatches') || '{}'),\n        get(stores, 'playerProfile.profile.amplua.id'),\n      )\n      if (playerMatches) {\n        self.tables = playerMatches\n      } else {\n        self.saveTables()\n      }\n      self.error = {}\n      self.isLoaded = true\n    },\n  }))\n  .actions(self => ({\n    /** Запрос для получения статистики по параметрам\n      * @param {array} matches - список матчей\n      * @param {string} teamId - айди игрока\n      */\n    fetchTableStats(matches: Array<number>, playerId: number | string) {\n      const config: TConfig = {\n        body: JSON.stringify({\n          params: {\n            _v_match_id: matches,\n            _v_param_id: map(self.totalParams, 'param_id'),\n            _v_player_id: [playerId],\n          },\n          proc: 'ask_player_param_view',\n        }),\n        method: 'POST',\n      }\n      return callApi({\n        config,\n        onError: self._onError,\n        onRequest: () => {\n          self.isLoaded = false\n          self.error = {}\n        },\n        onSuccess: self._onSuccessStats,\n        url: self.url,\n      })\n    },\n  }))\n  .actions(self => ({\n    fetchPlayerMatches: flow(\n      function* fetchPlayerMatches({\n        ampluaId,\n        matches,\n        playerId,\n      }: TFetchPlayerMatches) {\n        try {\n          // Делаем запрос для получения списка всех параметров\n          yield self.getGearParamsList(ampluaId)\n          // Делаем запрос для получения списка всех групп параметров\n          yield self.fetchGroups()\n          // Делаем запрос для получения значений для игроков\n          yield self.fetchTableStats(matches, playerId)\n        } catch (error) {\n          self._onError(error)\n        }\n      },\n    ),\n  }))\n","import filter from 'lodash/filter'\nimport get from 'lodash/get'\nimport forEach from 'lodash/forEach'\n\nimport { saveTablesToLocalStorage } from 'module/utils/helpers'\n\nimport stores from 'features/stores'\nimport { PlayerMatchesModel } from './PlayerPageMatchesStore'\n\nexport const PlayerPageMatchesActions = PlayerMatchesModel\n  .actions(self => ({\n    // Записываем в стор таблицы после получения параметров\n    saveTables() {\n      const filteredParams = filter(self.gearParams, ({ params }) => params.length)\n      forEach(filteredParams, (\n        { groupName, params }\n        : {\n          groupName: string | null,\n          params: Array<{ is_default: string | null }>,\n        },\n        index: number,\n      ) => {\n        const position: number = index + 1\n        const table: {\n          position: number,\n          selectedParams: Array<{ is_default: string | null }>,\n          summaryType: string,\n          tableName: string | number,\n        } = {\n          position,\n          selectedParams: filter(params, { is_default: 'default' }),\n          summaryType: 'average_for_match',\n          tableName: String(groupName),\n        }\n        if (table.selectedParams.length) {\n          self.tables = {\n            ...self.tables,\n            [position]: {\n              ...table,\n              sortInc: false,\n              activeId: null,\n            },\n          }\n        }\n      })\n\n      saveTablesToLocalStorage({\n        id: get(stores, 'playerProfile.profile.amplua.id'),\n        name: 'playerMatches',\n        tables: self.tables,\n      })\n    },\n  }))\n","import routes from 'config/routes'\n\nimport { PlayerPageMatchesApiActions } from './apiActions'\n\nconst url: string = `${routes.API_ROOT}/data`\n\nexport const playerMatchesStore = PlayerPageMatchesApiActions.create({\n  error: {},\n  isLoaded: false,\n  storeName: 'playerMatches',\n  tableStats: [],\n  tables: {},\n  tempTableName: '',\n  url,\n})\n","import { types } from 'mobx-state-tree'\n\nconst getPlainError = (error: Error | null) =>\n  (error\n    ? {\n      message: error.message,\n      name: error.name,\n      stack: error.stack,\n    }\n    : null)\n\nconst Error = types.model({\n  message: types.string,\n  name: '',\n  stack: types.maybe(types.string),\n})\n\nexport const ErrorModel = types\n  .model({\n    error: types.maybeNull(Error),\n  })\n  .actions(self => ({\n    setError(error: Error | null) {\n      self.error = getPlainError(error)\n    },\n  }))\n","import { types } from 'mobx-state-tree'\n\nexport const FetchModel = types\n  .model('Fetch', {\n    isLoaded: false,\n  })\n  .actions(self => ({\n    setIsLoaded(isLoaded: boolean) {\n      self.isLoaded = isLoaded\n    },\n  }))\n","import { types, Instance } from 'mobx-state-tree'\n\nimport { TableStore } from 'features/Table/models/tableModel'\nimport { ErrorModel } from 'features/ErrorModel'\nimport { FetchModel } from 'features/FetchModel'\n\nconst ParamExtended = types.model('Param', {\n  f_match: types.number,\n  f_match_event_ids: types.maybeNull(types.array(types.number)),\n  f_match_event_ids_json: types.maybeNull(types.array(types.number)),\n  f_option_0: types.number,\n  f_option_1: types.maybeNull(types.number),\n  f_option_2: types.maybeNull(types.number),\n  f_option_3: types.maybeNull(types.number),\n  f_option_4: types.maybeNull(types.number),\n  f_option_5: types.maybeNull(types.number),\n  f_option_6: types.maybeNull(types.number),\n  f_param: types.maybeNull(types.number),\n  f_player: types.maybeNull(types.number),\n  f_team: types.maybeNull(types.number),\n  f_variant_zone: types.maybeNull(types.number),\n  id: types.string,\n  param_name: types.string,\n  value: types.maybeNull(types.number),\n})\n\nexport const TeamMatchesModel = types.compose(\n  types.model('TeamMatchesModel', {\n    isLoaded: false,\n    showOpponentStats: types.boolean,\n    storeName: 'teamMatches',\n    tableStats: types.array(ParamExtended),\n    tables: types.frozen({}),\n    url: types.string,\n  }),\n  ErrorModel,\n  FetchModel,\n  // общие методы и свойства таблиц\n  TableStore,\n)\n\nexport type TParamExtended = Instance<typeof ParamExtended>\n","import { dataURL } from 'config/routes'\n\nimport { TeamPageMatchesApiActions } from './apiActions'\n\nexport const teamMatchesStore = TeamPageMatchesApiActions.create({\n  error: null,\n  isLoaded: false,\n  showOpponentStats: false,\n  storeName: 'teamMatches',\n  tableStats: [],\n  tables: {},\n  tempTableName: '',\n  url: dataURL,\n})\n","import filter from 'lodash/filter'\n\nimport { saveTablesToLocalStorage } from 'module/utils/helpers'\n\nimport { TeamMatchesModel, TParamExtended } from './model'\n\ntype TGearParam = {\n  groupName: string | null,\n  params: Array<{ is_default: string | null }>,\n}\n\ntype TTable = {\n  position: number,\n  selectedParams: Array<{ is_default: string | null }>,\n  summaryType: string,\n  tableName: string | number,\n}\nexport const TeamPageMatchesActions = TeamMatchesModel\n  .actions(self => ({\n    setTableStats(tableStats: Array<TParamExtended>) {\n      //@ts-ignore\n      self.tableStats = tableStats\n    },\n    setTables(tables:{}) {\n      self.tables = tables\n    },\n  }))\n  .actions(self => ({\n    // Записываем в стор таблицы после получения параметров\n    saveTables() {\n      self.gearParams.forEach((\n        { groupName, params }: TGearParam,\n        index: number,\n      ) => {\n        const position: number = index + 1\n        const table: TTable = {\n          position: index + 1,\n          selectedParams: filter(params, { is_default: 'default' }),\n          summaryType: 'average_for_match',\n          tableName: String(groupName),\n        }\n\n        if (table.selectedParams.length) {\n          self.setTables({\n            ...self.tables,\n            [position]: {\n              ...table,\n              sortInc: false,\n              activeId: null,\n            },\n          })\n        }\n      })\n\n      saveTablesToLocalStorage({\n        name: 'teamMatches',\n        tables: self.tables,\n      })\n    },\n\n    toggleShowOpponent() {\n      self.showOpponentStats = !self.showOpponentStats\n    },\n  }))\n","import { flow } from 'mobx-state-tree'\n\nimport map from 'lodash/map'\nimport isEmpty from 'lodash/isEmpty'\n\nimport { callApi } from 'react-sport'\n\nimport { filterDBStats } from 'module/utils/helpers'\n\nimport { TeamPageMatchesActions } from './actions'\n\nimport { TParamExtended } from './model'\n\ntype TConfig = {\n  body: string,\n  method: string,\n}\n\ntype TFetchTeamMatches = {\n  matches: Array<number>,\n  teamId: Array<number>,\n}\n\nexport const TeamPageMatchesApiActions = TeamPageMatchesActions\n  .actions(self => ({\n    _onError(error: Error) {\n      self.setError(error)\n      self.setIsLoaded(false)\n    },\n\n    _onSuccessStats(json: { data: Array<TParamExtended> }) {\n      const teamMatches = JSON.parse(window.localStorage.getItem('teamMatches') || '{}')\n\n      self.setTableStats(filterDBStats(json.data))\n\n      if (!isEmpty(teamMatches)) {\n        self.setTables(teamMatches)\n      } else {\n        self.saveTables()\n      }\n      self.setError(null)\n      self.setIsLoaded(true)\n    },\n  }))\n  .actions(self => ({\n    /** Запрос для получения статистики по параметрам\n      * @param {array} matches - список матчей\n      * @param {array} teamId - массив айди команд\n      */\n    fetchTableStats(matches: Array<number>, teamId: Array<number | string>) {\n      const config: TConfig = {\n        body: JSON.stringify({\n          params: {\n            _v_match_id: matches,\n            _v_param_id: map(self.totalParams, 'param_id'),\n            _v_team_id: teamId,\n          },\n          proc: 'ask_team_param_view',\n        }),\n        method: 'POST',\n      }\n      return callApi({\n        config,\n        onError: self._onError,\n        onRequest: () => {\n          self.setIsLoaded(false)\n          self.setError(null)\n        },\n        onSuccess: self._onSuccessStats,\n        url: self.url,\n      })\n    },\n  }))\n  .actions(self => ({\n    fetchTeamMatches: flow(\n      function* fetchTeamMatches({\n        matches,\n        teamId,\n      }: TFetchTeamMatches) {\n        try {\n          // Делаем запрос для получения списка всех параметров для шестеренки\n          yield self.getGearParamsList(0)\n          // Делаем запрос для получения значений для команд\n          yield self.fetchTableStats(matches, teamId)\n        } catch (error) {\n          self.setError(error)\n        }\n      },\n    ),\n  }))\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, lifecycle } from 'recompose'\nimport get from 'lodash/get'\nimport reduce from 'lodash/reduce'\nimport includes from 'lodash/includes'\n\nimport { Tables } from 'features/Table'\nimport Loader from 'features/components/common/loader/Loader'\n\nimport { tableTypes } from 'config/tables'\n\nimport {\n  TPropsInner,\n  TProps,\n  TLifecycle,\n  TParam,\n} from './types'\n\nconst TeamPageMatchesComponent = ({\n  pageId,\n  teamTable: {\n    isLoaded,\n    tables,\n  },\n}: TPropsInner) => (\n  <div>\n    {isLoaded\n      ? (\n        <Tables\n          tableType={tableTypes.teamMatches}\n          tables={tables}\n          pageId={pageId}\n        />\n      )\n      : <Loader />}\n  </div>\n)\n\nconst teamPageMatchesComposed = compose<TPropsInner, TProps>(\n  inject(\n    'teamTable',\n    'selectedMatches',\n    'matches',\n  ),\n  lifecycle<TLifecycle>({\n    componentDidUpdate() {\n      const {\n        matches: { list },\n        pageId,\n        selectedMatches,\n        teamTable: { fetchTeamMatches },\n      } = this.props\n      // Необходимо подготовить id команд соперников из выбранных матчей\n      const selectedMatchesIds = get(selectedMatches, ['team', pageId])\n      const allMatches = get(list, [pageId, 'matches'])\n      const opponentsIds = reduce(\n        allMatches,\n        (acc: Array<number>, curr: TParam) => {\n          if (includes(selectedMatchesIds, curr.f_match)) {\n            acc.push(Number(curr.f_team_opponent))\n          }\n          return acc\n        }, [],\n      )\n      fetchTeamMatches({\n        matches: selectedMatchesIds,\n        teamId: [Number(pageId), ...opponentsIds],\n      })\n    },\n  }),\n  observer,\n)\n\nexport const TeamPageMatches = teamPageMatchesComposed(TeamPageMatchesComponent)\n","import { stores as remoteStore } from 'react-sport'\nimport { types } from 'mobx-state-tree'\n// @ts-ignore\nimport routes from 'config/routes'\n// @ts-ignore\nimport { langsList, profilePaths } from 'config/config'\n// @ts-ignore\nimport history from 'features/history'\n\n// @ts-ignore\nimport BasicStore from 'features/stores/BasicStore'\n// @ts-ignore\nimport Tabs from 'features/stores/Tabs'\n// @ts-ignore\nimport Matches from 'features/stores/Matches/MatchesStore'\n// @ts-ignore\nimport PlayerProfile from 'features/stores/PlayerProfile/PlayerProfileStore'\n// @ts-ignore\nimport PlayerStats from 'features/stores/PlayerStatsHeader/PlayerStatsHeaderStore'\n// @ts-ignore\nimport TeamStats from 'features/stores/TeamStatsHeader/TeamStatsHeaderStore'\n// @ts-ignore\nimport InfoItem from 'features/stores/InfoItem'\n// @ts-ignore\nimport ComposeMarkers from 'features/stores/Markers/ComposeMarkers'\n// @ts-ignore\nimport Zones from 'features/stores/Zones/ZonesStore'\n// @ts-ignore\nimport ShotTypes from 'features/stores/ShotType/ShotTypeStore'\n// @ts-ignore\nimport MapShoot from 'features/stores/MapShoot/MapShootStore'\n// @ts-ignore\nimport PlayerInfo from 'features/stores/PlayerInfo/PlayerInfoStore'\n// @ts-ignore\nimport ToolTips from 'features/stores/ToolTips/ToolTipsStore'\n// @ts-ignore\nimport ShootsRange from 'features/stores/ShootsRange/ShootsRange'\n// @ts-ignore\nimport VideoCuts from 'features/stores/VideoCuts/ComposeVideoCuts'\n//@ts-ignore\nimport MatchLinks from 'features/stores/MatchLinks/MatchLinksStore'\n// @ts-ignore\nimport TableReports from 'features/stores/TableReports/TableReportsStore'\n// @ts-ignore\nimport playersCompareWidget from 'models/Widgets/PlayersCompare'\n// @ts-ignore\nimport teamPlayers from 'models/StatsTable/TeamTable/TeamPlayers'\n// @ts-ignore\nimport selectedMatches from 'models/SelectedMatches'\n// @ts-ignore\nimport tableReportsMST from 'models/TableReports'\n// @ts-ignore\nimport matchProfile from 'models/MatchProfile'\n// @ts-ignore\nimport videoLink from 'models/ExternalVideoLinks'\n// @ts-ignore\nimport filters from 'features/MapFilters/models'\n// @ts-ignore\nimport { TeamsCompareStore } from 'features/TeamsCompareWidget'\n// @ts-ignore\nimport teamProfile from 'features/TeamPage/models'\n// @ts-ignore\nimport TournamentSeasonSelectStore from 'features/TournamentSeasonSelect/models/TournamentSeasonSelectStore'\n// @ts-ignore\nimport TournamentPageStore from 'features/TournamentPage/models/TournamentPageStore'\n// @ts-ignore\nimport { TournamentMatchesTableStore } from 'features/TournamentPageMatchesTable/models/TournamentMatchesTableStore'\n// @ts-ignore\nimport { MatchPagePlayersStore } from 'features/MatchPagePlayers/models/matchPlayersStore'\n// @ts-ignore\nimport { TournamentMatchesStore } from 'features/TournamentPageMatches'\n// @ts-ignore\nimport { TournamentPlayersTableStore } from 'features/TournamentPagePlayersTable'\n// @ts-ignore\nimport TournamentHeaderStatsStore from 'features/TournamentHeaderStats/models/TournamentHeaderStatsStore'\n// @ts-ignore\nimport { playerMatchesStore } from 'features/PlayerPageMatches/models'\nimport { teamMatchesStore } from 'features/TeamPageMatches'\nimport { GearPopupStore } from 'features/GearPopup'\n\nconst stores = {}\nconst Markers = ComposeMarkers(BasicStore)\nconst markers = new Markers(stores)\nconst lexics = new remoteStore.Lexics(routes.API_ROOT, langsList)\nconst Cuts = VideoCuts(remoteStore.VideoSummaries, markers)\n\nconst mstRootStore = types\n  .model('rootStore', {\n    tournamentSeasonSelect: types.optional(TournamentSeasonSelectStore, {}),\n    tournamentsProfile: types.optional(TournamentPageStore, {}),\n    tournamentHeaderStats: types.optional(TournamentHeaderStatsStore, {}),\n    tournamentMatches: types.optional(TournamentMatchesStore, {}),\n    tournamentMatchesTableStore: types.optional(\n      TournamentMatchesTableStore,\n      //@ts-ignore\n      {},\n    ),\n    tournamentPlayersTableStore: types.optional(\n      TournamentPlayersTableStore,\n      //@ts-ignore\n      {},\n    ),\n    gearPopupStore: types.optional(GearPopupStore, {}),\n    teamsCompareWidget: types.optional(TeamsCompareStore, {}),\n  })\n  .create()\n\nObject.assign(stores, {\n  playersCompareWidget,\n  teamPlayers,\n  tableReportsMST,\n  matchProfile,\n  teamProfile,\n  selectedMatches,\n  videoLink,\n  filters,\n  // TODO заглушка для стора\n  tutorials: {},\n  tabs: new Tabs(stores),\n  matches: new Matches(stores),\n  matchTable: MatchPagePlayersStore.create(),\n  liveSearch: remoteStore.LiveSearch.create({\n    rootUrl: routes.API_ROOT,\n    sport: 'volleyball',\n  }),\n  //@ts-ignore\n  infoItem: new InfoItem(stores),\n  matchLinks: new MatchLinks(stores),\n  playerProfile: new PlayerProfile(stores),\n  playerStats: new PlayerStats(stores),\n  teamStats: new TeamStats(stores),\n  teamTable: teamMatchesStore,\n  playerTable: playerMatchesStore,\n  //@ts-ignore\n  zones: new Zones(stores),\n  //@ts-ignore\n  shotTypes: new ShotTypes(stores),\n  //@ts-ignore\n  mapShoot: new MapShoot(stores),\n  //@ts-ignore\n  playerInfo: new PlayerInfo(stores),\n  //@ts-ignore\n  tooltips: new ToolTips(stores),\n  tableReports: new TableReports(stores),\n  //@ts-ignore\n  shootsRange: new ShootsRange(stores),\n  videoPlayer: new remoteStore.VideoPlayer(routes.API_ROOT, 50000000),\n  header: new remoteStore.Header({\n    profilePopup: profilePaths,\n  }),\n  recent: new remoteStore.Recent(routes.API_ROOT),\n  searchString: new remoteStore.SearchString(routes.API_ROOT),\n  auth: new remoteStore.Auth(routes.API_ROOT, history),\n  //@ts-ignore\n  playersVS: new Cuts(routes.API_ROOT, 'player', lexics),\n  //@ts-ignore\n  teamsVS: new Cuts(routes.API_ROOT, 'team', lexics),\n  lexics,\n  markers,\n  ...mstRootStore,\n})\n\nexport default stores\n","import React from 'react'\n\nimport {\n  compose,\n  withHandlers,\n  withState,\n} from 'recompose'\nimport cx from 'classnames'\n\nimport { T9n, OutsideClick } from 'react-sport'\n\nimport {\n  TComposedInner,\n  TPropsOuter,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n} from './types'\n\nconst ProfilePopupComponent = ({\n  isOpened,\n  logoutClick,\n  toggleOpened,\n}: TComposedInner) => (\n  <div className='link-iconed-wrapper'>\n    <a\n      onClick={() => toggleOpened(!isOpened)}\n      className={\n        cx('link-iconed link-iconed-primary header-profile-link',\n          'js-open-dropdown tooltip-trigger')}\n    >\n      <div className='hover-tooltip'>\n        <T9n t='header_my_profile' />\n      </div>\n      <i className='icon-person' />\n      <T9n t='header_my_profile' className='link-iconed-text' />\n    </a>\n    {\n      isOpened && (\n        <div className='dropdown-menu-container js-dropdown-profile open'>\n          <ul className='list-unstyled'>\n            <li>\n              <a className='js-sign-out' onClick={logoutClick}>\n                <T9n t='header_quit' />\n              </a>\n            </li>\n          </ul>\n        </div>\n      )\n    }\n  </div>\n)\n\nconst composed = compose<TComposedInner, TPropsOuter >(\n  withState(\n    'isOpened',\n    'toggleOpened',\n    false,\n  ),\n  withState(\n    'componentName',\n    'changeComponentName',\n    'profilePopup',\n  ),\n\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    clickOutside: ({ toggleOpened }) => () => toggleOpened(false),\n\n    logoutClick: ({ logout }) => (e) => {\n      e.preventDefault()\n      logout()\n    },\n  }),\n  OutsideClick,\n)\n\nexport const ProfilePopup = composed(ProfilePopupComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, lifecycle } from 'recompose'\n\nimport {\n  T9n,\n  Langs,\n  TLexics,\n  LiveSearchUI,\n} from 'react-sport'\n\nimport { ProfilePopup } from 'features/ProfilePopup'\nimport { indexLexic } from 'config/lexics'\n\ntype TPropsLifecycle = {\n  lexics: TLexics,\n}\n\ntype TComposeInner = {\n  auth: {\n    logout: () => void,\n  },\n  lexics: TLexics,\n}\n\nexport const HomeComponent = ({ auth: { logout } }: TComposeInner) => (\n  <section className='home'>\n    <div className='header'>\n      <div className='header-table' data-block='sharedHeaderTable'>\n        <div className='header-row'>\n          <div className='header-column-left'>\n            <div className='container-fluid'>\n              <div className='row'>\n                <div className='logo' />\n              </div>\n            </div>\n          </div>\n          <p className='home__text'>\n            <T9n t='enter_team_or_player' />\n          </p>\n          <div className='header-column-responsive' id='header-live-search'>\n            <LiveSearchUI.LiveSearch />\n          </div>\n          <div className='header-column-right'>\n            <ProfilePopup logout={logout} />\n            <div className='lang-wrapper'>\n              <Langs />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </section>\n)\n\nconst homeComposed = compose<TComposeInner, {}>(\n  inject('auth', 'lexics'),\n  lifecycle<TPropsLifecycle, {}>({\n    componentDidMount() {\n      const { lexics } = this.props\n      lexics.appPage = { page: 'index', phrases: indexLexic }\n    },\n  }),\n  observer,\n)\n\nexport const Home = homeComposed(HomeComponent)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose } from 'recompose'\n\nimport { Langs, LiveSearchUI } from 'react-sport'\n\nimport { ProfilePopup } from 'features/ProfilePopup'\n\ntype TProps = {\n  auth: {\n    logout: () => void,\n    user: {},\n  },\n}\n\nconst HeaderComponent = ({ auth: { logout } }: TProps) => (\n  <div>\n    <header className='header'>\n      <div className='header-table' data-block='sharedHeaderTable'>\n        <div className='header-row'>\n          <div className='header-column-left'>\n            <div className='container-fluid'>\n              <div className='row'>\n                <Link className='logo' to='/' />\n              </div>\n            </div>\n          </div>\n          <div className='header-column-responsive' id='header-live-search'>\n            <LiveSearchUI.LiveSearch />\n          </div>\n          <div className='header-column-right'>\n            <ProfilePopup logout={logout} />\n            <div className='lang-wrapper'>\n              <Langs />\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  </div>\n)\n\nconst headerComposed = compose<TProps, {}>(\n  inject('lexics', 'auth'),\n  observer,\n)\n\nexport const Header = headerComposed(HeaderComponent)\n","import React, { Fragment } from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { observer } from 'mobx-react'\n\nimport { compose, withProps } from 'recompose'\nimport includes from 'lodash/includes'\nimport filter from 'lodash/filter'\nimport map from 'lodash/map'\n\nimport { T9n } from 'react-sport'\n\nimport { mainPageTabs } from 'config/tabsConfig'\nimport {\n  TProps,\n  TPropsOuter,\n  TComposedInner,\n  TWithPropsInner,\n  TWithPropsOuter,\n} from './types'\n\nexport const LinksListComponent = ({ match: { url }, tabs }: TProps) => (\n  <Fragment>\n    {map(tabs, ({ exact, lexics, link }) => (\n      <li className='stats-tabs__item' key={link}>\n        <NavLink\n          to={`${url}${link}`}\n          activeClassName='active'\n          exact={exact}\n        >\n          <T9n t={lexics} />\n        </NavLink>\n      </li>\n    ))}\n  </Fragment>\n)\n\nconst linksListComposed = compose<TComposedInner, TPropsOuter>(\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(({ page }) => {\n    const tabs = filter(mainPageTabs, ({ pages }) => includes(pages, page))\n    return { tabs }\n  }),\n)\n\nexport const LinksList = linksListComposed(LinksListComponent)\n","import React from 'react'\nimport { observer, inject } from 'mobx-react'\n\nimport {\n  withHandlers,\n  compose,\n  lifecycle,\n} from 'recompose'\nimport cx from 'classnames'\n\nimport { T9n } from 'react-sport'\n\nimport { LinksList } from 'features/components/common/stats-tabs/LinksList'\n\nimport {\n  TProps,\n  TComposeInner,\n  TWithHandlers,\n  TPrevProps,\n} from './types'\n\nimport './StatsTabs.scss'\n\nexport const StatsTabsComponent = ({\n  handleClick,\n  isStats,\n  lexics: { page },\n  match,\n  tabs: {\n    active,\n    list,\n  },\n}: TComposeInner) => (\n  <ul className='stats-tabs'>\n    {isStats\n      ? <LinksList match={match} page={page} />\n      : list.map(tab => (\n        <li key={tab} className='stats-tabs__item'>\n          <a\n            href=''\n            className={cx({ active: active === tab })}\n            onClick={handleClick(tab)}\n          >\n            <T9n t={tab} />\n          </a>\n        </li>\n      ))}\n  </ul>\n)\n\nconst statsTabComposed = compose<TComposeInner, TProps>(\n  inject(\n    'lexics',\n    'tabs',\n    'markers',\n    'zones',\n    'filters',\n  ),\n  withHandlers<TWithHandlers, {}>({\n    handleClick: ({\n      filters: { clear },\n      markers: {\n        loaded,\n        selectToggle,\n      },\n      tabs,\n      zones: {\n        resetToDefaultDirections,\n        setChecked,\n      },\n    }) => (id: number) => (e: React.FormEvent<HTMLInputElement>) => {\n      e.preventDefault()\n      if (loaded) {\n        tabs.changeActive(id)\n        selectToggle(false)\n        resetToDefaultDirections()\n        setChecked('without_zone')\n        clear()\n      }\n    },\n  }),\n  lifecycle<TPrevProps, TPrevProps>({\n    componentDidMount() {\n      const {\n        markers: { setDefaultDirections },\n      } = this.props\n      setDefaultDirections()\n    },\n  }),\n  observer,\n)\n\nexport const StatsTabs = statsTabComposed(StatsTabsComponent)\n","import React from 'react'\n\nimport { StatsTabs } from 'features/components/common/stats-tabs/StatsTabs'\n\ntype TProps = {\n  match: {\n    url: string,\n  },\n}\n\nexport const Header = ({ match }: TProps) => (\n  <div className='main-page__content-header'>\n    <StatsTabs isStats={false} match={match} />\n  </div>\n)\n","import React, { Fragment } from 'react'\nimport {\n  withHandlers,\n  compose,\n  withProps,\n} from 'recompose'\n\nimport get from 'lodash/get'\nimport isEmpty from 'lodash/isEmpty'\nimport cx from 'classnames'\n\n// TODO переписать получение координат для маркеров, чтобы разобраться в типах\ntype TProps = {\n  positionsInfo: {\n    from: {\n      //@ts-ignore\n      pos_x?: number | boolean | null,\n      //@ts-ignore\n      pos_y?: number | boolean | null,\n    },\n    middle: {\n      //@ts-ignore\n      pos_x: number | null,\n      //@ts-ignore\n      pos_y: number | null,\n      //@ts-ignore\n    } | string | null,\n  },\n  pointers: {\n    pointer1?: {\n      width: number,\n      rotate: number,\n    },\n    pointer2?: {\n      width: number,\n      rotate: number,\n    },\n  },\n  getPointerClass: () => string,\n  getTransform: (value: number) => string,\n}\n\nconst PointerComponent = ({\n  getPointerClass,\n  getTransform,\n  pointers,\n  pointers: {\n    pointer1,\n    pointer2,\n  },\n  positionsInfo: {\n    from,\n    middle,\n  },\n}: TProps) => {\n  if (isEmpty(pointers)) return null\n\n  return (\n    <Fragment>\n      <div\n        className={getPointerClass()}\n        style={{\n          //@ts-ignore\n          width: `calc(${pointer1.width}%)`,\n          left: `${from.pos_x}%`,\n          top: `${from.pos_y}%`,\n          //@ts-ignore\n          transform: getTransform(pointer1.rotate),\n        }}\n      />\n      {(get(middle, 'pos_x') && get(middle, 'pos_y')) && (\n        <div\n          className={getPointerClass()}\n          style={{\n            //@ts-ignore\n            width: `calc(${pointer2.width}%)`,\n            //@ts-ignore\n            left: `${middle.pos_x}%`,\n            //@ts-ignore\n            top: `${middle.pos_y}%`,\n            //@ts-ignore\n            transform: getTransform(pointer2.rotate),\n          }}\n        />\n      )}\n    </Fragment>\n  )\n}\n\nconst pointerComposed = compose(\n  withHandlers({\n    getDirections: () => ({\n      beginning: {\n        //@ts-ignore\n        pos_x: firstX,\n        //@ts-ignore\n        pos_y: firstY,\n      },\n      ending: {\n        //@ts-ignore\n        pos_x: lastX,\n        //@ts-ignore\n        pos_y: lastY,\n      },\n    }) => {\n      // Т.к. длина вектора выражается в %,\n      // а % (в координатах точек) берутся от разных длин (длина поля в 2 раза длиннее ширины)\n      // То для математических действий надо привести их к одной системе координат\n      // Y надо умножить на 2 (Y - ширина поля)\n      const cat1 = Math.abs(firstY - lastY) * 2 //Первый катет\n      const cat2 = Math.abs(firstX - lastX) // Второй катет\n      const width = Math.sqrt((cat2 ** 2) + (cat1 ** 2)) // гипотенуза\n\n      let angle = Math.asin(cat1 / width) * 180 / Math.PI // вычисляем угол поворота вектора\n\n      // Учитываем нахожение точек начала и конца\n      if (lastX >= firstX && lastY < firstY) {\n        angle = 360 - angle\n      }\n\n      if (lastX < firstX && lastY >= firstY) {\n        angle = 180 - angle\n      }\n\n      if (lastX < firstX && lastY < firstY) {\n        angle += 180\n      }\n\n      return {\n        width,\n        rotate: angle,\n      }\n    },\n  }),\n  //@ts-ignore\n  withHandlers({\n    getPointers: (({\n      getDirections,\n      positionsInfo: {\n        from,\n        middle,\n        to,\n      },\n    }) => () => {\n      if (!get(from, 'pos_x', false)\n        || !get(from, 'pos_y', false)\n        || !get(to, 'pos_x', false)\n        || !get(to, 'pos_y', false)) {\n        return {}\n      }\n\n      if ((get(middle, 'pos_x') && get(middle, 'pos_y'))) {\n        const pointer1 = getDirections({\n          beginning: from,\n          ending: middle,\n        })\n        const pointer2 = getDirections({\n          beginning: middle,\n          ending: to,\n        })\n        return {\n          pointer1,\n          pointer2,\n        }\n      }\n\n      const pointer1 = getDirections({\n        beginning: from,\n        ending: to,\n      })\n      return { pointer1 }\n    }),\n    getPointerClass: ({\n      positionsInfo: {\n        from,\n        middle,\n        to,\n      },\n    }) => () => {\n      const pointClass = get(from, 'type') || get(to, 'type')\n\n      return cx(\n        'pointer',\n        {\n          middle: (get(middle, 'pos_x') && get(middle, 'pos_y')),\n          [`vector_${pointClass}`]: pointClass,\n        },\n      )\n    },\n  }),\n  withHandlers({\n    //@ts-ignore\n    getTransform: () => angle => `rotate(${angle}deg)`,\n  }),\n  //@ts-ignore\n  withProps(({ getPointers }) => ({\n    pointers: getPointers(),\n  })),\n)\n\n//@ts-ignore\nexport const Pointer = pointerComposed(PointerComponent)\n","import React from 'react'\nimport { withProps, compose } from 'recompose'\nimport map from 'lodash/map'\n\ntype TProps = {\n  tooltipNames: Array<string>,\n};\n\nexport const PlayerName = ({ tooltipNames }: TProps) =>\n  map(tooltipNames, name => (\n    <span key={name} className='shot__player-name'>\n      {name}\n    </span>\n  ))\n\n// TODO Пока этот функционал не готов. Но пока не удаляем\n\n// if (playerName) {\n//   return <span className='shot__player-name'>{playerName}</span>\n// }\n// if (thirdPlayerName) {\n//   return (\n//     <Fragment>\n//       <span className='shot__player-name'>{firstPlayerName}</span>\n//       <span className='shot__player-name'>{secondPlayerName}</span>\n//       <span className='shot__player-name'>{thirdPlayerName}</span>\n//     </Fragment>\n//   )\n// } if (secondPlayerName) {\n//   return (\n//     <Fragment>\n//       <span className='shot__player-name'>{firstPlayerName}</span>\n//       <span className='shot__player-name'>{secondPlayerName}</span>\n//     </Fragment>\n//   )\n// }\n\nconst PlayerNameComposed = compose(\n  //@ts-ignore\n  withProps(({ point: { firstPlayerName, playerName } }) => {\n    // TODO Пока не готово пробрасывание второго и третьего имени\n    // secondPlayerName,\n    // thirdPlayerName,\n    const names = playerName || firstPlayerName\n    // TODO Пока не готово пробрасывание второго и третьего имени\n    // || secondPlayerName\n    // || thirdPlayerName\n    return {\n      tooltipNames: names && names.split('/'),\n    }\n  }),\n  //@ts-ignore\n)(PlayerName)\n\nexport default PlayerNameComposed\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { withHandlers, compose } from 'recompose'\nimport cx from 'classnames'\nimport toString from 'lodash/toString'\n\nimport { T9n } from 'react-sport'\n\nimport PlayerName from 'features/components/common/map/PlayerName'\n\nimport {\n  TComposeInner,\n  TPropsOuter,\n  TWithHandlersOuterEventToEpisode,\n  TWithHandlersInnerEventToEpisode,\n  TWithHandlersOuterHandleShootClick,\n  TWithHandlersInnerHandleShootClick,\n} from './types'\n\nconst GAME_PART_LEXIC = 8684\n\nconst ToolTipComponent = ({\n  handleShootClick,\n  left,\n  point,\n  point: {\n    half,\n    opponentTeam,\n    result_lexic,\n    score1,\n    score2,\n  },\n  type,\n  x,\n  y,\n}: TComposeInner) => (\n  <div\n    className={cx('shot', {\n      [`shot_${type}`]: type,\n      left,\n    })}\n    style={{ left: `${x}%`, top: `${y}%` }}\n    onClick={() => handleShootClick(point)}\n  >\n    <div className='shot__tooltip'>\n      <span className='shot__result'>\n        <T9n t={toString(result_lexic)} />\n      </span>\n      {/*\n        //@ts-ignore */}\n      <PlayerName point={point} />\n      <span className='shot__opponent-team'>@ {opponentTeam}</span>\n      <span className='shot__period-info'>\n        <span className='shot__period-num'>\n          {half} <T9n t={toString(GAME_PART_LEXIC)} />\n        </span>\n        <span className='shot__period-score'>{` ${score1} - ${score2}`}</span>\n      </span>\n    </div>\n  </div>\n)\n\nconst toolTipComposed = compose<TComposeInner, TPropsOuter>(\n  inject(\n    'videoPlayer',\n    'lexics',\n    'shootsRange',\n  ),\n  withHandlers<TWithHandlersOuterEventToEpisode, TWithHandlersInnerEventToEpisode>({\n    eventToEpisode: ({\n      lexics: {\n        getLexics,\n      },\n    }) => ({\n      f_match,\n      half,\n      id,\n      result_lexic,\n      second,\n    }) => ({\n      action: {\n        name: getLexics(result_lexic),\n        set: `${half} ${getLexics(GAME_PART_LEXIC)}`,\n      },\n      eventId: Number(id),\n      half,\n      matchId: f_match,\n      second: Math.round(second / 1000),\n    }),\n  }),\n  withHandlers<TWithHandlersOuterHandleShootClick, TWithHandlersInnerHandleShootClick>({\n    handleShootClick: ({\n      eventToEpisode,\n      videoPlayer,\n    }) => (event) => {\n      const data = [eventToEpisode(event)]\n      videoPlayer.fetchVideo(data)\n      videoPlayer.isOpened = true\n    },\n  }),\n  observer,\n)\n\nexport const ToolTip = toolTipComposed(ToolTipComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withProps } from 'recompose'\nimport map from 'lodash/map'\nimport values from 'lodash/values'\nimport pickBy from 'lodash/pickBy'\nimport get from 'lodash/get'\nimport filter from 'lodash/filter'\nimport includes from 'lodash/includes'\n\nimport { Pointer } from './Pointer'\nimport { ToolTip } from './ToolTip'\n\ntype TProps = {\n  //@ts-ignore\n  marker?: {\n    //@ts-ignore\n    point?: {},\n  },\n  toolTips: Array<{}>,\n}\n\nconst MarkerComponent = ({\n  marker: positionsInfo,\n  toolTips,\n}: TProps) => (\n  <div className='marker__wrapper'>\n    {/*\n      //@ts-ignore */}\n    <Pointer positionsInfo={positionsInfo} />\n    {map(toolTips, ({\n      //@ts-ignore\n      pos_x,\n      //@ts-ignore\n      pos_y,\n      //@ts-ignore\n      type,\n    }) => (\n      <ToolTip\n        key={`${pos_x}_${pos_y}`}\n            //@ts-ignore\n        point={positionsInfo.point}\n        type={type}\n        y={pos_y}\n        x={pos_x}\n      />\n    ))}\n  </div>\n)\n\nconst markerComposed = compose(\n  inject('markers'),\n  observer,\n  //@ts-ignore\n  withProps(({\n    marker,\n    markers: {\n      directions: {\n        from,\n        to,\n      },\n    },\n  }) => {\n    const toolTips = values(\n      pickBy(marker, value => get(value, 'pos_x') && get(value, 'pos_y')),\n    )\n    let toolTipsWithVectors = null\n    if (from && to) {\n      toolTipsWithVectors = filter(\n        toolTips, ({ type }) => includes(['out', 'point'], type),\n      )\n    }\n    // Если у нас показываюся векторы (когда есть точки куда и откуда),\n    // то используем отфильтрованные точки\n    return {\n      toolTips: toolTipsWithVectors || toolTips,\n    }\n  }),\n  observer,\n)\n//@ts-ignore\nexport const Marker = markerComposed(MarkerComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  withHandlers,\n  compose,\n} from 'recompose'\nimport isArray from 'lodash/isArray'\nimport get from 'lodash/get'\nimport { toJS } from 'mobx'\n\nimport Loader from 'features/components/common/loader/Loader'\nimport { Marker } from './MarkerItem'\n\ntype TProps = {\n  getMarkers: () => Array<{}>,\n  preparePoint: (marker: {}) => {},\n}\n\n//@ts-ignore\ntype TMarkerType = boolean | { pos_y: number | null }\n\n/**\n * Компонент Markers - является контейнером маркеров\n *\n * @property {function} getMarkers - функция получения списка маркеров\n * @property {function} preparePoint - в функцию передается маркер и она возврощает\n * позицию маркера и делает некую фильтрацию\n *\n */\n\nconst MarkersComponent = ({\n  getMarkers,\n  preparePoint,\n}: TProps) => (\n  isArray(toJS(getMarkers()))\n    ? getMarkers().map((marker, idx) => (\n      //@ts-ignore\n      <Marker\n        key={idx}\n        marker={preparePoint(marker)}\n      />\n    ))\n    : getMarkers()\n)\n\nconst markersComposed = compose(\n  inject('markers', 'tabs', 'zones'),\n  withHandlers({\n    //функция получения типа удара\n    //@ts-ignore\n    getActionTypes: () => ({ action_type }, to, from) => {\n      const type = { fromType: '', toType: '' }\n      switch (action_type) {\n        case 'Positive':\n          if (to) {\n            type.toType = 'point'\n          }\n          break\n        case 'Negative':\n          if (from && to) {\n            type.fromType = 'miss'\n            type.toType = 'out'\n          } else if (from) {\n            type.fromType = 'miss'\n          } else {\n            type.toType = 'out'\n          }\n          break\n        default: break\n      }\n      return type\n    },\n\n    /*\n    * функция получения счета, счет первой и второй команды достаются\n    * в маркерах по специальным ключам\n    */\n    //@ts-ignore\n    getScore: () => ({ prop }, key) => prop.find(property => property[0] === key),\n    //@ts-ignore\n    getList: () => (list, data) => (\n      //@ts-ignore\n      list.filter(({ prop }) => prop.find(([property, value]) => (\n        Object.entries(data).some(([key, values]) => {\n          //@ts-ignore\n          if (key === 'any') return values.includes(property)\n          //@ts-ignore\n          return parseInt(key, 10) === property && values.includes(value)\n        })\n      )))\n    ),\n  }),\n  //@ts-ignore\n  withHandlers({\n    /*\n    * в функцию передается маркер и она возврощает\n    * позицию маркера и делает некую фильтрацию\n    */\n    preparePoint: ({\n      getActionTypes,\n      getScore,\n      markers: {\n        directions,\n      },\n      tabs: { active },\n      zones: {\n        checked,\n      },\n      //@ts-ignore\n    }) => (point) => {\n      //получаем позиции маркера\n      let { from, middle, to } = point\n\n      //условия для показа точки по середине\n      const middleCondition = directions.from\n        && directions.to\n        && !point.dontShowOpponentSide\n        && middle\n\n      //устанавливаем координаты для точек откуда, куда и блок, если есть точка по середине\n      from = directions.from && from\n      middle = middleCondition && middle\n      to = (directions.to && !point.dontShowOpponentSide)\n        && to\n\n      //получаем тип удара, для точек откуда и куда\n      const { fromType, toType } = getActionTypes(point, to, from)\n\n      //получаем счет игры из маркера\n      const score1 = getScore(point, 136)\n      const score2 = getScore(point, 137)\n      //функция которая скрывает маркер, если он находится под разметкой зоны\n      // для вкладки 'подачи' скрываем маркеры под зонами противника\n      // для остальных - под своими зонами\n      //@ts-ignore\n      const hideMarker = (marker) => {\n        const tabCheck = active === 'serve'\n          ? (get(marker, 'pos_y') > 50)\n          : (get(marker, 'pos_y') < 50)\n        return tabCheck && marker.pos_y\n      }\n      //@ts-ignore\n      const checkPosition = (markerType: TMarkerType) => {\n        if (!markerType) return null\n        //@ts-ignore\n        if (checked === 'without_zone') return markerType.pos_y\n        return hideMarker(markerType)\n      }\n\n      const checkZone = (\n        markerType: TMarkerType,\n        directionType: string,\n      ) => ({\n        //@ts-ignore\n        ...markerType,\n        type: directionType,\n        pos_y: checkPosition(markerType),\n      })\n\n      return {\n        point: {\n          ...point,\n          score1: get(score1, 2, 0),\n          score2: get(score2, 2, 0),\n        },\n        from: checkZone(from, fromType),\n        to: checkZone(to, toType),\n        middle,\n      }\n    },\n    //получение маркеров\n    getMarkers: ({\n      markers: {\n        list,\n        loaded,\n      },\n    }) => () => {\n      if (!loaded) return <Loader />\n      return list\n    },\n  }),\n  observer,\n)\n\n//@ts-ignore\nexport const Markers = markersComposed(MarkersComponent)\n","\nimport React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers } from 'recompose'\nimport get from 'lodash/get'\n\nimport { takeScreenshot, utils } from 'react-sport'\n\nimport {\n  TProps,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n} from './types'\n\nconst {\n  helpers: { getLongSuffix, getSuffix },\n} = utils\n\nconst SaveScreenShotComponent = ({ handleDownload }: TProps) => (\n  <button className='map-block__controls-button'>\n    <i className='icon-download' onClick={handleDownload} />\n  </button>\n)\n\nexport const saveScreenShotComposed = compose<TProps, any>(\n  inject(\n    'zones',\n    'lexics',\n    'tabs',\n    'matches',\n    'markers',\n    'matchProfile',\n    'playerProfile',\n    'teamProfile',\n  ),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    handleDownload: ({\n      lexics: { getLexics, lang, page },\n      markers: { selectToggle },\n      matches: { active: currentTeam },\n      matchProfile: { data },\n      playerProfile,\n      tabs: { active },\n      teamProfile,\n    }) => (e) => {\n      // Снимаем выделение зоны.\n      // TODO подумать, как реализовать когда у нас два элемента SVG сохраняются в одной картинке\n      selectToggle(false)\n      const field = document.getElementsByClassName(\n        'map-block__map-field-outer',\n      )[0]\n      const elementBackgroundSVG = document.getElementsByClassName(\n        'map-block__zone-map',\n      )[0]\n\n      const suffix = getSuffix(lang)\n      const longSuffix = getLongSuffix(lang)\n      const pages = {\n        match: {\n          body: get(data, `${currentTeam}_name_${suffix}`, ''),\n          extra: `${get(data, 'match_date', '')}.png`,\n        },\n        player: {\n          body:\n            `${get(playerProfile, `profile.firstname_${longSuffix}`, '')}`\n            + ` ${get(playerProfile, `profile.lastname_${longSuffix}`, '')}`,\n        },\n        team: {\n          body: get(teamProfile, `profile.name_${longSuffix}`, ''),\n        },\n      }\n      const pageInfo = get(pages, page, {})\n      const picName = `${getLexics(active)}`\n        + ` ${get(pageInfo, 'body', '')}`\n        + ` ${get(pageInfo, 'extra', '')}`\n\n      takeScreenshot({\n        callback: () => {},\n        e,\n        elementBackgroundSVG,\n        elementToChangeBackground: 'map',\n        field,\n        picName,\n      })\n    },\n  }),\n  observer,\n)\n\nexport const SaveScreenShot = saveScreenShotComposed(SaveScreenShotComponent)\n","\nimport React, { Fragment } from 'react'\nimport { compose, withHandlers } from 'recompose'\nimport { inject, observer } from 'mobx-react'\nimport cx from 'classnames'\n\nimport { RangeSettings } from 'features/components/common/map/RangeSettings'\n\ntype TProps = {\n  handleShowPopup: () => void,\n  shootsRange: { isOpened: boolean },\n};\n\nexport const RangeSettingsPopup = ({\n  handleShowPopup,\n  shootsRange: { isOpened },\n}: TProps) => (\n  <Fragment>\n    <button className='map-block__controls-button'>\n      <i className='icon-settings' onClick={handleShowPopup} />\n    </button>\n    <div\n      className={cx('main-page__range-popup-settings', { hidden: !isOpened })}\n    >\n      {isOpened && <RangeSettings />}\n    </div>\n  </Fragment>\n)\n\nconst RangeSettingsPopupComposed = compose(\n  inject('shootsRange'),\n  //@ts-ignore\n  withHandlers({\n    handleShowPopup: ({ shootsRange: { rangePopup } }) => () => rangePopup(),\n  }),\n  observer,\n  //@ts-ignore\n)(RangeSettingsPopup)\n\nexport default RangeSettingsPopupComposed\n","import React from 'react'\nimport map from 'lodash/map'\nimport orderBy from 'lodash/orderBy'\nimport uniqBy from 'lodash/uniqBy'\n\nimport { inject, observer } from 'mobx-react'\nimport { withHandlers, compose } from 'recompose'\nimport { VideoLink } from 'react-sport'\nimport cx from 'classnames'\n\ntype TProps = {\n  videoLink: {\n    isFetching: boolean,\n  },\n  handleVideoExternal: () => void,\n  getShoots: () => {},\n  getRange: () => number,\n  getClassName: () => string,\n}\n\nconst PlayVideoBtn = ({\n  getClassName,\n  getRange,\n  getShoots,\n  handleVideoExternal,\n  videoLink: { isFetching },\n}: TProps) => (\n  <div className={getClassName()}>\n    {/*\n    //@ts-ignore */}\n    <VideoLink\n      shootsRange={getRange()}\n      handleVideoExternal={handleVideoExternal}\n      externalFetching={isFetching}\n      shoots={getShoots()}\n      store='shoots'\n    />\n  </div>\n)\n\nconst PlayVideoBtnComposed = compose(\n  inject('videoLink', 'lexics', 'shootsRange', 'markers', 'selectedMatches'),\n  //@ts-ignore\n  withHandlers({\n    getRange: ({ shootsRange: { after, allPossession, before } }) => () =>\n      (allPossession === 0 ? +allPossession : +(before + after)),\n    getShoots: ({ markers: { list, loaded } }) => () => ({\n      activeData: uniqBy(list, 'id'),\n      isFetching: !loaded,\n    }),\n    getClassName: ({ markers: { loaded } }) => () =>\n      cx('video__btn-container', { loading: !loaded }),\n    handleVideoExternal: ({\n      lexics: { lang },\n      shootsRange,\n      tab,\n      videoLink,\n      //@ts-ignore\n    }) => (shoots) => {\n      const shots = map(orderBy(shoots, 'match_date', 'asc'), 'id')\n      videoLink.request({\n        events: shots,\n        range: shootsRange,\n        lang,\n        tab,\n        type: 'mapShoots',\n      })\n    },\n  }),\n  observer,\n  //@ts-ignore\n)(PlayVideoBtn)\n\nexport default PlayVideoBtnComposed\n","\nimport React, { Children } from 'react'\nimport { observer } from 'mobx-react'\n\nimport {\n  withHandlers,\n  withState,\n  withProps,\n  compose,\n} from 'recompose'\nimport cx from 'classnames'\nimport includes from 'lodash/includes'\n\nimport { OutsideClick } from 'react-sport'\n\nimport {\n  TPropsInner,\n  TPropsOuter,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n  TWithPropsInner,\n  TWithPropsOuter,\n} from './types'\n\nexport const ControlDropDownComponent = ({\n  children,\n  className,\n  isVisible,\n  menuType,\n  title,\n  toggleOpenMenu,\n  withTitle,\n}: TPropsInner) => (\n  <div className={className} onClick={toggleOpenMenu}>\n    <button className='map-block__controls-button'>\n      {withTitle ? (\n        <span className='map-block__controls-button__title'>{title}</span>\n      ) : (\n        <i className={`icon-select-${menuType}`} />\n      )}\n    </button>\n    {isVisible && (\n      <ul className='map-block__select-list'>\n        {Children.map(children, (child, i) => (\n          <li key={i} className='map-block__select-item'>\n            <a>{child}</a>\n          </li>\n        ))}\n      </ul>\n    )}\n  </div>\n)\n\nconst controlDropDownComposed = compose<TPropsInner, TPropsOuter>(\n  withState('isVisible', 'toggleIsVisible', false),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    clickOutside: ({ toggleIsVisible }) => () => toggleIsVisible(false),\n    toggleOpenMenu: ({ isVisible, toggleIsVisible }) => () => toggleIsVisible(!isVisible),\n  }),\n  withProps<TWithPropsInner, TWithPropsOuter>(({ isVisible, menuType }) => ({\n    className: cx('map-block__select', {\n      'map-block__select_open': isVisible,\n    }),\n    withTitle: includes(['teamSelect'], menuType),\n  })),\n  OutsideClick,\n  observer,\n)\n\nexport const ControlDropDown = controlDropDownComposed(ControlDropDownComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport get from 'lodash/get'\nimport {\n  compose,\n  withHandlers,\n  withProps,\n  withState,\n} from 'recompose'\nimport { OutsideClick, T9n } from 'react-sport'\n\nimport { getSuffix, getAbbr } from 'module/utils/helpers'\n\nimport { ControlDropDown } from '../ControlsDropDown'\n\nimport {\n  TPropsInner,\n  TWithState,\n  TWithPropsInner,\n  TWithHandlersInner,\n  TWithPropsOuter,\n  TWithHandlersOuter,\n  TWithHandlersCheckOuter,\n  TWithHandlersCheckInner,\n} from './types'\n\nexport const TeamsPopupComponent = ({\n  activeTeamShortName,\n  checkTeam,\n  teams,\n}: TPropsInner) => (\n  <ControlDropDown\n    menuType='teamSelect'\n    title={activeTeamShortName}\n  >\n    {teams.map(({ id, teamName }) => (\n      <div\n        onClick={checkTeam(id)}\n        className='custom-select__option'\n        key={id}\n      >\n        <T9n t={teamName} />\n      </div>\n    ))}\n  </ControlDropDown>\n)\n\nconst teamsPopupComposed = compose<TPropsInner, {}>(\n  inject(\n    'lexics',\n    'matchProfile',\n    'markers',\n    'matches',\n  ),\n  withState<TWithState, {}>('isOpened', 'setIsOpened', false),\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(({\n    lexics: { lang },\n    matches: { active },\n    matchProfile: { data },\n  }) => {\n    const suffix = getSuffix(lang)\n    const team1Name = get(data, `team1_name_${suffix}`)\n    const team2Name = get(data, `team2_name_${suffix}`)\n    return {\n      activeTeamShortName: getAbbr(get(data, `${active}_name_${suffix}`)),\n      teams: [\n        {\n          id: 'team1',\n          teamName: team1Name,\n        },\n        {\n          id: 'team2',\n          teamName: team2Name,\n        },\n      ],\n    }\n  }),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    clickOutside: ({ setIsOpened }) => () => setIsOpened(false),\n    handleActive: ({\n      matches: {\n        changeActive,\n      },\n    }) => (active) => {\n      changeActive(active)\n    },\n    setIsOpenedHandler: ({ isOpened, setIsOpened }) => () => () => setIsOpened(!isOpened),\n  }),\n  withHandlers<TWithHandlersCheckOuter, TWithHandlersCheckInner>({\n    checkTeam: ({\n      handleActive,\n      markers: { fetch },\n      matches: { active },\n      matchProfile,\n      setIsOpenedHandler,\n    }) => id => () => {\n      if (active !== id) {\n        handleActive(id)\n        const teamId = get(matchProfile, `data.${id}_id`, '')\n        const matches = [get(matchProfile, 'matchId')]\n        fetch(teamId, matches)\n      }\n      return setIsOpenedHandler()\n    },\n  }),\n  OutsideClick,\n  observer,\n)\n\nexport const TeamsPopup = teamsPopupComposed(TeamsPopupComponent)\n","// массив с кнопками для выпадающего списка на карте ударов направлений маркеров\n// tabs - вкладки, в которых есть данная кнопка\n\nconst directionsDropDownButtons = [\n  {\n    tabs: ['attack', 'block', 'serve', 'pass'],\n    endPoint: { to: true, from: true },\n    name: 'full_trajectory',\n  },\n  {\n    tabs: [\n      'attack',\n      'block',\n      'serve',\n      'pass',\n      'attack_reception',\n      'serve_reception',\n    ],\n    endPoint: { to: false, from: true },\n    name: 'markers_from',\n  },\n  {\n    tabs: ['attack', 'block', 'serve', 'pass'],\n    endPoint: { to: true, from: false },\n    name: 'markers_to',\n  },\n]\n\nexport default directionsDropDownButtons\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport forIn from 'lodash/forIn'\nimport filter from 'lodash/filter'\nimport includes from 'lodash/includes'\nimport {\n  withHandlers,\n  withProps,\n  compose,\n} from 'recompose'\n\nimport { T9n } from 'react-sport'\n\nimport directionsDropDownButtons from '../config/directionsDropdown'\n\nimport { ControlDropDown } from '../ControlsDropDown'\n\nimport {\n  TProps,\n  TWithPropsInner,\n  TWithPropsOuter,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n} from './types'\n\nexport const DirectionsComponent = ({\n  chooseDirection,\n  directionsBtns,\n}: TProps) => (\n  <ControlDropDown menuType='action'>\n    {directionsBtns.map(({ endPoint, name }) => (\n      <div\n        className='custom-select__option'\n        onClick={chooseDirection(endPoint)}\n        key={name}\n      >\n        <T9n t={name} />\n      </div>\n    ))}\n  </ControlDropDown>\n)\n\nconst directionsComposed = compose<TProps, {}>(\n  inject(\n    'tabs',\n    'markers',\n    'zones',\n  ),\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(({ tabs: { active } }) => ({\n    directionsBtns: filter(directionsDropDownButtons, ({ tabs }) =>\n      includes(tabs, active)),\n  })),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    chooseDirection: ({\n      markers: { handleDirection, selectToggle },\n      zones: { resetToDefaultDirections },\n    }) => (endPoint: {}) => () => {\n      // При смене режима отображения точек, сбрасываем показ зон и выделение\n      resetToDefaultDirections()\n      forIn(endPoint, (value, key) => handleDirection(key, value))\n      selectToggle(false)\n    },\n  }),\n  observer,\n)\n\nexport const Directions = directionsComposed(DirectionsComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  withHandlers,\n  withProps,\n  compose,\n} from 'recompose'\n\nimport { T9n } from 'react-sport'\n\nimport { ControlDropDown } from '../ControlsDropDown'\n\nimport {\n  TProps,\n  TWithHandlersOuter,\n  TComposeInner,\n  TWithHandlersInner,\n} from './types'\n\nexport const ZonesComponent = ({ checkZone, zoneTitles }: TProps) => (\n  <ControlDropDown menuType='zone'>\n    {zoneTitles.map(zone => (\n      <div\n        className='custom-select__option'\n        onClick={checkZone(zone)}\n        key={zone}\n      >\n        <T9n t={zone} />\n      </div>\n    ))}\n  </ControlDropDown>\n)\n\nconst zonesComposed = compose<TComposeInner, {}>(\n  inject(\n    'tabs',\n    'markers',\n    'zones',\n  ),\n  observer,\n  withProps(() => {\n    // зоны поля\n    const zoneTitles = [\n      'without_zone',\n      'basic_zones',\n      'advanced_zones',\n    ]\n    return { zoneTitles }\n  }),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    checkZone: ({\n      markers: { selectToggle },\n      zones: { resetToDefaultDirections, setChecked },\n    }) => (checkedZone: string) => () => {\n      if (checkedZone === 'without_zone') {\n        resetToDefaultDirections()\n      }\n      setChecked(checkedZone)\n      selectToggle(false)\n    },\n  }),\n  observer,\n)\n\nexport const Zones = zonesComposed(ZonesComponent)\n","\nimport React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers } from 'recompose'\nimport isEqual from 'lodash/isEqual'\n\nimport { SaveScreenShot } from 'features/components/common/map/SaveScreenShot'\nimport RangeSettingsPopup from 'features/components/common/map/RangeSettingsPopup'\nimport PlayVideoBtn from 'features/components/common/video-player/PlayVideoBtn'\n\nimport { TeamsPopup } from './TeamsPopup'\nimport { Directions } from './Directions'\nimport { Zones } from './Zones'\n\nimport {\n  TProps,\n  TWithHandlersOuter,\n} from './types'\n\nexport const MapFieldControlsComponent = ({\n  lexics: { page },\n  selectArea,\n  tabs: { active },\n}: TProps) => (\n  <div className='map-block__controls'>\n    <div className='map-block__controls-col'>\n      <Directions />\n      <Zones />\n      {page === 'match' && <TeamsPopup />}\n      <button className='map-block__controls-button' onClick={selectArea}>\n        <i className='icon-area' />\n      </button>\n    </div>\n    {/*\n      //@ts-ignore */}\n    <PlayVideoBtn tab={active} />\n    <div className='map-block__controls-col'>\n      <SaveScreenShot />\n      {/* TODO MapShare пока не делаем */}\n      {/* <MapShare /> */}\n      <RangeSettingsPopup />\n    </div>\n  </div>\n)\n\nconst mapFieldControlsComposed = compose<TProps, {}>(\n  inject(\n    'tabs',\n    'lexics',\n    'markers',\n    'zones',\n  ),\n  withHandlers<TWithHandlersOuter, {}>({\n    selectArea: ({\n      markers: {\n        directions,\n        select,\n        selectToggle,\n      },\n      zones: {\n        resetToDefaultDirections,\n        setZone,\n      },\n    }) => () => {\n      if (isEqual(directions, { from: true, to: true })) {\n        resetToDefaultDirections()\n      }\n      setZone('without_zone')\n      selectToggle(!select)\n    },\n  }),\n  observer,\n)\nexport const MapFieldControls = mapFieldControlsComposed(MapFieldControlsComponent)\n","// Данные по каждой зоне\n\ntype TZones = {\n  [key: string]: {},\n}\nexport const zones: TZones = {\n  bottom: {\n    advanced_zones: [7, 8, 9, 6, 5, 4, 3, 2, 1],\n    basic_zones: [4, 5, 3, 6, 2, 1],\n  },\n  top: {\n    advanced_zones: [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    basic_zones: [1, 2, 6, 3, 5, 4],\n  },\n}\n\n// Координаты границ зон поля в завимости от выбранного типа\nexport const zoneBorderConfig = {\n  x: {\n    basic: {\n      top: [\n        {\n          zonesList: [1, 2],\n          coords: [-15, 33],\n        },\n        {\n          zonesList: [3, 6],\n          coords: [33, 67],\n        },\n        {\n          zonesList: [5, 4],\n          coords: [67, 120],\n        },\n      ],\n      bottom: [\n        {\n          zonesList: [4, 5],\n          coords: [-15, 33],\n        },\n        {\n          zonesList: [3, 6],\n          coords: [33, 67],\n        },\n        {\n          zonesList: [1, 2],\n          coords: [67, 120],\n        },\n      ],\n    },\n    advanced: {\n      top: [\n        {\n          zonesList: [1, 2, 3],\n          coords: [-15, 33],\n        },\n        {\n          zonesList: [4, 5, 6],\n          coords: [33, 67],\n        },\n        {\n          zonesList: [7, 8, 9],\n          coords: [67, 120],\n        },\n      ],\n      bottom: [\n        {\n          zonesList: [7, 8, 9],\n          coords: [-15, 33],\n        },\n        {\n          zonesList: [4, 5, 6],\n          coords: [33, 67],\n        },\n        {\n          zonesList: [1, 2, 3],\n          coords: [67, 120],\n        },\n      ],\n    },\n  },\n  y: {\n    basic: {\n      top: [\n        {\n          zonesList: [1, 6, 5],\n          coords: [-15, 33],\n        },\n        {\n          zonesList: [2, 3, 4],\n          coords: [33, 50],\n        },\n      ],\n      bottom: [\n        {\n          zonesList: [4, 3, 2],\n          coords: [50, 66],\n        },\n        {\n          zonesList: [5, 6, 1],\n          coords: [66, 120],\n        },\n      ],\n    },\n    advanced: {\n      top: [\n        {\n          zonesList: [1, 4, 9],\n          coords: [-15, 17],\n        },\n        {\n          zonesList: [2, 5, 8],\n          coords: [17, 33],\n        },\n        {\n          zonesList: [3, 6, 7],\n          coords: [33, 50],\n        },\n      ],\n      bottom: [\n        {\n          zonesList: [3, 6, 7],\n          coords: [50, 67],\n        },\n        {\n          zonesList: [2, 5, 8],\n          coords: [67, 83],\n        },\n        {\n          zonesList: [1, 4, 9],\n          coords: [83, 120],\n        },\n      ],\n    },\n  },\n}\n\n// Положительный маркер, ключ - активный таб\nexport const zoneAction = {\n  attack: [24, [93, 97, 168]],\n  block: [27, [116]],\n  pass: [21, [68]],\n  serve: [15, [35, 36, 37]],\n  attack_reception: [18, [50]],\n  serve_reception: [18, [50]],\n}\n","\nimport React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withHandlers,\n  withProps,\n} from 'recompose'\nimport map from 'lodash/map'\nimport some from 'lodash/some'\nimport get from 'lodash/get'\nimport find from 'lodash/find'\nimport includes from 'lodash/includes'\nimport filter from 'lodash/filter'\nimport inRange from 'lodash/inRange'\nimport size from 'lodash/size'\nimport isEmpty from 'lodash/isEmpty'\n\nimport {\n  zoneAction,\n  zoneBorderConfig,\n} from 'config/zones'\nimport {\n  TEventToEpisodeOuter,\n  TEvent,\n  THandleShootClickOuter,\n  TProps,\n  TPropsInner,\n  TPropsOuter,\n  TGetParamsOuter,\n  TGetParamsInner,\n  TWithPropsInner,\n  TWithPropsOuter,\n} from './types'\n\nconst GAME_PART_LEXIC = 8684\n\nconst ZonesStatisticComponent = ({\n  handleShootClick,\n  percentage,\n  succesZoneMarkers,\n  totalZoneMarkers,\n  zone,\n  zoneEvents,\n  zones: { total },\n}: TProps) => (\n  <a\n    className={`map-block__zones-episode zone_${zone}`}\n    onClick={handleShootClick(zoneEvents)}\n  >\n    <p>{percentage}%</p>\n    <span>{!total && `${succesZoneMarkers} — ${totalZoneMarkers}`}</span>\n  </a>\n)\n\nconst zonesStatisticComposed = compose<TPropsInner, TPropsOuter>(\n  inject(\n    'tabs',\n    'markers',\n    'zones',\n    'videoPlayer',\n    'shootsRange',\n    'lexics',\n  ),\n  withHandlers<TGetParamsOuter, TGetParamsInner>({\n    /*\n     * фильтрация параметров.\n     * data - список маркеров\n     * key - ключ, по которому получаем нужный нам список\n     * zone - текущая зона\n     */\n    getParams: ({\n      tabs: { active },\n      zones: { checked },\n    }) => ({\n      data,\n      key,\n      zone,\n    }) => {\n      // Фильтруем \"Уcпешные\" действия (маркеры)\n      if (key === 'successActions') {\n        const firstConditionId = get(zoneAction, `${active}.[0]`)\n        const secondConditionId = get(zoneAction, `${active}.[1]`)\n        data = filter(data, ({ prop }) =>\n          some(\n            prop,\n            propItem =>\n              includes(propItem, firstConditionId)\n              && some(propItem, propItemValue =>\n                includes(secondConditionId, propItemValue)),\n          ))\n      }\n      // Получаем границы зоны из конфига в зависимости от выбранного типа поля\n      const side = active === 'serve' ? 'top' : 'bottom' //наша часть поля или соперника\n      const fieldType = checked === 'basic_zones' ? 'basic' : 'advanced'\n      // достаем из конфига границы для выбранного типа и стороны поля\n      const zoneTypeX = get(zoneBorderConfig, `x.${fieldType}.${side}`)\n      const zoneTypeY = get(zoneBorderConfig, `y.${fieldType}.${side}`)\n      // получаем координаты границы по Х и по Y\n      const xCoords = get(\n        find(zoneTypeX, ({ zonesList }) => includes(zonesList, zone)),\n        'coords',\n      )\n      const yCoords = get(\n        find(zoneTypeY, ({ zonesList }) => includes(zonesList, zone)),\n        'coords',\n      )\n      // Для подачи (serve) или передачи (pass) нам нужны зоны соперника,\n      // т.е. куда мяч улетел ('to')\n      const coordsType = includes(['serve', 'pass'], active) ? 'to' : 'from'\n\n      // Возвращаем отфильтрованные маркеры по текущей зоне\n      return filter(\n        data,\n        marker =>\n          inRange(get(marker, `${coordsType}.pos_x`), xCoords[0], xCoords[1])\n          && inRange(get(marker, `${coordsType}.pos_y`), yCoords[0], yCoords[1]),\n      )\n    },\n  }),\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>((\n    {\n      getParams,\n      markers: { list },\n      zone,\n    } : TWithPropsOuter,\n  ) => {\n    const getMarkers = (key: string) =>\n      getParams({\n        data: list,\n        key,\n        zone,\n      })\n    // количество всех маркеров в данной зоне\n    const allMarkers = getMarkers('totalActions')\n    const totalZoneMarkers = size(allMarkers)\n    // количество \"успешных\" маркеров в данной зоне\n    const succesZoneMarkers = size(getMarkers('successActions'))\n    const percentage = Math.round((succesZoneMarkers / totalZoneMarkers) * 100) || 0\n    return {\n      percentage,\n      succesZoneMarkers,\n      totalZoneMarkers,\n      zoneEvents: allMarkers,\n    }\n  }),\n  withHandlers<TEventToEpisodeOuter, {}>({\n    eventToEpisode: ({\n      lexics: { getLexics },\n    }) => (event: TEvent) => {\n      const {\n        f_match,\n        half,\n        id,\n        result_lexic,\n        second,\n      } = event\n      return {\n        action: {\n          name: getLexics(result_lexic),\n          set: `${half} ${getLexics(GAME_PART_LEXIC)}`,\n        },\n        eventId: Number(id),\n        half,\n        matchId: f_match,\n        second: Math.round(second / 1000),\n      }\n    },\n  }),\n  withHandlers<THandleShootClickOuter, {}>({\n    handleShootClick: ({\n      eventToEpisode,\n      videoPlayer: {\n        fetchVideo,\n        setModalOpen,\n      },\n    }) => (events: Array<number>) => () => {\n      if (!isEmpty(events)) {\n        const data = map(events, event => eventToEpisode(event))\n        fetchVideo(data)\n        setModalOpen(true)\n      }\n    },\n  }),\n)\n\nexport const ZonesStatistic = zonesStatisticComposed(ZonesStatisticComponent)\n","export const zoneSideDimension = 106.9\nexport const longSideDimension = 214.8\n\n// Данные для отрисовки SVG с зонами поверх поля\nexport const fieldSVGDimensions = {\n  top: {\n    basic_zones: [\n      {\n        x: 238.8,\n        y: 8.5,\n      },\n      {\n        x: 131.7,\n        y: 8.5,\n      },\n      {\n        x: 24.5,\n        y: 8.5,\n      },\n      {\n        x: 24.5,\n        y: 223.8,\n      },\n      {\n        x: 238.8,\n        y: 223.8,\n      },\n      {\n        x: 131.7,\n        y: 223.8,\n      },\n    ],\n    advanced_zones: [\n      {\n        x: 24.5,\n        y: 8.5,\n      },\n      {\n        x: 238.8,\n        y: 8.5,\n      },\n      {\n        x: 131.7,\n        y: 8.5,\n      },\n      {\n        x: 238.8,\n        y: 223.6,\n      },\n      {\n        x: 238.8,\n        y: 115.9,\n      },\n      {\n        x: 131.7,\n        y: 115.9,\n      },\n      {\n        x: 131.7,\n        y: 223.6,\n      },\n      {\n        x: 24.5,\n        y: 115.9,\n      },\n      {\n        x: 24.5,\n        y: 223.6,\n      },\n    ],\n  },\n  bottom: {\n    basic_zones: [\n      {\n        x: 238.8,\n        y: 438.7,\n      },\n      {\n        x: 131.7,\n        y: 438.7,\n      },\n      {\n        x: 24.5,\n        y: 438.7,\n      },\n      {\n        x: 24.5,\n        y: 331.2,\n      },\n      {\n        x: 238.8,\n        y: 331.2,\n      },\n      {\n        x: 131.7,\n        y: 331.2,\n      },\n    ],\n    advanced_zones: [\n      {\n        x: 24.5,\n        y: 331.2,\n      },\n      {\n        x: 238.8,\n        y: 331.2,\n      },\n      {\n        x: 131.7,\n        y: 331.2,\n      },\n      {\n        x: 238.8,\n        y: 546.3,\n      },\n      {\n        x: 238.8,\n        y: 438.7,\n      },\n      {\n        x: 131.7,\n        y: 438.7,\n      },\n      {\n        x: 131.7,\n        y: 546.3,\n      },\n      {\n        x: 24.5,\n        y: 438.7,\n      },\n      {\n        x: 24.5,\n        y: 546.3,\n      },\n    ],\n  },\n}\n","import React from 'react'\n\nimport get from 'lodash/get'\n\nimport {\n  fieldSVGDimensions,\n  zoneSideDimension,\n  longSideDimension,\n} from '../config'\n\ntype TProps = {\n  side: string,\n  checked: string,\n}\n\nexport const MapFieldSVG = ({ checked, side }: TProps) => (\n  //@ts-ignore\n  <svg\n    version='1.1'\n    id='Layer_1'\n    xmlns='http://www.w3.org/2000/svg'\n    xlink='http://www.w3.org/1999/xlink'\n    x='0px'\n    y='0px'\n    viewBox='0 0 369 662'\n    xmlSpace='preserve'\n    className='map-block__zone-map'\n  >\n    <g>\n      <g>\n        <rect\n          x='24.2'\n          y='8.8'\n          className='st0'\n          width='321.5'\n          height='644.5'\n          fill='#FEF1EB'\n        />\n        <path\n          className='st1'\n          d='M345.5,9v644h-321V9H345.5 M346,8.5H24v645h322V8.5L346,8.5z'\n          fill='#A1A4A3'\n        />\n      </g>\n      <g>\n        <rect\n          x='24'\n          y='223.3'\n          className='st1'\n          width='322'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n      </g>\n      <g>\n        <rect\n          x='24'\n          y='438.2'\n          className='st1'\n          width='322'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n      </g>\n      <g>\n        <g>\n          <rect x='14' y='330.8' width='342' height='0.5' />\n        </g>\n        <circle cx='354.5' cy='331' r='1.5' />\n        <circle cx='15.5' cy='331' r='1.5' />\n      </g>\n      <g>\n        <rect\n          x='16'\n          y='223.3'\n          className='st1'\n          width='5'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n        <rect\n          x='8'\n          y='223.3'\n          className='st1'\n          width='5'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n        <rect y='223.3' className='st1' width='5' height='0.5' fill='#A1A4A3' />\n      </g>\n      <g>\n        <rect\n          x='16'\n          y='438.2'\n          className='st1'\n          width='5'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n        <rect\n          x='8'\n          y='438.2'\n          className='st1'\n          width='5'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n        <rect y='438.2' className='st1' width='5' height='0.5' fill='#A1A4A3' />\n      </g>\n      <g>\n        <rect\n          x='364'\n          y='223.3'\n          className='st1'\n          width='5'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n        <rect\n          x='356'\n          y='223.3'\n          className='st1'\n          width='5'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n        <rect\n          x='348'\n          y='223.3'\n          className='st1'\n          width='5'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n      </g>\n      <g>\n        <rect\n          x='364'\n          y='438.2'\n          className='st1'\n          width='5'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n        <rect\n          x='356'\n          y='438.2'\n          className='st1'\n          width='5'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n        <rect\n          x='348'\n          y='438.2'\n          className='st1'\n          width='5'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n      </g>\n      <g>\n        <rect x='24' className='st1' width='0.5' height='5' fill='#A1A4A3' />\n        <rect x='345.5' className='st1' width='0.5' height='5' fill='#A1A4A3' />\n      </g>\n      <g>\n        <rect\n          x='24'\n          y='657'\n          className='st1'\n          width='0.5'\n          height='5'\n          fill='#A1A4A3'\n        />\n        <rect\n          x='345.5'\n          y='657'\n          className='st1'\n          width='0.5'\n          height='5'\n          fill='#A1A4A3'\n        />\n      </g>\n    </g>\n    {checked !== 'without_zone'\n      //@ts-ignore\n      && get(fieldSVGDimensions, [side, checked], []).map(({ x, y }, i) => (\n        <rect\n          className='map-block__hover-zone'\n          key={`${x}_${y}`}\n          x={x}\n          y={y}\n          width={zoneSideDimension}\n          //В случае, если у нас выбраны базовые зоны, то длина задних зон - увеличенная\n          height={\n            checked === 'basic_zones' && i < 3\n              ? longSideDimension\n              : zoneSideDimension\n          }\n        />\n      ))}\n  </svg>\n)\n","import React, { Fragment } from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport cx from 'classnames'\nimport get from 'lodash/get'\nimport map from 'lodash/map'\n\nimport { withHandlers, withProps, compose } from 'recompose'\n\nimport { ZonesStatistic } from 'features/components/common/map/ZoneStatistic'\n\nimport { zones } from 'config/zones'\nimport {\n  TProps,\n  TComposeInner,\n  TPRopsInner,\n  TPropsOuter,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n} from './types/fieldZonesTypes'\nimport { MapFieldSVG } from './MapFieldSVG'\n\nconst FieldZonesComponent = ({\n  getZonesClassName,\n  side,\n  zones: { checked },\n  zonesList,\n}: TProps) => (\n  <Fragment>\n    <div className={getZonesClassName()}>\n      {checked !== 'without_zone'\n        && map(zonesList, (zone: string) => (\n          <ZonesStatistic key={zone} zone={zone} />\n        ))}\n    </div>\n    <MapFieldSVG side={side} checked={checked} />\n  </Fragment>\n)\n\nconst fieldZonesComposed = compose<TComposeInner, {}>(\n  inject('zones', 'tabs'),\n  observer,\n  withProps<TPRopsInner, TPropsOuter>(({\n    tabs: { active },\n    zones: { checked },\n  }) => {\n    const side = active === 'serve' ? 'top' : 'bottom'\n\n    return {\n      side,\n      zonesList: get(zones, [side, checked], []),\n    }\n  }),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    getZonesClassName: ({ side, zones: { checked } }) => () =>\n      cx(\n        'map-block__zones',\n        `map-block__zones_${checked.split('_')[0]}-${side}`,\n      ),\n  }),\n)\n\nexport const FieldZones = fieldZonesComposed(FieldZonesComponent)\n","\nimport React from 'react'\nimport { observer, inject } from 'mobx-react'\n\nimport { compose, lifecycle } from 'recompose'\nimport get from 'lodash/get'\nimport isString from 'lodash/isString'\nimport isEmpty from 'lodash/isEmpty'\n\nimport { PlayingField } from 'react-sport'\n\nimport { Markers } from 'features/components/common/map/Markers'\nimport { MapFieldControls } from 'features/MapControls/components'\n\nimport { FieldZones } from './FieldZones'\n\nimport {\n  TProps,\n  TPrevProps,\n  TComposeInner,\n  TComposeOuter,\n} from './types/mapFieldTypes'\n\nexport const MapFieldComponent = ({ markers: { select, setRect } }: TProps) => (\n  <div className='main-page__map-wrapper'>\n    <MapFieldControls />\n    <div className='map-block__map-field-outer'>\n      <div className='map-block__map-field-inner'>\n        <div id='map' className='map-block__map-field-zones' />\n        <FieldZones />\n        <div className='main-page__map-shots'>\n          {select && (\n            <PlayingField.SelectionField\n              wrapperClass='selection_field'\n              width={360}\n              height={700}\n              onSelect={rect => setRect(rect || {}, 360, 700, 313, 631)}\n            />\n          )}\n          <Markers />\n        </div>\n      </div>\n    </div>\n  </div>\n)\n\nconst mapFieldComposed = compose<TComposeOuter, TComposeInner>(\n  inject(\n    'markers',\n    'matches',\n    'selectedMatches',\n    'lexics',\n    'zones',\n  ),\n  lifecycle<TPrevProps, {}>({\n    componentDidUpdate(prevProps) {\n      const {\n        lexics: { page },\n        markers: { fetch },\n        matchId,\n        pageId,\n        selectedMatches,\n        tab,\n        zones,\n      } = this.props\n      const currentMatches = page === 'match'\n        ? [matchId]\n        : get(selectedMatches, [page, pageId])\n\n      if (prevProps.tab === tab || isEmpty(currentMatches)) return null\n\n      if (!isString(currentMatches)) {\n        fetch(pageId, currentMatches)\n        zones.fetch(pageId, currentMatches)\n      }\n    },\n  }),\n  observer,\n)\n\nexport const MapField = mapFieldComposed(MapFieldComponent)\n","// Список фильтров для каждой вкладки на карте ударов\n\ntype TFiltersConfig = {\n  [key: string]: Array<{\n    data?: Array<{\n      columnTitleId?: number | false,\n      ids?: Array<number>,\n      zoneId?: number,\n      zoneNumber?: number,\n    } | number>,\n    style? : string,\n    title: number,\n    type: string,\n  }>,\n}\n\nexport const filterPopupByTab: TFiltersConfig = {\n  attack: [\n    {\n      type: 'popupWithColumns',\n      title: 10584, // результат\n      data: [\n        {\n          columnTitleId: 1, // выигранное очко\n          ids: [2, 3, 4],\n        },\n        {\n          columnTitleId: 5, // проигранное очко\n          ids: [6, 7, 276, 274, 8, 9],\n        },\n        {\n          columnTitleId: 49, // нулевая атака\n          ids: [298, 299],\n        },\n      ],\n    },\n    {\n      type: 'popupWithHomePlayers',\n      title: 10655, // атакующий\n    },\n    {\n      type: 'popupSimple',\n      title: 10656, // амплуа атакующего\n      data: [264, 263, 265, 266],\n    },\n    {\n      type: 'popupSimple',\n      title: 8556, // комбинация\n      data: [16, 17, 10, 22, 14, 13, 12, 18, 19, 21, 20],\n    },\n    {\n      type: 'popupSimple',\n      title: 10657, // атаки с первого мяча\n      data: [307, 308, 309, 310, 311, 312],\n    },\n    {\n      type: 'popupSimple',\n      title: 8341, // разновидность атаки\n      data: [24, 25, 26, 28],\n    },\n    {\n      type: 'popupWithZones',\n      title: 10658, // направление атаки\n      data: [\n        {\n          zoneId: 41,\n          zoneNumber: 1,\n        },\n        {\n          zoneId: 46,\n          zoneNumber: 6,\n        },\n        {\n          zoneId: 45,\n          zoneNumber: 5,\n        },\n        {\n          zoneId: 42,\n          zoneNumber: 2,\n        },\n        {\n          zoneId: 43,\n          zoneNumber: 3,\n        },\n        {\n          zoneId: 44,\n          zoneNumber: 4,\n        },\n      ],\n    },\n    {\n      type: 'popupSimple',\n      title: 10668, // тип блока\n      data: [29, 30, 31, 32],\n    },\n  ],\n  attack_reception: [\n    {\n      type: 'popupSimple',\n      title: 10669, // результат приема\n      data: [304, 305, 166],\n    },\n    {\n      type: 'popupWithHomePlayers',\n      title: 10642, // принимающий\n    },\n    {\n      type: 'popupSimple',\n      title: 10643, // амплуа принимающего\n      data: [267, 270, 268, 269],\n    },\n    {\n      type: 'popupSimple',\n      title: 8366, // тип приема\n      data: [199, 198, 200],\n    },\n  ],\n  block: [\n    {\n      type: 'popupWithColumns',\n      title: 10584, // Результат\n      data: [\n        {\n          columnTitleId: false,\n          ids: [275],\n        },\n        {\n          columnTitleId: 50, // выигранное очко\n          ids: [51, 53],\n        },\n        {\n          columnTitleId: 232, // проигранное очко\n          ids: [58, 55, 54, 56, 57],\n        },\n        {\n          columnTitleId: 10664, // нулевой блок\n          ids: [59, 60],\n        },\n      ],\n    },\n    {\n      type: 'popupWithHomePlayers',\n      title: 10665, // блокирующий\n    },\n    {\n      type: 'popupSimple',\n      title: 10666, // амплуа блокирующего\n      data: [300, 301, 302, 303],\n    },\n    {\n      type: 'popupSimple',\n      title: 10668, // тип блока\n      data: [71, 72, 73],\n    },\n    {\n      type: 'popupSimple',\n      title: 8343, // характеристика блока\n      data: [74, 75],\n    },\n  ],\n  pass: [\n    {\n      type: 'popupWithColumns',\n      title: 10584, // Результат\n      data: [\n        {\n          columnTitleId: 105, // ассист\n          ids: [289, 290],\n        },\n        {\n          columnTitleId: 104, // ошибка\n          ids: [103, 102],\n        },\n        {\n          columnTitleId: 306, // нулевая атака\n          ids: [291, 292],\n        },\n      ],\n    },\n    {\n      type: 'popupWithHomePlayers',\n      title: 10645, // пасующий\n    },\n    {\n      type: 'popupSimple',\n      title: 10646, // амплуа пасующего\n      data: [293, 294, 295, 296, 297],\n    },\n    {\n      type: 'popupSimple',\n      title: 10647, // тип передачи\n      data: [106, 107],\n    },\n    {\n      style: 'home', // home - сторона поля своей команды\n      type: 'popupWithZones',\n      title: 10648, // направление передачи\n      data: [\n        {\n          zoneId: 131,\n          zoneNumber: 4,\n        },\n        {\n          zoneId: 130,\n          zoneNumber: 3,\n        },\n        {\n          zoneId: 129,\n          zoneNumber: 2,\n        },\n        {\n          zoneId: 132,\n          zoneNumber: 5,\n        },\n        {\n          zoneId: 133,\n          zoneNumber: 6,\n        },\n        {\n          zoneId: 128,\n          zoneNumber: 1,\n        },\n      ],\n    },\n    {\n      style: 'home',\n      type: 'popupWithZones',\n      title: 10649, // зона передачи\n      data: [\n        {\n          zoneId: 137,\n          zoneNumber: 4,\n        },\n        {\n          zoneId: 136,\n          zoneNumber: 3,\n        },\n        {\n          zoneId: 135,\n          zoneNumber: 2,\n        },\n        {\n          zoneId: 138,\n          zoneNumber: 5,\n        },\n        {\n          zoneId: 139,\n          zoneNumber: 6,\n        },\n        {\n          zoneId: 134,\n          zoneNumber: 1,\n        },\n      ],\n    },\n  ],\n  serve: [\n    {\n      type: 'popupWithColumns',\n      title: 10584, // результат\n      data: [\n        {\n          columnTitleId: 10585, // Эйс\n          ids: [145, 146, 147],\n        },\n        {\n          columnTitleId: 278, // Ошибка\n          ids: [149, 148, 150, 151],\n        },\n        {\n          columnTitleId: 279, // Нулевая подача\n          ids: [143, 142],\n        },\n      ],\n    },\n    {\n      type: 'popupWithHomePlayers',\n      title: 10518, // подающий\n    },\n    {\n      type: 'popupSimple',\n      title: 8367, // тип подачи\n      data: [162, 163],\n    },\n    {\n      type: 'popupSimple',\n      title: 10596, // характеристика\n      data: [154, 153, 152],\n    },\n    {\n      type: 'popupWithZones',\n      title: 8882,\n      data: [\n        {\n          zoneId: 156,\n          zoneNumber: 1,\n        },\n        {\n          zoneId: 161,\n          zoneNumber: 6,\n        },\n        {\n          zoneId: 160,\n          zoneNumber: 5,\n        },\n        {\n          zoneId: 157,\n          zoneNumber: 2,\n        },\n        {\n          zoneId: 158,\n          zoneNumber: 3,\n        },\n        {\n          zoneId: 159,\n          zoneNumber: 4,\n        },\n      ],\n    },\n    {\n      type: 'popupSimple',\n      title: 10602, // направление\n      data: [280, 281, 282, 283, 284, 285],\n    },\n  ],\n  serve_reception: [\n    {\n      type: 'popupSimple',\n      title: 10584, // Результат\n      data: [208, 209, 210],\n    },\n    {\n      type: 'popupWithHomePlayers',\n      title: 10642, // Принимающий (список команд с игроками)\n    },\n    {\n      type: 'popupSimple',\n      title: 10643, // амплуа принимающего\n      data: [271, 272, 286, 287, 288],\n    },\n    {\n      type: 'popupSimple',\n      title: 8375, // тип приема\n      data: [218, 217, 219],\n    },\n    {\n      type: 'popupWithPlayers',\n      title: 8833, // Кто подает\n    },\n    {\n      type: 'popupSimple',\n      title: 10591, // расстановка\n      data: [313, 314, 315, 316, 317, 318],\n    },\n  ],\n}\n\nexport const filterPopupByTabForPlayer: TFiltersConfig = {\n  attack: [\n    {\n      type: 'popupWithColumns',\n      title: 10584, // результат\n      data: [\n        {\n          columnTitleId: 1, // выигранное очко\n          ids: [2, 3, 4],\n        },\n        {\n          columnTitleId: 5, // проигранное очко\n          ids: [6, 7, 276, 274, 8, 9],\n        },\n        {\n          columnTitleId: 49, // нулевая атака\n          ids: [298, 299],\n        },\n      ],\n    },\n    {\n      type: 'popupSimple',\n      title: 8556, // комбинация\n      data: [16, 17, 10, 22, 14, 13, 12, 18, 19, 21, 20],\n    },\n    {\n      type: 'popupSimple',\n      title: 10657, // атаки с первого мяча\n      data: [307, 308, 309, 310, 311, 312],\n    },\n    {\n      type: 'popupSimple',\n      title: 8341, // разновидность атаки\n      data: [24, 25, 26, 28],\n    },\n    {\n      type: 'popupWithZones',\n      title: 10658, // направление атаки\n      data: [\n        {\n          zoneId: 41,\n          zoneNumber: 1,\n        },\n        {\n          zoneId: 46,\n          zoneNumber: 6,\n        },\n        {\n          zoneId: 45,\n          zoneNumber: 5,\n        },\n        {\n          zoneId: 42,\n          zoneNumber: 2,\n        },\n        {\n          zoneId: 43,\n          zoneNumber: 3,\n        },\n        {\n          zoneId: 44,\n          zoneNumber: 4,\n        },\n      ],\n    },\n    {\n      type: 'popupSimple',\n      title: 10668, // тип блока\n      data: [29, 30, 31, 32],\n    },\n  ],\n  attack_reception: [\n    {\n      type: 'popupSimple',\n      title: 10669, // результат приема\n      data: [304, 305, 166],\n    },\n    {\n      type: 'popupSimple',\n      title: 8366, // тип приема\n      data: [199, 198, 200],\n    },\n    {\n      type: 'popupWithZones',\n      style: 'home', // home - сторона поля своей команды\n      title: 8363, // Приемы атак в зоне\n      data: [\n        {\n          zoneId: 195,\n          zoneNumber: 4,\n        },\n        {\n          zoneId: 194,\n          zoneNumber: 3,\n        },\n        {\n          zoneId: 193,\n          zoneNumber: 2,\n        },\n        {\n          zoneId: 196,\n          zoneNumber: 5,\n        },\n        {\n          zoneId: 197,\n          zoneNumber: 6,\n        },\n        {\n          zoneId: 192,\n          zoneNumber: 1,\n        },\n      ],\n    },\n    {\n      type: 'popupSimple',\n      title: 8342, // Число блокирующих\n      data: [202, 203, 204, 205],\n    },\n  ],\n  block: [\n    {\n      type: 'popupWithColumns',\n      title: 10584, // Результат\n      data: [\n        {\n          columnTitleId: false,\n          ids: [275],\n        },\n        {\n          columnTitleId: 50, // выигранное очко\n          ids: [51, 53],\n        },\n        {\n          columnTitleId: 232, // проигранное очко\n          ids: [58, 55, 54, 56, 57],\n        },\n        {\n          columnTitleId: 10664, // нулевой блок\n          ids: [59, 60],\n        },\n      ],\n    },\n    {\n      type: 'popupWithHomePlayers',\n      title: 10665, // блокирующий\n    },\n    {\n      type: 'popupSimple',\n      title: 10666, // амплуа блокирующего\n      data: [300, 301, 302, 303],\n    },\n    {\n      type: 'popupSimple',\n      title: 10668, // тип блока\n      data: [71, 72, 73],\n    },\n    {\n      type: 'popupSimple',\n      title: 8343, // характеристика блока\n      data: [74, 75],\n    },\n  ],\n  pass: [\n    {\n      type: 'popupWithColumns',\n      title: 10584, // Результат\n      data: [\n        {\n          columnTitleId: 105, // ассист\n          ids: [289, 290],\n        },\n        {\n          columnTitleId: 104, // ошибка\n          ids: [103, 102],\n        },\n        {\n          columnTitleId: 306, // нулевая атака\n          ids: [291, 292],\n        },\n      ],\n    },\n    {\n      type: 'popupWithHomePlayers',\n      title: 10645, // пасующий\n    },\n    {\n      type: 'popupSimple',\n      title: 10646, // амплуа пасующего\n      data: [293, 294, 295, 296, 297],\n    },\n    {\n      type: 'popupSimple',\n      title: 10647, // тип передачи\n      data: [106, 107],\n    },\n    {\n      style: 'home', // home - сторона поля своей команды\n      type: 'popupWithZones',\n      title: 10648, // направление передачи\n      data: [\n        {\n          zoneId: 131,\n          zoneNumber: 4,\n        },\n        {\n          zoneId: 130,\n          zoneNumber: 3,\n        },\n        {\n          zoneId: 129,\n          zoneNumber: 2,\n        },\n        {\n          zoneId: 132,\n          zoneNumber: 5,\n        },\n        {\n          zoneId: 133,\n          zoneNumber: 6,\n        },\n        {\n          zoneId: 128,\n          zoneNumber: 1,\n        },\n      ],\n    },\n    {\n      style: 'home',\n      type: 'popupWithZones',\n      title: 10649, // зона передачи\n      data: [\n        {\n          zoneId: 137,\n          zoneNumber: 4,\n        },\n        {\n          zoneId: 136,\n          zoneNumber: 3,\n        },\n        {\n          zoneId: 135,\n          zoneNumber: 2,\n        },\n        {\n          zoneId: 138,\n          zoneNumber: 5,\n        },\n        {\n          zoneId: 139,\n          zoneNumber: 6,\n        },\n        {\n          zoneId: 134,\n          zoneNumber: 1,\n        },\n      ],\n    },\n  ],\n  serve: [\n    {\n      type: 'popupWithColumns',\n      title: 10584, // результат\n      data: [\n        {\n          columnTitleId: 10585, // Эйс\n          ids: [145, 146, 147],\n        },\n        {\n          columnTitleId: 278, // Ошибка\n          ids: [149, 148, 150, 151],\n        },\n        {\n          columnTitleId: 279, // Нулевая подача\n          ids: [143, 142],\n        },\n      ],\n    },\n    {\n      type: 'popupSimple',\n      title: 8367, // тип подачи\n      data: [162, 163],\n    },\n    {\n      type: 'popupSimple',\n      title: 10596, // характеристика\n      data: [154, 153, 152],\n    },\n    {\n      type: 'popupWithZones',\n      title: 8882,\n      data: [\n        {\n          zoneId: 156,\n          zoneNumber: 1,\n        },\n        {\n          zoneId: 161,\n          zoneNumber: 6,\n        },\n        {\n          zoneId: 160,\n          zoneNumber: 5,\n        },\n        {\n          zoneId: 157,\n          zoneNumber: 2,\n        },\n        {\n          zoneId: 158,\n          zoneNumber: 3,\n        },\n        {\n          zoneId: 159,\n          zoneNumber: 4,\n        },\n      ],\n    },\n    {\n      type: 'popupSimple',\n      title: 10602, // направление\n      data: [280, 281, 282, 283, 284, 285],\n    },\n  ],\n  serve_reception: [\n    {\n      type: 'popupSimple',\n      title: 10584, // Результат\n      data: [208, 209, 210],\n    },\n    {\n      type: 'popupSimple',\n      title: 8375, // тип приема\n      data: [218, 217, 219],\n    },\n    {\n      type: 'popupWithPlayers',\n      title: 8833, // Кто подает\n    },\n    {\n      type: 'popupSimple',\n      title: 10591, // расстановка\n      data: [313, 314, 315, 316, 317, 318],\n    },\n  ],\n}\n","export const lexic: {[key: number]: string} = {\n  1: '7726',\n  2: '7727',\n  3: '10650',\n  4: '10651',\n  5: '7730',\n  6: '7731',\n  7: '8710',\n  8: '10654',\n  9: '8711',\n  10: '7736',\n  12: '966',\n  13: '7738',\n  14: '7739',\n  16: '7741',\n  17: '7742',\n  18: '7743',\n  19: '7744',\n  20: '7745',\n  21: '7746',\n  22: '9884',\n  24: '7747',\n  25: '7748',\n  26: '7749',\n  28: '7751',\n  29: '7752',\n  30: '7753',\n  31: '7754',\n  32: '7755',\n  41: '7758',\n  42: '7759',\n  43: '7760',\n  44: '7761',\n  45: '7762',\n  46: '7763',\n  49: '10644',\n  50: '7726',\n  51: '8656',\n  53: '7737',\n  54: '10654',\n  55: '8711',\n  56: '10663',\n  57: '7773',\n  58: '8659',\n  59: '9880',\n  60: '8577',\n  70: '7752',\n  71: '7753',\n  72: '7754',\n  73: '7755',\n  74: '7756',\n  75: '7757',\n  102: '7780',\n  103: '7781',\n  104: '737',\n  105: '7783',\n  106: '7784',\n  107: '7785',\n  128: '7758',\n  129: '7759',\n  130: '7760',\n  131: '7761',\n  132: '7762',\n  133: '7763',\n  134: '7758',\n  135: '7759',\n  136: '7760',\n  137: '7761',\n  138: '7762',\n  139: '7763',\n  142: '7786',\n  143: '7787',\n  144: '10585',\n  145: '7789',\n  146: '7790',\n  147: '7791',\n  148: '8709',\n  149: '8710',\n  150: '8711',\n  151: '8650',\n  152: '8371',\n  153: '8372',\n  154: '8373',\n  156: '7758',\n  157: '7759',\n  158: '7760',\n  159: '7761',\n  160: '7762',\n  161: '7763',\n  162: '8368',\n  163: '8369',\n  166: '737',\n  186: '7758',\n  187: '7759',\n  188: '7760',\n  189: '7761',\n  190: '7762',\n  191: '7763',\n  192: '7758',\n  193: '7759',\n  194: '7760',\n  195: '7761',\n  196: '7762',\n  197: '7763',\n  198: '7784',\n  199: '7785',\n  200: '7802',\n  202: '7752',\n  203: '7753',\n  204: '7754',\n  205: '7755',\n  208: '7786',\n  209: '7787',\n  210: '737',\n  217: '7784',\n  218: '7785',\n  219: '7802',\n  232: '7730',\n  263: '7776',\n  264: '7778',\n  265: '7777',\n  266: '7779',\n  267: '7776',\n  268: '7778',\n  269: '7779',\n  270: '7887',\n  271: '7776',\n  272: '7887',\n  274: '10653',\n  275: '10659',\n  276: '8709',\n  278: '737',\n  279: '10785',\n  280: '9862',\n  281: '9863',\n  282: '9864',\n  283: '9865',\n  284: '9866',\n  285: '9867',\n  286: '7778',\n  287: '7777',\n  288: '7779',\n  289: '7781',\n  290: '7780',\n  291: '7781',\n  292: '7780',\n  293: '7779',\n  294: '7887',\n  295: '7776',\n  296: '7778',\n  297: '7777',\n  298: '8653',\n  299: '8577',\n  300: '7777',\n  301: '7778',\n  302: '7776',\n  303: '7779',\n  304: '10670',\n  305: '10671',\n  306: '10644',\n  307: '9862',\n  308: '9863',\n  309: '9864',\n  310: '9865',\n  311: '9866',\n  312: '9867',\n  313: '9862',\n  314: '9863',\n  315: '9864',\n  316: '9865',\n  317: '9866',\n  318: '9867',\n}\n","import { inject, observer } from 'mobx-react'\nimport { compose, withHandlers } from 'recompose'\nimport some from 'lodash/some'\nimport cx from 'classnames'\nimport { lexic } from 'config/lexics/filtersById'\n\ntype TPopupHoc = {\n  filters: {\n    tempSelectedFilters: {[key: number]: {}},\n  },\n}\n// Для попапа с основной общей логикой для попап окон в блоке фильтров\nexport const PopupHOC = (wrappedComponent: any) =>\n  compose(\n    inject('filters'),\n    withHandlers<TPopupHoc, {}>({\n      getFilterLexics: () => (id: number) => lexic[id] || id,\n      getItemClassName: ({\n        filters: { tempSelectedFilters },\n      }) => (id: number) =>\n        cx('popup-column__item', {\n          'popup-column__item_checked': tempSelectedFilters[id],\n        }),\n      getTitleClassName: ({ filters: { tempSelectedFilters } }) => (\n        (ids: Array<number>) => (\n          cx('popup-column__title', {\n            'popup-column__title_checked': some(\n              ids,\n              id => tempSelectedFilters[id],\n            ),\n          })\n        )\n      ),\n    }),\n    observer,\n  )(wrappedComponent)\n","import React, { Fragment } from 'react'\n\nimport map from 'lodash/map'\n\nimport { T9n } from 'react-sport'\n\nimport { PopupHOC } from '../PopupHOC'\n\nimport { TPropsCommon } from '../types'\n\ntype TProps = TPropsCommon & {\n  data: Array<{\n    columnTitleId: number | false,\n    ids: Array<number>,\n    zoneId: number,\n    zoneNumber: number,\n  }>,\n}\n\n// Попап с фильтрами, которые разбиты по группам (в колонку) с заголовком у каждой группы\n// Если нет заголовка, то отображаем просто список фильтров\nconst ColumnsPopupComponent = ({\n  data,\n  filters: { handleAllTempCheck, handleTempCheck },\n  getFilterLexics,\n  getItemClassName,\n  getTitleClassName,\n  toggleOpenClose,\n}: TProps) => (\n  <Fragment>\n    <div className='popup-column__wrapper'>\n      {map(data, ({ columnTitleId, ids }, idx) => (\n        <div className='popup-column__container' key={columnTitleId || idx}>\n          {columnTitleId && (\n            <div\n              className={getTitleClassName(ids)}\n              onClick={() => handleAllTempCheck(ids)}\n            >\n              <T9n t={getFilterLexics(columnTitleId)} />\n            </div>\n          )}\n          <ul className='popup-column__list'>\n            {map(ids, id => (\n              <li\n                className={getItemClassName(id)}\n                key={id}\n                onClick={() => handleTempCheck(id)}\n              >\n                <T9n t={getFilterLexics(id)} />\n              </li>\n            ))}\n          </ul>\n        </div>\n      ))}\n    </div>\n    <button className='map-block__popup-button' onClick={toggleOpenClose}>\n        OK\n    </button>\n  </Fragment>\n)\n\nexport const ColumnsPopup = PopupHOC(ColumnsPopupComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withHandlers,\n  withProps,\n} from 'recompose'\nimport cx from 'classnames'\nimport map from 'lodash/map'\n\nimport { PopupHOC } from '../PopupHOC'\n\nimport {\n  TProps,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n  TComposeInner,\n  TWithPropsInner,\n  TWithPropsOuter,\n} from './types'\n\n// Попап с зонами поля\nconst ZonesPopupComponent = ({\n  data,\n  fieldClassName,\n  filters: { handleTempCheck },\n  getZoneClassName,\n  toggleOpenClose,\n}: TProps) => (\n  <div className='map-block__popup'>\n    <ul className={fieldClassName}>\n      {map(data, ({ zoneId, zoneNumber }) => (\n        <li\n          className={getZoneClassName(zoneId)}\n          key={zoneId}\n          onClick={() => handleTempCheck(zoneId)}\n        >\n          {zoneNumber}\n        </li>\n      ))}\n    </ul>\n    <button className='map-block__popup-button' onClick={toggleOpenClose}>\n        OK\n    </button>\n  </div>\n)\n\nconst zonesPopupComposed = compose<TComposeInner, {}>(\n  inject('filters'),\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(({\n    style,\n  }) => ({\n    fieldClassName: cx('map-block__popup-zone-list', {\n      'map-block__popup-zone-list_home': style === 'home',\n    }),\n  })),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    getZoneClassName: ({ filters: { tempSelectedFilters } }) => id =>\n      cx('map-block__popup-zone', {\n        'map-block__popup-zone_active': tempSelectedFilters[id],\n      }),\n  }),\n  PopupHOC,\n)\n\nexport const ZonesPopup = zonesPopupComposed(ZonesPopupComponent)\n","import React, { Fragment } from 'react'\nimport map from 'lodash/map'\nimport { T9n } from 'react-sport'\nimport { PopupHOC } from '../PopupHOC'\nimport { TPropsCommon } from '../types'\n\ntype TProps = TPropsCommon & {\n  data: Array<number>,\n}\n\n// Обычный попап с фильтрами в столбик\nconst PopupSimpleComponent = ({\n  data,\n  filters: { handleTempCheck },\n  getFilterLexics,\n  getItemClassName,\n  toggleOpenClose,\n}: TProps) => (\n  <Fragment>\n    <div className='popup-column__wrapper'>\n      <div className='popup-column__container'>\n        <ul className='popup-column__list'>\n          {map(data, id => (\n            <li\n              className={getItemClassName(id)}\n              key={id}\n              onClick={() => handleTempCheck(id)}\n            >\n              <T9n t={getFilterLexics(id)} />\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n    <button className='map-block__popup-button' onClick={toggleOpenClose}>\n      OK\n    </button>\n  </Fragment>\n)\n\nexport const PopupSimple = PopupHOC(PopupSimpleComponent)\n","import React, { Fragment } from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withProps,\n  withHandlers,\n} from 'recompose'\nimport cx from 'classnames'\nimport map from 'lodash/map'\nimport size from 'lodash/size'\n\nimport { getLongSuffix } from 'module/utils/helpers'\nimport {\n  TProps,\n  TWithPropsOuter,\n  TWithPropsInner,\n  TPlayer,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n  TPropsOuter,\n} from './types'\n\nimport { PopupHOC } from '../PopupHOC'\n\n// Попап со списком игроков разбитым по командам\nconst PopupWithPlayersComponent = ({\n  filters: { handleAllTempCheck, handleTempCheck },\n  getFullName,\n  getItemClassName,\n  getPlayersId,\n  getTitleClassName,\n  mapShoot: { data },\n  suffix,\n  toggleOpenClose,\n  type,\n}: TProps) => (\n  <Fragment>\n    <div\n      className={cx(\n        'popup-column__wrapper',\n        { 'popup-column__wrapper_wide': size(data) >= 3 },\n        { 'popup-column__wrapper_narrow': size(data) < 2 },\n      )}\n    >\n      {map(data, ({\n        f_team: teamId,\n        prop_player: playersList,\n        ...team\n      }) => (\n        <div className='popup-column__container' key={teamId}>\n          <div\n            className={getTitleClassName(getPlayersId(playersList))}\n            onClick={() =>\n              handleAllTempCheck(getPlayersId(playersList), type)\n            }\n          >\n            <span>{team[`name_${suffix}`]}</span>\n          </div>\n          <ul className='popup-column__list'>\n            {map(playersList, ({ player_id: playerId, ...player }) => (\n              <li\n                className={getItemClassName(`${playerId}_player`)}\n                key={playerId}\n                onClick={() => handleTempCheck(`${playerId}_player`, type)}\n              >\n                <span>{getFullName(player)}</span>\n              </li>\n            ))}\n          </ul>\n        </div>\n      ))\n      }\n    </div>\n    <button className='map-block__popup-button' onClick={toggleOpenClose}>\n      OK\n    </button>\n  </Fragment>\n)\n\nconst popupWithPlayersComposed = compose<TProps, TPropsOuter>(\n  inject('mapShoot', 'lexics'),\n  withProps<TWithPropsInner, TWithPropsOuter>(({ lexics: { lang } }) => ({\n    suffix: getLongSuffix(lang),\n  })),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    getFullName: ({ suffix }) => (player: TPlayer) =>\n      `${player[`firstname_${suffix}`]} ${player[`lastname_${suffix}`]}`,\n\n    getPlayersId: () => (players: Array<{player_id: number}>) =>\n      map(players, ({ player_id }) => `${player_id}_player`),\n  }),\n  PopupHOC,\n  observer,\n)\n\nexport const PopupWithPlayers = popupWithPlayersComposed(PopupWithPlayersComponent)\n","import React, { Fragment } from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withProps,\n  withHandlers,\n} from 'recompose'\nimport map from 'lodash/map'\nimport filter from 'lodash/filter'\n\nimport { getLongSuffix } from 'module/utils/helpers'\nimport { PopupHOC } from '../PopupHOC'\n\nimport {\n  TProps,\n  TWithPropsInner,\n  TWithHandlersOuter,\n  TWithPropsOuter,\n  TPlayer,\n  TComposeOuter,\n} from './types'\n\n// Попап со списком игроков разбитым по командам\nconst PopupWithHomePlayersComponent = ({\n  filters: { handleTempCheck },\n  getFullName,\n  getItemClassName,\n  playersList,\n  toggleOpenClose,\n  type,\n}: TProps) => (\n  <Fragment>\n    <div className='popup-column__wrapper'>\n      <ul className='popup-column__list'>\n        {map(playersList, ({ f_player: playerId, prop_player: player }) => (\n          <li\n            className={getItemClassName(`${playerId}_player`)}\n            key={playerId}\n            onClick={() => handleTempCheck(`${playerId}_player`, type)}\n          >\n            <span>{getFullName(player[0])}</span>\n          </li>\n        ))}\n      </ul>\n    </div>\n    <button className='map-block__popup-button' onClick={toggleOpenClose}>\n      OK\n    </button>\n  </Fragment>\n)\n\nconst popupWitHomePlayersComposed = compose<TComposeOuter, TProps>(\n  inject(\n    'playerInfo',\n    'lexics',\n    'playerProfile',\n  ),\n  observer,\n  withProps<TWithPropsOuter, TWithPropsInner>(\n    ({\n      lexics: { lang },\n      playerInfo: { basicData },\n      playerProfile: { profile },\n    }) => ({\n      playersList: profile\n        ? filter(\n          basicData, ({ f_player }: {f_player: number}) => f_player !== profile.id,\n        )\n        : basicData,\n      suffix: getLongSuffix(lang),\n    }),\n  ),\n  withHandlers<TWithPropsOuter, TWithHandlersOuter>({\n    getFullName: ({ suffix }) => (player: TPlayer) =>\n      `${player[`firstname_${suffix}`]} ${player[`lastname_${suffix}`]}`,\n  }),\n  PopupHOC,\n  observer,\n)\n\nexport const PopupWithHomePlayers = popupWitHomePlayersComposed(PopupWithHomePlayersComponent)\n","import React from 'react'\nimport { compose } from 'recompose'\n\nimport { OutsideClick } from 'react-sport'\nimport { ColumnsPopup } from './FilterPopup/ColumnsPopup'\nimport { ZonesPopup } from './FilterPopup/ZonesPopup'\nimport { PopupSimple } from './FilterPopup/PopupSimple'\nimport { PopupWithPlayers } from './FilterPopup/PopupWithPlayers'\nimport { PopupWithHomePlayers } from './FilterPopup/PopupWithHomePlayers'\nimport './FilterPopup/filterPopup.scss'\n\nconst FilterMenuComponent = ({ type, ...props }: {type: string}) => (\n  <div className='map-block__menu'>\n    {type === 'popupWithColumns' && <ColumnsPopup {...props} />}\n    {type === 'popupWithZones' && <ZonesPopup {...props} />}\n    {type === 'popupSimple' && <PopupSimple {...props} />}\n    {type === 'popupWithPlayers' && (\n      <PopupWithPlayers type={type} {...props} />\n    )}\n    {type === 'popupWithHomePlayers' && (\n      //@ts-ignore\n      <PopupWithHomePlayers type={type} {...props} />\n    )}\n  </div>\n)\n\nconst filterMenuComposed = compose<{type: string}, {}>(\n  OutsideClick,\n)\n\nexport const FilterMenu = filterMenuComposed(FilterMenuComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers } from 'recompose'\nimport find from 'lodash/find'\nimport map from 'lodash/map'\n\nimport { T9n } from 'react-sport'\n\nimport { getLongSuffix } from 'module/utils/helpers'\n\nimport { lexic } from 'config/lexics/filtersById'\n\nimport {\n  TProps,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n  TPlayer,\n  TComposeOuter,\n  TComposeInner,\n} from './types'\n\nconst FilterSubMenuComponent = ({\n  checkedInGroup,\n  getFullName,\n  handleUncheck,\n}: TProps) => (\n  <ul className='checked-list'>\n    {map(checkedInGroup, ({ id, player_id }) => (\n      <li className='checked-list__item' key={id || player_id}>\n        {player_id ? (\n          <span className='checked-list__item-name'>\n            {getFullName(player_id)}\n          </span>\n        ) : (\n          <T9n className='checked-list__item-name' t={lexic[Number(id)]} />\n        )}\n        <i\n          className='checked-list__item-remove'\n          onClick={() => handleUncheck(id || `${player_id}_player`)}\n        />\n      </li>\n    ))}\n  </ul>\n)\n\nconst filterSubMenuComposed = compose<TComposeInner, TComposeOuter>(\n  inject('lexics'),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    getFullName: ({\n      checkedInGroup,\n      lexics: { lang },\n    }) => (playerId) => {\n      const suffix = getLongSuffix(lang)\n      const player: TPlayer = find(checkedInGroup, { player_id: playerId }) || {}\n      const fullName = `${player[`firstname_${suffix}`]} ${\n        player[`lastname_${suffix}`]\n      }`\n      return fullName\n    },\n  }),\n  observer,\n)\n\nexport const FilterSubMenu = filterSubMenuComposed(FilterSubMenuComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withProps,\n  withState,\n  withHandlers,\n} from 'recompose'\nimport includes from 'lodash/includes'\nimport filter from 'lodash/filter'\nimport cx from 'classnames'\n\nimport { T9n } from 'react-sport'\n\nimport { getCheckedFiltersSubMenu } from 'module/utils/helpers'\nimport { FilterMenu } from './FilterMenu'\nimport { FilterSubMenu } from './FilterSubMenu'\n\nimport {\n  TProps,\n  TWithHandlersOuter,\n  TWithPropsOuter,\n  TComposeInner,\n  TWithHandlersInner,\n  TWithPropsInner,\n} from './types'\n\nconst FilterItemComponent = ({\n  checkedInGroup,\n  clickOutside,\n  data,\n  filters: {\n    handleUncheck,\n  },\n  getMenuClassName,\n  menuOpened,\n  style,\n  title,\n  toggleOpenClose,\n  type,\n}: TProps) => (\n  <div className='map-block__filters-row'>\n    <span className={getMenuClassName()} onClick={toggleOpenClose}>\n      <T9n t={title} />\n    </span>\n    {menuOpened\n        && (\n          //@ts-ignore\n          <FilterMenu\n            type={type}\n            data={data}\n            style={style}\n            clickOutside={clickOutside}\n            toggleOpenClose={toggleOpenClose}\n          />\n        )\n    }\n    <FilterSubMenu\n      checkedInGroup={checkedInGroup}\n      handleUncheck={handleUncheck}\n    />\n  </div>\n)\n\nconst filterItemComposed = compose<TComposeInner, TProps>(\n  inject(\n    'filters',\n    'mapShoot',\n    'playerInfo',\n  ),\n  withState('menuOpened', 'menuToggle', false),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    clickOutside: ({\n      filters: { toggleOpenMenu },\n      menuOpened,\n      menuToggle,\n    }) => () => {\n      menuToggle(!menuOpened)\n      toggleOpenMenu('reset')\n    },\n    getMenuClassName: ({ menuOpened }) => () => cx(\n      'map-block__title',\n      { 'map-block__title_active': menuOpened },\n    ),\n    toggleOpenClose: ({\n      filters: { toggleOpenMenu },\n      menuOpened,\n      menuToggle,\n    }) => () => {\n      menuToggle(!menuOpened)\n      toggleOpenMenu()\n    },\n  }),\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(({\n    data: idsFromConfig,\n    filters: { checked },\n    mapShoot,\n    playerInfo,\n    type,\n  }) => {\n    const getIds = () => {\n      switch (type) {\n        case 'popupWithPlayers':\n          return mapShoot.playersIds\n        case 'popupWithHomePlayers':\n          return playerInfo.playersIds\n        default:\n          return idsFromConfig\n      }\n    }\n    const ids = getIds()\n    const filtered = getCheckedFiltersSubMenu(ids, type)\n    const keyNormalized = (key: string) => (\n      includes(['popupWithPlayers', 'popupWithHomePlayers'], type)\n        ? key\n        : Number(key)\n    )\n    const checkedInGroup = filter(checked, (value, key) => (\n      includes(filtered, keyNormalized(key))))\n\n    return { checkedInGroup }\n  }),\n  observer,\n)\n\nexport const FilterItem = filterItemComposed(FilterItemComponent)\n","import React, { Fragment } from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  lifecycle,\n  withProps,\n} from 'recompose'\nimport map from 'lodash/map'\n\nimport {\n  TWithPropsInner,\n  TComposeInner,\n  TWithPropsOuter,\n  TLifeCycle,\n} from './types'\nimport { filterPopupByTab, filterPopupByTabForPlayer } from './config'\n\nimport { FilterItem } from './FilterItem'\n\n\nconst MapFiltersComponent = ({ filtersList }: TWithPropsInner) => (\n  <Fragment>\n    {map(\n      filtersList,\n      ({\n        data,\n        style,\n        title,\n        type,\n      }) => (\n      //@ts-ignore\n        <FilterItem\n          key={title}\n          type={type}\n          title={title}\n          data={data}\n          style={style}\n        />\n      ),\n    )}\n  </Fragment>\n)\n\nconst mapFiltersComposed = compose<TComposeInner, {}>(\n  inject(\n    'tabs',\n    'filters',\n    'lexics',\n  ),\n  withProps<TWithPropsInner, TWithPropsOuter>(({\n    lexics: { page },\n    tabs: { active },\n  }) => ({\n    filtersList: page === 'player'\n      ? filterPopupByTabForPlayer[active]\n      : filterPopupByTab[active],\n  })),\n  lifecycle<TLifeCycle, {}>({\n    componentDidMount() {\n      const { fetch, loaded } = this.props.filters\n      if (!loaded) {\n        fetch()\n      }\n    },\n  }),\n  observer,\n)\n\nexport const MapFilters = mapFiltersComposed(MapFiltersComponent)\n","import get from 'lodash/get'\n\n// @ts-ignore\nimport { getLongSuffix, getSuffix } from 'module/utils/helpers'\n\n/** Получение полного имени игрока (англ/русский)\n * @param {object} player - объект игрока\n * @param {string} lang - язык (ru, rus, en, eng)\n * @param {bool} long - форма языка (прим. ru или rus)\n */\nexport function getPlayerFullName({\n  lang,\n  long,\n  player,\n}: {\n  player: {},\n  lang: string,\n  //@ts-ignore\n  long: bool,\n}): string {\n  const suffix = long ? getLongSuffix(lang) : getSuffix(lang)\n  const firstName = get(player, `firstname_${suffix}`, '')\n  const lastName = get(player, `lastname_${suffix}`, '')\n\n  return `${firstName} ${lastName}`\n}\n","\nimport React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose } from 'recompose'\n\n// @ts-ignore\nimport { getPlayerFullName } from 'module/utils/helpers/getPlayerFullName'\n\ntype TProps = {\n  player: {},\n  lexics: { lang: string },\n};\n\nconst PlayerNameComponent = ({ lexics: { lang }, player }: TProps) => (\n  <span>{getPlayerFullName({ player, lang, long: true })}</span>\n)\n\nconst playerNameComposed = compose(\n  inject('lexics'),\n  observer,\n)\n\n// @ts-ignore\nexport const PlayerName = playerNameComposed(PlayerNameComponent)\n","import React from 'react'\nimport { observer, inject } from 'mobx-react'\n\nimport { withHandlers, compose, withProps } from 'recompose'\nimport map from 'lodash/map'\nimport flatten from 'lodash/flatten'\nimport values from 'lodash/values'\nimport get from 'lodash/get'\nimport find from 'lodash/find'\nimport head from 'lodash/head'\nimport includes from 'lodash/includes'\nimport pipe from 'lodash/fp/pipe'\n\nimport { SimpleDropdown } from 'react-sport'\n\n// @ts-ignore\nimport { getPlayerFullName } from 'module/utils/helpers/getPlayerFullName'\n\nimport { PlayerName } from './PlayerName'\n\ntype TProps = {\n  matchTable: {\n    playerList: {},\n  },\n  team1: number,\n  team2: number,\n  playersCompareWidget: {\n    selectedPlayers: {},\n  },\n  getPlayerNumber: (playerId: number) => number,\n  selectPlayer: (player: {}) => void,\n  getPlaceholder: (arg: Array<{ f_player: number }>) => string,\n  getTeamPlayers: (value: number) => Array<{ f_player: number }>,\n}\n\n// Компонент с двумя выпадающими меню, игроки команд в профиле матча\nconst PlayersSelectComponent = ({\n  getPlaceholder,\n  getPlayerNumber,\n  getTeamPlayers,\n  selectPlayer,\n  team1,\n  team2,\n}: TProps) => (\n  <div className='t-compare__teams'>\n    {map([team1, team2], team => (\n      <div key={team} className='t-compare__player'>\n        {/*\n        //@ts-ignore */}\n        <SimpleDropdown placeholder={getPlaceholder(getTeamPlayers(team))}>\n          {map(getTeamPlayers(team), player => (\n            //@ts-ignore\n            <div key={player.f_player} onClick={selectPlayer(player)}>\n              <span className='t-compare__player-num'>\n                {getPlayerNumber(player.f_player)}\n              </span>\n              <span className='t-compare__player-name'>\n                {/*\n                //@ts-ignore */}\n                <PlayerName player={player} />\n              </span>\n            </div>\n          ))}\n        </SimpleDropdown>\n      </div>\n    ))}\n  </div>\n)\n\nconst playersSelectComposed = compose(\n  inject('lexics', 'playersCompareWidget', 'matchTable', 'matchProfile'),\n  observer,\n  //@ts-ignore\n  withProps(({ lexics: { lang } }) => ({ lang })),\n  //@ts-ignore\n  withHandlers({\n    getPlayerNumber: ({\n      matchTable: { playerList },\n      //@ts-ignore\n    }) => (playerId) => {\n      const players = pipe(\n        values,\n        flatten,\n      )(playerList)\n\n      //@ts-ignore\n      return get(find(players, { f_player: playerId }, {}), 'num', '')\n    },\n    selectPlayer: ({\n      lexics: { lang },\n      matchProfile: { matchId },\n      playersCompareWidget: { selectedPlayers, updateSelectedPlayers },\n      //@ts-ignore\n    }) => player => () => {\n      if (!includes(values(selectedPlayers), player.f_player)) {\n        updateSelectedPlayers({\n          lang,\n          matchId,\n          players: [player],\n        })\n      }\n    },\n  }),\n  //@ts-ignore\n  withHandlers({\n    getTeamPlayers: ({ matchTable: { playerList } }) =>\n      //@ts-ignore\n      team => get(playerList, `${team}`, []),\n    getPlaceholder: ({\n      getPlayerNumber,\n      lexics: { lang },\n      //@ts-ignore\n    }) => (players) => {\n      const defaultPlayer = head(players) || {}\n      const fullName = getPlayerFullName({\n        //@ts-ignore\n        player: defaultPlayer,\n        lang,\n        long: true,\n      })\n      const number = getPlayerNumber(get(defaultPlayer, 'f_player'))\n      return (\n        <div key={number}>\n          <span className='t-compare__player-num'>{number}</span>\n          <span className='t-compare__player-name'>{fullName}</span>\n        </div>\n      )\n    },\n  }),\n  observer,\n)\n\n// @ts-ignore\nexport const PlayersSelect = playersSelectComposed(PlayersSelectComponent)\n","import React from 'react'\n\ntype TProps = {\n  stats: Array<{\n    param: number,\n    //@ts-ignore\n    param_name: string | null,\n    //@ts-ignore\n    param_name_short: string | null,\n  }>,\n  selectedPlayers: {},\n  team1: number,\n  team2: number,\n  getStatValue: (param: number, playerId: number) => number | string,\n  getClassName: (param: number, playerId: number) => string,\n  getExtLink: (\n    param: number,\n    param_name: string,\n    playerId: number\n  ) => void,\n}\n\nexport const PlayersStats = ({\n  getClassName,\n  getExtLink,\n  getStatValue,\n  selectedPlayers,\n  stats,\n  team1,\n  team2,\n}: TProps) => (\n  <div className='t-compare__stats-container'>\n    {stats.map(({\n      param,\n      param_name,\n      param_name_short,\n    }, index) => (\n      <div\n        key={`${param}_${param_name_short}_${index}`}\n        className='t-compare__stats-row'\n      >\n        <span\n          //@ts-ignore\n          className={getClassName(param, selectedPlayers[team1])}\n              //@ts-ignore\n          onClick={() => getExtLink(param, param_name, selectedPlayers[team1])}\n        >\n          {/*\n          //@ts-ignore */}\n          {getStatValue(param, selectedPlayers[team1])}\n        </span>\n        <span className='t-compare__stats-name'>{param_name}</span>\n        <span\n          //@ts-ignore\n          className={getClassName(param, selectedPlayers[team2])}\n              //@ts-ignore\n          onClick={() => getExtLink(param, param_name, selectedPlayers[team2])}\n        >\n          {/*\n          //@ts-ignore */}\n          {getStatValue(param, selectedPlayers[team2])}\n        </span>\n      </div>\n    ))}\n  </div>\n)\n\nexport default PlayersStats\n","import { inject, observer } from 'mobx-react'\n\nimport {\n  withHandlers,\n  compose,\n\n} from 'recompose'\nimport cx from 'classnames'\nimport find from 'lodash/find'\nimport get from 'lodash/get'\n\nimport { getLongSuffix } from 'module/utils/helpers'\n\nimport { TOuterProps, TInnerProps } from './types'\n\nexport const playersInfoComposed = compose<TOuterProps, TInnerProps>(\n  inject(\n    'lexics',\n    'videoLink',\n    'shootsRange',\n    'matchTable',\n    'playersCompareWidget',\n  ),\n  //@ts-ignore\n  withHandlers({\n    getPlayerParams: ({\n      playersCompareWidget: { playersInfo },\n      //@ts-ignore\n    }) => playerId => get(playersInfo, [playerId, 'params'], []),\n  }),\n  //@ts-ignore\n  withHandlers({\n    getImage: ({\n      playersCompareWidget: { playersInfo },\n      //@ts-ignore\n    }) => playerId => key => get(playersInfo, [playerId, key], ''),\n    //@ts-ignore\n    getStatValue: ({ getPlayerParams }) => (param, playerId) => {\n      const value = get(\n        find(getPlayerParams(playerId), { param }), 'value',\n      )\n      return value ? value.toFixed() : '-'\n    },\n    //@ts-ignore\n    getClassName: ({ getPlayerParams }) => (param, playerId) => {\n      const hasVideo = get(\n        find(getPlayerParams(playerId), { param }),\n        'f_match_event_ids',\n      )\n\n      return cx(\n        't-compare__stats-num',\n        { 't-compare__clickable-cell': hasVideo },\n      )\n    },\n\n    getExtLink: ({\n      getPlayerParams,\n      lexics: { lang },\n      playersCompareWidget: { playerList },\n      shootsRange,\n      videoLink: { request },\n    }) => (\n      //@ts-ignore\n      param,\n      //@ts-ignore\n      param_name,\n      //@ts-ignore\n      playerId,\n    ) => {\n      //@ts-ignore\n      const events: Array<any> = get(\n        find(getPlayerParams(playerId), { param }),\n        'f_match_event_ids',\n      )\n      const player = get(\n        find(playerList, { f_player: playerId }),\n        'prop_player[0]',\n        {},\n      )\n      const suffix = getLongSuffix(lang)\n\n      if (events) {\n        request({\n          events,\n          range: shootsRange,\n          lang,\n          playerInfo: `${player[`firstname_${suffix}`]} ${player[`lastname_${suffix}`]}`,\n          lexical_formula: param_name,\n          type: 'widgets',\n          widgetType: 'playersCompare',\n        })\n      }\n    },\n  }),\n  observer,\n)\n","import React, { Fragment } from 'react'\n\nimport { T9n, utils } from 'react-sport'\n\nimport { TOuterProps } from './types'\nimport PlayersStats from '../PlayersStats'\nimport { playersInfoComposed } from './composed'\n\nconst {\n  helpers: { onProfileImageError },\n} = utils\n\nconst PlayersInfoComponent = ({\n  getClassName,\n  getExtLink,\n  getImage,\n  getStatValue,\n  playersCompareWidget: { sortedStats },\n  selectedPlayers,\n  team1,\n  team2,\n}: TOuterProps) => (\n  <Fragment>\n    <div className='t-compare__control-row'>\n      <div className='t-compare__logo-container t-compare__logo-container_player'>\n        <img\n          className='t-compare__logo t-compare__logo_player'\n          //@ts-ignore\n          src={getImage(selectedPlayers[team1])('photo_team')}\n          alt='logoTeam'\n          onError={e => onProfileImageError(e, 'team')}\n        />\n        <img\n          className='t-compare__logo'\n          //@ts-ignore\n          src={getImage(selectedPlayers[team1])('photo_player')}\n          alt='logoPlayer'\n          onError={onProfileImageError}\n        />\n      </div>\n\n      <div className='t-compare__controls t-compare__controls_player'>\n        <T9n className='t-compare__toggler' t='match' />\n      </div>\n\n      <div className='t-compare__logo-container t-compare__logo-container_player'>\n        <img\n          className='t-compare__logo t-compare__logo_player t-compare__logo_player-right'\n          //@ts-ignore\n          src={getImage(selectedPlayers[team2])('photo_team')}\n          alt='logoTeam'\n          onError={e => onProfileImageError(e, 'team')}\n        />\n        <img\n          className='t-compare__logo'\n          //@ts-ignore\n          src={getImage(selectedPlayers[team2])('photo_player')}\n          alt='logoPlayer'\n          onError={onProfileImageError}\n        />\n      </div>\n    </div>\n\n    <PlayersStats\n      //@ts-ignore\n      stats={sortedStats}\n      team1={team1}\n      team2={team2}\n      getStatValue={getStatValue}\n      getClassName={getClassName}\n      getExtLink={getExtLink}\n      selectedPlayers={selectedPlayers}\n    />\n  </Fragment>\n)\n\nexport const PlayersInfo = playersInfoComposed(PlayersInfoComponent)\n","import React from 'react'\nimport { T9n } from 'react-sport'\n\nimport { DndParams, GearTable } from 'features/GearPopup/'\n\nimport { PlayersComparePupupComposed } from './PlayersComparePopupComposed'\n\ntype TProps = {\n  //@ts-ignore\n  lexics: { getLexics: (string) => string },\n  onApply: () => void,\n  //@ts-ignore\n  onClose: (value: string | null) => void,\n  playersCompareWidget: {},\n}\n\n// Попап окно с параметрами (шестеренка)\nexport const PlayersComparePopupComponent = ({\n  lexics: { getLexics },\n  onApply,\n  onClose,\n  playersCompareWidget,\n}: TProps) => (\n  <div className='popup popup-modern popup-modern_position-left popup-modern_active'>\n    <div className='popup-inner'>\n      <div className='popup-row-header'>\n        <h3 className='popup-title'>\n          <T9n t='main_statisctic' />\n        </h3>\n        {/*\n          //@ts-ignore */}\n        <span className='popup-close' onClick={onClose} />\n\n      </div>\n      <div className='popup-row-container'>\n        <GearTable\n          currentStore={playersCompareWidget}\n          ampluaId={0}\n        />\n      </div>\n      <div className='popup-column-aside'>\n        <DndParams />\n      </div>\n      <div className='popup-row-footer'>\n        <div className='popup-buttons'>\n          <input\n            //@ts-ignore\n            onClick={onClose}\n            type='button'\n            value={getLexics('cancel')}\n            className='popup-cancel'\n          />\n          <input\n            onClick={onApply}\n            type='button'\n            value={getLexics('ok')}\n            className='popup-submit'\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n)\n\n//@ts-ignore\nexport const PlayersComparePopup = PlayersComparePupupComposed(PlayersComparePopupComponent)\n","\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers, lifecycle } from 'recompose'\n\ntype TInnerProps = {\n  handlePopupAction: () => void,\n};\n\ntype TOuterProps = {\n  matchProfile: {},\n  teamProfile: {},\n  matchTable: {},\n  lexics: {},\n  playersCompareWidget: {},\n  gearPopupStore: {},\n  onApply: () => void,\n  onClose: () => void,\n};\n\nexport const PlayersComparePupupComposed = compose<\nTOuterProps & TInnerProps,\nTInnerProps\n>(\n  inject(\n    'matchProfile',\n    'teamProfile',\n    'matchTable',\n    'lexics',\n    'playersCompareWidget',\n    'gearPopupStore',\n  ),\n  //@ts-ignore\n  withHandlers({\n    /**\n     * Запись в стор выбранных параметров в попапе шестеренки\n     * @param {func} saveTempParams - функция сохранения параметров\n     * @param {func} handlePopupAction - функция закрытия попапа\n     * @param {string} lang - выбранный язык\n     * @param {string} matchId - id матча\n     */\n    onApply: ({\n      gearPopupStore: { tempSelected },\n      handlePopupAction,\n      lexics: { lang },\n      matchProfile: { matchId },\n      playersCompareWidget: { saveTempParams },\n    }) => () => {\n      saveTempParams({\n        lang,\n        matchId,\n        params: tempSelected,\n      })\n      handlePopupAction()\n    },\n    /**\n     * Закрытие попапа шестеренки\n     * @param {func} editTempSelected - функция очищения выбранных параметров\n     * @param {func} handlePopupAction - функция закрытия попапа\n     *\n     */\n    onClose: ({\n      gearPopupStore: { eraseTempSelected },\n      handlePopupAction,\n    }) => () => {\n      eraseTempSelected()\n      handlePopupAction()\n    },\n  }),\n  lifecycle({\n    componentDidMount() {\n      const {\n        //@ts-ignore\n        gearPopupStore: { fillTempSelected },\n        //@ts-ignore\n        playersCompareWidget: { selectedParams },\n      } = this.props\n      fillTempSelected(selectedParams)\n    },\n  }),\n  observer,\n)\n","\nimport React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers, withState } from 'recompose'\n\nimport { T9n } from 'react-sport'\n\nimport { PlayersComparePopup } from './PlayersComparePopup'\n\ntype TProps = {\n  handlePopupAction: () => void,\n  popupOpened: boolean,\n};\n\nconst PlayerCompareHeader = ({ handlePopupAction, popupOpened }: TProps) => (\n  <div className='t-compare__header'>\n    <T9n className='t-compare__title' t='players_table' />\n    <a className='t-compare__gear-options' onClick={handlePopupAction}>\n      <i className='icon-settings' />\n    </a>\n    {popupOpened && (\n      <PlayersComparePopup handlePopupAction={handlePopupAction} />\n    )}\n  </div>\n)\n\nconst PlayerCompareHeaderComposed = compose(\n  inject('lexics', 'videoLink', 'shootsRange', 'matchTable'),\n  withState('popupOpened', 'openPopup', false),\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    handlePopupAction: ({ openPopup }) => () => openPopup(n => !n),\n  }),\n  observer,\n  //@ts-ignore\n)(PlayerCompareHeader)\n\nexport default PlayerCompareHeaderComposed\n","export const defaultParams = [\n  239,\n  219,\n  102,\n  101,\n  103,\n  175,\n  124,\n  137,\n  158,\n  142,\n  235,\n  236,\n]\n","import React from 'react'\nimport { observer, inject } from 'mobx-react'\n\nimport { compose, lifecycle, withProps } from 'recompose'\n\nimport { PlayersSelect } from './PlayersSelect'\nimport { PlayersInfo } from './PlayersInfo'\nimport PlayerCompareHeader from './PlayerCompareHeader'\n\nimport { defaultParams } from './config'\n\ntype TProps = {\n  playersCompareWidget: {\n    isLoaded: boolean,\n    selectedPlayers: {},\n  },\n  matchProfile: {\n    data: {\n      team1_id: number,\n      team2_id: number,\n    },\n  },\n}\n\nexport const PlayersCompareComponent = ({\n  matchProfile: {\n    data: { team1_id, team2_id },\n  },\n  playersCompareWidget: { isLoaded, selectedPlayers },\n}: TProps) => (\n  <div className='t-compare'>\n    <PlayerCompareHeader />\n    <div className='t-compare__container'>\n      {/*\n      //@ts-ignore */}\n      <PlayersSelect team1={team1_id} team2={team2_id} />\n      {isLoaded ? (\n        <PlayersInfo\n          team1={team1_id}\n          team2={team2_id}\n          selectedPlayers={selectedPlayers}\n        />\n      ) : (\n        <div className='loading' />\n      )}\n    </div>\n  </div>\n)\n\nconst PlayersCompareComposed = compose<TProps, {}>(\n  inject('lexics', 'playersCompareWidget', 'matchProfile'),\n  observer,\n  //@ts-ignore\n  withProps(({ lexics: { lang } }) => ({\n    lang,\n  })),\n  lifecycle({\n    componentDidMount() {\n      const {\n        //@ts-ignore\n        lang,\n        //@ts-ignore\n        matchProfile: { matchId },\n        //@ts-ignore\n        playersCompareWidget: { basicFetch },\n      } = this.props\n\n      basicFetch({\n        lang,\n        matchId,\n        params: defaultParams,\n      })\n    },\n    componentDidUpdate(prevProps) {\n      const {\n        //@ts-ignore\n        lang,\n        //@ts-ignore\n        matchProfile: { matchId },\n        //@ts-ignore\n        playersCompareWidget: { fetch, getParamsIds },\n      } = this.props\n\n      //@ts-ignore\n      if (prevProps.lang !== lang) {\n        fetch({\n          lang,\n          matchId,\n          params: getParamsIds,\n        })\n      }\n    },\n  }),\n  observer,\n)\n\nexport const PlayersCompare = PlayersCompareComposed(PlayersCompareComponent)\n","\nimport React, { Fragment } from 'react'\n\n// @ts-ignore\nimport { TeamsCompare } from 'features/TeamsCompareWidget/components/TeamsCompare'\nimport { PlayersCompare } from '../PlayersCompare'\n\nexport const MatchWidgets = () => (\n  <Fragment>\n    <TeamsCompare />\n    <PlayersCompare />\n  </Fragment>\n)\n","import React from 'react'\n\nimport { MatchWidgets } from './MatchWidgets'\n\ntype TProps = {\n  //@ts-ignore\n  page: string | null,\n}\n\nexport const Widgets = ({ page }: TProps) => (\n  <div className='main-page__widgets'>\n    {page === 'match' && <MatchWidgets />}\n  </div>\n)\n","import React from 'react'\nimport { observer, inject } from 'mobx-react'\n\nimport { lifecycle, compose } from 'recompose'\nimport get from 'lodash/get'\n\nimport { Header } from 'features/components/common/player/Header'\nimport { MapField } from 'features/MapField/components/MapField'\nimport { MapFilters } from 'features/MapFilters/components'\nimport { Widgets } from 'features/components/common/widgets/Widgets'\n\nimport './PlayerField.scss'\n\ntype TProps = {\n  selectedMatches: {},\n  lexics: { page: string },\n  tabs: { active: string },\n};\n\nconst PlayerFieldComponent = ({\n  lexics: { page },\n  tabs: { active },\n  ...props\n}: TProps) => (\n  <div className='main-page__left'>\n    <div className='main-page__content'>\n      {/*\n      //@ts-ignore */}\n      <Header {...props} />\n      <div className='main-page__side'>\n        <div className='main-page__filters-wrapper'>\n          <MapFilters />\n        </div>\n        {/*\n        //@ts-ignore */}\n        <MapField tab={active} {...props} />\n      </div>\n    </div>\n    <Widgets page={page} />\n  </div>\n)\n\nconst playerFieldComposed = compose(\n  inject('lexics', 'markers', 'selectedMatches', 'tabs', 'tooltips', 'zones'),\n  lifecycle({\n    componentDidMount() {\n      const {\n        //@ts-ignore\n        lexics: { page },\n        //@ts-ignore\n        markers,\n        //@ts-ignore\n        matchId,\n        //@ts-ignore\n        pageId,\n        //@ts-ignore\n        selectedMatches,\n        //@ts-ignore\n        tooltips,\n        //@ts-ignore\n        zones,\n      } = this.props\n      const matchesList = matchId\n        ? [matchId]\n        : get(selectedMatches, [page, pageId])\n      markers.fetch(pageId, matchesList)\n      zones.fetch(pageId, matchesList)\n      tooltips.fetch()\n    },\n  }),\n  observer,\n)\n\n// @ts-ignore\nexport const PlayerField = playerFieldComposed(PlayerFieldComponent)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n// @ts-ignore\nimport { noImages } from 'module/utils/helpers'\n\n// @ts-ignore\n// @ts-ignore\nconst Avatar = ({ image, name }) => {\n  //@ts-ignore\n  const noImage = name ? noImages[name] : noImages.player\n  return (\n    <img\n      src={image}\n      onError={(e) => {\n        //@ts-ignore\n        e.target.src = noImage\n      }}\n      alt={name}\n    />\n  )\n}\n\nAvatar.propTypes = {\n  name: PropTypes.string,\n  image: PropTypes.string,\n}\n\nexport default Avatar\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { observer, inject } from 'mobx-react'\nimport { T9n } from 'react-sport'\n\n// @ts-ignore\nconst InfoItem = (props) => {\n  const { infoItem, t, tooltips, variants } = props\n  const { clickCnt, clickHandle } = infoItem\n  return (\n    <span\n      onClick={e => clickHandle(e, tooltips)}\n      className='player-label tooltip-trigger'\n    >\n      {variants[clickCnt]} <T9n t={t[clickCnt]} />\n      <div className='hover-tooltip'>\n        <T9n t={tooltips[clickCnt]} />\n      </div>\n    </span>\n  )\n}\n\nInfoItem.propTypes = {\n  variants: PropTypes.array,\n  tooltips: PropTypes.array,\n  t: PropTypes.array,\n  infoItem: PropTypes.object,\n}\n\nexport default inject('infoItem')(observer(InfoItem))\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { inject, observer } from 'mobx-react'\n\nimport cx from 'classnames'\n\nimport { compose, withProps } from 'recompose'\nimport {\n  cmToFt,\n  getLongSuffix,\n  kgToPounds,\n} from 'module/utils/helpers'\n\nimport Avatar from 'features/components/common/Avatar'\nimport InfoItem from 'features/components/common/InfoItem'\n\nimport {\n  TProps,\n  TWithPropsOuter,\n  TWithPropsInner,\n} from './types'\n\nconst PlayerCardComponent = ({\n  playerProfile: {\n    isFetching,\n    profile,\n  },\n  suffix,\n}: TProps) => (\n  <div\n    className={cx(\n      'player-card-left',\n      { 'player-card-left_loader': isFetching },\n    )}\n  >\n    <div className='player-column player-column-avatar'>\n      <div className='player-card-avatar'>\n        {/*\n          //@ts-ignore */}\n        {profile && <Avatar image={profile.photo} />}\n      </div>\n    </div>\n    {profile && (\n      <div className='player-column player-column-name'>\n        <h1 className='player-card-title'>\n          <span>{profile[`short_name_${suffix}`]}</span>\n        </h1>\n        <div className='player-card-team'>\n          {profile.team.id && (\n            <Link target='_blank' to={`/teams/${profile.team.id}`}>\n              {profile.team[`name_${suffix}`]}\n            </Link>\n          )}\n          {profile.team.id && profile.national_team.id && ', '}\n          {profile.national_team.id && (\n            <Link target='_blank' to={`/teams/${profile.national_team.id}`}>\n              {profile.national_team[`name_${suffix}`]}\n            </Link>\n          )}\n        </div>\n        <div className='player-card-labels'>\n          {profile.citizenship.short && (\n            <span className='player-label tooltip-trigger'>\n              <i\n                className={`flag-icon flag-icon-24x16 flag-icon-${profile.citizenship.short.toLowerCase()}`}\n              />\n              <div className='hover-tooltip'>\n                <span>{profile.citizenship[`name_${suffix}`]}</span>\n              </div>\n            </span>\n          )}\n          {profile.age && (\n            <InfoItem\n              variants={[profile.age, profile.birthday]}\n              tooltips={['header_card_age', 'header_card_birth_data']}\n              t={['stat_year', '']}\n            />\n          )}\n          {profile.height && (\n            <InfoItem\n              variants={[profile.height, cmToFt(profile.height)]}\n              tooltips={['tp_stat_height_sm', 'tp_stat_height_foot']}\n              t={['stat_sm', '']}\n            />\n          )}\n          {profile.weight && (\n            <InfoItem\n              variants={[profile.weight, kgToPounds(profile.weight)]}\n              tooltips={['tp_stat_weght_kg', 'tp_stat_weght_lbs']}\n              t={['stat_kg', 'stat_pound']}\n            />\n          )}\n          {profile.active_hand && (\n            <span className='player-label'>{profile.active_hand} </span>\n          )}\n          {profile.amplua.id && (\n            <span className='player-label'>\n              {profile.amplua[`name_${suffix}`]}\n            </span>\n          )}\n        </div>\n      </div>\n    )}\n  </div>\n)\n\nconst playerCardComposed = compose<TProps, {}>(\n  inject('playerProfile', 'lexics'),\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(\n    ({ lexics: { lang } }) => ({ suffix: getLongSuffix(lang) }),\n  ),\n  observer,\n)\n\nexport const PlayerCard = playerCardComposed(PlayerCardComponent)\n","import React from 'react'\nimport { T9n } from 'react-sport'\n// @ts-ignore\nimport { indexLexic } from 'config/lexics'\n\nconst ToolTip = () => (\n  <div className='header-stats-item__tooltip'>\n    <T9n t={indexLexic.boxscore_play_video} />\n  </div>\n)\n\nexport default ToolTip\n","\nimport React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withHandlers,\n  withState,\n  withProps,\n} from 'recompose'\nimport cx from 'classnames'\nimport isEmpty from 'lodash/isEmpty'\n\nimport { T9n } from 'react-sport'\n\nimport ToolTip from './ToolTip'\n\nimport {\n  TProps,\n  TPropsOuter,\n  TWithHandlersInner,\n  TWithHandlersOuter,\n  TWithPropsInner,\n  TWithPropsOuter,\n} from './types'\nimport './styles.scss'\n\nexport const HeaderStatsItemComponent = ({\n  events,\n  getExtLink,\n  itemClassName,\n  lexicId,\n  statsIsFetching,\n  statValue,\n  toggleTooltip,\n  toolTipIsVisible,\n  valueBlockClassName,\n}: TProps) => (\n  <div className='header-stats-item-wrapper'>\n    <div\n      onClick={getExtLink(events, lexicId)}\n      onMouseEnter={toggleTooltip}\n      onMouseLeave={toggleTooltip}\n      className={itemClassName}\n    >\n      <div className='header-stats-item__label'>\n        <T9n t={lexicId} />\n      </div>\n      <div className={valueBlockClassName}>\n        <span>{statValue}</span>\n      </div>\n      {statsIsFetching && <div className='header-stats-item__loader' />}\n      {toolTipIsVisible && !statsIsFetching && <ToolTip />}\n    </div>\n  </div>\n)\n\nconst headerStatsItemComposed = compose<TProps, TPropsOuter>(\n  inject('lexics', 'videoLink', 'shootsRange'),\n  withState('toolTipIsVisible', 'toggleVisible', false),\n  withState('statsIsFetching', 'setLoader', false),\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(({\n    percent,\n    statsIsFetching,\n    toolTipIsVisible,\n  }) => ({\n    itemClassName: cx('header-stats-item', {\n      'header-stats-item_clickable': toolTipIsVisible && !statsIsFetching,\n      'header-stats-item_loading': statsIsFetching,\n    }),\n    valueBlockClassName: cx('header-stats-item__value', {\n      'header-stats-item__value_percentage': percent,\n    }),\n  })),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    getExtLink: ({\n      lexics: { lang },\n      setLoader,\n      shootsRange,\n      videoLink: { request },\n    }) => (events, lexicId) => () => {\n      if (!isEmpty(events)) {\n        setLoader(true)\n        request({\n          events,\n          lang,\n          lexical_formula: lexicId,\n          range: shootsRange,\n          type: 'headerStats',\n        }).then(() => setLoader(false))\n      }\n    },\n    toggleTooltip: ({\n      events,\n      toggleVisible,\n      toolTipIsVisible,\n    }) => () => {\n      if (events.length) toggleVisible(!toolTipIsVisible)\n    },\n  }),\n)\n\nexport const HeaderStatsItem = headerStatsItemComposed(HeaderStatsItemComponent)\n","import React, { Fragment } from 'react'\nimport { inject, observer } from 'mobx-react'\nimport { compose, lifecycle, withHandlers } from 'recompose'\nimport { map, pipe, find, get } from 'lodash/fp'\n\n// @ts-ignore\nimport { headerPlayerParams } from 'config/params'\n// @ts-ignore\nimport { getSummaryStatValue } from 'module/utils/helpers/getSummaryStatValue'\n// @ts-ignore\nimport Loader from 'features/components/common/loader/Loader'\n\n// @ts-ignore\nimport { HeaderStatsItem } from 'features/HeaderStatsItem'\n\ntype TProps = {\n  getStat: (param_id: number) => number | string,\n  getEvents: (param_id: number) => Array<number>,\n  playerProfile: {\n    profile: {\n      amplua: { id: number },\n    },\n  },\n  playerStats: {\n    isFetching: boolean,\n    stats: Array<any>,\n  },\n};\n\n/**\n * Отображение блока со статистикой в шапке профиля\n */\nexport const PlayerStats = ({\n  getEvents,\n  getStat,\n  playerProfile: { profile },\n  playerStats: { isFetching },\n}: TProps) => (\n  <div className='player-card-stats-list'>\n    {isFetching ? (\n      <Loader />\n    ) : (\n      <Fragment>\n        {map(({ lexic_id, param_id, percent }) => (\n          //@ts-ignore\n          <HeaderStatsItem\n            key={param_id}\n            paramId={param_id}\n            lexicId={lexic_id}\n            percent={percent}\n            events={getEvents(param_id)}\n            statValue={getStat(param_id)}\n          />\n              //@ts-ignore\n        ))(headerPlayerParams[profile.amplua.id])}\n      </Fragment>\n    )}\n  </div>\n)\n\nconst PlayerStatsComposed = compose<any, TProps>(\n  inject('playerProfile', 'playerStats', 'selectedMatches'),\n  //@ts-ignore\n  withHandlers({\n    getStat: ({ playerStats: { stats } }) => (param_id: number) =>\n      getSummaryStatValue(param_id, stats, 'average'),\n\n    getEvents: ({ playerStats: { stats } }) => (param_id: number) =>\n      pipe(\n        find({ f_param: param_id }),\n        get('f_match_event_ids_json'),\n      )(stats) || [],\n  }),\n  lifecycle({\n    componentDidMount() {\n      const {\n        //@ts-ignore\n        page,\n        //@ts-ignore\n        pageId,\n        //@ts-ignore\n        playerProfile: {\n          profile: {\n            amplua: { id },\n          },\n        },\n        //@ts-ignore\n        playerStats: { fetch },\n        //@ts-ignore\n        selectedMatches,\n      } = this.props\n      fetch(pageId, selectedMatches[page][pageId], id)\n    },\n  }),\n  observer,\n)(PlayerStats)\n\nexport default PlayerStatsComposed\n","import m from 'moment'\n\n/**\n * Функция получения текущего года или любого, для теста\n * @param {any} test - флаг, если нужен год, отличный от текущего в бОльшую сторону\n * @param {number} changeYear - число, прибавляемое к текущему году\n */\nfunction getYear(test: any, changeYear: number): number {\n  return test ? m().year() + changeYear : m().year()\n}\n\n/**\n * Функция получения текущей даты\n * @param {string} format - формат выводимой даты, если требуется\n */\nexport function getNow(format?: string): string {\n  return m().format(format)\n}\n\n/**\n * Функция получения начала года\n * @param {string} format - формат выводимой даты, если требуется\n */\nexport function getStartYear(format?: string): string {\n  return m([m().year(), 0, 1]).format(format)\n}\n\n/**\n * Функция получения начала сезона\n * @param {string} format - формат выводимой даты, если требуется\n */\nexport function getStartSeason(format?: string): string {\n  /** Сезон начинается с 1 июля **/\n  return m([getYear(m().month() < 6, -1), 6, 1]).format(format)\n}\n\n/**\n * Функция получения конца сезона\n * @param {string} format - формат выводимой даты, если требуется\n */\nexport function getEndOfSeason(format?: string): string {\n  /** Сезон кончается 30 июня **/\n  return m([getYear(m().month() > 6, 1), 5, 30]).format(format)\n}\n\n/**\n * Функция форматирования любой даты (прим. 5:15 или 5:03) с секундами и минутами\n * @param {number} minutes - минуты\n * @param {number} seconds - секунды\n */\nexport function formatTime({\n  minutes,\n  seconds,\n}: {\n  minutes: number,\n  seconds: number,\n}): string {\n  return `${minutes}:${seconds > 10 ? seconds : `0${seconds}`}`\n}\n","const selectConfig = {\n  3: 'match_select_3',\n  5: 'match_select_5',\n  10: 'match_select_10',\n  season: 'match_select_all_season',\n  year: 'match_select_this_year',\n}\n\nexport default selectConfig\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport isArray from 'lodash/isArray'\nimport { T9n } from 'react-sport'\nimport names from 'config/matchesSelection'\n\nconst SelectLabel = ({ selected = names[3] }) =>\n  (isArray(selected) ? (\n    <span>\n      <T9n t='match_selected' />: {selected.length}\n    </span>\n  ) : (\n  //@ts-ignore\n    <T9n t={names[selected]} />\n  ))\n\nSelectLabel.propTypes = {\n  selected: PropTypes.any,\n}\n\nexport default SelectLabel\n","import React, { Fragment } from 'react'\n\nimport cx from 'classnames'\nimport { getSuffix } from 'module/utils/helpers'\n\ntype TProps = {\n  lang: string,\n  match: {\n    [key: string]: string | number,\n    home_match: string,\n    opponent_score: number,\n    score: number,\n  },\n}\n\nexport const MatchCheckBox = ({ lang, match }:TProps) => (\n  <Fragment>\n    <span className='title'>\n      {match.home_match} {match[`name_opponent_${getSuffix(lang)}`]}\n    </span>\n    <span className={cx(\n      'title__score',\n      { title__score_lose: match.opponent_score > match.score },\n      { title__score_win: match.opponent_score < match.score },\n    )}\n    >{match.score}{' '} - {match.opponent_score}\n    </span>\n  </Fragment>\n)\n","import React from 'react'\n\nexport const InfinityLoad = () => (\n  <div className='loading-block'>\n    <div className='loading' />\n  </div>\n)\n","import React from 'react'\nimport { observer, inject } from 'mobx-react'\n\nimport { compose, withProps } from 'recompose'\nimport get from 'lodash/get'\nimport isArray from 'lodash/isArray'\nimport cx from 'classnames'\n\nimport { MatchCheckBox } from 'features/components/common/MatchCheckBox'\n\nimport { InfinityLoad } from 'module/utils/InfinityLoad'\nimport { dateWithYear } from 'module/utils/helpers'\n\nimport { TLexics } from 'react-sport'\n\nexport const MatchSelectListComponent = ({\n  lexics: { lang },\n  matches: { isFetching },\n  matchesList,\n  selected,\n  selectItem,\n}: TComposeInner) => (\n  <ul\n    className={cx(\n      'player-card-stats-dropdown-list',\n      'player-card-stats-dropdown_dates',\n      'player-card-stats-dropdown_checkboxes',\n    )}\n  >\n    {matchesList.map(m => (\n      <li\n        key={m.f_match}\n        className={cx('', {\n          active: isArray(selected) && selected.includes(m.f_match),\n        })}\n        onClick={e => selectItem(e, m.f_match)}\n      >\n        <MatchCheckBox lang={lang} match={m} />\n        <span className='date'>{dateWithYear(m.match_date)}</span>\n      </li>\n    ))}\n    {isFetching && <InfinityLoad />}\n  </ul>\n)\n\ntype TComposeInner = TPropsOuter & TWithPropsInner & {\n  lexics: TLexics,\n  matches: {\n    isFetching: boolean,\n    list: {\n      [key: string]: {},\n    },\n  },\n}\n\ntype TPropsOuter = {\n  pageId: string,\n  selectItem: (e: React.SyntheticEvent<EventTarget>, matchId: number) => void,\n  selected: string | Array<number>,\n}\n\ntype TWithPropsOuter = {\n  matches: {\n    list: {\n      [key: string]: {},\n    },\n  },\n  pageId: string,\n}\n\ntype TWithPropsInner = {\n  matchesList: Array<{\n    [key: string]: string | number,\n    f_match: number,\n    home_match: string,\n    match_date: string,\n    opponent_score: number,\n    score: number,\n  }>,\n}\n\nconst matchSelectListComposed = compose<TComposeInner, TPropsOuter>(\n  inject('matches', 'lexics'),\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(({\n    matches: { list },\n    pageId,\n  }) => ({\n    matchesList: get(list[pageId], 'matches', []),\n  })),\n)\n\nexport const MatchSelectList = matchSelectListComposed(MatchSelectListComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { withHandlers, compose } from 'recompose'\nimport map from 'lodash/map'\nimport get from 'lodash/get'\n\nimport cx from 'classnames'\n\nimport { T9n, OutsideClick } from 'react-sport'\n\nimport SelectLabel from 'features/components/common/SelectLabel'\nimport { MatchSelectList } from 'features/components/common/MatchSelectList'\n\nimport names from 'config/matchesSelection'\n\nimport {\n  TComposeInner,\n  TPropsOuter,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n} from './types'\n\nconst MatchSelectContainerComponent = ({\n  dropDownClick,\n  extendedSelectItem,\n  getSelected,\n  matches: { isFetching },\n  pageId,\n  scrollHandle,\n  selectedMatches,\n  selectItem,\n}: TComposeInner) => (\n  <div className='player-card-stats-dropdown'>\n    <div className='player-card-dropdown'>\n      <a\n        className='selectBox selectBox-dropdown'\n        //@ts-ignore\n        tabIndex='0'\n        title=''\n        onClick={dropDownClick}\n      >\n        <span className='selectBox-label'>\n          {/*\n            //@ts-ignore */}\n          <SelectLabel selected={getSelected()} />\n        </span>\n        <span className='selectBox-arrow' />\n      </a>\n      {selectedMatches.opened && (\n        <div\n          onScroll={scrollHandle}\n          className={cx('player-card-stats-dropdown-inner', 'loading-active', {\n            'loading-active_global': isFetching,\n          })}\n        >\n          <ul\n            className={cx(\n              'player-card-stats-dropdown-list',\n              'player-card-stats-dropdown_dates',\n              'player-card-stats-dropdown_checkboxes',\n            )}\n          >\n            {map(names, (name, key) => (\n              <li key={key} onClick={e => extendedSelectItem(e, key)}>\n                {/*\n                  //@ts-ignore */}\n                <T9n t={names[key]} />\n              </li>\n            ))}\n          </ul>\n          <hr className='player-card-stats-dropdown-list-hr' />\n          <MatchSelectList\n            pageId={pageId}\n            selectItem={selectItem}\n            selected={getSelected()}\n          />\n        </div>\n      )}\n    </div>\n  </div>\n)\n\nconst matchSelectContainerComposed = compose<TComposeInner, TPropsOuter>(\n  inject(\n    'lexics',\n    'matches',\n    'selectedMatches',\n  ),\n  OutsideClick,\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    getSelected: ({\n      lexics: { page },\n      pageId,\n      selectedMatches,\n    }) => () => {\n      const selected = selectedMatches.opened\n        ? selectedMatches.tempSelected\n        : selectedMatches.selectedPeriod\n        || get(selectedMatches[page], `${pageId}`, [])\n\n      return selected ? selected.slice() : []\n    },\n  }),\n  observer,\n)\n\nexport const MatchSelectContainer = matchSelectContainerComposed(MatchSelectContainerComponent)\n","\nimport React from 'react'\nimport {\n  lifecycle,\n  withHandlers,\n  compose,\n} from 'recompose'\nimport { inject, observer } from 'mobx-react'\nimport map from 'lodash/map'\nimport get from 'lodash/get'\nimport includes from 'lodash/includes'\nimport filter from 'lodash/filter'\n\nimport { toJS } from 'mobx'\n\nimport {\n  getStartYear,\n  getNow,\n  getStartSeason,\n  getEndOfSeason,\n} from 'module/utils/dateHelpers'\n\nimport { MatchSelectContainer } from 'features/components/common/MatchSelectContainer'\n\ntype TProps = {\n  pageId: string,\n  clickOutside: () => void,\n  dropDownClick: (e: {}) => void,\n  selectItem: (e: {}, id: number | string) => void,\n  extendedSelectItem: (e: {}, period: string | number) => void,\n  scrollHandle: (e: {}) => void,\n};\n\nconst MatchSelect = ({\n  clickOutside,\n  dropDownClick,\n  extendedSelectItem,\n  pageId,\n  scrollHandle,\n  selectItem,\n}: TProps) => (\n  <MatchSelectContainer\n    pageId={pageId}\n    clickOutside={clickOutside}\n    dropDownClick={dropDownClick}\n    selectItem={selectItem}\n    extendedSelectItem={extendedSelectItem}\n    scrollHandle={scrollHandle}\n  />\n)\n\nconst MatchSelectComposed = compose<any, TProps>(\n  inject('lexics', 'matches', 'selectedMatches'),\n  lifecycle({\n    componentDidMount() {\n      //@ts-ignore\n      //@ts-ignore\n      //@ts-ignore\n      const { matches, pageId, selectedMatches } = this.props\n      const matchesList = map(matches.list[pageId].matches, 'f_match').slice(\n        0,\n        3,\n      )\n      selectedMatches.setSelected(matchesList, pageId)\n    },\n    componentDidUpdate() {\n      //@ts-ignore\n      //@ts-ignore\n      //@ts-ignore\n      //@ts-ignore\n      const { matches, page, pageId, selectedMatches } = this.props\n      if (toJS(matches.list[pageId]) && !selectedMatches[page][pageId]) {\n        const matchesList = map(\n          matches.list[pageId].matches,\n          'f_match',\n        ).slice(0, 3)\n        selectedMatches.setSelected(matchesList, pageId)\n      }\n    },\n  }),\n  //@ts-ignore\n  withHandlers({\n    handleInfiniteLoad: ({ matches, pageId }) => () => matches.addOffset(pageId),\n  }),\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    scrollHandle: ({ handleInfiniteLoad }) => (e) => {\n      const { offsetHeight, scrollHeight, scrollTop } = e.target\n      if (scrollTop - scrollHeight + offsetHeight === 1) {\n        handleInfiniteLoad()\n      }\n    },\n    //@ts-ignore\n    dropDownClick: ({ pageId, selectedMatches }) => (e) => {\n      e.preventDefault()\n      selectedMatches.setOpened(pageId)\n    },\n    clickOutside: ({ pageId, selectedMatches }) => () => {\n      if (selectedMatches.opened) {\n        selectedMatches.setOpened(pageId)\n      }\n    },\n    //@ts-ignore\n    //@ts-ignore\n    selectItem: ({ lexics, pageId, selectedMatches }) => (e, id) => {\n      e.preventDefault()\n      selectedMatches.setPeriod(null)\n      let ids: Array<number> = selectedMatches.opened\n        ? selectedMatches.tempSelected\n        : get(selectedMatches[lexics.page], `${pageId}`, [])\n      //@ts-ignore\n      ids = includes(['year', 'season'], ids) ? [] : ids\n      ids = ids ? ids.slice() : []\n\n      if (!includes(ids, id)) {\n        ids.push(id)\n      } else {\n        ids = filter(ids, item => item !== id)\n      }\n      selectedMatches.setTempSelected(ids, pageId)\n    },\n    extendedSelectItem: ({\n      lexics: { page },\n      matches: { fetch, list },\n      pageId,\n      selectedMatches: { setOpened, setPeriod, setTempSelected },\n      //@ts-ignore\n      //@ts-ignore\n    }) => (e, period) => {\n      e.preventDefault()\n      const matches: Array<{ f_match: number }> = get(list[pageId], 'matches')\n      if (includes(['year', 'season'], period)) {\n        const isYear: boolean = period === 'year'\n        const dateFrom: string = isYear ? getStartYear() : getStartSeason()\n        const dateTo: string = isYear ? getNow() : getEndOfSeason()\n        setPeriod(period)\n        fetch(\n          page,\n          pageId,\n          0,\n          null,\n          dateFrom,\n          dateTo,\n          setTempSelected,\n          setOpened,\n        )\n      } else {\n        const ids = matches.reduce((result, { f_match }, idx) => {\n          if (idx < period) {\n            //@ts-ignore\n            result.push(f_match)\n          }\n          return result\n        }, [])\n        setPeriod()\n        setTempSelected(ids, pageId)\n        setOpened(pageId)\n      }\n    },\n  }),\n  observer,\n)(MatchSelect)\n\nexport default MatchSelectComposed\n","import React from 'react'\nimport { observer, inject } from 'mobx-react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport { T9n } from 'react-sport'\nimport toString from 'lodash/toString'\nimport { compose, withProps, withHandlers, withState } from 'recompose'\n\nconst FilterCheckbox = ({\n  //@ts-ignore\n  clickHandler,\n  //@ts-ignore\n  filter: {\n    //@ts-ignore\n    checked,\n    //@ts-ignore\n    lexical_formula,\n  },\n  //@ts-ignore\n  getClassName,\n}) => (\n  <li onClick={clickHandler} className={getClassName(checked)}>\n    <T9n t={toString(lexical_formula)} />\n  </li>\n)\n\nconst FilterCheckboxComposed = compose(\n  inject('playersVS', 'teamsVS'),\n  withState('isOpened', 'onOutsideClick', false),\n  //@ts-ignore\n  withProps(({ pageType, ...props }) => ({\n    videoSummaries: props[`${pageType}VS`],\n  })),\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    getClassName: () => checked => cx({ active: checked }),\n    clickHandler: ({ filter, setActive }) => () => setActive(filter),\n  }),\n  observer,\n  //@ts-ignore\n)(FilterCheckbox)\n\nFilterCheckbox.propTypes = {\n  filter: PropTypes.shape({\n    checked: PropTypes.bool,\n    lexical_formula: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  }),\n  getClassName: PropTypes.func.isRequired,\n  clickHandler: PropTypes.func.isRequired,\n}\n\nexport default FilterCheckboxComposed\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { OutsideClick } from 'react-sport'\nimport { compose } from 'recompose'\n\nimport FilterCheckbox from './FilterCheckbox'\n\nconst FilterPopup = ({\n  button: {\n    //@ts-ignore\n    setActive,\n  },\n  //@ts-ignore\n  button,\n  //@ts-ignore\n  pageType,\n}) => (\n  <div className='episodes-table-button-popup'>\n    <ul>\n        //@ts-ignore\n      {button.popupItems.map((filter, idx) => (\n        //@ts-ignore\n        <FilterCheckbox\n          key={idx}\n          setActive={setActive}\n          filter={filter}\n          pageType={pageType}\n        />\n      ))}\n    </ul>\n  </div>\n)\n\nconst FilterPopupComposed = compose(\n  OutsideClick,\n  observer,\n  //@ts-ignore\n)(FilterPopup)\n\nexport default FilterPopupComposed\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { observer } from 'mobx-react'\nimport { T9n } from 'react-sport'\nimport isEmpty from 'lodash/isEmpty'\nimport toString from 'lodash/toString'\n\nconst Checked = ({\n  button: {\n    //@ts-ignore\n    checkedFilters,\n  },\n}) => (\n  <span className='text'>\n    {!isEmpty(checkedFilters) ? (\n      checkedFilters.length < 3 ? (\n      //@ts-ignore\n        checkedFilters.map((filter, idx) => (\n          <T9n key={idx} t={toString(filter.lexicalFormula)} />\n        ))\n      ) : (\n        <span>{checkedFilters.length} items</span>\n      )\n    ) : (\n      <span className='text' />\n    )}\n  </span>\n)\n\nChecked.propTypes = {\n  button: PropTypes.shape({\n    checkedFilters: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),\n  }),\n}\n\nexport default observer(Checked)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport toString from 'lodash/toString'\nimport isEmpty from 'lodash/isEmpty'\n\nimport cx from 'classnames'\nimport { observer, inject } from 'mobx-react'\nimport { T9n } from 'react-sport'\nimport { compose, withHandlers, withState } from 'recompose'\n\nimport FilterPopup from './FilterPopup'\nimport Checked from './Checked'\n\n// @ts-ignore\nconst FilterElement = (props) => {\n  const {\n    button: { lexical_formula },\n    button,\n    getClassName,\n    handleClick,\n    isOpened,\n    onOutsideClick,\n  } = props\n  return (\n    <li className={getClassName()}>\n      <T9n\n        t={toString(lexical_formula)}\n        className='title'\n        onClick={() => handleClick()}\n      />\n      <Checked button={button} />\n      {isOpened && (\n        <FilterPopup\n          clickOutside={() => onOutsideClick(!isOpened)}\n          {...props}\n        />\n      )}\n    </li>\n  )\n}\n\nconst FilterElementComposed = compose(\n  inject('playersVS', 'teamsVS'),\n  withState('isOpened', 'onOutsideClick', false),\n  //@ts-ignore\n  withHandlers({\n    getClassName: ({ button: { checkedFilters } }) => () =>\n      cx('episodes-table-button', { active: !isEmpty(checkedFilters) }),\n    handleClick: ({ isOpened, onOutsideClick }) => () =>\n      onOutsideClick(!isOpened),\n  }),\n  observer,\n)(FilterElement)\n\nFilterElement.propTypes = {\n  isOpened: PropTypes.bool,\n  onOutsideClick: PropTypes.func.isRequired,\n  getClassName: PropTypes.func.isRequired,\n  handleClick: PropTypes.func.isRequired,\n  button: PropTypes.shape({\n    lexical_formula: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    checkedFilters: PropTypes.array,\n    checked: PropTypes.bool,\n  }),\n}\n\nexport default FilterElementComposed\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { observer } from 'mobx-react'\nimport { T9n } from 'react-sport'\nimport orderByLodash from 'lodash/orderBy'\n\nimport FilterElement from './FilterElement'\n\n/** Компонент для таблицы с кнопками\n * @param {String} playerId id игрока\n * @param {String} className часть строки css класса\n * @param {Array} orderBy массив из кнопок\n * @param {String} title заголовок таблицы\n * @param {Array} checked массив чекнутых кнопок\n * @param {Function} uncheckAllPlayers сброс выбранных игроков\n */\n\nconst TableButtons = ({\n  //@ts-ignore\n  checked,\n  //@ts-ignore\n  className,\n  //@ts-ignore\n  orderBy,\n  //@ts-ignore\n  pageType,\n  //@ts-ignore\n  playerId,\n  //@ts-ignore\n  title,\n  //@ts-ignore\n  uncheckAllPlayers,\n}) => (\n  <div className={`episodes-table-column ${className}`}>\n    <div className='episodes-table-column-title'>\n      <T9n t={title} />\n    </div>\n    <ul>\n      {orderByLodash(orderBy, ['sort_order'], ['asc']).map((btn, idx) => (\n        //@ts-ignore\n        <FilterElement\n          key={idx}\n          button={btn}\n          playerId={playerId}\n          checked={checked}\n          uncheckAllPlayers={uncheckAllPlayers}\n          pageType={pageType}\n        />\n      ))}\n    </ul>\n  </div>\n)\n\nTableButtons.propTypes = {\n  pageType: PropTypes.oneOf(['players', 'teams']).isRequired,\n  playerId: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n    .isRequired,\n  className: PropTypes.string.isRequired,\n  orderBy: PropTypes.array.isRequired,\n  title: PropTypes.string.isRequired,\n  checked: PropTypes.array.isRequired,\n  uncheckAllPlayers: PropTypes.func.isRequired,\n}\n\nexport default observer(TableButtons)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport get from 'lodash/get'\nimport toString from 'lodash/toString'\nimport isEmpty from 'lodash/isEmpty'\nimport filter from 'lodash/filter'\nimport map from 'lodash/map'\n\n\nimport { T9n, Range, VideoCutPlayers } from 'react-sport'\nimport { observer, inject } from 'mobx-react'\nimport { compose, lifecycle, withProps, withHandlers } from 'recompose'\n\nimport TableButtons from './TableButtons'\n\n/** Компонент для создания видеонарезок\n * @param {Object} selected Выбранные матчи\n * @param {String} pageType Типа страницы\n * @param {Object} playersVS стор для видеонарезок игроков\n * @param {Object} videoSummaries стор для видеонарезок по выбору либо команды, либо игроки\n * @param {Function} getCheckedBtn получает список чекнутых кнопок\n * @param {Function} handleVideoExternal отправляет запрос\n * @param {Array} partners список игроков\n * @param {Array} opponents список игроков\n * @param {Object} duration длительность общего количества нарезок\n * @param {Number} seconds количество секунд\n */\n// @ts-ignore\nconst VideoCuts = (props) => {\n  const {\n    getCheckedBtn,\n    getGroupedBtns,\n    handleVideoExternal,\n    selected,\n    totalTime,\n    videoSummaries: {\n      isFetching,\n      players: { playersChecked },\n      range,\n      reloadCount,\n      resetFilters,\n    },\n    videoSummaries,\n  } = props\n  return (\n    <div className='block-content clearfix'>\n      <div className='episodes-table'>\n        <div className='episodes-table-header'>\n          <div className='episodes-table-header-title'>\n            <a\n              onClick={() => reloadCount(selected)}\n              className='episodes-table__reload'\n            >\n              <i className='icon-reload' />\n              <T9n className='episodes-table__text' t='video_reload' />\n            </a>\n            <div className='episodes-table-header-count'>\n              <div className='episodes-table-header-count__row'>\n                <div\n                  style={{ cursor: 'pointer' }}\n                  className={cx('episodes-table-header-title-play', {\n                    'episodes-table-header-title-play_loader': isFetching,\n                  })}\n                  onClick={handleVideoExternal}\n                >\n                  <span className='icon' />\n                  <span className='episodes-table-header-count__num'>\n                    {get(videoSummaries, ['events', 'length'], 0)}\n                  </span>\n                </div>\n                <span className='episodes-table-header-count__num episodes-table-header-count__num_light'>\n                  {totalTime}\n                </span>\n              </div>\n            </div>\n            <div className='episodes-table-header-buttons'>\n              <a onClick={resetFilters} className='episodes-table__reset'>\n                <i className='icon-reset' />\n                <T9n className='episodes-table__text' t='video_reset_filters' />\n              </a>\n              <Range range={range} />\n            </div>\n          </div>\n        </div>\n        <div className='episodes-table__container'>\n          <div className='episodes-table-content clearfix'>\n            <div className='episodes-table-column__title'>\n              <h3 className='episodes-table-column__heading'>\n                <T9n t='video_actions' />\n              </h3>\n              <T9n\n                className='episodes-table-column__subheading'\n                t='video_select_all_actions'\n              />\n            </div>\n            {getGroupedBtns()\n              //@ts-ignore\n              && map(getGroupedBtns(), ({ buttons, lexic_id }, idx) => (\n                <TableButtons\n                  key={idx}\n                  orderBy={buttons}\n                  className='episodes-table-column_group'\n                  title={toString(lexic_id)}\n                  checked={getCheckedBtn()}\n                  {...props}\n                />\n              ))}\n          </div>\n          <div className='episodes-table__summary'>\n            <VideoCutPlayers\n              name='partner'\n              playersCount={get(playersChecked, ['partners', 'length'])}\n              checked={getCheckedBtn()}\n              {...props}\n            />\n            <VideoCutPlayers\n              name='opponent'\n              playersCount={get(playersChecked, ['opponents', 'length'])}\n              checked={getCheckedBtn()}\n              {...props}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst VideoCutsCompose = compose(\n  inject('playersVS', 'teamsVS', 'shootsRange', 'lexics', 'markers'),\n  //@ts-ignore\n  withProps(({ pageType, playerId, ...props }) => {\n    const videoSummaries = props[`${pageType}VS`]\n    const minutes = get(videoSummaries, ['duration', 'minutes'])\n    const seconds = get(videoSummaries, ['duration', 'seconds'])\n    const totalTime = !isEmpty(videoSummaries.events)\n      && `${minutes()}:${seconds() > 9 ? seconds() : `0${seconds()}`}`\n    return {\n      playersChecked: get(videoSummaries, ['players', 'playersChecked']),\n      players: videoSummaries.players,\n      pageId: playerId,\n      uncheckAllPlayers: () => videoSummaries.players.uncheckAll(),\n      videoSummaries,\n      totalTime,\n    }\n  }),\n  //@ts-ignore\n  withHandlers({\n    /** Проходим по блокам атаки и защиты, и собираем чекнутые **/\n    getCheckedBtn: ({ videoSummaries }) => () => {\n      const { buttons } = videoSummaries\n      //@ts-ignore\n      return filter(buttons, ({ checkedFilters }) => !isEmpty(checkedFilters))\n    },\n  }),\n  //@ts-ignore\n  withHandlers({\n    /** Группируем кнопки **/\n    getGroupedBtns: ({ videoSummaries }) => () => {\n      const { buttons, groups } = videoSummaries\n      //@ts-ignore\n      return map(Object.values(groups), ({ group, group_lexical_formula }) => ({\n        lexic_id: group_lexical_formula,\n        buttons: filter(buttons, ['group', group]),\n      }))\n    },\n\n    handleVideoExternal: ({\n      lexics: { lang },\n      shootsRange,\n      videoSummaries,\n    }) => () => {\n      const events = map(videoSummaries.events, 'id')\n      if (isEmpty(events)) return null\n\n      videoSummaries.request({\n        range: shootsRange,\n        events,\n        lang,\n      })\n    },\n  }),\n  lifecycle({\n    componentWillUnmount() {\n      //@ts-ignore\n      const { videoSummaries } = this.props\n      videoSummaries.resetFilters()\n      videoSummaries.changeCount(0)\n    },\n\n    componentDidMount() {\n      //@ts-ignore\n      const { videoSummaries } = this.props\n      videoSummaries.fetchButtons()\n    },\n  }),\n  observer,\n)(VideoCuts)\n\nVideoCuts.propTypes = {\n  pageType: PropTypes.oneOf(['players', 'teams']).isRequired,\n  selected: PropTypes.array,\n  playersVS: PropTypes.object.isRequired,\n  teamsVS: PropTypes.object.isRequired,\n  playerId: PropTypes.string.isRequired,\n  videoSummaries: PropTypes.object.isRequired,\n  getCheckedBtn: PropTypes.func.isRequired,\n  getGroupedBtns: PropTypes.func,\n  handleVideoExternal: PropTypes.func.isRequired,\n  duration: PropTypes.object.isRequired,\n  partners: PropTypes.array,\n  opponents: PropTypes.array,\n  totalTime: PropTypes.string,\n  seconds: PropTypes.number.isRequired,\n}\n\nexport default VideoCutsCompose\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport get from 'lodash/get'\nimport { toJS } from 'mobx'\nimport { inject, observer } from 'mobx-react'\nimport { compose, withHandlers } from 'recompose'\n\n// @ts-ignore\nimport Loader from 'features/components/common/loader/Loader'\nimport VideoCuts from './VideoCutsContainer'\nimport './VideoCuts.scss'\n\n// @ts-ignore\nconst VideoCutsContainer = (props) => {\n  const {\n    getSelectedMatches,\n    matches: { isFetching },\n    page,\n  } = props\n  if (page !== 'match' && isFetching) return <Loader />\n  return <VideoCuts selected={getSelectedMatches()} {...props} />\n}\n\nVideoCutsContainer.propTypes = {\n  matches: PropTypes.shape({\n    isFetching: PropTypes.bool,\n  }),\n  getSelectedMatches: PropTypes.func,\n}\n\nconst VideoCutsComposed = compose(\n  inject('lexics', 'selectedMatches', 'matches'),\n  //@ts-ignore\n  withHandlers({\n    getSelectedMatches: ({\n      matchId,\n      page,\n      playerId,\n      selectedMatches,\n    }) => () => {\n      if (page === 'match') return [matchId]\n      //@ts-ignore\n      return toJS(get(selectedMatches, [page, playerId]))\n    },\n  }),\n  observer,\n)(VideoCutsContainer)\n\nexport default VideoCutsComposed\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, lifecycle } from 'recompose'\nimport get from 'lodash/get'\n\nimport { tableTypes } from 'config/tables'\n\nimport { Tables } from 'features/Table'\nimport Loader from 'features/components/common/loader/Loader'\n\ntype TProps = {\n  pageId: string,\n}\n\ntype TPropsInner = TProps & {\n  playerTable: {\n    isLoaded: boolean,\n    tables: {},\n  },\n}\n\ntype TLifecycle = TProps & {\n  playerProfile: {},\n  playerTable: {\n    fetchPlayerMatches : (param: {\n      ampluaId: number,\n      matches: Array<number>,\n      playerId: string,\n    }) => void,\n  },\n  selectedMatches: {},\n}\n\nconst PlayerPageMatchesComponent = ({\n  pageId,\n  playerTable: {\n    isLoaded,\n    tables,\n  },\n}: TPropsInner) => (\n  <div>\n    {isLoaded\n      ? (\n        <Tables\n          tableType={tableTypes.playerMatches}\n          tables={tables}\n          pageId={pageId}\n        />\n      )\n      : <Loader />}\n  </div>\n)\n\nconst playerPageMatchesComposed = compose<TPropsInner, TProps>(\n  inject(\n    'playerTable',\n    'selectedMatches',\n    'playerProfile',\n  ),\n  lifecycle<TLifecycle, TProps>({\n    componentDidUpdate() {\n      const {\n        pageId,\n        playerProfile,\n        playerTable: { fetchPlayerMatches },\n        selectedMatches,\n      } = this.props\n      const matches = get(selectedMatches, ['player', pageId])\n      const ampluaId = get(playerProfile, ['profile', 'amplua', 'id'])\n\n      fetchPlayerMatches({\n        ampluaId,\n        matches,\n        playerId: pageId,\n      })\n    },\n  }),\n  observer,\n)\n\nexport const PlayerPageMatches = playerPageMatchesComposed(PlayerPageMatchesComponent)\n","import { observer, inject } from 'mobx-react'\nimport {\n  compose,\n  withHandlers,\n  lifecycle,\n} from 'recompose'\n\nimport {\n  indexLexic,\n  playerLexic,\n  filtersLexic,\n  markersLexic,\n  tableParamsLexic,\n  tableParamsLexicShort,\n  tableParamsNumLexic,\n  videoCutsLexic,\n} from 'config/lexics'\n\nexport const playerPageComposed = compose(\n  inject(\n    'lexics',\n    'matches',\n    'playerProfile',\n    'selectedMatches',\n    'playerTable',\n  ),\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    getPlayerProfile: ({ playerProfile }) => (id) => {\n      playerProfile.fetch(id)\n    },\n    //@ts-ignore\n    getGearParams: ({ playerTable }) => (id) => {\n      playerTable.fetchParams(id)\n    },\n  }),\n  lifecycle(\n    {\n      componentDidMount() {\n        const {\n          getPlayerProfile,\n          lexics,\n          match: {\n            params: { playerId },\n          },\n          matches: { fetch },\n        } = this.props\n        lexics.appPage = {\n          page: 'player',\n          phrases: {\n            ...indexLexic,\n            ...playerLexic,\n            ...filtersLexic,\n            ...markersLexic,\n            ...tableParamsLexic,\n            ...tableParamsLexicShort,\n            ...tableParamsNumLexic,\n            ...videoCutsLexic,\n          },\n        }\n        getPlayerProfile(playerId)\n        fetch('player', playerId, 0, 20)\n      },\n    },\n    //@ts-ignore\n    {\n      //@ts-ignore\n      componentDidUpdate(prevProps) {\n        const {\n          getPlayerProfile,\n          match: {\n            params: { playerId },\n          },\n        } = this.props\n        if (prevProps.playerId !== playerId) {\n          getPlayerProfile(playerId)\n        }\n      },\n    },\n  ),\n  observer,\n)\n","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\n\nimport isEmpty from 'lodash/isEmpty'\n\nimport { EventPlayer as VideoPlayer, Popup } from 'react-sport'\n\nimport { StatsTabs } from 'features/components/common/stats-tabs/StatsTabs'\nimport { PlayerField } from 'features/components/common/player/PlayerField'\nimport { PlayerCard } from 'features/components/PlayerPage/PlayerCard'\nimport PlayerStats from 'features/components/PlayerPage/PlayerStats'\nimport MatchSelect from 'features/components/common/MatchSelect'\nimport VideoCuts from 'features/components/common/video-cuts/VideoCuts'\nimport Loader from 'features/components/common/loader/Loader'\n\nimport { PlayerPageMatches } from 'features/PlayerPageMatches/components'\n\nimport { playerPageComposed } from './PlayerPageComposed'\n\nimport 'features/components/common/MainPage.scss'\nimport 'features/components/common/PageCard.scss'\nimport 'features/components/common/Shot.scss'\nimport 'features/components/common/Zones.scss'\n\nimport 'features/components/App/magnific-popup.css'\nimport 'features/components/App/video-player.scss'\nimport 'features/components/common/player-card/player.scss'\nimport 'features/components/common/player-card/PlayerCard.scss'\nimport 'features/components/common/player-stats/PlayerStats.scss'\nimport 'features/components/common/player-stats/PlayerStatsDropdown.scss'\n\nexport type TProps = {\n  getGearParams: (id: number | string) => void,\n  match: {\n    params: { playerId: string },\n    url: string,\n  },\n  matches: {\n    firstLoad: boolean,\n  },\n  playerProfile: { profile: {} | null },\n  selectedMatches: {},\n}\n\nconst PlayerPageComponent = ({\n  match: {\n    params: { playerId },\n  },\n  match,\n  matches: { firstLoad },\n  playerProfile: { profile },\n  selectedMatches,\n}: TProps) => (\n  <article className='player for-player'>\n    {/*\n      //@ts-ignore */}\n    <Popup>\n      {/*\n        //@ts-ignore */}\n      <VideoPlayer appName='volleyball' />\n    </Popup>\n    <section className='player-card'>\n      <div className='container-fluid'>\n        <div className='player-card-wrapper'>\n          {profile && <PlayerCard />}\n          <div className='player-card-responsive'>\n            {!firstLoad ? (\n              //@ts-ignore\n              <MatchSelect\n                page='player'\n                pageId={playerId}\n                selectedMatches={selectedMatches}\n              />\n            ) : (\n              <Loader />\n            )}\n          </div>\n          <div className='player-card-right'>\n            {!isEmpty(profile) && !firstLoad ? (\n            //@ts-ignore\n              <PlayerStats page='player' pageId={playerId} />\n            ) : (\n              <Loader />\n            )}\n          </div>\n        </div>\n      </div>\n    </section>\n    <section className='main-page__details'>\n      {/*\n        //@ts-ignore */}\n      {!firstLoad ? <PlayerField pageId={playerId} /> : <Loader />}\n      <div className='main-page__responsive'>\n        <div className='main-page__content'>\n          <div className='main-page__content-header'>\n            <StatsTabs match={match} isStats />\n          </div>\n          {/*\n          //@ts-ignore */}\n          <Switch>\n            <Route\n              path='/players/:playerId/'\n              exact\n              render={() => <PlayerPageMatches pageId={playerId} />\n              }\n            />\n            <Route\n              path='/players/:playerId/video'\n              render={() => (\n                //@ts-ignore\n                <VideoCuts\n                  page='player'\n                  pageType='players'\n                  playerId={playerId}\n                />\n              )}\n            />\n          </Switch>\n        </div>\n      </div>\n    </section>\n  </article>\n)\n\n//@ts-ignore\nexport const PlayerPage = playerPageComposed(PlayerPageComponent)\n","import { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers, withProps } from 'recompose'\n\nimport cx from 'classnames'\nimport get from 'lodash/get'\nimport find from 'lodash/find'\n\nimport { utils } from 'react-sport'\n\nconst PlayerTrComposed = compose(\n  inject(\n    'videoLink',\n    'lexics',\n    'shootsRange',\n    'matchLinks',\n    'teamPlayers',\n    'teamProfile',\n    'selectedMatches',\n    'shootsRange',\n  ),\n  //@ts-ignore\n  withProps(({ player: { f_player } }) => {\n    const {\n      helpers: { getLogo },\n    } = utils\n    const avatarUrl = getLogo({\n      type: 'players_volleyball',\n      id: f_player,\n    })\n    return { avatarUrl }\n  }),\n  //@ts-ignore\n  withHandlers({\n    handleClick: ({\n      lexics: { lang, page },\n      selectedMatches,\n      shootsRange,\n      teamPlayers: { fetchEvents },\n      teamProfile: {\n        profile: { id },\n      },\n      videoLink: { request },\n    }) => (\n      //@ts-ignore\n      paramId,\n      //@ts-ignore\n      lexical_formula,\n      //@ts-ignore\n      playerId,\n    ) => {\n      fetchEvents(\n        lang,\n        lexical_formula,\n        playerId,\n        paramId,\n        request,\n        selectedMatches[page][id],\n        shootsRange,\n      )\n    },\n    /**\n     * Получение класса для значения с % или обычных\n     * @param {number} param_id - id параметра\n     * @param {number} param1_id - id параметра необходимого для вычисления значения (проверка на %)\n     * @param {number} gear_group_id - айди группы параметров\n     * @param {number} activeId - активный id параметра (для отображения отсортированного)\n     */\n    getClassName: () => (\n      {\n        //@ts-ignore\n        gear_group_id,\n        //@ts-ignore\n        param_id,\n        //@ts-ignore\n        param1_id,\n      },\n      //@ts-ignore\n      activeId,\n    ) =>\n      cx({\n        'clickable-cell': !param1_id,\n        percents: param1_id,\n        'sorted-by': `${param_id}_${gear_group_id}` === activeId,\n      }),\n    getParamValue: ({\n      player: { params },\n      teamPlayers: { tables },\n      //@ts-ignore\n      //@ts-ignore\n    }) => ({ param_id }, position) => {\n      const playerParam = find(params, { param: param_id })\n      const value = get(tables, `${position}.summaryType`) === 'average_for_match'\n        ? get(playerParam, 'averageValue')\n        : get(playerParam, 'value')\n\n      if (value) return value.toFixed()\n      return '—'\n    },\n  }),\n  observer,\n)\n\nexport default PlayerTrComposed\n","import React from 'react'\nimport { utils } from 'react-sport'\nimport get from 'lodash/get'\nimport {\n  getLongSuffix,\n  //@ts-ignore\n} from 'module/utils/helpers'\nimport PlayerTrComposed from './PlayerTrComposed'\n\ntype TProps = {\n  avatarIsVisible: boolean,\n  avatarUrl: string,\n  player: {\n    shirt_num: string,\n    f_player: number,\n  },\n  activeId: string,\n  getClassName: (param: {}, activeId: string) => string,\n  lexics: {\n    lang: string,\n  },\n  selectedParams: Array<{\n    param_id: number,\n    gear_group_id: number,\n    lexical_formula: string,\n  }>,\n  getParamValue: (param: {}, position: number) => string,\n  handleClick: (\n    paramId: number,\n    lexical_formula: string,\n    playerId: number\n  ) => void,\n  position: number,\n};\n\n/** Компонент строки в траблице со списком игроков в команде\n * @param {object} player - объект текущего игрока\n * @param {string} activeId - активный параметр, по которому идет сортировка внутри таблицы\n * @param {func} getClassName - функция получения класса (разные классы для параметров % и обычных)\n * @param {string} lang - выбранный язык пользователя\n * @param {array} selectedParams - выбранные параметры, которые отображаем в таблице\n * @param {func} getParamValue - функция получения значения для конкретного параметра в ячейке\n */\n\nconst {\n  helpers: { onProfileImageError },\n} = utils\n\nexport const PlayerTr = ({\n  activeId,\n  avatarIsVisible,\n  avatarUrl,\n  getClassName,\n  getParamValue,\n  handleClick,\n  lexics: { lang },\n  player,\n  position,\n  selectedParams,\n}: TProps) => (\n  <tr className='stats-table__table-row'>\n    <td>\n      <div className='stats-cell'>\n        <div className='stats-cell__player'>\n          {avatarIsVisible && (\n            <div className='results__avatar'>\n              <img\n                alt='logo'\n                className='results__avatar-pic'\n                src={avatarUrl}\n                onError={onProfileImageError}\n              />\n            </div>\n          )}\n          <div className='match-table__player-number'>{player.shirt_num}</div>\n          <div className='match-table__player-name'>\n            <a\n              target='_blank'\n              rel='noopener noreferrer'\n              href={`/players/${get(player, 'f_player', '')}`}\n            >\n              {get(player, `short_name_${getLongSuffix(lang)}`, '')}\n            </a>\n          </div>\n        </div>\n      </div>\n    </td>\n    {selectedParams.map((param, index) => (\n      <td\n        key={`${get(param, 'param_id', index)}_${get(\n          param,\n          'gear_group_id',\n          index,\n        )}`}\n        className={getClassName(param, activeId)}\n        onClick={() =>\n          handleClick(param.param_id, param.lexical_formula, player.f_player)\n        }\n      >\n        <table>\n          <tbody>\n            <tr>\n              <td>{getParamValue(param, position)}</td>\n            </tr>\n          </tbody>\n        </table>\n      </td>\n    ))}\n  </tr>\n)\n\n// @ts-ignore\nexport default PlayerTrComposed(PlayerTr)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\nimport { compose, withHandlers } from 'recompose'\n\nimport get from 'lodash/get'\nimport find from 'lodash/find'\nimport orderBy from 'lodash/orderBy'\n\nimport PlayerTr from './PlayerTr'\n\ntype TProps = {\n  avatarIsVisible: boolean,\n  selectedParams: Array<{}>,\n  activeId: string,\n  getPlayersList: (\n    sortInc: boolean,\n    activeId: string,\n    position: number\n  ) => Array<{ f_player: number }>,\n  sortInc: boolean,\n  position: number,\n};\n\nconst PlayersList = ({\n  activeId,\n  avatarIsVisible,\n  getPlayersList,\n  position,\n  selectedParams,\n  sortInc,\n}: TProps) => (\n  <tbody>\n    {getPlayersList(sortInc, activeId, position).map(player => (\n      <PlayerTr\n        key={player.f_player}\n        player={player}\n        activeId={activeId}\n        selectedParams={selectedParams}\n        avatarIsVisible={avatarIsVisible}\n        position={position}\n      />\n    ))}\n  </tbody>\n)\n\nconst PlayersListComposed = compose<any, TProps>(\n  inject('teamPlayers'),\n  //@ts-ignore\n  withHandlers({\n    /**\n     * Получение списка игроков, отсортированного по значению выбранного параметра\n     * @param {boolean} sortInc - флаг для сортировки (по убыванию или по возрастанию)\n     */\n    getPlayersList: ({ teamPlayers: { players, tables } }) => (\n      sortInc: boolean,\n      activeId: string,\n      position: number,\n    ) => {\n      if (!activeId) return players\n      const field: string = get(tables, `${position}.summaryType`) === 'average_for_match'\n        ? 'averageValue'\n        : 'value'\n      const id: string = activeId.split('_')[0]\n      //@ts-ignore\n      const value = player =>\n        get(find(player.params, { param: Number(id) }), field, 0)\n      const sortType = sortInc ? 'asc' : 'desc'\n      return orderBy(players, value, sortType)\n    },\n  }),\n  observer,\n)(PlayersList)\n\nexport default PlayersListComposed\n","import { compose, withHandlers, withState, withProps } from 'recompose'\nimport { inject, observer } from 'mobx-react'\n\n// @ts-ignore\nimport { setSortedIdHOC } from 'hocs/setSortedIdHOC'\n\ntype TProps = {\n  activeId: string | void,\n  deleteTable: () => void,\n  handlePopupAction: () => void,\n  handleNewPopupAction: () => void,\n  links: Array<any>,\n  moveTableUp: () => void,\n  moveTableDown: () => void,\n  newPopupOpened: () => boolean,\n  popupOpened: () => boolean,\n  resetTable: () => void,\n  setSortedId: () => void,\n  setType: (value: string) => string,\n  teamPlayers: {\n    isFetching: boolean,\n    gearParams: Array<{}>,\n    editTempSelected: () => void,\n    tempSelected: Array<{}>,\n  },\n};\n\nexport const playersTableComposed = compose<any, TProps>(\n  inject('lexics', 'teamPlayers', 'tableReportsMST'),\n  withState('popupOpened', 'openPopup', false),\n  withState('newPopupOpened', 'openNewPopup', false),\n  // Хок хендлера сортировки\n  setSortedIdHOC,\n  observer,\n  //@ts-ignore\n  withProps(\n    //@ts-ignore\n    ({\n      param: { gear_group_id, param_id },\n      tableReportsMST: { pdfIsFetching, xlsIsFetching },\n    }) => ({\n      // Пока действий на клик нет, то не нужен и loader, ставим false.\n      links: [{ xls: xlsIsFetching }, { pdf: pdfIsFetching }],\n      activeId: `${param_id}_${gear_group_id}`,\n    }),\n  ),\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    handlePopupAction: ({ openPopup }) => () => openPopup(n => !n),\n    //@ts-ignore\n    handleNewPopupAction: ({ openNewPopup }) => () => openNewPopup(n => !n),\n    // Дополняем метод записью в сторе для таблицы\n    // Устанавливаем активный параметр - по нему идет сортировка в таблице\n    handleSetActiveParam: ({\n      setSortedId,\n      table,\n      teamPlayers: { setActiveParam },\n      //@ts-ignore\n    }) => (param) => {\n      setSortedId(param)\n      setActiveParam(table, param)\n    },\n  }),\n  observer,\n)\n","import React from 'react'\n\nimport {\n  TableHeaderSettingsButton,\n  T9n,\n  DownloadLinksComponent,\n  SimpleDropdown,\n} from 'react-sport'\n\n// @ts-ignore\nimport { EditTableName } from 'features/TableName/components/EditTableName'\n// @ts-ignore\nimport { tableHeaderButtons } from 'module/utils/helpers'\n// @ts-ignore\nimport { tableTypes } from 'config/tables'\nimport { playersTableHeaderComposed } from './composed'\n\ntype TProps = {\n  deleteTable: () => void,\n  getClassName: (avatarIsVisible: boolean) => string,\n  handlePopupAction: () => void,\n  handleNewPopupAction: () => void,\n  links: Array<any>,\n  moveTableUp: () => void,\n  moveTableDown: () => void,\n  resetTable: () => void,\n  setType: (value: string, position: number) => string,\n  table: {\n    position: number,\n    avatarIsVisible: boolean,\n    summaryType: string,\n  },\n  showAvatarToggle: (position: number) => void,\n  teamPlayers: {\n    tables: any,\n  },\n  saveReport: () => void,\n  getDropdownBtns: (\n    valueType: string,\n    setType: (value: string, position: number) => string,\n    position: number,\n  ) => Array<any>,\n}\n\nconst PlayersTableHeaderComponent = ({\n  deleteTable,\n  getClassName,\n  getDropdownBtns,\n  handleNewPopupAction,\n  handlePopupAction,\n  links,\n  moveTableDown,\n  moveTableUp,\n  resetTable,\n  saveReport,\n  setType,\n  showAvatarToggle,\n  table,\n  table: { avatarIsVisible, position, summaryType },\n  teamPlayers,\n}: TProps) => (\n  <div className='stats-table__header'>\n    <div className='stats-table__header-left'>\n      {/*\n      //@ts-ignore */}\n      <SimpleDropdown placeholder={<T9n t='average_for_match' />}>\n        {/*\n          //@ts-ignore */}\n        {getDropdownBtns({\n          summaryType,\n          position,\n          onClick: setType,\n        })}\n      </SimpleDropdown>\n      <a\n        className={getClassName(avatarIsVisible)}\n        onClick={() => showAvatarToggle(position)}\n      >\n        <T9n t='show_photo' />\n      </a>\n    </div>\n    <div className='stats-table__name'>\n      <EditTableName\n        table={table}\n        tableType={tableTypes.teamPlayers}\n        currentStore={teamPlayers}\n      />\n    </div>\n    <div className='stats-table__actions'>\n      {/*\n      //@ts-ignore */}\n      <DownloadLinksComponent links={links} reportHandle={saveReport} />\n      {tableHeaderButtons(\n        handleNewPopupAction,\n        deleteTable,\n        moveTableUp,\n        moveTableDown,\n        resetTable,\n        teamPlayers.tables,\n      ).map(({ action, buttonType, t }) => (\n        <TableHeaderSettingsButton\n          onClick={action}\n          buttonType={buttonType}\n          key={t}\n        >\n          <T9n t={t} />\n        </TableHeaderSettingsButton>\n      ))}\n      <a className='stats-table__action-link' onClick={handlePopupAction}>\n        <i className='icon-settings' />\n      </a>\n    </div>\n  </div>\n)\n\nexport const PlayersTableHeader = playersTableHeaderComposed(\n  PlayersTableHeaderComponent,\n)\n","import { inject, observer } from 'mobx-react'\nimport { compose, withHandlers } from 'recompose'\n\nimport map from 'lodash/map'\nimport values from 'lodash/values'\nimport reduce from 'lodash/reduce'\n\nimport m from 'moment'\nimport cx from 'classnames'\n\n// @ts-ignore\nimport { getDropdownBtnsHoc } from 'hocs/getDropdownBtnsHoc'\n\n// TODO убрать тип any при рефакторинге стора игроков на профиле команды\nexport const playersTableHeaderComposed = compose<any, any>(\n  inject(\n    'lexics',\n    'teamPlayers',\n    'selectedMatches',\n    'tableReportsMST',\n    'teamProfile',\n  ),\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    getClassName: () => checked => cx('team-stats-show-avatar', { checked }),\n    deleteTable: ({\n      table: { position },\n      teamPlayers: { deleteTable },\n    }) => () => deleteTable(position),\n    /**\n     * Поднятие таблицы в списке\n     */\n    moveTableUp: ({\n      table: { position },\n      teamPlayers: { moveTable },\n    }) => () => {\n      if (position === 1) return null\n      return moveTable(position, 'up')\n    },\n    /**\n     * Спуск таблицы вниз по списку\n     */\n    moveTableDown: ({\n      table: { position },\n      teamPlayers: { moveTable },\n    }) => () => moveTable(position, 'down'),\n    /**\n     * Функция возврата таблице значений по-умолчанию\n     */\n    resetTable: ({ table: { position }, teamPlayers: { resetTable } }) => () =>\n      resetTable(position),\n    showAvatarToggle: ({ teamPlayers: { showAvatarToggle } }) =>\n      //@ts-ignore\n      position => showAvatarToggle(position),\n    setType: ({ teamPlayers: { changeValueType } }) => (\n      type: string,\n      position: number,\n    ) => () => {\n      changeValueType(type, position)\n    },\n    saveReport: ({\n      lexics: { getLexics, lang },\n      selectedMatches: { team },\n      tableReportsMST: { fetchData },\n      teamPlayers,\n      teamProfile: { profile },\n      //@ts-ignore\n      //@ts-ignore\n    }) => (e, key) => {\n      const { id, name_eng } = profile\n      const tables = reduce(\n        values(teamPlayers.tables),\n        (\n          acc,\n          {\n            activeId,\n            avatarIsVisible,\n            selectedParams,\n            sortInc,\n            summaryType,\n            tableName,\n            //@ts-ignore\n          },\n        ) =>\n          //@ts-ignore\n          [\n            ...acc,\n            {\n              name: getLexics(tableName) || tableName,\n              params: map(selectedParams, 'param_id'),\n              is_total: Number(summaryType === 'total'),\n              is_avatar: Number(avatarIsVisible && key === 'pdf'),\n              sortby: {\n                param: activeId,\n                flag: sortInc ? 'ASC' : 'DESC',\n              },\n            },\n          ],\n        [],\n      )\n      const options = {\n        lang_id: lang,\n        team: id,\n        matches: team[id],\n        tables,\n      }\n      fetchData(e, key, options)\n        //@ts-ignore\n        .then((response) => {\n          if (response) {\n            const link: any = document.getElementById('download-link')\n            link.href = URL.createObjectURL(response)\n            link.download = `${m().format(\n              'DD-MM-YY',\n            )}_${name_eng}_players.${key}`\n            link.click()\n          }\n        })\n    },\n  }),\n  // Получаем список кнопок для выпадащего меню\n  getDropdownBtnsHoc,\n  observer,\n)\n","import React from 'react'\n\nimport { TableUI } from 'react-sport'\n\nimport { GearPopup } from 'features/GearPopup'\nimport { THead } from 'features/Table'\n\nimport PlayersList from '../PlayersList'\nimport { playersTableComposed } from './composed'\nimport { PlayersTableHeader } from './PlayersTableHeader'\n\ntype TProps = {\n  activeId: string | void,\n  handleNewPopupAction: () => void,\n  handlePopupAction: () => void,\n  handleSetActiveParam: () => void,\n  lexics: {\n    page: string,\n  },\n  links: Array<any>,\n  newPopupOpened: boolean,\n  popupOpened: boolean,\n  sortInc: boolean,\n  table: {\n    avatarIsVisible: boolean,\n    position: number,\n    selectedParams: Array<{}>,\n    summaryType: string,\n  },\n  teamPlayers: {\n    editTempSelected: () => void,\n    gearParams: Array<{}>,\n    isFetching: boolean,\n    tables: any,\n    tempSelected: Array<{}>,\n  },\n}\n\n/** Компонент Таблица со списком игроков в команде\n* @param {string} activeId - выбранный айди параметра по которому сортируем\n* @param {func} handlePopupAction - функция для отображение попап шестеренки\n* @param {func} handleNewPopupAction - функция для отображение попап шестеренки для новой таблицы\n* @param {func} newPopupOpened - открыт попап с новой таблицей\n* @param {func} popupOpened - открыт попап с редактированием параметров для таблицы\n* @param {array} links - ссылки для использования для скачивания отчета\n* @param {func} setSortedId - при клике на шапку в таблице указываем\nайди по которому будем сортировать игроков\n* @param {object} table - объект таблицы со свойствами\n* @param {bool} sortInc - сортируем по убыванию или по возрастанию значения\n* @param {bool} isFetching - флаг для отображения лоадера\n*/\nconst PlayersTableComponent = ({\n  activeId,\n  handleNewPopupAction,\n  handlePopupAction,\n  handleSetActiveParam,\n  links,\n  newPopupOpened,\n  popupOpened,\n  sortInc,\n  table: { avatarIsVisible, position, selectedParams },\n  table,\n  teamPlayers,\n  teamPlayers: { isFetching },\n}: TProps) => (\n  <div className='stats-table'>\n    <PlayersTableHeader\n      table={table}\n      links={links}\n      handlePopupAction={handlePopupAction}\n      handleNewPopupAction={handleNewPopupAction}\n    />\n    {(popupOpened || newPopupOpened) && (\n      <GearPopup\n        table={table}\n        handlePopupAction={handlePopupAction}\n        handleNewPopupAction={handleNewPopupAction}\n        popupOpened={popupOpened}\n        newPopupOpened={newPopupOpened}\n        currentStore={teamPlayers}\n        newPopup={newPopupOpened}\n      />\n    )}\n    <div className='stats-table__wrapper'>\n      <table className='stats-table__table'>\n        <TableUI.Thead>\n          {/*\n              //@ts-ignore */}\n          <THead table={table} setSortedId={handleSetActiveParam} />\n        </TableUI.Thead>\n        {isFetching\n          ? <tbody className='loading' />\n          : (\n            <PlayersList\n              selectedParams={selectedParams}\n                //@ts-ignore\n              activeId={activeId}\n              sortInc={sortInc}\n              avatarIsVisible={avatarIsVisible}\n              position={position}\n            />\n          )\n        }\n      </table>\n    </div>\n  </div>\n)\n\nexport const PlayersTable = playersTableComposed(PlayersTableComponent)\n","\nimport React, { Fragment } from 'react'\nimport { inject, observer } from 'mobx-react'\nimport { compose, lifecycle } from 'recompose'\nimport { PlayersTable } from './PlayersTable'\n\ntype TProps = {\n  teamPlayers: {\n    tables: {},\n  },\n};\n\nconst TeamPlayers = ({ teamPlayers: { tables } }: TProps) => (\n  <Fragment>\n    {Object.values(tables)\n      .sort((a: any, b: any) => a.position - b.position)\n      .map((table: any) => (\n        // @ts-ignore\n        <PlayersTable key={table.position} table={table} />\n      ))}\n  </Fragment>\n)\n\nconst TeamPlayersComposed = compose<any, TProps>(\n  inject('teamPlayers', 'teamProfile', 'selectedMatches'),\n  lifecycle({\n    componentDidMount() {\n      const {\n        // @ts-ignore\n        selectedMatches,\n        // @ts-ignore\n        teamPlayers: { fetchParams },\n        // @ts-ignore\n        teamProfile: {\n          profile: { id },\n        },\n      } = this.props\n      fetchParams(id, selectedMatches)\n    },\n  }),\n  observer,\n)(TeamPlayers)\n\nexport default TeamPlayersComposed\n","import { inject, observer } from 'mobx-react'\nimport { compose, withHandlers, lifecycle } from 'recompose'\nimport {\n  indexLexic,\n  teamLexic,\n  filtersLexic,\n  markersLexic,\n  tableParamsLexic,\n  tableParamsLexicShort,\n  tableParamsNumLexic,\n  videoCutsLexic,\n  //@ts-ignore\n} from 'config/lexics'\n\nexport const teamPageComposed = compose(\n  inject('lexics', 'matches', 'teamProfile', 'selectedMatches', 'teamTable'),\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    getTeamProfile: ({ teamProfile: { fetch } }) => (id) => {\n      fetch(id)\n    },\n    //@ts-ignore\n    getGearParams: ({ teamTable: { fetchParams } }) => (id) => {\n      fetchParams(id)\n    },\n  }),\n  lifecycle(\n    {\n      componentDidMount() {\n        const {\n          getTeamProfile,\n          lexics,\n          match: {\n            params: { teamId },\n          },\n          matches,\n        } = this.props\n        lexics.appPage = {\n          page: 'team',\n          phrases: {\n            ...indexLexic,\n            ...teamLexic,\n            ...filtersLexic,\n            ...markersLexic,\n            ...tableParamsLexic,\n            ...tableParamsLexicShort,\n            ...tableParamsNumLexic,\n            ...videoCutsLexic,\n          },\n        }\n        getTeamProfile(teamId)\n        matches.fetch('team', teamId, 0, 20)\n      },\n      //@ts-ignore\n    },\n    //@ts-ignore\n    {\n      //@ts-ignore\n      componentDidUpdate(prevProps) {\n        const {\n          getTeamProfile,\n          match: {\n            params: { teamId },\n          },\n        } = this.props\n        if (prevProps.teamId !== teamId) {\n          getTeamProfile(teamId)\n        }\n      },\n    },\n  ),\n  observer,\n)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\nimport { compose, withProps } from 'recompose'\n// @ts-ignore\nimport { getLongSuffix, isNationalTeam } from 'module/utils/helpers'\nimport cx from 'classnames'\n\n// @ts-ignore\nimport Avatar from 'features/components/common/Avatar'\n\ntype TProps = {\n  teamProfile: {\n    profile: {\n      country_id: number,\n      team_type: number,\n      photo: string,\n    },\n    isLoaded: boolean,\n  },\n  suffix: string,\n}\n\nexport const TeamCard = ({\n  suffix,\n  teamProfile: { isLoaded, profile },\n}: TProps) => {\n  const { country_id, photo, team_type } = profile\n  return (\n    <div\n      className={cx({\n        'player-card-left': isLoaded,\n        'player-card-left player-card-left_loader': !isLoaded,\n      })}\n    >\n      <div className='player-column player-column-avatar'>\n        <div\n          className={cx('player-card-avatar', {\n            'player-card-avatar_national': isNationalTeam(team_type),\n          })}\n        >\n          <Avatar image={photo} name='team' />\n        </div>\n      </div>\n      <div className='player-column player-column-name'>\n        <h1 className='player-card-title'>\n          <span>\n            {/*\n            //@ts-ignore */}\n            {profile[`short_name_${suffix}`] || profile[`name_${suffix}`]}\n          </span>\n        </h1>\n        <div className='player-card-team'>\n          {/*\n          //@ts-ignore */}\n          {country_id && <a>{profile[`country_name_${suffix}`]}</a>}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst TeamCardComposed = compose(\n  inject('teamProfile', 'lexics'),\n  observer,\n  //@ts-ignore\n  withProps(({ lexics: { lang } }) => ({\n    suffix: getLongSuffix(lang),\n  })),\n  //@ts-ignore\n)(TeamCard)\n\nexport default TeamCardComposed\n","import React, { Fragment } from 'react'\nimport { inject, observer } from 'mobx-react'\nimport { toJS } from 'mobx'\n\nimport {\n  compose,\n  lifecycle,\n  withHandlers,\n} from 'recompose'\nimport map from 'lodash/fp/map'\nimport reduce from 'lodash/fp/reduce'\nimport pipe from 'lodash/fp/pipe'\nimport flatten from 'lodash//fp/flatten'\n\nimport { team_params } from 'config/params'\nimport { getSummaryStatValue } from 'module/utils/helpers/getSummaryStatValue'\n\nimport Loader from 'features/components/common/loader/Loader'\nimport { HeaderStatsItem } from 'features/HeaderStatsItem'\n\nimport {\n  TComposedInner,\n  TPropsOuter,\n  TWithHandlers,\n  TWithHandlersOuter,\n  TReduceResult,\n  TParam,\n  TLifecycleProps,\n} from './types'\n\n\n/**\n * Отображение блока со статистикой в шапке профиля\n */\nexport const TeamStatsComponent = ({\n  getEvents,\n  getStat,\n  teamProfile: { profile },\n  teamStats: { isFetching },\n}: TComposedInner) => (\n  <div className='player-card-stats-list'>\n    {isFetching ? (\n      <Loader />\n    ) : (\n      <Fragment>\n        {profile\n          && map(({ lexic_id, param_id, percent }) => (\n            <HeaderStatsItem\n              key={param_id}\n              paramId={param_id}\n              lexicId={lexic_id}\n              percent={percent}\n              events={getEvents(param_id)}\n              statValue={getStat(param_id)}\n              profile={profile}\n            />\n          ))(team_params)}\n      </Fragment>\n    )}\n  </div>\n)\n\nconst teamStatsComposed = compose<TComposedInner, TPropsOuter>(\n  inject(\n    'teamProfile',\n    'teamStats',\n    'selectedMatches',\n  ),\n  withHandlers<TWithHandlers, TWithHandlersOuter>({\n    getEvents: ({ teamStats: { stats } }) => (param_id: number) =>\n      pipe(\n        reduce((acc: TReduceResult, curr: TParam) => {\n          if (curr.f_param === param_id && curr.f_match_event_ids_json) {\n            acc.push(curr.f_match_event_ids_json)\n          }\n          return acc\n        }, []),\n        flatten,\n      )(stats) || [],\n\n    getStat: ({ teamStats: { stats } }) => (param_id: number) =>\n      getSummaryStatValue(param_id, stats, 'average'),\n  }),\n  lifecycle<TLifecycleProps, {}>({\n    componentDidMount() {\n      const {\n        page,\n        pageId,\n        selectedMatches,\n        teamProfile: {\n          profile: { id },\n        },\n        teamStats: { fetch },\n      } = this.props\n      /**\n       * Получение данных по выбранным матчам.\n       * @param {number} id - id профиля команды\n       * @param {array} selectedMatches[page][pageId] - id матчей для запроса\n       */\n      fetch(id, toJS(selectedMatches[page][pageId]))\n    },\n  }),\n  observer,\n)\n\nexport const TeamStats = teamStatsComposed(TeamStatsComponent)\n","import React from 'react'\nimport TeamCard from 'features/TeamPage/components/TeamCard'\nimport { TeamStats } from 'features/TeamPage/components/TeamStats'\nimport MatchSelect from 'features/components/common/MatchSelect'\nimport Loader from 'features/components/common/loader/Loader'\n\ntype TProps = {\n  firstLoad: boolean,\n  //@ts-ignore\n  profile: {},\n  selectedMatches: {},\n  teamId: string,\n}\n\nexport const TeamPageHeader = ({\n  firstLoad,\n  profile,\n  selectedMatches,\n  teamId,\n}: TProps) => (\n  <section className='player-card'>\n    <div className='container-fluid'>\n      <div className='player-card-wrapper'>\n        {profile && <TeamCard />}\n        <div className='player-card-responsive'>\n          {!firstLoad\n            ? (\n          //@ts-ignore\n              <MatchSelect\n                page='team'\n                pageId={teamId}\n              />\n            )\n            : <Loader />}\n        </div>\n        <div className='player-card-right'>\n          {profile && !firstLoad\n            ? (\n              <TeamStats\n                page='team'\n                pageId={teamId}\n                selectedMatches={selectedMatches}\n              />\n            )\n            : <Loader />\n          }\n        </div>\n      </div>\n    </div>\n  </section>\n)\n","import React, { Fragment } from 'react'\nimport { Switch, Route } from 'react-router-dom'\n\nimport { EventPlayer as VideoPlayer, Popup } from 'react-sport'\n\nimport { StatsTabs } from 'features/components/common/stats-tabs/StatsTabs'\nimport TeamPlayers from 'features/TeamPage/components/TeamPlayers'\nimport VideoCuts from 'features/components/common/video-cuts/VideoCuts'\nimport Loader from 'features/components/common/loader/Loader'\nimport { PlayerField } from 'features/components/common/player/PlayerField'\nimport { TeamPageMatches } from 'features/TeamPageMatches'\n\nimport { teamPageComposed } from './teamPageComposed'\nimport { TeamPageHeader } from './TeamPageHeader'\n\nimport 'features/components/common/MainPage.scss'\nimport 'features/components/common/PageCard.scss'\nimport 'features/components/common/Shot.scss'\nimport 'features/components/common/Zones.scss'\n\nimport 'features/components/App/magnific-popup.css'\nimport 'features/components/App/video-player.scss'\nimport 'features/components/common/player-card/player.scss'\nimport 'features/components/common/player-card/PlayerCard.scss'\nimport 'features/components/common/player-stats/PlayerStats.scss'\nimport 'features/components/common/player-stats/PlayerStatsDropdown.scss'\n\ntype TProps = {\n  getGearParams: (id: number | string) => void,\n  lexics: { page: string | null },\n  match: {\n    params: {\n      teamId: string,\n    },\n    url: string,\n  },\n  matches: {\n    firstLoad: boolean,\n  },\n  selectedMatches: {},\n  teamProfile: { profile: {} },\n  teamTable: {\n    gearParams: {},\n    tables: {},\n  },\n}\n\nexport const TeamPageComponent = ({\n  match: {\n    params: {\n      teamId,\n    },\n  },\n  match,\n  matches: { firstLoad },\n  selectedMatches,\n  teamProfile: { profile },\n}: TProps) => (\n  <article className='player for-player'>\n    {/*\n      //@ts-ignore */}\n    <Popup>\n      {/*\n        //@ts-ignore */}\n      <VideoPlayer\n        appName='volleyball'\n      />\n    </Popup>\n    <TeamPageHeader\n      profile={profile}\n      firstLoad={firstLoad}\n      teamId={teamId}\n      selectedMatches={selectedMatches}\n    />\n    <section className='main-page__details'>\n      {!firstLoad\n      //@ts-ignore\n        ? <PlayerField pageId={teamId} />\n        : <Loader />\n      }\n      <div className='main-page__responsive'>\n        <div className='main-page__content'>\n          <div className='main-page__content-header'>\n            <StatsTabs\n              match={match}\n              isStats\n            />\n          </div>\n          <Switch>\n            <Route\n              path='/teams/:teamId/'\n              exact\n              render={() => <TeamPageMatches pageId={teamId} />}\n            />\n            <Route\n              path='/teams/:teamId/video'\n              render={props => (\n                //@ts-ignore\n                <VideoCuts\n                  page='team'\n                  pageType='teams'\n                  playerId={teamId}\n                  {...props}\n                />\n              )}\n            />\n            <Route\n              path='/teams/:teamId/players'\n              exact\n              render={() => (\n                <Fragment>\n                  {/*\n                    //@ts-ignore */}\n                  {profile && selectedMatches && <TeamPlayers />}\n                </Fragment>\n              )}\n            />\n          </Switch>\n        </div>\n      </div>\n    </section>\n  </article>\n)\n\n//@ts-ignore\nexport const TeamPage = teamPageComposed(TeamPageComponent)\n","\nimport React, { Fragment } from 'react'\nimport { T9n } from 'react-sport'\nimport map from 'lodash/map'\n\ntype TProps = {\n  headerVideoButtons: Array<{\n    link: string,\n    id: string,\n    t: string,\n  }>,\n};\n\nconst VideoLinks = ({ headerVideoButtons }: TProps) => (\n  <Fragment>\n    {map(headerVideoButtons, ({ id, link, t }) => (\n      <a key={id} href={link} className='match-header__play-button'>\n        <T9n t={t} />\n      </a>\n    ))}\n  </Fragment>\n)\n\nexport default VideoLinks\n","\nimport React from 'react'\nimport get from 'lodash/get'\nimport find from 'lodash/find'\n\nimport { compose, withHandlers } from 'recompose'\n\ntype TProps = {\n  periods: Array<any>,\n  getScoreByPeriods: (period: {}, team1_id: number, team2_id: number) => string,\n  team1_id: number,\n  team2_id: number,\n};\n\nexport const MatchScore = ({\n  getScoreByPeriods,\n  periods,\n  team1_id,\n  team2_id,\n}: TProps) => (\n  <div className='match-header__periods-wrapper'>\n    {periods.map(period => (\n      <span key={period[0].period} className='match-header__periods'>\n        {getScoreByPeriods(period, team1_id, team2_id)}\n      </span>\n    ))}\n  </div>\n)\n\nconst MatchScoreComposed = compose(\n  withHandlers({\n    //@ts-ignore\n    //@ts-ignore\n    //@ts-ignore\n    getScoreByPeriods: () => (period, team1_id, team2_id) => {\n      const scoreTeam = get(find(period, { team: team1_id }), 'value')\n      const scoreOppTeam = get(find(period, { team: team2_id }), 'value')\n      return `${scoreTeam} : ${scoreOppTeam}`\n    },\n  }),\n)\n\n// @ts-ignore\nexport default MatchScoreComposed(MatchScore)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport MatchScore from './MatchScore/MatchScore'\n\ntype TProps = {\n  matchProfile: {\n    periods: Array<{}>,\n    //@ts-ignore\n    data: {},\n    //@ts-ignore\n    //@ts-ignore\n    data: {\n      match_date: string,\n      score_team1: number,\n      score_team2: number,\n      team1_id: number,\n      team2_id: number,\n    },\n  },\n  suffix: string,\n}\n\nconst MatchInfo = ({\n  matchProfile: {\n    data,\n    data: {\n      //@ts-ignore\n      match_date,\n      //@ts-ignore\n      score_team1,\n      //@ts-ignore\n      score_team2,\n      //@ts-ignore\n      team1_id,\n      //@ts-ignore\n      team2_id,\n    },\n    periods,\n  },\n  suffix,\n}: TProps) => (\n  <div className='match-header__main'>\n    <div className='match-header__event'>\n      <span className='match-header__date'>{match_date}</span>\n    </div>\n    <h1 className='match-header__teams'>\n      <span className='match-header__home'>\n        <Link target='_blank' to={`/teams/${team1_id}`}>\n          {/*\n            //@ts-ignore */}\n          {data[`team1_name_${suffix}`]}\n        </Link>\n      </span>\n      <span className='match-header__score'>\n        {score_team1}:{score_team2}\n      </span>\n      <span className='match-header__away'>\n        <Link target='_blank' to={`/teams/${team2_id}`}>\n          {/*\n          //@ts-ignore */}\n          {data[`team2_name_${suffix}`]}\n        </Link>\n      </span>\n    </h1>\n    <div className='match-header__event'>\n      <span className='match-header__place'>\n        {/*\n        //@ts-ignore */}\n        {data[`tournament_name_${suffix}`]}\n      </span>\n    </div>\n    <MatchScore periods={periods} team1_id={team1_id} team2_id={team2_id} />\n  </div>\n)\n\nexport default MatchInfo\n","\nimport React from 'react'\nimport { inject, observer } from 'mobx-react'\nimport { compose, withProps } from 'recompose'\nimport get from 'lodash/get'\n\n// @ts-ignore\nimport { getSuffix } from 'module/utils/helpers'\nimport VideoLinks from './VideoLinks/VideoLinks'\nimport MatchInfo from './MatchInfo/MatchInfo'\n\ntype TProps = {\n  headerVideoButtons: Array<{\n    link: string,\n    id: string,\n    t: string,\n  }>,\n  suffix: string,\n  lexics: { lang: string },\n  matchProfile: {\n    periods: Array<{}>,\n    //@ts-ignore\n    data: {},\n    //@ts-ignore\n    //@ts-ignore\n    data: {\n      match_date: string,\n      score_team1: number,\n      score_team2: number,\n      team1_id: number,\n      team2_id: number,\n    },\n  },\n};\n\nexport const HeaderComponent = ({\n  headerVideoButtons,\n  matchProfile,\n  suffix,\n}: TProps) => (\n  <div className='match-header'>\n    <div className='match-header__container'>\n      <MatchInfo matchProfile={matchProfile} suffix={suffix} />\n      <div className='match-header__info'>\n        <div className='match-header__play'>\n          <VideoLinks headerVideoButtons={headerVideoButtons} />\n        </div>\n      </div>\n    </div>\n  </div>\n)\n\nconst HeaderComposed = compose(\n  inject('lexics', 'matchProfile'),\n  observer,\n  //@ts-ignore\n  withProps(({ lexics: { lang }, matchProfile: { videoLinks } }) => ({\n    suffix: getSuffix(lang),\n    headerVideoButtons: [\n      {\n        id: 'full_game',\n        link: get(videoLinks, 'full_game.link', ''),\n        t: 'match_popup_full_game',\n      },\n      {\n        id: 'ball_in_play',\n        link: get(videoLinks, 'ball_in_play.link', ''),\n        t: 'match_popup_ball_in_play',\n      },\n    ],\n  })),\n)\n\n// @ts-ignore\nexport const Header = HeaderComposed(HeaderComponent)\n","\nimport { compose, withHandlers, withProps, lifecycle } from 'recompose'\nimport get from 'lodash/get'\nimport { inject, observer } from 'mobx-react'\nimport {\n  indexLexic,\n  matchLexic,\n  filtersLexic,\n  markersLexic,\n  tableParamsLexic,\n  tableParamsLexicShort,\n  tableParamsNumLexic,\n  videoCutsLexic,\n  //@ts-ignore\n} from 'config/lexics'\n\nconst MatchPageComposed = compose(\n  inject('lexics', 'matchProfile'),\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    getMatchProfile: ({ matchProfile: { fetch } }) => (matchId) => {\n      fetch(matchId)\n    },\n\n    //@ts-ignore\n    //@ts-ignore\n    editTempSelected: ({ matchTable: { editTempSelected } }) => (\n      //@ts-ignore\n      action,\n      //@ts-ignore\n      param,\n    ) => {\n      editTempSelected(action, param)\n    },\n  }),\n  //@ts-ignore\n  withProps(({ match }) => {\n    const matchId = get(match, 'params.matchId')\n    return {\n      matchId,\n    }\n  }),\n  lifecycle({\n    componentDidMount() {\n      const {\n        //@ts-ignore\n        getMatchProfile,\n        //@ts-ignore\n        lexics,\n        //@ts-ignore\n        matchId,\n      } = this.props\n      lexics.appPage = {\n        page: 'match',\n        phrases: {\n          ...indexLexic,\n          ...matchLexic,\n          ...filtersLexic,\n          ...markersLexic,\n          ...tableParamsLexic,\n          ...tableParamsLexicShort,\n          ...tableParamsNumLexic,\n          ...videoCutsLexic,\n        },\n      }\n      getMatchProfile(matchId)\n    },\n  }),\n  observer,\n)\n\nexport default MatchPageComposed\n","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\n\nimport { tableTypes } from 'config/tables'\n\nimport { Tables } from 'features/Table'\nimport { StatsTabs } from 'features/components/common/stats-tabs/StatsTabs'\nimport VideoCuts from 'features/components/common/video-cuts/VideoCuts'\nimport { PlayerField } from 'features/components/common/player/PlayerField'\n\nimport { mainContentComposed } from './composed'\n\n\nexport const MainContentComponent = ({\n  //@ts-ignore\n  lexics: { page },\n  //@ts-ignore\n  match,\n  //@ts-ignore\n  matchId,\n  matchTable: {\n    //@ts-ignore\n    isLoaded,\n    //@ts-ignore\n    tables,\n  },\n  //@ts-ignore\n  pageId,\n}) => (\n  <section className='main-page__details'>\n    {/*\n      //@ts-ignore */}\n    <PlayerField pageId={pageId} matchId={matchId} />\n    <div className='main-page__responsive'>\n      <div className='main-page__content'>\n        <div className='main-page__content-header'>\n          <StatsTabs match={match} isStats />\n        </div>\n        <Switch>\n          <Route\n            path='/matches/:matchId/'\n            exact\n            render={() =>\n              (isLoaded ? (\n                <Tables\n                  tableType={tableTypes.matchPlayersTable}\n                  tables={tables}\n                  pageId={matchId}\n                />\n              ) : (\n                <div className='loading' />\n              ))\n            }\n          />\n          <Route\n            path='/matches/:matchId/video'\n            render={props => (\n              //@ts-ignore\n              <VideoCuts\n                page='match'\n                pageType='teams'\n                playerId={pageId}\n                {...props}\n              />\n            )}\n          />\n        </Switch>\n      </div>\n    </div>\n  </section>\n)\n\n// @ts-ignore\nexport const MainContent = mainContentComposed(MainContentComponent)\n","\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withProps, lifecycle } from 'recompose'\n\nimport get from 'lodash/get'\n\nexport const mainContentComposed = compose(\n  inject('lexics', 'matchProfile', 'matches', 'matchTable'),\n  observer,\n  //@ts-ignore\n  withProps(({ matches: { active }, matchProfile }) => {\n    const pageId = get(matchProfile, `data.${active}_id`)\n    return {\n      pageId,\n    }\n  }),\n  lifecycle({\n    componentDidMount() {\n      const {\n        //@ts-ignore\n        matchProfile: { matchId },\n        //@ts-ignore\n        matchTable: { fetchMatchesInfo },\n      } = this.props\n      fetchMatchesInfo(+matchId)\n    },\n  }),\n  observer,\n)\n","import React, { Fragment } from 'react'\nimport { EventPlayer as VideoPlayer, Popup } from 'react-sport'\n\n// @ts-ignore\nimport Loader from 'features/components/common/loader/Loader'\nimport { Header } from './Header'\nimport MatchPageComposed from './MatchPageComposed'\nimport { MainContent } from './MainContent'\n\nimport 'features/components/common/MainPage.scss'\nimport 'features/components/common/PageCard.scss'\nimport 'features/components/common/MatchCard.scss'\nimport 'features/components/common/Shot.scss'\nimport 'features/components/common/Zones.scss'\n\nimport 'features/components/common/player-card/player.scss'\nimport 'features/components/common/player-card/PlayerCard.scss'\nimport 'features/components/common/player-stats/PlayerStats.scss'\nimport 'features/components/common/player-stats/PlayerStatsDropdown.scss'\n\ntype TProps = {\n  match: {},\n  matchId: string,\n  matchProfile: { isFetching: boolean },\n}\n\nexport const MainPage = ({\n  match,\n  matchId,\n  matchProfile: { isFetching },\n}: TProps) => (\n  <div className='match-container'>\n    {/*\n      //@ts-ignore */}\n    <Popup>\n      {/*\n        //@ts-ignore */}\n      <VideoPlayer appName='volleyball' />\n    </Popup>\n    {isFetching ? (\n      <Loader />\n    ) : (\n      <Fragment>\n        <Header />\n        {/*\n            //@ts-ignore */}\n        <MainContent match={match} matchId={matchId} />\n      </Fragment>\n    )}\n  </div>\n)\n\n// @ts-ignore\nexport default MatchPageComposed(MainPage)\n","\nimport React from 'react'\nimport { compose, withHandlers, withProps, withState } from 'recompose'\n\ntype TProps = {\n  child: any,\n  listItemStyle: {},\n  handleMouseHover: () => void,\n};\n\nconst DropDownItem = ({ child, handleMouseHover, listItemStyle }: TProps) => (\n  <div\n    onMouseEnter={handleMouseHover}\n    onMouseLeave={handleMouseHover}\n    style={listItemStyle}\n  >\n    {child}\n  </div>\n)\n\nconst DropDownItemComposed = compose(\n  withState('isHovered', 'toggleHover', false),\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    handleMouseHover: ({ toggleHover }) => () => toggleHover(n => !n),\n  }),\n  //@ts-ignore\n  withProps(({ isHovered, primaryColor }) => ({\n    listItemStyle: {\n      backgroundColor: isHovered ? primaryColor : '#fff',\n      padding: '5px 10px',\n    },\n  })),\n  //@ts-ignore\n)(DropDownItem)\n\nexport default DropDownItemComposed\n","import * as React from 'react'\nimport { compose, withHandlers, withProps, withState } from 'recompose'\nimport cx from 'classnames'\nimport { OutsideClick } from 'react-sport'\nimport './index.scss'\nimport DropDownItem from './DropDownItem'\n\n/**\n * Компонент Dropdown - простой выпадающий список с возможностью кастомизации\n *\n * Работает так\n *  <Dropdown onClick={() => onClick()}>\n *    <ChildFirst/>\n *    <ChildSecond/>\n *  </Dropdown>\n *\n * @property {React, Component, Array} children - компоненты которые являются пунктами выпадашки\n * @property {function} onClick - действие при клике на пункт выпадашки\n * @property {function} handleClick - открытие/закрытие списка\n * @property {React, Component, string} placeholder - выбранный пункт выпадашки\n * @property {function} changePlaceholder - изменение заголовка\n * @property {object} settings - кастомизированные настройки выпадающего меню\n  (основной цвет, отступы, шрифт и тд) не обязательно\n  Прим. settings = {\n    [key]: string\n  }\n */\n\ntype TProps = {\n  children: any,\n  handleClick: () => void,\n  //@ts-ignore\n  placeholder: React.Node,\n  //@ts-ignore\n  statePlaceholder: React.Node,\n  isOpened: boolean,\n  inlineStyles: {\n    placeHolder: {},\n    listItem: {},\n  },\n  primaryColor: string,\n  //@ts-ignore\n  itemClick: (arg: React.Node) => () => void,\n}\n\nconst DropDownSimple = ({\n  children,\n  handleClick,\n  inlineStyles,\n  isOpened,\n  itemClick,\n  placeholder,\n  primaryColor,\n  statePlaceholder,\n}: TProps) => (\n  <div\n    className={cx('dropdown-container', {\n      'dropdown-container__opened': isOpened,\n    })}\n  >\n    {children && (\n      <div className='dropdown-control' onClick={handleClick}>\n        <span style={inlineStyles.placeHolder}>\n          {statePlaceholder || placeholder}\n        </span>\n        <ul\n          className={cx('dropdown-list', {\n            'dropdown-list__hidden': !isOpened,\n          })}\n        >\n          {React.Children.map(children, (child, i) => (\n            <li\n              key={i}\n              className='dropdown-list__item'\n              style={inlineStyles.listItem}\n              onClick={itemClick(child)}\n            >\n              {/*\n              //@ts-ignore */}\n              <DropDownItem primaryColor={primaryColor} child={child} />\n            </li>\n          ))}\n        </ul>\n      </div>\n    )}\n  </div>\n)\n\nconst DropDownSimpleComposed = compose(\n  withState('isOpened', 'handleOpen', false),\n  withState('statePlaceholder', 'changePlaceholder', ''),\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    handleClick: ({ handleOpen }) => () => handleOpen(n => !n),\n    clickOutside: ({ handleOpen }) => () => handleOpen(false),\n    //@ts-ignore\n    itemClick: ({ changePlaceholder, onClick }) => child => () => {\n      changePlaceholder(React.cloneElement(child, { onClick: null }))\n      if (child.props.onClick) child.props.onClick()\n      if (onClick) onClick()\n    },\n  }),\n  //@ts-ignore\n  withProps(({ settings = {} }) => ({\n    //@ts-ignore\n    primaryColor: settings.primaryColor || '#e6e6e6',\n    inlineStyles: {\n      listItem: {\n        //@ts-ignore\n        minWidth: settings.minWidth || '150px',\n        //@ts-ignore\n        fontSize: settings.fontSize || '10px',\n      },\n      placeHolder: {\n        //@ts-ignore\n        paddingLeft: settings.padding || '10px',\n      },\n    },\n  })),\n  OutsideClick,\n  //@ts-ignore\n)(DropDownSimple)\n\nexport default DropDownSimpleComposed\n","import React, { Fragment } from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  lifecycle,\n  compose,\n  withProps,\n  withHandlers,\n} from 'recompose'\n\nimport map from 'lodash/map'\nimport head from 'lodash/head'\n\nimport { DropDownSimple } from 'features/DropDownSimple'\nimport { primarySportColor } from 'config/config'\nimport Loader from 'features/components/common/loader/Loader'\n\nimport './tournamentSeasonsSelect.scss'\n\ntype TProps = {\n  tournamentSeasonSelect: {\n    isLoaded: boolean,\n    //@ts-ignore\n    seasonsList: Array<{}>,\n    selectedSeason?: {\n      //@ts-ignore\n      season_name?: string | null,\n    },\n  },\n  settings: any,\n  tournamentId: number,\n  onSeasonSelect: (tournamentId: number, season_id: number) => () => void,\n}\n\nexport const SeasonSelect = ({\n  onSeasonSelect,\n  settings,\n  tournamentId,\n  tournamentSeasonSelect: {\n    isLoaded,\n    seasonsList,\n  },\n}: TProps) => (\n  <Fragment>\n    <div className='season-select-container'>\n      {isLoaded\n        ? (\n      //@ts-ignore\n          <DropDownSimple\n            //@ts-ignore\n            placeholder={head(seasonsList).season_name}\n            settings={settings}\n          >\n            {map(\n              seasonsList,\n              //@ts-ignore\n              ({ season_id, season_name }) => (\n                <div\n                  key={season_id}\n                  onClick={onSeasonSelect(tournamentId, season_id)}\n                >\n                  {season_name}\n                </div>\n              ),\n            )}\n          </DropDownSimple>\n        )\n        : <Loader />\n      }\n    </div>\n  </Fragment>\n)\n\nconst SeasonSelectComposed = compose(\n  inject('lexics', 'tournamentSeasonSelect', 'tournamentHeaderStats'),\n  //@ts-ignore\n  withHandlers({\n    onSeasonSelect: ({ tournamentSeasonSelect: { changeActiveSeason } }) =>\n      //@ts-ignore\n      (tournamentId, season_id) => () => changeActiveSeason(tournamentId, season_id),\n  }),\n  withProps(() => ({\n    settings: {\n      primaryColor: primarySportColor,\n    },\n  })),\n  lifecycle({\n    componentDidMount() {\n      const {\n        //@ts-ignore\n        tournamentId,\n        //@ts-ignore\n        tournamentSeasonSelect: { fetchSeasons },\n      } = this.props\n      fetchSeasons(tournamentId)\n    },\n  }),\n  observer,\n  //@ts-ignore\n)(SeasonSelect)\n\nexport default SeasonSelectComposed\n","import React, { Fragment } from 'react'\nimport {\n  lifecycle,\n  compose,\n  withHandlers,\n} from 'recompose'\nimport { inject, observer } from 'mobx-react'\n\nimport get from 'lodash/get'\nimport map from 'lodash/map'\n\nimport Loader from 'features/components/common/loader/Loader'\nimport { HeaderStatsItem } from 'features/HeaderStatsItem'\n\nimport { team_params } from 'config/params'\nimport './index.scss'\n\ntype TProps = {\n  getEvents: (param_id: number) => Array<number>,\n  getStat: (param_id: number) => number | string,\n  tournamentHeaderStats: { loaded: boolean },\n};\n\nconst TournamentHeaderStats = ({\n  getEvents,\n  getStat,\n  tournamentHeaderStats: { loaded },\n}: TProps) => (\n  <Fragment>\n    {loaded ? (\n      <div className='header-stats-container'>\n        {map(team_params, ({ lexic_id, param_id, percent }) => (\n          <HeaderStatsItem\n            key={param_id}\n            paramId={param_id}\n            lexicId={lexic_id}\n            percent={percent}\n            events={getEvents(param_id)}\n            statValue={getStat(param_id)}\n          />\n        ))}\n      </div>\n    ) : (\n      <Loader />\n    )}\n  </Fragment>\n)\n\nconst TournamentHeaderStatsComposed = compose(\n  inject('tournamentHeaderStats', 'tournamentSeasonSelect'),\n  observer,\n  //@ts-ignore\n  withHandlers({\n    getStat: ({ tournamentHeaderStats: { countAverageStatValue } }) =>\n      //@ts-ignore\n      param_id => get(countAverageStatValue, param_id, 0).toFixed(1),\n\n    getEvents: ({ tournamentHeaderStats: { stats } }) =>\n      //@ts-ignore\n      param_id => get(stats[param_id], 'events', []),\n  }),\n  lifecycle({\n    componentDidMount() {\n      const {\n        //@ts-ignore\n        tournamentHeaderStats: { fetchHeaderParams },\n      } = this.props\n      fetchHeaderParams()\n    },\n  }),\n  observer,\n  //@ts-ignore\n)(TournamentHeaderStats)\n\nexport default TournamentHeaderStatsComposed\n","import TournamentSeasonSelectStore from './TournamentSeasonSelectStore'\n\nexport default TournamentSeasonSelectStore.create({\n  error: null,\n  isLoaded: false,\n})\n","import React, { Fragment } from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport get from 'lodash/get'\nimport { compose, withProps } from 'recompose'\nimport { getLongSuffix } from 'module/utils/helpers'\n\nimport Avatar from 'features/components/common/Avatar'\n\ntype TProps = {\n  suffix: string,\n  //@ts-ignore\n  countryName: string | null,\n  profile: {\n    photo?: string,\n  },\n}\nconst TournamentPageInfo = ({\n  countryName,\n  profile: {\n    photo,\n    ...profile\n  },\n  suffix,\n}: TProps) => (\n  <Fragment>\n    <div className='tournament-header-left'>\n      <div className='tournament-avatar'>\n        <Avatar image={photo} name='tournament' />\n      </div>\n      <div className='tournament-name'>\n        <h1 className='tournament-header-title'>\n          <span>\n            {/*\n              //@ts-ignore */}\n            {profile[`name_${suffix}`]}\n          </span>\n        </h1>\n        <div className='tournament-header-team'>\n          <a>{countryName}</a>\n        </div>\n      </div>\n    </div>\n  </Fragment>\n)\n\nconst TournamentPageInfoComposed = compose(\n  inject('lexics'),\n  observer,\n  //@ts-ignore\n  withProps(({ lexics: { lang }, profile }) => {\n    const suffix = getLongSuffix(lang)\n    return {\n      suffix,\n      countryName: get(profile, `country.name_${suffix}`),\n    }\n  }),\n  //@ts-ignore\n)(TournamentPageInfo)\n\nexport default TournamentPageInfoComposed\n","import TournamentHeaderStatsStore from './TournamentHeaderStatsStore'\n\nexport default TournamentHeaderStatsStore.create({\n  loaded: false,\n  error: null,\n})\n","import React from 'react'\n// @ts-ignore\nimport { SeasonSelect } from 'features/TournamentSeasonSelect'\n// @ts-ignore\nimport { TournamentHeaderStats } from 'features/TournamentHeaderStats'\n// @ts-ignore\nimport Loader from 'features/components/common/loader/Loader'\nimport TournamentPageInfo from './TournamentPageInfo'\n\ntype TProps = {\n  tournamentId: number,\n  profile: {},\n  isLoaded: boolean,\n}\n\nconst TournamentPageHeader = ({ isLoaded, profile, tournamentId }: TProps) => (\n  <section className='tournament-header'>\n    <div className='tournament-header-wrapper'>\n      <div className='tournament-header__profile-info'>\n        {/*\n        //@ts-ignore */}\n        <TournamentPageInfo profile={profile} />\n      </div>\n      <div className='tournament-header__season-select'>\n        {/*\n        //@ts-ignore */}\n        {profile && <SeasonSelect tournamentId={tournamentId} />}\n      </div>\n      <div className='tournament-header__stats'>\n        {isLoaded ? <TournamentHeaderStats /> : <Loader />}\n      </div>\n    </div>\n  </section>\n)\n\nexport default TournamentPageHeader\n","import {\n  indexLexic,\n  teamLexic,\n  filtersLexic,\n  markersLexic,\n  tableParamsLexic,\n  tableParamsLexicShort,\n  tableParamsNumLexic,\n  videoCutsLexic,\n  //@ts-ignore\n} from 'config/lexics'\n\nexport default {\n  ...indexLexic,\n  ...teamLexic,\n  ...filtersLexic,\n  ...markersLexic,\n  ...tableParamsLexic,\n  ...tableParamsLexicShort,\n  ...tableParamsNumLexic,\n  ...videoCutsLexic,\n}\n","import { compose, lifecycle } from 'recompose'\nimport { inject, observer } from 'mobx-react'\n// @ts-ignore\nimport tournamentLexic from 'config/lexics/tournamentPage'\n\nexport const tournamentPageComposed = compose(\n  inject(\n    'lexics',\n    'tournamentsProfile',\n    'tournamentSeasonSelect',\n    'tournamentMatches',\n  ),\n  lifecycle({\n    componentDidMount() {\n      const {\n        //@ts-ignore\n        lexics,\n        //@ts-ignore\n        match: { params },\n        //@ts-ignore\n        tournamentsProfile: { fetchTournamentProfile },\n      } = this.props\n      lexics.appPage = {\n        page: 'tournaments',\n        phrases: tournamentLexic,\n      }\n      fetchTournamentProfile(Number(params.tournamentId))\n    },\n  }),\n  observer,\n)\n","import React, { Fragment } from 'react'\nimport { Switch, Route, Redirect } from 'react-router-dom'\n\nimport Loader from 'features/components/common/loader/Loader'\nimport { TournamentMatchesTable } from 'features/TournamentPageMatchesTable'\nimport { TournamentPlayersTable } from 'features/TournamentPagePlayersTable'\nimport { StatsTabs } from 'features/components/common/stats-tabs/StatsTabs'\n\nimport TournamentPageHeader from './TournamentPageHeader'\nimport { tournamentPageComposed } from './composed'\n\nimport './tournamentPage.scss'\n\ntype TProps = {\n  match: {\n    url: string,\n    params: {\n      tournamentId: string,\n    },\n  },\n  tournamentMatches: {\n    isLoaded: boolean,\n  },\n  tournamentsProfile: {\n    isLoaded: boolean,\n    profile: {},\n  },\n};\n\nconst TournamentPageComponent = ({\n  match: { params, ...match },\n  tournamentMatches: { isLoaded },\n  tournamentsProfile: { isLoaded: profileLoaded, profile },\n}: TProps) => (\n  <Fragment>\n    {profileLoaded ? (\n      <TournamentPageHeader\n        tournamentId={Number(params.tournamentId)}\n        profile={profile}\n        isLoaded={isLoaded}\n      />\n    ) : (\n      <Loader />\n    )}\n    <section className='main-page__details'>\n      <div className='main-page__responsive'>\n        <div className='main-page__content'>\n          <div className='main-page__content-header'>\n            <StatsTabs match={match} isStats />\n          </div>\n          <Switch>\n            <Route\n              path='/tournaments/:tournamentId/'\n              exact\n              render={() => (\n                <Redirect to={`/tournaments/${params.tournamentId}/matches`} />\n              )}\n            />\n            <Route\n              path='/tournaments/:tournamentId/matches'\n              exact\n              render={() =>\n                (isLoaded ? (\n                //@ts-ignore\n                  <TournamentMatchesTable\n                    tournamentId={Number(params.tournamentId)}\n                  />\n                ) : (\n                  <Loader />\n                ))\n              }\n            />\n            <Route\n              path='/tournaments/:tournamentId/players'\n              exact\n              render={() =>\n                (isLoaded ? (\n                //@ts-ignore\n                  <TournamentPlayersTable\n                    tournamentId={Number(params.tournamentId)}\n                  />\n                ) : (\n                  <Loader />\n                ))\n              }\n            />\n          </Switch>\n        </div>\n      </div>\n    </section>\n  </Fragment>\n)\n\n// @ts-ignore\nexport const TournamentPage = tournamentPageComposed(TournamentPageComponent)\n","import React from 'react'\nimport { Route } from 'react-router-dom'\nimport { inject, observer } from 'mobx-react'\nimport { DragDropContext } from 'react-dnd'\n\nimport HTML5Backend from 'react-dnd-html5-backend'\nimport { compose } from 'recompose'\n\nimport { Login } from 'react-sport'\n\n// @ts-ignore\nimport { loginLexic } from 'config/lexics'\n\nimport { Home } from 'features/components/Home/Home'\n// @ts-ignore\nimport { Header } from 'features/components/Header/Header'\n\nimport { PlayerPage } from 'features/components/PlayerPage/PlayerPage'\n// @ts-ignore\nimport { TeamPage } from 'features/TeamPage/components/TeamPage'\n// @ts-ignore\nimport MatchPage from 'features/components/MatchPage/MatchPage'\n// @ts-ignore\nimport { TournamentPage } from 'features/TournamentPage'\n\nimport './App.scss'\n\ntype TProps = {\n  auth: {\n    isAuth: boolean,\n  },\n  location: {\n    pathname: string,\n  },\n}\n\nconst App = ({ auth: { isAuth }, location: { pathname } }: TProps) => (\n  <div className='App'>\n    {isAuth && pathname !== '/' && <Header />}\n    <Route exact path='/' component={Home} />\n    {/*\n    //@ts-ignore */}\n    <Route path='/login' render={() => <Login loginLexics={loginLexic} />} />\n    <Route path='/players/:playerId' component={PlayerPage} />\n    <Route path='/teams/:teamId' component={TeamPage} />\n    <Route path='/matches/:matchId' component={MatchPage} />\n    <Route path='/tournaments/:tournamentId' component={TournamentPage} />\n    <a className='download-link download-link_hidden' id='download-link'>\n      <span />\n    </a>\n  </div>\n)\n\nconst AppComposed = compose(\n  inject('auth'),\n  DragDropContext(HTML5Backend),\n  observer,\n  //@ts-ignore\n)(App)\n\nexport default AppComposed\n","import TournamentPageStore from './TournamentPageStore'\n\nexport default TournamentPageStore.create({\n  profile: {},\n  isLoaded: false,\n  error: null,\n})\n","import React from 'react'\nimport { Router, Route, Redirect } from 'react-router-dom'\nimport PropTypes from 'prop-types'\nimport { Provider } from 'mobx-react'\n\nimport stores from 'features/stores'\nimport history from 'features/history'\n\nimport App from 'features/components/App/App'\n\n// @ts-ignore\nconst onEnter = (props) => {\n  if (\n    window.localStorage.getItem('AuthUser') === null\n    && props.location.pathname !== '/login'\n  ) {\n    localStorage.setItem('backLocation', props.location.pathname)\n    return <Redirect to='/login' />\n  }\n  return <App {...props} />\n}\n\nonEnter.propTypes = {\n  location: PropTypes.object,\n}\n\nconst Features = () => (\n  <Router history={history}>\n    <Provider {...stores}>\n      <div>\n        <Route path='/' render={props => onEnter(props)} />\n      </div>\n    </Provider>\n  </Router>\n)\n\nexport default Features\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from 'features'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}