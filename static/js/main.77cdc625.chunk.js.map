{"version":3,"sources":["../node_modules/react-sport/dist sync","config/routes.tsx","config/common.tsx","features/history.tsx","features/stores/BasicStore.tsx","config/tabsConfig.tsx","features/stores/Tabs.tsx","features/stores/Matches/MatchesApiStore.tsx","features/stores/Matches/MatchesStore.tsx","config/amplua.tsx","features/stores/PlayerProfile/PlayerProfileStore.tsx","features/stores/PlayerProfile/PlayerProfileApiStore.tsx","config/params.tsx","config/markers.tsx","config/FieldZones.tsx","config/matchSetsConfig.tsx","module/utils/helpers.tsx","features/stores/PlayerStatsHeader/PlayerStatsHeaderApiStore.tsx","features/stores/PlayerStatsHeader/PlayerStatsHeaderStore.tsx","features/stores/TeamStatsHeader/TeamStatsHeaderApiStore.tsx","features/stores/TeamStatsHeader/TeamStatsHeaderStore.tsx","features/stores/InfoItem.tsx","features/stores/Markers/MarkersStore.tsx","features/stores/Markers/MarkersFiltration/MarkersFiltration.tsx","features/stores/Markers/MarkersFiltration/KeysFiltration.tsx","features/stores/Markers/Marker.tsx","features/stores/ToolTips/ToolTipActions.tsx","features/stores/PlayerInfo/FetchPlayerInfo.tsx","features/stores/MapShoot/FetchMapShoot.tsx","features/stores/Markers/FetchMarkerActions.tsx","features/stores/Markers/Actions.tsx","features/stores/Markers/ComposeMarkers.tsx","features/stores/Zones/ZoneActionsMixin.tsx","features/stores/Zones/ZonesStore.tsx","features/stores/ShotType/ShotTypeStore.tsx","features/stores/ShotType/FetchShotType.tsx","features/stores/MapShoot/MapShootStore.tsx","features/stores/PlayerInfo/PlayerInfoStore.tsx","features/stores/ToolTips/ToolTipsStore.tsx","features/stores/ShootsRange/ShootsRange.tsx","features/stores/ShootsRange/RangeActions.tsx","features/stores/VideoCuts/VideoCuts.tsx","features/stores/VideoCuts/PopupItem.tsx","features/stores/VideoCuts/Button.tsx","features/stores/VideoCuts/VideoCutsMixin.tsx","features/stores/VideoCuts/ComposeVideoCuts.tsx","features/stores/MatchLinks/MatchLinksStore.tsx","features/stores/MatchLinks/MatchLinksApiStore.tsx","features/stores/TableReports/filterParams.tsx","features/stores/TableReports/TableReportsStore.tsx","features/stores/TableReports/TableReportsApiStore.tsx","features/Table/components/MatchPopup.tsx","features/Table/components/TBody/index.tsx","features/Table/components/TBody/composed.tsx","config/teamPopupParams.tsx","module/utils/helpers/getDigits/index.tsx","module/utils/helpers/getFilteredStatsByParamId/index.tsx","module/utils/helpers/getSummaryStatValue/index.tsx","features/Table/components/TFoot.tsx","features/Table/components/THead.tsx","features/components/common/loader/Loader.tsx","features/TdLoader/index.tsx","module/utils/helpers/getStatValue/index.tsx","hocs/getExtLinkHOC/index.tsx","config/playListTypes.tsx","features/Table/components/Td/index.tsx","features/Table/components/Td/composed.tsx","features/Table/helpers/getStatsFilterOptions.tsx","features/components/common/map/RangeSettings/index.tsx","features/TableName/components/EditableInput.tsx","features/TableName/components/EditTableName.tsx","features/GearPopup/components/GearTable/index.tsx","features/GearPopup/components/GearTable/composed.tsx","module/utils/update.js","features/GearPopup/components/DndItem/index.tsx","features/GearPopup/components/DndParams/index.tsx","config/lexics/filters.tsx","config/lexics/login.tsx","config/lexics/player.tsx","config/lexics/team.tsx","config/lexics/match.tsx","config/lexics/markers.tsx","config/lexics/tableParams.tsx","config/lexics/tableParamsShort.tsx","config/lexics/tableParamsNum.tsx","config/lexics/videoCuts.tsx","config/lexics/index.tsx","features/GearPopup/components/composed.tsx","features/GearPopup/components/index.tsx","features/GearPopup/components/PopupItem/index.tsx","features/GearPopup/models/gearPopupViews.tsx","features/GearPopup/models/gearPopupActions.tsx","features/GearPopup/models/GearPopupStore.tsx","config/tables.tsx","features/TableHeader/components/HeaderWithOpp.tsx","hocs/getDropdownBtnsHoc.tsx","features/TableHeader/components/HeaderWithAvatar.tsx","features/TableHeader/components/HeaderWithTeams.tsx","features/TableHeader/components/index.tsx","hocs/setSortedIdHOC.tsx","features/Table/components/Table/composed.tsx","features/Table/models/tableActions/addTable.tsx","features/Table/models/tableActions/changeValueType.tsx","features/Table/models/tableActions/deleteTable.tsx","features/Table/models/tableActions/editTable.tsx","features/Table/models/tableActions/editTempTableName.tsx","features/Table/models/tableActions/moveTable.tsx","features/Table/models/tableActions/resetTable.tsx","features/Table/models/tableActions/saveTempParams.tsx","features/Table/models/tableActions/index.tsx","features/Table/models/tableApiActions.tsx","features/Table/models/tableModel.tsx","features/TournamentPageMatchesTable/models/TournamentMatchesTableApiActions.tsx","features/TournamentPageMatchesTable/config/index.tsx","features/TournamentPageMatchesTable/models/TournamentMatchesTableActions.tsx","features/TournamentPageMatchesTable/models/TournamentMatchesTableViews.tsx","features/TournamentPageMatchesTable/models/TournamentMatchesTableStore.tsx","features/TournamentPageMatchesTable/components/index.tsx","module/utils/helpers/emptyStatToZero/index.tsx","features/ShowMoreBtn/index.tsx","hocs/getClickableTdClassNameHoc.tsx","features/TournamentPageMatchesTable/components/HOCs/TFootHOC.tsx","features/TournamentPageMatchesTable/components/LeftSideTr/composed.tsx","features/TournamentPageMatchesTable/components/LeftSideTr/index.tsx","hocs/getMatchLinksHoc.tsx","features/TournamentPageMatchesTable/components/Tr/composed.tsx","features/TournamentPageMatchesTable/components/Tr/index.tsx","features/TournamentPageMatchesTable/components/TournamentTable.tsx","features/TournamentPagePlayersTable/models/apiActions.tsx","features/TournamentPagePlayersTable/models/actions.tsx","features/TournamentPagePlayersTable/models/views.tsx","features/TournamentPagePlayersTable/models/playersStore.tsx","features/TournamentPagePlayersTable/components/index.tsx","features/TournamentPagePlayersTable/components/LeftSideTr/composed.tsx","features/TournamentPagePlayersTable/components/LeftSideTr/index.tsx","features/TournamentPagePlayersTable/components/Tr/composed.tsx","features/TournamentPagePlayersTable/components/Tr/index.tsx","features/TournamentPagePlayersTable/components/TournamentPlayers.tsx","features/MatchProfileTable/components/Tr/composed.tsx","features/MatchProfileTable/components/Tr/index.tsx","features/MatchProfileTable/components/TableMatchWrapper/Table.tsx","features/MatchProfileTable/components/TableMatchWrapper/tableComposed.tsx","features/MatchProfileTable/components/TableMatchWrapper/index.tsx","features/CommonTable/HOCs/TFootHOC.tsx","features/CommonTable/Tr/composed.tsx","features/CommonTable/LeftSideTr/index.tsx","features/CommonTable/LeftSideTr/composed.tsx","features/CommonTable/Tr/index.tsx","features/CommonTable/index.tsx","features/Table/components/TableContent/index.tsx","features/Table/components/TableActions.tsx","features/Table/components/Table/index.tsx","features/Table/components/index.tsx","models/Widgets/PlayersCompare/apiActions.tsx","models/Widgets/PlayersCompare/actions.tsx","models/Widgets/PlayersCompare/views.tsx","models/Widgets/PlayersCompare/PlayersCompareStore.tsx","models/Widgets/PlayersCompare/index.tsx","models/StatsTable/TeamTable/TeamPlayers/TeamPlayersApiActions.tsx","models/StatsTable/TeamTable/TeamPlayers/TeamPlayersActions.tsx","models/StatsTable/TeamTable/TeamPlayers/TeamPlayersStore.tsx","models/StatsTable/TeamTable/TeamPlayers/index.tsx","models/SelectedMatches/SelectedMatchesActions.tsx","models/SelectedMatches/SelectedMatchesStore.tsx","models/SelectedMatches/index.tsx","models/TableReports/TableReportsApiActions.tsx","models/TableReports/TableReportsStore.tsx","models/TableReports/index.tsx","models/MatchProfile/MatchProfileApiActions.tsx","models/MatchProfile/MatchProfileStore.tsx","models/MatchProfile/index.tsx","models/ExternalVideoLinks/titles/getHeaderStatsTitle.tsx","models/ExternalVideoLinks/titles/getMapShootsTitle.tsx","models/ExternalVideoLinks/titles/getTableMatchesTitle.tsx","models/ExternalVideoLinks/titles/getTablesFooterTitle.tsx","models/ExternalVideoLinks/titles/getTeamPlayersTitle.tsx","models/ExternalVideoLinks/titles/getWidgetsTitle.tsx","models/ExternalVideoLinks/setTitle.tsx","models/ExternalVideoLinks/ExternalVideoLinksActions.tsx","models/ExternalVideoLinks/ExternalVideoLinksStore.tsx","models/ExternalVideoLinks/index.tsx","features/MapFilters/models/FiltersApiActions.tsx","features/MapFilters/models/FilterActions.tsx","features/MapFilters/models/FiltersStore.tsx","features/MapFilters/models/index.tsx","features/TeamsCompareWidget/models/TeamsCompareActions.tsx","features/TeamsCompareWidget/models/TeamsCompareApiActions.tsx","features/TeamsCompareWidget/models/TeamsCompareStore.tsx","features/TeamsCompareWidget/components/TeamsCompareStats.tsx","features/TeamsCompareWidget/components/TeamsCompareLogos.tsx","features/TeamsCompareWidget/components/TeamsCompareInfo/index.tsx","features/TeamsCompareWidget/components/TeamsCompareInfo/composed.tsx","features/TeamsCompareWidget/components/TeamsComparePopup/index.tsx","features/TeamsCompareWidget/components/TeamsComparePopup/TeamsComparePopupComposed.tsx","features/TeamsCompareWidget/components/TeamsCompareHeader.tsx","features/TeamsCompareWidget/config/index.tsx","features/TeamsCompareWidget/components/TeamsCompare/index.tsx","features/TeamPage/models/TeamProfileApiActions.tsx","features/TeamPage/models/TeamProfileStore.tsx","features/TeamPage/models/index.tsx","features/TournamentSeasonSelect/models/TournamentSeasonSelectApiActions.tsx","features/TournamentSeasonSelect/models/TournamentSeasonSelectActions.tsx","features/TournamentSeasonSelect/models/TournamentSeasonSelectStore.tsx","features/TournamentPage/models/TournamentPageApiActions.tsx","features/TournamentPage/models/TournamentPageStore.tsx","features/MatchPagePlayers/models/apiActions.tsx","features/MatchPagePlayers/models/actions.tsx","features/MatchPagePlayers/models/matchPlayersStore.tsx","features/TournamentPageMatches/models/TournamentMatchesStore.tsx","features/TournamentPageMatches/models/TournamentMatchesApiActions.tsx","features/TournamentPageMatches/models/TournamentMatchesViews.tsx","features/TournamentPageMatches/models/index.tsx","features/TournamentHeaderStats/models/TournamentHeaderStatsApiActions.tsx","features/TournamentHeaderStats/models/TournamentHeaderStatsActions.tsx","features/TournamentHeaderStats/models/TournamentHeaderStatsStore.tsx","features/PlayerPageMatches/models/PlayerPageMatchesStore.tsx","features/PlayerPageMatches/models/apiActions.tsx","features/PlayerPageMatches/models/actions.tsx","features/PlayerPageMatches/models/index.tsx","features/ErrorModel/index.tsx","features/FetchModel/index.tsx","features/TeamPageMatches/store/model.tsx","features/TeamPageMatches/store/index.tsx","features/TeamPageMatches/store/actions.tsx","features/TeamPageMatches/store/apiActions.tsx","features/TeamPageMatches/components/index.tsx","features/stores/index.tsx","features/ProfilePopup/index.tsx","features/UploadVideoBtn/index.tsx","features/components/Home/Home.tsx","features/components/Header/Header.tsx","features/components/common/stats-tabs/LinksList/index.tsx","features/components/common/stats-tabs/StatsTabs.tsx","features/components/common/player/Header.tsx","features/components/common/map/Pointer.tsx","features/components/common/map/PlayerName.tsx","features/components/common/map/ToolTip/index.tsx","features/components/common/map/MarkerItem.tsx","features/components/common/map/Markers.tsx","features/components/common/map/SaveScreenShot/index.tsx","features/components/common/map/RangeSettingsPopup/index.tsx","features/components/common/video-player/PlayVideoBtn.tsx","features/MapControls/components/ControlsDropDown/index.tsx","features/MapControls/components/TeamsPopup/index.tsx","features/MapControls/components/config/directionsDropdown.tsx","features/MapControls/components/Directions/index.tsx","features/MapControls/components/Zones/index.tsx","features/MapControls/components/index.tsx","config/zones.tsx","features/components/common/map/ZoneStatistic/index.tsx","features/MapField/config/index.tsx","features/MapField/components/MapFieldSVG.tsx","features/MapField/components/FieldZones.tsx","features/MapField/components/MapField.tsx","features/MapFilters/components/config/index.tsx","config/lexics/filtersById.tsx","features/MapFilters/components/FilterItem/FilterMenu/FilterPopup/PopupHOC/index.tsx","features/MapFilters/components/FilterItem/FilterMenu/FilterPopup/ColumnsPopup/index.tsx","features/MapFilters/components/FilterItem/FilterMenu/FilterPopup/ZonesPopup/index.tsx","features/MapFilters/components/FilterItem/FilterMenu/FilterPopup/PopupSimple/index.tsx","features/MapFilters/components/FilterItem/FilterMenu/FilterPopup/PopupWithPlayers/index.tsx","features/MapFilters/components/FilterItem/FilterMenu/FilterPopup/PopupWithHomePlayers/index.tsx","features/MapFilters/components/FilterItem/FilterMenu/index.tsx","features/MapFilters/components/FilterItem/FilterSubMenu/index.tsx","features/MapFilters/components/FilterItem/index.tsx","features/MapFilters/components/index.tsx","module/utils/helpers/getPlayerFullName/index.tsx","features/components/common/widgets/PlayersCompare/PlayerName.tsx","features/components/common/widgets/PlayersCompare/PlayersSelect.tsx","features/components/common/widgets/PlayersCompare/PlayersStats.tsx","features/components/common/widgets/PlayersCompare/PlayersInfo/composed.tsx","features/components/common/widgets/PlayersCompare/PlayersInfo/index.tsx","features/components/common/widgets/PlayersCompare/PlayersComparePopup/index.tsx","features/components/common/widgets/PlayersCompare/PlayersComparePopup/PlayersComparePopupComposed.tsx","features/components/common/widgets/PlayersCompare/PlayerCompareHeader.tsx","features/components/common/widgets/PlayersCompare/config/index.tsx","features/components/common/widgets/PlayersCompare/index.tsx","features/components/common/widgets/Widgets/MatchWidgets.tsx","features/components/common/widgets/Widgets/index.tsx","features/components/common/player/PlayerField.tsx","features/components/common/Avatar.tsx","features/components/common/InfoItem.tsx","features/components/PlayerPage/PlayerCard/index.tsx","features/HeaderStatsItem/components/ToolTip.tsx","features/HeaderStatsItem/components/index.tsx","features/HeaderStatsList/index.tsx","features/components/PlayerPage/PlayerStatsWrapper/index.tsx","module/utils/dateHelpers.tsx","config/matchesSelection.tsx","features/components/common/SelectLabel.tsx","features/components/common/MatchCheckBox.tsx","module/utils/InfinityLoad.tsx","features/components/common/MatchSelectList.tsx","features/components/common/MatchSelectContainer/index.tsx","features/components/common/MatchSelect.tsx","features/components/common/video-cuts/FilterCheckbox.tsx","features/components/common/video-cuts/FilterPopup.tsx","features/components/common/video-cuts/Checked.tsx","features/components/common/video-cuts/FilterElement.tsx","features/components/common/video-cuts/TableButtons.tsx","features/components/common/video-cuts/VideoCutsContainer.tsx","features/components/common/video-cuts/VideoCuts.tsx","features/PlayerPageMatches/components/index.tsx","features/components/PlayerPage/PlayerPageComposed.tsx","features/components/PlayerPage/PlayerPage.tsx","features/TeamPage/components/TeamPlayers/PlayerTrComposed.tsx","features/TeamPage/components/TeamPlayers/TdWrapper/index.tsx","features/TeamPage/components/TeamPlayers/PlayerTr.tsx","features/TeamPage/components/TeamPlayers/PlayersList.tsx","features/TeamPage/components/TeamPlayers/PlayersTable/composed.tsx","features/TeamPage/components/TeamPlayers/PlayersTable/PlayersTableHeader/index.tsx","features/TeamPage/components/TeamPlayers/PlayersTable/PlayersTableHeader/composed.tsx","features/TeamPage/components/TeamPlayers/PlayersTable/index.tsx","features/TeamPage/components/TeamPlayers/index.tsx","features/TeamPage/components/teamPageComposed.tsx","features/TeamPage/components/TeamCard.tsx","features/TeamPage/components/TeamStatsWrapper/index.tsx","features/TeamPage/components/TeamPageHeader.tsx","features/TeamPage/components/TeamPage.tsx","features/components/MatchPage/Header/VideoLinks/VideoLinks.tsx","features/components/MatchPage/Header/MatchInfo/MatchScore/MatchScore.tsx","features/components/MatchPage/Header/MatchInfo/MatchInfo.tsx","features/components/MatchPage/Header/index.tsx","features/components/MatchPage/MatchPageComposed.tsx","features/components/MatchPage/MainContent/index.tsx","features/components/MatchPage/MainContent/composed.tsx","features/components/MatchPage/MatchPage.tsx","features/DropDownSimple/components/DropDownItem.tsx","features/DropDownSimple/components/index.tsx","features/TournamentSeasonSelect/components/index.tsx","features/TournamentHeaderStats/components/index.tsx","features/TournamentSeasonSelect/models/index.tsx","features/TournamentPage/components/TournamentPageInfo.tsx","features/TournamentHeaderStats/models/index.tsx","features/TournamentPage/components/TournamentPageHeader.tsx","config/lexics/tournamentPage.tsx","features/TournamentPage/components/composed.tsx","features/TournamentPage/components/index.tsx","features/components/App/App.tsx","features/TournamentPage/models/index.tsx","features/index.tsx","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","API_ROOT","dataURL","concat","beta","routes","profilePaths","header_upload_video","fieldSize","STANDART","width","length","area","markersWithoutOpponentSide","key","props","checkTab","_ref4","c_action","ownSideMarkers","createHistory","BasicStore","stores","Object","classCallCheck","this","allStores","storeName","tabs","tabsForAmplua5","tabsForAmplua6","tabsForAmplua7","tabsForAmplua8","actions","attack","attack_reception","block","pass","serve","serve_reception","defaultDirections","from","to","mainPageTabs","exact","lexics","link","pages","Tabs","page","getStore","_this$getStore2","isFetching","profile","amplua","observable","computed","action","tab","_this2","active","filters","clear","procedures","player","team","fields","MatchesStore","_onSuccess","json","pageId","setTempSelected","setOpened","data","map","pageProfile","get","assertThisInitialized","_this","matches","offset","list","uniqBy","next","error","firstLoad","_onError","limit","_params","dateFrom","arguments","undefined","dateTo","filteredMatches","filter","_ref","matchDate","match_date","m","isBetween","url","config","method","body","JSON","stringify","proc","params","defineProperty","utils","callApi","onRequest","onSuccess","onError","_this3","fetch","_this4","opposite","wingSpiker","middleBlocker","setter","libero","PlayerProfileStore","changeActive","setDefaultDirections","playerId","player_id","headerPlayerParams","4","lexic_id","param_id","percent","8","6","5","7","additional_params","team_params","zone_params","middleOptions","positions","from_x","from_y","to_x","to_y","attack_with_middle_point","middle_x","middle_y","fetchProps","mapShoot","playerInfo","commonExtraCheckMarkers","157","group","values","158","159","playerExtraCheckMarkers","objectSpread","231","51","teamExtraCheckMarkers","attackZone","attackZoneSpecial","frontLineParams","backLineParams","allBlocks","fieldLines","ALL_LINES","BACK_LINE","FRONT_LINE","zones","ATTACK_ZONE","ATTACK_ZONE_SPECIAL","SERVE_ZONE","blockTypes","ALL_BLOCKS","sets","ALL_SETS","FIRST_SET","SECOND_SET","THIRD_SET","dateWithYear","date","year","format","getSuffix","lang","getLongSuffix","cmToFt","cm","resArr","toFixed","toString","split","noImages","tournament","setCoord","pos_x","pos_y","opponentSide","field","_fieldSize$field","x","y","clamp","convertArrToObj","arr","obj","forEach","item","shifted","slice","applyMarkersState","markers","types","marker","actionTypes","_ref8","convertedProps","prop","_ref9","action_type","c_match_event_prop","c_match_event_prop_value","currentProp","includes","ownSide","some","dontShowOpponentSide","isPlainObject","getPlayers","propList","players","_ref10","convertedProp","push","getAbbr","string","strArr","word","charAt","join","toUpperCase","substring","filterDBStats","_ref15","f_option_0","f_option_3","f_option_5","f_param","f_variant_zone","fieldLine","zone","saveTablesToLocalStorage","_ref16","name","tables","table","parse","window","localStorage","getItem","setItem","getDeleteBtn","deleteTable","size","position","t","buttonType","tableHeaderButtons","handleNewPopupAction","moveTableUp","moveTableDown","resetTable","compact","PlayerStatsApiStore","stats","selectedMatches","playerTypeId","playerParams","_v_match_id","_v_player_id","_v_param_id","PlayerStatsHeaderStore","PlayerStatsHeaderApiStore","TeamStatsApiStore","teamId","teamParams","_v_team_id","TeamStatsHeaderStore","InfoItem","tooltips","preventDefault","clickCnt","Markers","superclass","_class","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_superclass","_getPrototypeOf2","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","initializerDefineProperty","inherits","createClass","checked","store","bind","select","visible","isEmpty","getMarkers","checkedFilters","applyDecoratedDescriptor","prototype","configurable","enumerable","writable","initializer","getOwnPropertyDescriptor","checkMarker","c_match_event_prop_value2","c_match_event_prop2","f_player","filterId","property1IsTrue","find","_ref2","_ref3","slicedToArray","propGroup","propValue","property2IsTrue","_ref5","_ref6","doubleKeyFiltration","additionalCheck","extraCheckMarkers","_extraCheckMarkers$fi","every","groupItem","_ref11","_ref12","valueCheck","_ref13","value","_ref17","singleKeyFiltration","mapForCheck","property","groupedFilters","groups","groupName","groupFilters","markersFilteredByGroup","entries","markersToArray","result","_ref7","markersGroup","neededFilters","pickBy","parseInt","linkedMarkers","toConsumableArray","uniq","MarkersFiltration","Marker","Marker_descriptor","Marker_descriptor2","assign","withMiddlePoint","_getPoints","point","middle","points","coord","p","getPoints","pos_from_x","pos_from_y","pos_middle_x","pos_middle_y","pos_to_x","pos_to_y","getToolTipResult","resultList","markersWithResult","prop_id","prop_value_id","result_lexic","lexical_formula","ToolTipActions","loaded","_p_action_result","remoteUtils","_onRequest","setMarkerPlayer","isBlock","language","_ref$markerField","markerField","markersWithName","playerSource","firstname","prop_player","lastname","getToolTipName","playerIdList","FetchPlayerInfo","basicLoaded","basicData","reject","Promise","getPlayersIdList","getFilteredMarkers","_p_player_id","_basicRequest","_basicError","_basicSuccess","propsList","excludePlayer","remove","getToolTipOpponentTeam","teams","markersWithOpponentTeam","f_team_opponent","opponentTeam","FetchMapShoot","objectWithoutProperties","_p_team_id","_p_match_id","getBody","_p_match_arr","_p_date_from","_p_date_to","_p_c_action_arr","FetchMarkers","setMarkers","_onSuccess2","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","basicFetch","stop","_x","_x2","Actions","defaultDirectionsActive","forIn","handleDirection","setRect","rectWidth","rectLength","fieldWidth","fieldLength","x1","x2","y1","y2","setAllVisible","xStart","min","xEnd","max","yStart","yEnd","xStartAbs","xEndInAbs","yStartInAbs","yEndInAbs","markersType","toPairs","directions","direction","_get","xCoordAbs","yCoordAbs","inRange","setVisible","_this5","ComposeMarkers","compose","MarkersStore","setParam","Zones","zoneStats","successActions","totalActions","total","_this6","ZoneActions","left","right","FetchShotType","MapShootStore","reduce","acc","PlayerInfoStore","ToolTipStore","ShootsRangeStore","after","before","setBefore","setAfter","isOpened","allPossession","range","setVideoStart","setVideoEnd","RangeActions","VideoCuts","buttons","event_prop","event_value","moment","duration","events","sumRange","PopupItem","PopupItem_descriptor","PopupItem_descriptor2","PopupItem_descriptor3","lexicalFormula","Button","Button_descriptor","Button_descriptor2","Button_descriptor3","Button_descriptor4","popup","popup_lexic","popupItems","oldActive","currentBtn","setChecked","activeItems","activeItem","popupItem","VideoCutsMixin","_onSuccessButtons","newButtons","lexicIds","_value$","button","button_lexic","buttonInfo","phrases","lexicFetch","rootUrl","uncheckAll","ComposeVideoCuts","MatchLinksStore","links","match_id","type","TableReportsStore","getReportInfo","tableType","commonTable","commonMatches","commonShowOpponentStats","tableReportOptions","matchPlayersTable","playerMatches","showOpponentStats","teamMatches","tournamentMatches","tournamentPlayers","tournamentTeams","_this2$getStore","getLexics","currentProfile","_this2$getReportInfo","prepareConfig","default","lang_id","selectedParams","summaryType","tableName","is_show_opponent","Number","is_total","Boolean","paramId","getParamObj","team1_id","team2_id","activeId","sortInc","sortby","flag","param","getConfig","uri","then","response","blob","catch","MatchPopup","withHandlers","clickOutside","toggleClose","OutsideClick","MatchPopupComposed","f_match","react_default","createElement","className","cx","popup-container__loading","k","target","rel","href","dist","Link","TBody","observer","withProps","rows","sortType","rowsList","orderBy","row","sortBy","tBodyComposed","tableStats","Tr","trItem","rowInfo","lastElemsInGear","rest","percentageParams","gearColumnsList","0","num","getDigits","getFilteredStatsByParamId","getSummaryStatValue","filteredStats","filteredStatsCount","curr","average_for_match","TFoot","setSummaryType","setType","tFootComposed","getActualMatchesList","getClassName","getExtLink","_ref$table","placeholder","onClick","gear_group_id","forOpps","THead","setSortedId","THeadComposed","react","full_lexical_formula","short_lexical_formula","Loader","TdLoader","_ref$className","common_loader_Loader","getStatValue","getExtLinkHOC","inject","withState","shootsRange","toggleLinkIsFetching","request","videoLink","match","playListType","f_match_event_ids_json","event","matchInfo","playListTypes","TdComponent","handleClick","linkIsFetching","TdLoader_TdLoader","Td","_ref$type","preparedStats","matchId","f_team","tournamentMatchesTotal","getStatsFilterOptions","defaultOptions","suffix","firstName","lastName","playerName","prepareExtLinkArgs","tdComposed","RangeSettings","setRangeState","setRangeAfter","setRangeBefore","onBlurHandler","rangeAfter","rangeBefore","_ref5$shootsRange","onChangeHandler","_e$target","newValue","rangeSettingsComposed","onChange","onBlur","EditableInputComposed","withStateHandlers","newName","changeTableName","handleFixName","editTableName","editTempTableName","gearPopupStore","handleShowInput","newPopup","handleFocus","onFocus","tabIndex","EditTableName","getTableName","tempTableName","_ref3$currentStore","currentStore","editTable","setShowInput","n","handleTranslateName","EditTableNameComposed","showInput","components_EditableInput","GearTable","ampluaId","getCurrentGroupInfo","gearParams","getGroupTempSelected","tempSelected","groupParams","isActive","massCheck","_ref6$gearPopupStore","addToTempSelected","removeFromTempSelected","gearTableComposed","checkbox-label_active","components_PopupItem_PopupItem","last","hasOwnProperty","COMMAND_PUSH","COMMAND_UNSHIFT","COMMAND_SPLICE","COMMAND_SET","COMMAND_MERGE","COMMAND_APPLY","ALL_COMMANDS_LIST","ALL_COMMANDS_SET","invariantArrayCase","spec","command","invariant","isArray","specValue","update","nextValue","_assign","constructor","mergeObj","unshift","_nextValue","splice","cardTarget","hover","monitor","component","dragIndex","index","hoverIndex","hoverBoundingRect","findDOMNode","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","moveCard","dndItemComposed","removeParam","pure","DropTarget","connect","connectDropTarget","dropTarget","DragSource","beginDrag","connectDragSource","dragSource","isDragging","DndItem","style","opacity","DndParamsComposed","getId","moveHandler","_ref3$gearPopupStore","fillTempSelected","updatedTempParamsList","$splice","DndParams","_ref$gearPopupStore","lexics_filters","ace","ace_1","ace_for_lose","ace_from_grid","ace_with_touch","advanced_zones","alignment_mistake","all_assistance","all_attack_receptions","all_attacks","all_blocks","all_passes","all_serve_receptions","all_serves","amplua_who_blocked","amplua_who_is_attacking","amplua_who_passed","amplua_who_served","assist","attack_direction","attack_receive_in_zone","attack_reception_result","attack_type","attack_which_receipt","attacks_from_zone","attacks_on_amplua","attacks_to_zone","bad","bad_pass","ball_on_own_side","basic_zones","binding_player","binding_player_attack","block_assists","block_attempt","block_earned_points","block_out","block_out_or_in_your_own_area","block_played_by_striker","block_property","block_type","blocked_players","blocked_second_pass","blocked_shot","bottom_side","bounced_back_from_the_block","center_player","center_player_amplua","central_player_attack","characteristic","coasting","combination","cover","cross","deceptive_shot","deep","deep_serve","defender_out","dense","diagonal_player","diagonal_player_attack","difference","difference_of_attacks","differences","dig","double_back","double_front","finishing_player_attack","first_ball_attackers_home","first_ball_attackers_opp","foot_fault","for_1_block","for_2_blocks","for_3_blocks","four_hits","free_shot","from_zone","good","good_pass","grid_touch","half_power_shot","line_overstep","lose_point","mistake","mistake_while_pass","mistake_while_serve","negative_reception","net_touching","no_value_attacks","on_clean_grid","on_court","opponent","opponent_court","opponent_finished","opponent_side_play","opponents_count","opponents_out_shots","organized","other_body_side","other_players","outside_player","part","pass_direction","pass_from","pass_to","pass_type","pass_types","pass_zone","pipe","pipe_5","planned_attack","planning","position_1","position_2","position_3","position_4","position_5","position_6","positioning","positive_reception","power","power_attack","power_attack_1","power_shot","receive_type","receiver_mistake","reverse_cross","rise","rise_over_head","roll_forward","run_forward","serve_receive_zone","serve_type","serving","short","short_serve","shot_out","simple","soften","softening","splited","step_over","technique_difference","temp","temp1","temp2","to_grid","to_out","to_whom","to_zone","top_side","touched_grid_by_blocker","tough","unforced_opponent_mistakes","wave","which_pass","which_receipt","while_falling","who_attacked","who_attacking","who_blocked","who_blocking","who_else_on_court","who_gave_pass","who_is_attacking","who_is_blocking","who_is_passing","who_is_serving","who_received","who_received_amplua","who_served","who_served_list","with_block_touching","with_blocker_touching","with_step_out","without_zone","won_point","zero_attack","zero_block","zero_block_1","zero_serve","zone_1","zone_2","zone_3","zone_4","zone_5","zone_6","login","contact_us","enter_email","enter_pass","force_aware","force_submit","force_text","log_in","problems_with_sign_in","server_error","sign_in","sign_in_pro","try_instat","wrong_sign_in","lexics_player","tabs_matches","header_my_video","header_my_profile","header_quit","header_team","header_nationality","header_league","header_team_level","header_age","header_contract","header_bodyPart","header_position","header_goals","header_skills","header_instat_index","header_statistics","header_playlists","header_shared_episodes","f_goals","match_show_opponent","average_for_match_opp","home","visitors","total_attack_eff","attack_points","positive_def_receiption","positive_serve_receiptions","setting_assist","setting_assist_percents","good_bad_sets","block_touch_for_own_rally","positive_receiption","params_matches_points","params_matches_rebounds","params_matches_assist","params_matches_steals","params_matches_turnover","average_for_90","group_param_picking_up","group_param_boxscore","group_param_combinations_and_iso","group_param_shots_types","group_param_add_data","amplua_center_short","amplua_pforward_short","amplua_lforward_short","amplua_sguard_short","amplua_pguard_short","header_field_goals_percent","header_3pt_shots_percent","header_free_throws_percent","header_card_age","header_card_birth_data","stat_year","stat_sm","stat_foot","stat_pound","stat_kg","tp_stat_height_sm","tp_stat_height_foot","tp_stat_weght_lbs","tp_stat_weght_kg","match_select_3","match_select_5","match_select_10","match_select_all_season","match_select_this_year","match_selected","match_select_this_season","boxscore_selected_params","boxscore_sec_before","boxscore_sec_after","boxscore_all_range","boxscore_setting_all_ep","boxscore_protocol","boxscore_efficiency","boxscore_combinations","boxscore_with_fouls","boxscore_deff_combine","boxscore_date","boxscore_main_statistics","boxscore_pass","boxscore_challenges","boxscore_lost","boxscore_press","shoots_goals_opponent","shoots_goals","shoots_without_zones","shoots_basic_zones","shoots_extend_zones","shoots_2x_goals","shoots_3x_goals","shoots_opened","shoots_closed","table_popup_dnd_info","match_popup_full_game","match_popup_ball_in_play","match_popup_all_time_player","match_popup_rifling_attack","match_popup_rifling_defense","lexics_team","show_photo","matches_table","players_table","match_show_all_teams","team_leaders","439","441","3178","1327","92","594","755","653","total_attack_points","boxscore_on_average","boxscore_attack","boxscore_flangs","boxscore_type_attack","average_assists","shoots","shoots_opponent","shoots_gate","shoots_field","tabs_players","tabs_lineups","lexics_match","teams_statistic","lexics_markers","tooltip_fault","tooltip_opponent_side_receive","tooltip_positive_receive","tooltip_handled_by_attacker","tooltip_ace","tooltip_ace_player","tooltip_ace_from_grid","tooltip_arrangement_mistake_receive","tooltip_arrangement_mistake","tooltip_good_pass","tooltip_bad_pass","tooltip_point_area","tooltip_lost_point","tooltip_lost_point_out","tooltip_lost_point_block","tooltip_point_block","tooltip_useless_opponent_attack","tooltip_lost_point_overstep","tooltip_point_deffender","tooltip_own_useless_attack","tooltip_lost_point_grid","tooltip_lost_point_grid_touch","tooltip_block_area","tooltip_useless_block_softed","tooltip_lost_point_second_pass","tooltip_lost_point_attack","tooltip_useless_opponent_block","tooltip_out_lost_point","tooltip_overstep_lost_point","tooltip_grid_lost_point","tooltip_serve_fault","tooltip_serve_another_fault","tableParams","main_statisctic","total_points_won","attack_realisation","block_points","aces","back_row_attack_eff","positive_attack_receiption","positive_defence_receiption","all_mistakes","attack_mistakes","block_mistakes","serve_mistakes","attack_receiption_mistakes","defence_receiption_mistakes","receive_mistakes","pass_assist","pass_assist_percents","plus_minus_title","plus_minus","attack_play","attacks","attack_points_percents","attack_mistakes_percents","blocked_attacks","blocked_attacks_percents","first_serve_attacks","first_serve_attacks_points","first_serve_attacks_points_percents","first_serve_attacks_mistakes","first_serve_attacks_mistakes_percents","first_serve_attacks_blocked","first_serve_attacks_blocked_percents","positive_receiption_attacks","positive_receiption_attacks_points","positive_receiption_attacks_points_percents","positive_receiption_attacks_mistakes","positive_receiption_attacks_mistakes_percents","positive_receiption_attacks_blocked","positive_receiption_attacks_blocked_percents","first_line_attacks","first_line_attacks_points","first_line_attacks_points_percents","first_line_attacks_mistakes","first_line_attacks_mistakes_percents","first_line_attacks_blocked","first_line_attacks_blocked_percents","negative_receiption_attacks","negative_receiption_attacks_points","negative_receiption_attacks_points_percents","negative_receiption_attacks_mistakes","negative_receiption_attacks_mistakes_percents","negative_receiption_attacks_blocked","negative_receiption_attacks_blocked_percents","back_line_attacks","back_line_attacks_points","back_line_attacks_points_percents","back_line_attacks_mistakes","back_line_attacks_mistakes_percents","back_line_attacks_blocked","back_line_attacks_blocked_percents","serves","negative_receiption_serves","positive_receiption_serves","force_serves","force_serves_eff","planned_serves","planned_serves_eff","serve_play","serves_receiption","negative_serves_receiption","positive_serves_receiption","defence_serve","positive_defence_serve","negative_defence_serve","block_play","passes","assists","assists_mistakes","positive_passes","negative_passes","to_back_line_passes","to_first_line_passes","rallies_won","points_difference","tableParamsShort","8731","8140","8204","8732","7892","8128","8272","8733","8141","8208","7891","8123","8268","8281","8830","8246","8634","8734","8735","8736","8737","8738","8739","8740","8741","8742","8743","8744","8201","8745","8746","8730","8747","8751","8752","8753","8754","8755","8757","8758","8759","8760","8761","8762","8763","8764","8765","8766","8767","8768","8769","8770","8771","8772","8773","8774","8775","8776","8777","8778","8779","8780","8781","8782","8783","8784","8785","8787","8788","8789","8790","8791","8792","8793","8794","7896","7920","8117","7894","7912","8109","8120","8795","8796","8124","8135","8797","8136","8265","8273","8798","8799","8271","8209","8800","8801","8802","8803","8805","8239","8241","8240","8807","8809","8811","8820","8821","8813","8814","8822","8815","8816","8823","8817","8247","8826","8827","8251","8828","8829","9774","tableParamsNum","8724","8725","8617","8726","8727","8053","8806","8808","8810","8812","8818","8819","8952","9006","8954","9007","8487","8022","8496","8956","8957","8958","8959","8960","8961","8962","8963","8964","8965","8966","8967","8968","8969","8970","8971","8972","8973","8974","8975","8976","8977","8978","8979","8980","8981","8982","8983","8984","8985","7933","8543","8986","8987","8988","8989","7917","7911","7958","8992","8993","8096","8995","8994","8059","8058","8054","8662","8996","8997","8998","8999","9000","9001","9002","9003","9004","9005","9473","9470","8859","videoCuts","video_cuts","offensive","deffensive","cuts_favorite_play_list","cuts_positional_atack","cuts_free_throws","cuts_blocks","cuts_fouls","cuts_fouls_drawn","cuts_video_summary","cuts_off_actions","cuts_deff_actions","cuts_partner","cuts_opponent","indexLexic","video_actions","video_select_all_actions","video_select_partner","video_select_opponent","video_reload","video_reset_filters","enter_team_or_player","header_recently_visited","header_my_players","header_invite_players","header_comments","header_flag_search","header_online_translation","header_men","header_women","boxscore_play_video","episodes_duration","user_settings_duration","default_settings_duration","boxscore_popup_subtitle","Playtype","Isolations","Transition","Pick_n_rolls_handler","Post_up","Cuts","Catch_and_shoot","Put_back","Catch_and_drive","Pickn_Pop","Hand_offs","Screens","Miscellaneous","Pick_n_rolls_roller","reset_tables","new_table","main_statistics","passes_table","passes_table_gk","shots_table","shots_table_gk","challenges","add_table","remove_table","move_table_down","move_table_up","downloadXLS","downloadPDF","vertical_view","horizontal_view","markers_from","markers_to","full_trajectory","match_popup_highlights","match_popup_pure_time","match_popup_goals","match_popup_pdf","match_popup_details","cancel","ok","show_more","7341","gearPopupComposed","getTable","onApply","_ref$currentStore","addTable","saveTempParams","eraseTempSelected","handlePopupAction","playerProfile","localStorageName","onClose","lifecycle","componentDidMount","_this$props","GearPopup","popupItemComposed","checkActive","_ref2$gearPopupStore","isActiveParam","data-name","gearPopupViews","model","volatile","gearPopupActions","self","toJS","isEqual","erase","GearPopupStore","tableLexics","tableStatsTypes","tableTypes","HeaderWithOppComposed","setShowOppStat","toggleShowOpponent","HeaderWithOpp","getDropdownBtnsHoc","getDropdownBtns","reverse","HeaderWithAvatarComponent","avatarIsVisible","toggleShowAvatar","setTypeHandler","HeaderWithAvatarComposed","changeValueType","HeaderWithAvatar","HeaderWithTeamsComposed","matchProfile","teamNames","opp","handleCheckTeam","_ref$teamNames","_ref$teams","showTeam1","showTeam2","tableHeaderComposed","TableHeader","setSortedIdHOC","_ref$param","_ref$sortInc","newParam","clickOnNewParam","sortIsNeedReset","clickCases","newParamClicked","simpleClick","tableComposed","create","matchTable","_ref3$param","playerTable","_ref3$tableType","teamPlayers","teamTable","tournamentMatchesTableStore","tournamentPlayersTableStore","getLinks","_ref5$tableReports","tableReports","pdfIsFetching","xlsIsFetching","xls","pdf","openNewPopup","openPopup","saveReport","getReport","teamProfile","tournamentsProfile","tournaments","document","getElementById","Date","URL","createObjectURL","download","getDate","getMonth","getFullYear","click","tablesList","omitedTables","omit","updatedTables","moveTable","_objectSpread2","_objectSpread3","tableCount","currentTable","prevTable","nextTable","removeItem","saveTables","tableActions","tableApiActions","getGearParamsList","_v_amplua_id","_onSuccessGearParams","totalParams","fetchGroups","_onSuccessGroups","current","group_id","String","group_lexical_formula","Param","clickable","number","gear_subgroup_id","is_default","maybeNull","param1_id","array","param2_id","identifierNumber","sort_order","GearParam","ParamGroup","group_name","TableCommon","frozen","paramGroups","union","TableStore","TournamentMatchesTableApiActions","fetchTableInfo","flow","fetchTableParams","paramsList","summarySelectedParamsFromTables","defaultParams","matchesToFetch","partFetching","_onSuccesTableParams","flatten","canFetch","isLoaded","TournamentMatchesTableActions","defaultTable","1","addOffset","TournamentMatchesTableViews","views","paramsSummary","currentTableSelectedParams","actualMatchesList","take","getParent","matchesTotal","matchesIds","chunk","ParamExtended","f_match_event_ids","f_option_1","f_option_2","f_option_4","f_option_6","param_name","TournamentMatchesTable","TournamentMatchesTableStore","TournamentMatchesComposed","tournamentId","_ref$tournamentMatche","components_Tables","emptyStatToZero","ShowMoreBtn","show-more-btn_loading","clickableClassNameHOC","cell","clickable-cell","percents","sorted-by","tfootComposed","teamTableStats","filteredEvents","TFootComponent","leftSideTrComposed","_ref$rowInfo","opponent_score","score","oppTeamName","teamName","rowspan","titleClassName","showOpponent","ownerTeamName","titleScore","shortName","shortNameOpponent","has_video","LeftSideTr","_ref$match","matchPopupOpened","LeftSideTrWrapper","rowSpan","PlayButtonWrapper","MatchDate","MatchNameWrapper","MatchScoreWrapper","MatchScoreForOppWrapper","MatchAbbrName","side","getMatchLinksHoc","getPost","matchLinks","TrComposed","_ref$matchLinks","team_id","opp_team_id","tournamentTableComposed","getMatchesList","_ref2$tournamentMatch","sortedValue","TournamentTable","Thead","TFootHOC_TFoot","ShowMoreBtn_ShowMoreBtn","TournamentPagePlayersApiActions","seasonId","_p_tournament_id","_p_season_id","_onSuccesPlayers","TournamentPagePlayersActions","TournamentPagePlayersViews","o","v","Player","shirt_num","name_rus","name_eng","pos1","TournamentPagePlayersTable","TournamentPlayersTableStore","TournamentPlayersTableComposed","tournamentSeasonSelect","selectedSeason","season_id","TournamentPlayersTable","_ref$tournamentPlayer","avatarUrl","helpers","getLogo","playerProfileLink","shirtNumber","LeftSideTrPlayersWrapper","ResultsAvatar","src","onProfileImageError","PlayerNumber","PlayerName","getStat","LeftSideTr_LeftSideTr","tournamentPlayersComposed","getPlayersList","TournamentPlayers","TrMatchComposed","TrMatch","Table","_ref$matchTable","playerList","playerListByTeams","teamsPlayersStats","filteredPlayerStats","handleSetActiveParam","setActiveParam","componentDidUpdate","prevProps","TableMatchWrapper","_ref$matchProfile$dat","_ref$lexics","forOpp","flat","selectedMatchesList","TfootComposed","trComposed","matchesList","home_match","tdClassName","MatchSide","CommonTable_LeftSideTr_LeftSideTr","CommonTable","tableStatsFiltered","CommonTableComposed","HOCs_TFootHOC_TFoot","TableContent","esm_extends","tableContentComposed","TableActions","_ref4$currentStore","_ref5$currentStore","_ref6$currentStore","TableActionsComposed","newPopupOpened","popupOpened","reportHandle","Tables","Table_Table","PlayersCompareApiActions","defaultPlayers","fetchPlayers","updateSelectedPlayers","setDefaultSelectedParams","t0","_p_player_arr","selectedPlayers","_p_param_arr","_p_lang_id","playersInfo","pick","_v_played","_onSuccessPlayers","PlayersCompareActions","newSelectedPlayers","getParamsIds","defaultIds","PlayersCompareViews","sortedStats","ids","findIndex","Stat","param_name_short","PlayersCompare","boolean","PlayersCompareStore","TeamPlayersApiActions","fetchParams","_onSuccessParams","_p_params_arr","matches_count","averageValue","paramGroupsError","serializedParams","fetchEvents","_p_matches","_p_param_id","_onSuccessEvents","TeamPlayersActions","editTempSelected","_ref3$localStorageNam","_objectSpread6","_objectSpread7","showAvatarToggle","PlayerParam","data_type","option","nickname_eng","nickname_rus","short_name_eng","short_name_rus","TeamPlayers","TeamPlayersStore","SelectedMatchesActions","setSelected","selected","setPeriod","period","selectedPeriod","toggleSelect","opened","onCloseActions","matchesListDidUpdate","_stores$selectedMatch","isPlayerPage","fetchMarkers","eraseAllData","fetchHeaderStats","playerStats","fetchTableStats","teamStats","teamIds","eraseHeaderStats","deleteMarkers","SelectedMatches","SelectedMatchesStore","TableReportsApiActions","fetchData","options","test","changeFetchingStatus","TableReports","MatchProfileApiActions","fetchPeriods","fetchVideoLinks","_onSuccessPeriods","periods","res","_onSuccessVideoLinks","videoLinks","MatchProfile","MatchProfileStore","getHeaderStatsTitle","matchesCount","matchName","paramName","simpleName","playlist_title","playlist_subtitle","getMapShootsTitle","activeTab","getMatchInfo","getTeamOrPlayerMapShootsTitle","_getMatchInfo","activeTeam","oppTeamScore","teamScore","getTableMatchesTitle","longSuffix","title","getTablesFooterTitle","getTeamPlayersTitle","getWidgetsTitle","widgetType","playersCompare","teamsCompare","_getMatchInfo2","setTitle","_ref$tab","_stores$lexics","textForms","dividedBy10","Math","abs","num2str","pop","score_team1","score_team2","tablesFooter","widgets","mapShoots","headerStats","titleTypes","ExternalVideoLinksActions","_ref$lexical_formula","_ref$matchesCount","_ref$matchId","_ref$widgetType","allRange","offset_start","offset_end","open","ExternalVideoLinks","ExternalVideoLinksStore","FiltersApiActions","FilterActions","tempSelectedFilters","toggleOpenMenu","handleTempCheck","popupType","tempClone","filterInfo","findFilterInfo","has","handleAllTempCheck","handleUncheck","checkedCloned","homePlayers","getIdFromString","newObj","FilterElem","filter_name","Filters","FiltersStore","tempChecked","TeamsCompareActions","teamsInfoLoaded","userConfirmedParams","paramsIdList","fetchStats","TeamsCompareApiActions","_p_team_arr","teamsInfo","TeamsCompare","TeamsCompareStore","TeamsStats","team1","team2","TeamsCompareLogos","getImage","alt","TeamsCompareInfo","getTeamParams","teamsCompareWidget","hasVideo","t-compare__clickable-cell","getSortedStats","_ref5$teamsCompareWid","uniqStats","indexOf","teamsCompareInfoComposed","components_TeamsCompareLogos","TeamsCompareStats","TeamsComparePopupComposed","TeamsCompareHeaderComposed","components_TeamsComparePopup","currentLang","_this$props2","_this$props2$teamsCom","TeamsCompareComposed","_ref$teamsCompareWidg","TeamsCompareHeader","TeamProfileApiActions","scout_team_inf","TeamProfile","TeamProfileStore","TournamentPageApiActions","fetchSeasons","_onSuccessSeasons","season","seasons","set","defaultSeasonId","head","changeActiveSeason","TournamentSeasonSelectActions","getRoot","fetchMatchesInfo","seasonsList","Season","season_name","TournamentSeasons","TournamentSeasonsStore","TournamentSeasonSelectApiActions","fetchTournamentProfile","TournamentPage","TournamentPageStore","MatchPagePlayersApiActions","playersPlayedThisMatch","fetchPlayersInfo","type_player","_onSuccessPlayersInfo","updatePlayerProfile","_onSuccessStats","setIsLoaded","MatchPagePlayersActions","_stores$matchProfile$","currentTeamPlayers","firstname_eng","firstname_rus","lastname_eng","lastname_rus","PlayerData","PlayerSimpleModel","MatchPagePlayersTable","MatchPagePlayersStore","Match","match_status","win_lose","name_ru","name_en","name_opponent_ru","name_opponent_en","params_opp","TournamentMatches","TournamentMatchesApiActions","_onSuccessMatchesInfo","TournamentMatchesViews","TournamentMatchesStore","TournamentHeaderStatsApiActions","fetchHeaderParams","_onSuccesHeaderParams","allEvents","currentEvents","count","TournamentHeaderStatsActions","countAverageStatValue","denominator","TournamentHeaderStats","TournamentHeaderStatsStore","PlayerPageMatchesApiActions","filteredParams","fetchPlayerMatches","playerMatchesStore","message","stack","maybe","ErrorModel","setError","getPlainError","FetchModel","teamMatchesStore","setTableStats","setTables","fetchTeamMatches","TeamPageMatches","selectedMatchesIds","allMatches","opponentsIds","teamPageMatchesComposed","_ref$teamTable","remoteStore","Lexics","locale","VideoSummaries","mstRootStore","optional","TournamentSeasonSelectStore","tournamentHeaderStats","playersCompareWidget","tableReportsMST","tutorials","Matches","liveSearch","LiveSearch","sport","infoItem","MatchLinks","PlayerProfile","PlayerStats","TeamStats","shotTypes","ShotTypes","MapShoot","PlayerInfo","ToolTips","ShootsRange","videoPlayer","VideoPlayer","header","Header","profilePopup","recent","Recent","searchString","SearchString","auth","Auth","history","playersVS","teamsVS","ProfilePopup","toggleOpened","logoutClick","logout","composed","path","UploadVideoBtn","externalLink","injectedUploadVideoBtn","Home","appPage","homeComposed","data-block","headerComposed","LinksList","linksListComposed","NavLink","activeClassName","StatsTabs","_ref2$markers","selectToggle","_ref2$zones","resetToDefaultDirections","statsTabComposed","isStats","_ref$tabs","StatsTabs_StatsTabs","Pointer","getDirections","_ref2$beginning","beginning","firstX","firstY","_ref2$ending","ending","lastX","lastY","cat1","cat2","sqrt","pow","angle","asin","PI","rotate","getPointers","_ref3$positionsInfo","positionsInfo","pointer1","pointer2","getPointerClass","_ref4$positionsInfo","pointClass","getTransform","pointers","pointerComposed","_ref$pointers","_ref$positionsInfo","transform","PlayerNameComposed","_ref2$point","firstPlayerName","names","tooltipNames","ToolTip","eventToEpisode","half","second","eventId","round","handleShootClick","fetchVideo","toolTipComposed","_cx","_ref$point","score1","score2","map_PlayerName","_ref3$markers$directi","toolTips","toolTipsWithVectors","markerComposed","ToolTip_ToolTip","getActionTypes","fromType","toType","getScore","getList","preparePoint","middleCondition","_getActionTypes","checkPosition","markerType","checkZone","directionType","_ref10$markers","markersComposed","idx","MarkerItem_Marker","SaveScreenShot","handleDownload","_ref2$lexics","currentTeam","getElementsByClassName","elementBackgroundSVG","extra","pageInfo","picName","takeScreenshot","callback","elementToChangeBackground","saveScreenShotComposed","RangeSettingsPopupComposed","handleShowPopup","rangePopup","hidden","PlayVideoBtnComposed","getRange","_ref2$shootsRange","getShoots","_ref3$markers","activeData","loading","handleVideoExternal","shots","externalFetching","ControlDropDown","toggleIsVisible","isVisible","menuType","map-block__select_open","withTitle","controlDropDownComposed","children","Children","child","i","TeamsPopup","team1Name","team2Name","activeTeamShortName","setIsOpened","handleActive","setIsOpenedHandler","checkTeam","teamsPopupComposed","directionsDropDownButtons","endPoint","Directions","directionsBtns","chooseDirection","_ref5$markers","directionsComposed","zoneTitles","checkedZone","zonesComposed","MapFieldControls","selectArea","setZone","mapFieldControlsComposed","Zones_Zones","video_player_PlayVideoBtn","map_RangeSettingsPopup","zoneBorderConfig","basic","zonesList","coords","advanced","zoneAction","ZonesStatistic","getParams","firstConditionId","secondConditionId","propItem","propItemValue","fieldType","zoneTypeX","zoneTypeY","xCoords","yCoords","coordsType","allMarkers","totalZoneMarkers","succesZoneMarkers","percentage","zoneEvents","_ref9$videoPlayer","setModalOpen","zonesStatisticComposed","fieldSVGDimensions","MapFieldSVG","version","xmlns","xlink","viewBox","xmlSpace","height","fill","d","cy","r","FieldZones","getZonesClassName","fieldZonesComposed","MapFieldSVG_MapFieldSVG","MapField","currentMatches","isString","mapFieldComposed","_ref$markers","SelectionField","wrapperClass","onSelect","rect","Markers_Markers","filterPopupByTab","columnTitleId","zoneId","zoneNumber","filterPopupByTabForPlayer","lexic","2","3","9","10","12","13","14","16","17","18","19","20","21","22","24","25","26","28","29","30","31","32","41","42","43","44","45","46","49","50","53","54","55","56","57","58","59","60","70","71","72","73","74","75","102","103","104","105","106","107","128","129","130","131","132","133","134","135","136","137","138","139","142","143","144","145","146","147","148","149","150","151","152","153","154","156","160","161","162","163","166","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","202","203","204","205","208","209","210","217","218","219","232","263","264","265","266","267","268","269","270","271","272","274","275","276","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","PopupHOC","wrappedComponent","getFilterLexics","getItemClassName","popup-column__item_checked","getTitleClassName","popup-column__title_checked","ColumnsPopup","_ref$filters","toggleOpenClose","ZonesPopup","fieldClassName","map-block__popup-zone-list_home","getZoneClassName","map-block__popup-zone_active","zonesPopupComposed","PopupSimple","PopupWithPlayers","getFullName","getPlayersId","popupWithPlayersComposed","popup-column__wrapper_wide","popup-column__wrapper_narrow","playersList","PopupWithHomePlayers","popupWitHomePlayersComposed","FilterMenu","filterMenuComposed","FilterSubMenu","checkedInGroup","filterSubMenuComposed","FilterItem","menuOpened","menuToggle","getMenuClassName","map-block__title_active","idsFromConfig","filtered","getData","popupWithColumns","_ref22","popupWithZones","popupSimple","popupWithPlayers","popupWithHomePlayers","getCheckedFiltersSubMenu","playersIds","getIds","keyNormalized","filterItemComposed","MapFilters","filtersList","_this$props$filters","mapFiltersComposed","getPlayerFullName","long","playerNameComposed","PlayersSelect","getPlayerNumber","selectPlayer","_ref4$playersCompareW","getTeamPlayers","getPlaceholder","defaultPlayer","fullName","playersSelectComposed","PlayersCompare_PlayerName_PlayerName","PlayersStats","playersInfoComposed","getPlayerParams","PlayersInfo","PlayersCompare_PlayersStats","PlayersComparePopup","PlayersComparePupupComposed","PlayerCompareHeaderComposed","_this$props2$playersC","PlayersCompareComposed","_ref$playersCompareWi","PlayersCompare_PlayerCompareHeader","MatchWidgets","TeamsCompare_TeamsCompare","PlayersCompare_PlayersCompare","Widgets","MatchWidgets_MatchWidgets","PlayerField","playerFieldComposed","player_Header_Header","Widgets_Widgets","Avatar","image","noImage","variants","clickHandle","PlayerCard","playerCardComposed","weight","_ref$playerProfile","player-card-left_loader","common_Avatar","photo","national_team","citizenship","toLowerCase","age","common_InfoItem","birthday","active_hand","HeaderStatsItem","statsIsFetching","toolTipIsVisible","itemClassName","header-stats-item_clickable","header-stats-item_loading","valueBlockClassName","header-stats-item__value_percentage","setLoader","lexicId","toggleTooltip","toggleVisible","headerStatsItemComposed","statValue","onMouseEnter","onMouseLeave","components_ToolTip","HeaderStatsList","getEvents","headerStatsListComposed","PlayerStatsWrapper","playerStatsComposed","_ref$playerStats","getYear","changeYear","selectConfig","SelectLabel","_ref$selected","MatchCheckBox","title__score_lose","title__score_win","InfinityLoad","MatchSelectList","matchSelectListComposed","selectItem","MatchCheckBox_MatchCheckBox","InfinityLoad_InfinityLoad","MatchSelectContainer","getSelected","matchSelectContainerComposed","dropDownClick","extendedSelectItem","scrollHandle","common_SelectLabel","onScroll","loading-active_global","MatchSelectComposed","handleInfiniteLoad","offsetHeight","scrollHeight","scrollTop","_ref7$matches","_ref7$selectedMatches","isYear","month","getStartSeason","getNow","getEndOfSeason","FilterCheckboxComposed","pageType","videoSummaries","clickHandler","setActive","_ref$filter","FilterPopupComposed","video_cuts_FilterCheckbox","FilterElementComposed","onOutsideClick","video_cuts_Checked","video_cuts_FilterPopup","uncheckAllPlayers","orderByLodash","btn","video_cuts_FilterElement","VideoCutsCompose","minutes","seconds","totalTime","playersChecked","getCheckedBtn","getGroupedBtns","componentWillUnmount","resetFilters","changeCount","fetchButtons","_props$videoSummaries","reloadCount","cursor","episodes-table-header-title-play_loader","video_cuts_TableButtons","playersCount","VideoCutsComposed","getSelectedMatches","video_cuts_VideoCutsContainer","PlayerPageMatches","playerPageMatchesComposed","_ref$playerTable","playerPageComposed","getPlayerProfile","getGearParams","playerLexic","filtersLexic","markersLexic","tableParamsLexic","tableParamsLexicShort","tableParamsNumLexic","videoCutsLexic","PlayerPage","appName","common_MatchSelect","PlayerField_PlayerField","Switch","Route","render","common_video_cuts_VideoCuts","PlayerTrComposed","getParamValue","playerParam","TdWrapper_Td","PlayersListComposed","_ref2$teamPlayers","TeamPlayers_PlayerTr","playersTableComposed","_ref$tableReportsMST","PlayersTableHeader","_ref7$lexics","is_avatar","playersTableHeaderComposed","PlayersTable","TeamPlayers_PlayersList","TeamPlayersComposed","sort","b","teamPageComposed","getTeamProfile","teamLexic","TeamCardComposed","teamType","_ref$teamProfile","country_id","team_type","player-card-left","player-card-left player-card-left_loader","player-card-avatar_national","TeamStatsWrapper","teamStatsComposed","_ref$teamStats","TeamPageHeader","components_TeamCard","TeamPage","TeamPageHeader_TeamPageHeader","components_TeamPlayers","VideoLinks","headerVideoButtons","MatchScoreComposed","getScoreByPeriods","scoreTeam","scoreOppTeam","MatchInfo","_ref$matchProfile","MatchInfo_MatchScore_MatchScore","HeaderComposed","Header_MatchInfo_MatchInfo","Header_VideoLinks_VideoLinks","MatchPageComposed","getMatchProfile","matchLexic","MainContent","mainContentComposed","MatchPage_Header_Header","DropDownItemComposed","handleMouseHover","toggleHover","isHovered","primaryColor","listItemStyle","backgroundColor","padding","DropDownSimpleComposed","handleOpen","itemClick","changePlaceholder","React","_ref5$settings","settings","inlineStyles","listItem","minWidth","fontSize","placeHolder","paddingLeft","statePlaceholder","dropdown-container__opened","dropdown-list__hidden","components_DropDownItem","SeasonSelectComposed","onSeasonSelect","_ref$tournamentSeason","DropDownSimple_components","TournamentHeaderStatsComposed","TournamentPageInfoComposed","countryName","_ref$profile","TournamentPageHeader","components_TournamentPageInfo","TournamentSeasonSelect_components","features_TournamentHeaderStats_components","tournamentPage","tournamentPageComposed","tournamentLexic","_ref$tournamentsProfi","profileLoaded","components_TournamentPageHeader","Redirect","AppComposed","DragDropContext","HTML5Backend","isAuth","pathname","location","Header_Header","loginLexics","loginLexic","MatchPage","Features","Router","index_module","components_App_App","onEnter","ReactDOM","features"],"mappings":"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a,KACbC,kBAAmB,MC5FNC,GAAA,CAGbC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,K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hhB,IAAK,CAAC,IAAK,QAIjB,CACEhzC,KAAM,uBACN04C,MAAO,OAET,CACE14C,KAAM,cACN04C,MAAO,MACP33D,KAAM,CAAC,IAAK,IAAK,IAAK,MAExB,CACEif,KAAM,cACN04C,MAAO,KACP33D,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAEjD,CACEif,KAAM,cACN04C,MAAO,MACP33D,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,MAElC,CACEif,KAAM,cACN04C,MAAO,KACP33D,KAAM,CAAC,GAAI,GAAI,GAAI,KAErB,CACEif,KAAM,iBACN04C,MAAO,MACP33D,KAAM,CACJ,CACEkzE,OAAQ,GACRC,WAAY,GAEd,CACED,OAAQ,GACRC,WAAY,GAEd,CACED,OAAQ,GACRC,WAAY,GAEd,CACED,OAAQ,GACRC,WAAY,GAEd,CACED,OAAQ,GACRC,WAAY,GAEd,CACED,OAAQ,GACRC,WAAY,KAIlB,CACEl0D,KAAM,cACN04C,MAAO,MACP33D,KAAM,CAAC,GAAI,GAAI,GAAI,MAGvBtC,iBAAkB,CAChB,CACEuhB,KAAM,cACN04C,MAAO,MACP33D,KAAM,CAAC,IAAK,IAAK,MAEnB,CACEif,KAAM,uBACN04C,MAAO,OAET,CACE14C,KAAM,cACN04C,MAAO,MACP33D,KAAM,CAAC,IAAK,IAAK,IAAK,MAExB,CACEif,KAAM,cACN04C,MAAO,KACP33D,KAAM,CAAC,IAAK,IAAK,OAGrBrC,MAAO,CACL,CACEshB,KAAM,mBACN04C,MAAO,MACP33D,KAAM,CACJ,CACEizE,eAAe,EACfhhB,IAAK,CAAC,MAER,CACEghB,cAAe,GACfhhB,IAAK,CAAC,GAAI,KAEZ,CACEghB,cAAe,IACfhhB,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,KAExB,CACEghB,cAAe,MACfhhB,IAAK,CAAC,GAAI,OAIhB,CACEhzC,KAAM,uBACN04C,MAAO,OAET,CACE14C,KAAM,cACN04C,MAAO,MACP33D,KAAM,CAAC,IAAK,IAAK,IAAK,MAExB,CACEif,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","file":"static/js/main.77cdc625.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 261;","const API_ROOT = 'https://api-volleyball.instatscout.com'\n\nexport const dataURL = `${API_ROOT}/data`\nexport const beta = 'https://new.instatscout.com'\n\nexport default {\n  // API_ROOT: 'https://api-volleyball.instatscout.com',\n  API_ROOT,\n  // API_ROOT: 'http://localhost:3080'\n}\n","export const primarySportColor = '#dbf0ef'\n\nexport const profilePaths = {\n  // пока оставляем комментарии\n  // header_my_profile: '/profile',\n  // header_my_video: '/video/my',\n  // header_playlists: '/video/my/playlists',\n  // header_shared_episodes: '/video/my/shared-episodes',\n  header_upload_video: 'matches/video_uploads/new', // загрузить видео\n}\n\nexport const langsList = [\n  { locale: 'ru', title: 'Русский', className: 'ru' },\n  { locale: 'en', title: 'English', className: 'gb' },\n  { locale: 'pt', title: 'Português', className: 'pt' },\n  // {locale: 'pt', title: 'Brazil', className: 'br'}, // localStorage.lang = 'pt'\n  // {locale: 'uk', title: 'Українська', className: 'ua'},\n  // {locale: 'it', title: 'Italiano', className: 'it'},\n  // {locale: 'nl', title: 'Nederlands', className: 'nl'},\n  // {locale: 'ro', title: 'Română', className: 'ro'},\n  // {locale: 'fr', title: 'Français', className: 'fr'},\n  // {locale: 'de', title: 'Deutsch', className: 'de'},\n  { locale: 'es', title: 'Español', className: 'es' },\n  // {locale: 'tr', title: 'Türkçe', className: 'tr'},\n  // {locale: 'sr', title: 'Српски', className: 'rs'},\n  // {locale: 'pl', title: 'Polska', className: 'pl'},\n  // {locale: 'cs', title: 'Čeština', className: 'cz'},\n  // {locale: 'hu', title: 'Magyar', className: 'hu'},\n  // {locale: 'bg', title: 'Български', className: 'bg'},\n  // {locale: 'sl', title: 'Slovenščina', className: 'si'},\n  // {locale: 'mk', title: 'Македонски', className: 'mk'},\n  { locale: 'zh', title: '中文(简体)', className: 'cn' },\n  // {locale: 'lv', title: 'Latviešu', className: 'lv'},\n  // {locale: 'he', title: 'עברית', className: 'il'},\n  // {locale: 'ja', title: '日本語', className: 'jp'},\n  // {locale: 'el', title: 'Ελληνικά', className: 'gr'},\n  // {locale: 'sq', title: 'Shqip', className: 'al'},\n  // {locale: 'hr', title: 'Hrvatski', className: 'hr'},\n  // {locale: 'bs', title: 'Bosanski', className: 'ba'},\n  // {locale: 'sv', title: 'Svenska', className: 'se'},\n  // {locale: 'fi', title: 'Suomi', className: 'fi'},\n  // {locale: 'lt', title: 'Lietuvių', className: 'lt'},\n  // {locale: 'th', title: 'ภาษาไทย', className: 'th'},\n  // {locale: 'ka', title: 'ქართული', className: 'ge'},\n  // {locale: 'id', title: 'Bahasa Indonesia', className: 'id'},\n  // {locale: 'ar', title: 'العربية', className: 'sa'},\n  // {locale: 'ko', title: '한국어', className: 'kr'},\n  // {locale: 'ms', title: 'Bahasa Melayu', className: 'my'},\n  // {locale: 'sk', title: 'Slovenčina', className: 'sk'},\n  // {locale: 'fa', title: 'فارسی', className: 'tg'},\n  // {locale: 'vi', title: 'Tiếng Việt', className: 'vn'},\n  // {locale: 'az', title: 'Azərbaycan dili', className: 'az'},\n  // {locale: 'uz', title: 'O‘zbek tili', className: 'uz'},\n]\n\nexport const fieldSize = {\n  STANDART: {\n    width: 9,\n    length: 18,\n    area: 9,\n  },\n}\n\ntype TActions = { c_action: any };\n\nexport const actionTypes = {\n  pass: ({ c_action }: TActions) => c_action === 400100,\n  attack: ({ c_action }: TActions) => c_action === 500100,\n  block: ({ c_action }: TActions) => c_action === 600100,\n  serve: ({ c_action }: TActions) => c_action === 200100,\n  attack_reception: ({ c_action }: TActions) => c_action === 300100,\n  serve_reception: ({ c_action }: TActions) => c_action === 30010,\n}\n\nexport const markersWithoutOpponentSide: Array<number | {}> = [\n  200,\n  169,\n  170,\n  171,\n  119,\n  {\n    key: 15,\n    props: [162, 166],\n    checkTab: actionTypes.serve,\n  },\n]\n\nexport const ownSideMarkers: Array<number> = [120, 118]\n","import createHistory from 'history/createBrowserHistory'\n\nexport default createHistory()\n","export default class BasicStore {\n  //@ts-ignore\n  constructor(stores) {\n    //@ts-ignore\n    this.allStores = stores\n  }\n\n  //@ts-ignore\n  getStore(storeName) {\n    //@ts-ignore\n    return this.allStores[storeName]\n  }\n}\n","/* Табы */\n// по умолчанию\nexport const tabs = [\n  'serve',\n  'serve_reception',\n  'pass',\n  'attack',\n  'block',\n  'attack_reception',\n]\n\n// для центрального блокирующего\nexport const tabsForAmplua5 = ['serve', 'attack', 'block', 'attack_reception']\n// для связующего\nexport const tabsForAmplua6 = [\n  'serve',\n  'pass',\n  'attack',\n  'block',\n  'attack_reception',\n]\n\n// Для либеро\nexport const tabsForAmplua7 = ['serve_reception', 'attack_reception']\n\n// для доигровщика\nexport const tabsForAmplua8 = [\n  'serve',\n  'serve_reception',\n  'attack',\n  'block',\n  'attack_reception',\n]\n\nexport const actions = {\n  attack: 500100, //- Атака\n  attack_reception: 300100, //- Прием\n  block: 600100, //- Блок\n  pass: 400100, //- Передача\n  serve: 200100, //- Подача\n  serve_reception: 300100, //- Прием\n}\n\n//Направление маркеров для каждой вкладки по-умолчанию когда нет выбранных зон\n// @ts-ignore\nexport const directionBtns = (tab) => {\n  switch (tab) {\n    case 'attack_reception':\n    case 'serve_reception':\n      return { from: true, to: false }\n    default:\n      return { from: true, to: true }\n  }\n}\n\nexport const defaultDirections = {\n  attack: { from: false, to: true },\n  attack_reception: { from: true, to: false },\n  block: { from: true, to: false },\n  pass: { from: false, to: true },\n  serve: { from: false, to: true },\n  serve_reception: { from: true, to: false },\n}\n\n/**\n * Массив вкладок для основной страницы\n * pages - страницы, на которых нужно отображать вкладку\n * link - часть url страницы для react-router\n * lexics - название вкладки\n * exact - проп для react-router (для точного совпадения url)\n */\nexport const mainPageTabs = [\n  {\n    // Временно отключаем этот таб (пока не до конца реализован функционал)\n    exact: false,\n    lexics: 2862,\n    link: '/video',\n    pages: [],\n  },\n  {\n    exact: true,\n    lexics: 682,\n    link: '',\n    pages: ['player', 'team'],\n  },\n  {\n    exact: true,\n    lexics: 682,\n    link: '/matches',\n    pages: ['tournaments'],\n  },\n  {\n    exact: true,\n    lexics: 9457,\n    link: '/players',\n    pages: ['team', 'tournaments'],\n  },\n  {\n    exact: true,\n    lexics: 9457,\n    link: '',\n    pages: ['match'],\n  },\n]\n","import { observable, action, computed } from 'mobx'\nimport {\n  tabs,\n  tabsForAmplua5,\n  tabsForAmplua6,\n  tabsForAmplua7,\n  tabsForAmplua8,\n  //@ts-ignore\n} from 'config/tabsConfig'\n// @ts-ignore\nimport stores from 'features/stores'\nimport BasicStore from './BasicStore'\n\nexport default class Tabs extends BasicStore {\n  @observable active = 'serve';\n\n  @observable tabs = tabs;\n\n  @computed get list() {\n    const { page } = this.getStore('lexics')\n    const { isFetching, profile } = this.getStore('playerProfile')\n\n    if (page === 'player') {\n      if (!isFetching && profile) {\n        switch (profile.amplua.id) {\n          case 4:\n          case 5:\n            return tabsForAmplua5\n          case 8:\n            return tabsForAmplua8\n          case 6:\n            return tabsForAmplua6\n          case 7:\n            return tabsForAmplua7\n          default:\n            return this.tabs\n        }\n      }\n    }\n\n    return this.tabs\n  }\n\n  //@ts-ignore\n  @action changeActive = (tab) => {\n    this.active = tab\n    // Очищаем выбранные фильтры\n    //@ts-ignore\n    stores.filters.clear()\n  };\n}\n","import { utils } from 'react-sport'\nimport { action } from 'mobx'\nimport routes from 'config/routes'\nimport get from 'lodash/get'\nimport map from 'lodash/map'\nimport filter from 'lodash/filter'\nimport uniqBy from 'lodash/uniqBy'\nimport concat from 'lodash/concat'\n\n\nimport m from 'moment'\n\nimport BasicStore from 'features/stores/BasicStore'\n\nconst procedures = {\n  player: 'scout_player_matches_list',\n  team: 'scout_team_match_period_1',\n}\n\nconst fields = {\n  player: '_p_player_id',\n  team: '_p_team_id',\n}\n\ninterface IMatchesApiStore {\n  fetch: (\n    page: string,\n    pageId: string | number,\n    offset: number,\n    limit: number,\n    //@ts-ignore\n    dateFrom?: string,\n    //@ts-ignore\n    dateTo?: string,\n    //@ts-ignore\n    setTempSelected?: (filteredMatches: Array<number>) => void,\n    //@ts-ignore\n    setOpened?: (pageId: string | number) => void,\n  ) => void | null,\n  addOffset: (pageId: string | number) => void,\n  changeActive: () => void,\n}\n\n// Стор для загруженных матчей\nexport default class MatchesApiStore extends BasicStore\n  implements IMatchesApiStore {\n  //@ts-ignore\n  @action fetch = (\n    //@ts-ignore\n    page,\n    //@ts-ignore\n    pageId,\n    //@ts-ignore\n    offset,\n    //@ts-ignore\n    limit,\n    // При выборе всего года или сезона в выпадающем меню\n    dateFrom = null,\n    dateTo = null,\n    setTempSelected = null,\n    setOpened = null,\n  ) => {\n    //@ts-ignore\n    if (get(this.list[pageId], 'next') === false) {\n      // Если загружены все матчи, то не делаем запрос далее,\n      // просто выбираем из общего списка матчи за год или за сезон\n      // и закрываем меню\n      if (dateFrom && setTempSelected && setOpened) {\n        //@ts-ignore\n        const checkPeriod = matchDate => m(matchDate).isBetween(dateFrom, dateTo)\n        // фильтруем матчи, даты которых входят в нужный диапазон\n        const filteredMatches = map(\n          //@ts-ignore\n          filter(this.list[pageId].matches, ({ match_date }) => checkPeriod(match_date)),\n          'f_match',\n        )\n        //@ts-ignore\n        setTempSelected(filteredMatches)\n        //@ts-ignore\n        setOpened(pageId)\n      }\n      return null\n    }\n    const url = `${routes.API_ROOT}/data`\n    const config = {\n      method: 'POST',\n      body: JSON.stringify({\n        //@ts-ignore\n        proc: procedures[page],\n        params: {\n          //@ts-ignore\n          [fields[page]]: pageId,\n          _p_date_from: dateFrom,\n          _p_date_to: dateTo,\n          _p_offset: offset,\n          _p_limit: limit,\n        },\n      }),\n    }\n    utils.callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        this.isFetching = true\n      },\n      onSuccess: json => this._onSuccess(\n        json,\n        page,\n        pageId,\n        //@ts-ignore\n        setTempSelected,\n        //@ts-ignore\n        setOpened,\n      ),\n      onError: this._onError,\n    })\n  }\n\n  _onSuccess = (\n    json: {\n      data: Array<any>,\n    },\n    page: string,\n    pageId: string | number,\n    //@ts-ignore\n    setTempSelected?: (filteredMatches: Array<number>) => void,\n    //@ts-ignore\n    setOpened?: (pageId: string | number) => void,\n  ) => {\n    //@ts-ignore\n    const data = json.data[0] ? json.data[0][procedures[page]] : []\n\n    if (setTempSelected && setOpened) {\n      setTempSelected(map(data, 'f_match'))\n      setOpened(pageId)\n    }\n\n    const pageProfile = get(this, ['list', pageId])\n    const matches = get(pageProfile, 'matches', [])\n    const offset = get(pageProfile, 'offset', 0)\n    //@ts-ignore\n    this.list[pageId] = {\n      matches: data ? uniqBy(concat(matches, data), 'f_match') : matches,\n      offset: data\n        ? offset + 20\n        : offset,\n      next: !!data,\n    }\n    //@ts-ignore\n    this.error = null\n    //@ts-ignore\n    this.isFetching = false\n    //@ts-ignore\n    if (this.firstLoad) {\n      //@ts-ignore\n      this.firstLoad = false\n    }\n  }\n\n  _onError = (error: any) => {\n    //@ts-ignore\n    this.isFetching = false\n    //@ts-ignore\n    this.error = error\n  }\n\n  //@ts-ignore\n  @action addOffset = (pageId, limit = 20) => {\n    //@ts-ignore\n    const offset = this.list[pageId] ? this.list[pageId].offset : 0\n    this.fetch(this.getStore('lexics').page, pageId, offset, limit)\n  }\n\n  //@ts-ignore\n  @action changeActive = (active) => {\n    //@ts-ignore\n    this.active = active\n  }\n}\n","import { observable } from 'mobx'\n// @ts-ignore\nimport MatchesApiStore from 'features/stores/Matches/MatchesApiStore'\n\nexport default class MatchesStore extends MatchesApiStore {\n  @observable list = {};\n\n  @observable isFetching = true;\n\n  @observable offset = 0;\n\n  @observable firstLoad = true;\n\n  @observable error = false;\n\n  @observable active = 'team1';\n}\n","export const amplua = {\n  team: 0,\n  opposite: 4,\n  wingSpiker: 8,\n  middleBlocker: 5,\n  setter: 6,\n  libero: 7,\n}\n","import { observable } from 'mobx'\n// @ts-ignore\nimport PlayerProfileApiStore from 'features/stores/PlayerProfile/PlayerProfileApiStore'\n\nexport default class PlayerProfileStore extends PlayerProfileApiStore {\n  @observable profile = null;\n\n  @observable isFetching = true;\n\n  @observable error = false;\n}\n","import { action } from 'mobx'\n\nimport { utils } from 'react-sport'\n\nimport get from 'lodash/get'\n\nimport routes from 'config/routes'\nimport BasicStore from 'features/stores/BasicStore'\nimport { amplua } from 'config/amplua'\n\nexport default class PlayerProfileApiStore extends BasicStore {\n  @action fetch = (playerId: string | number) => {\n    const url = `${routes.API_ROOT}/data`\n    const config = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'scout_player_inf',\n        params: {\n          player_id: playerId,\n        },\n      }),\n    }\n    utils.callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        this.profile = null\n        //@ts-ignore\n        this.isFetching = true\n      },\n      onSuccess: json => this._onSuccess(json),\n      onError: this._onError,\n    })\n  }\n\n  _onSuccess = (json: {data: {}}) => {\n    //@ts-ignore\n    this.isFetching = false\n    //@ts-ignore\n    this.profile = get(json, 'data', null)\n    const ampluaId = get(this, 'profile.amplua.id')\n    if (ampluaId === amplua.libero) {\n      this.getStore('tabs').changeActive('serve_reception')\n      this.getStore('markers').setDefaultDirections()\n    }\n\n    //@ts-ignore\n    this.error = null\n  }\n\n  //@ts-ignore\n  _onError = (error: {}) => {\n    //@ts-ignore\n    this.isFetching = false\n    //@ts-ignore\n    this.error = error\n  }\n}\n","type TAmpluaStats = {\n  lexic_id: string,\n  param_id: number,\n  percent: boolean,\n}\n// Параметры, которые отображаются в шапке страницы. Статистика игрока в зависимости от амплуа\nexport const headerPlayerParams: {\n  [key: string]: Array<TAmpluaStats>,\n} = {\n  //Диагональный\n  4: [\n    { lexic_id: '8025', param_id: 175, percent: true },\n    { lexic_id: '7962', param_id: 102, percent: false },\n    { lexic_id: '7788', param_id: 101, percent: false },\n    { lexic_id: '8029', param_id: 103, percent: false },\n    { lexic_id: '8532', param_id: 124, percent: false },\n    { lexic_id: '9472', param_id: 236, percent: true },\n  ],\n  // Доигровщик\n  8: [\n    { lexic_id: '8025', param_id: 175, percent: true },\n    { lexic_id: '7962', param_id: 102, percent: false },\n    { lexic_id: '7788', param_id: 101, percent: false },\n    { lexic_id: '8029', param_id: 103, percent: false },\n    { lexic_id: '7957', param_id: 158, percent: true },\n    { lexic_id: '8532', param_id: 124, percent: false },\n  ],\n  // Связующий\n  6: [\n    { lexic_id: '8068', param_id: 183, percent: false },\n    { lexic_id: '8640', param_id: 184, percent: true },\n    { lexic_id: '7788', param_id: 101, percent: false },\n    { lexic_id: '8029', param_id: 103, percent: false },\n    { lexic_id: '8532', param_id: 124, percent: false },\n    { lexic_id: '9473', param_id: 223, percent: true },\n    { lexic_id: '9470', param_id: 222, percent: true },\n    { lexic_id: '8859', param_id: 224, percent: true },\n  ],\n  // Центральный блокирующий\n  5: [\n    { lexic_id: '8025', param_id: 175, percent: true },\n    { lexic_id: '7962', param_id: 102, percent: false },\n    { lexic_id: '7788', param_id: 101, percent: false },\n    { lexic_id: '8029', param_id: 103, percent: false },\n    { lexic_id: '8605', param_id: 181, percent: false },\n    { lexic_id: '8054', param_id: 148, percent: true },\n    { lexic_id: '8532', param_id: 124, percent: false },\n  ],\n  // Либеро\n  7: [\n    { lexic_id: '7957', param_id: 158, percent: true },\n    { lexic_id: '8095', param_id: 161, percent: true },\n    { lexic_id: '8532', param_id: 124, percent: false },\n  ],\n}\n\nexport const additional_params = [102, 130, 132, 190, 186, 115]\n\n// Параметры, которые отображаются в шапке страницы. Статистика\nexport const team_params = [\n  { lexic_id: '8025', param_id: 175, percent: true },\n  { lexic_id: '7962', param_id: 102, percent: false },\n  { lexic_id: '7788', param_id: 101, percent: false },\n  { lexic_id: '8029', param_id: 103, percent: false },\n  { lexic_id: '7957', param_id: 158, percent: true },\n  { lexic_id: '8532', param_id: 124, percent: false },\n]\n\nexport const zone_params = {\n  attack: [\n    { param_id: 175, percent: true },\n    { param_id: 102, percent: false },\n    { param_id: 104, percent: false },\n  ],\n  block: [\n    { param_id: 144, percent: true },\n    { param_id: 103, percent: false },\n    { param_id: 116, percent: false },\n  ],\n  pass: [\n    { param_id: 191, percent: true },\n    { param_id: 190, percent: false },\n    { param_id: 183, percent: false },\n  ],\n  serve: [\n    { param_id: 154, percent: true },\n    { param_id: 101, percent: false },\n    { param_id: 134, percent: false },\n  ],\n  attack_reception: [\n    { param_id: 161, percent: true },\n    { param_id: 130, percent: false },\n    { param_id: 131, percent: false },\n  ],\n  serve_reception: [\n    { param_id: 158, percent: true },\n    { param_id: 132, percent: false },\n    { param_id: 132, percent: false },\n  ],\n}\n","type TMarker = {\n  [key: string]: {\n    group: Array<number>,\n    values: Array<number> | null,\n  },\n}\n\nconst from_x = 34\nconst from_y = 33\nconst to_x = 36\nconst to_y = 35\n\nexport const middleOptions = [97, 175, 96]\n\nexport const positions = {\n  attack: {\n    from_x: 112,\n    from_y: 111,\n    to_x,\n    to_y,\n  },\n  attack_reception: {\n    from_x,\n    from_y,\n    to_x,\n    to_y,\n  },\n  attack_with_middle_point: {\n    from_x: 112,\n    from_y: 111,\n    middle_x: 141,\n    middle_y: 140,\n    to_x,\n    to_y,\n  },\n  block: {\n    from_x,\n    from_y,\n    to_x,\n    to_y,\n  },\n  pass: {\n    from_x,\n    from_y,\n    to_x,\n    to_y,\n  },\n  serve: {\n    from_x,\n    from_y,\n    to_x,\n    to_y,\n  },\n  serve_reception: {\n    from_x,\n    from_y,\n    to_x,\n    to_y,\n  },\n}\n\nexport const fetchProps = {\n  attack: {\n    mapShoot: [92, 105, 106],\n    playerInfo: [107],\n  },\n  attack_reception: {\n    mapShoot: [107],\n    playerInfo: [107],\n  },\n  block: {\n    playerInfo: [39, 40, 41],\n  },\n  pass: {\n    playerInfo: [67],\n  },\n  serve: {\n    mapShoot: [67],\n    playerInfo: [67],\n  },\n  serve_reception: {\n    mapShoot: [107],\n    playerInfo: [107],\n  },\n}\n\n// объекты с уточняющими значениями для доп. фильтрации маркеров на карте ударов\n// ключ - айди фильтра\n// значение - объект с группой и значением.\n// Проверяем по группе и значению\n// если массив значений (values) null, то проверка идет по айди игрока\n\n//дополнительная проверка маркеров (общая для игрока и команды)\nconst commonExtraCheckMarkers: TMarker = {\n  // Подача в 2 зону\n  157: {\n    group: [15],\n    values: [40, 162],\n  },\n  // Подача в 3 зону\n  158: {\n    group: [15],\n    values: [40, 162],\n  },\n  // Подача в 4 зону\n  159: {\n    group: [15],\n    values: [40, 162],\n  },\n}\n\n//дополнительная проверка маркеров для игроков\nexport const playerExtraCheckMarkers: TMarker = {\n  // Ассисты на блоке\n  231: {\n    group: [118, 119],\n    values: null,\n  },\n  //Заработанные очки на блоке\n  51: {\n    group: [39],\n    values: null,\n  },\n  ...commonExtraCheckMarkers,\n}\n\n//дополнительная проверка маркеров для команды\nexport const teamExtraCheckMarkers = {\n  ...commonExtraCheckMarkers,\n}\n","// attackZone - список параметров, для которых используется\n// в БД f_variant_zone = 125. Относятся только к атаке.\nexport const attackZone = [\n  102,\n  175,\n  105,\n  104,\n  102,\n  175,\n  105,\n  138,\n  137,\n  139,\n  226,\n  227,\n  235,\n  229,\n  233,\n  231,\n  237,\n  225,\n  228,\n  236,\n  230,\n  234,\n  232,\n  238,\n]\n\n// attackZoneSpecial - список специальных параметров, для которых используется\n// в БД f_variant_zone = 127.\nexport const attackZoneSpecial = [\n  210,\n  211,\n  212,\n  213,\n]\n\n// список параметров, для которых f_option_3 = 57, только передняя линия\nexport const frontLineParams = [\n  226,\n  227,\n  235,\n  229,\n  233,\n  231,\n  237,\n  211,\n  213,\n  218,\n]\n\n// список параметров, для которых f_option_3 = 58, только задняя линия\nexport const backLineParams = [\n  225,\n  228,\n  236,\n  230,\n  234,\n  232,\n  238,\n  210,\n  212,\n  217,\n]\n\n// список параметров, для которых f_option_5 = 70, только блоки\nexport const allBlocks = [103, 113, 181, 116, 103, 144, 113, 146, 115, 148]\n\n// Линии поля\nexport const fieldLines = {\n  ALL_LINES: 39, // Все поле\n  BACK_LINE: 58, // Задняя линия\n  FRONT_LINE: 57, // Передняя линия\n}\n\n// Зоны на поле (для атаки или подачи)\nexport const zones = {\n  ATTACK_ZONE: 125, // Зона атаки\n  ATTACK_ZONE_SPECIAL: 127, //особая зона\n  SERVE_ZONE: 123, // Зона подачи\n}\n\n// типы блоков\nexport const blockTypes = {\n  ALL_BLOCKS: 70, // Все блоки\n}\n","const sets = {\n  ALL_SETS: 0,\n  FIRST_SET: 1,\n  SECOND_SET: 2,\n  THIRD_SET: 3,\n}\n\nexport default sets\n","import React from 'react'\nimport m from 'moment'\nimport isPlainObject from 'lodash/isPlainObject'\nimport isArray from 'lodash/isArray'\nimport clamp from 'lodash/clamp'\nimport includes from 'lodash/includes'\nimport filter from 'lodash/filter'\nimport size from 'lodash/size'\nimport compact from 'lodash/compact'\nimport keys from 'lodash/keys'\nimport map from 'lodash/map'\nimport find from 'lodash/find'\nimport flatten from 'lodash/flatten'\n\nimport { getRoot } from 'mobx-state-tree'\nimport {\n  fieldSize,\n  markersWithoutOpponentSide,\n  ownSideMarkers,\n} from 'config/common'\nimport { positions } from 'config/markers'\nimport {\n  zones,\n  fieldLines,\n  blockTypes,\n  attackZone,\n  attackZoneSpecial,\n  frontLineParams,\n  backLineParams,\n  allBlocks,\n} from 'config/FieldZones'\n\nimport sets from 'config/matchSetsConfig'\n\n/**\n * Получение фильтров для маркеров\n * @param {array} filters - массив id фильтров, необходимых для отображения в блоке\n * @param {object || array || number} elem - возвращенное значение от сервера.\n * @param {string} name - если elem объект, то для ключа используем name.\n * Это будет слово для заголовка фильтра в компоненте.\n */\nexport function getFilters(\n  elem: any,\n  filters: Array<any>,\n  name: string = 'items',\n) {\n  const rootObj = {}\n  if (isPlainObject(elem)) {\n    objFilters(rootObj, elem, filters, name)\n  } else if (isArray(elem)) {\n    //@ts-ignore\n    rootObj[name] = arrFilters(elem, filters)\n  } else {\n    //@ts-ignore\n    rootObj[name] = filters.find(({ id }) => id === elem) || elem\n  }\n  return rootObj\n}\n\n/**\n * Обработка значения elem. В случае если от серера пришел объект.\n * @param {object} rootObj - пустой объект по умолчанию, заполняем его парами ключ-значение rootObj[name] = ...\n * @param {object || array || number} elem - возвращенное значение от сервера.\n * @param {array} filters - массив id фильтров, необходимых для отображения в блоке\n * @param {string} name - имя для ключа для нового объекта rootObj\n */\nconst objFilters = (\n  rootObj: {},\n  //@ts-ignore\n  elem: { id: number | string | null, items?: Array<any> },\n  filters: Array<{ id: number }>,\n  name: string,\n) => {\n  if ('id' in elem) {\n    //@ts-ignore\n    rootObj[name] = {\n      info: filters.find(({ id }) => id === elem.id) || elem.id,\n    }\n    if ('items' in elem) {\n      //@ts-ignore\n      rootObj[name] = {\n        //@ts-ignore\n        ...rootObj[name],\n        ...getFilters(elem.items, filters),\n      }\n    }\n  } else {\n    Object.entries(elem).forEach(([groupName, groupElements]) => {\n      //@ts-ignore\n      rootObj[name] = {\n        //@ts-ignore\n        ...rootObj[name],\n        ...getFilters(groupElements, filters, groupName),\n      }\n    })\n  }\n  return rootObj\n}\n/**\n * Обработка значения elem. В случае если от серера пришел массив.\n * @param {array} elem - вовращенное значение от сервера.\n * @param {array} filters - массив id фильтров, необходимых для отображения в блоке.\n */\nconst arrFilters = (elem: any, filters: Array<{ id: number }>) => {\n  //@ts-ignore\n  let arr = []\n  //@ts-ignore\n  elem.forEach((item) => {\n    if (isPlainObject(item)) {\n      let list = {}\n      Object.entries(item).forEach(([groupName, groupElements]) => {\n        list = {\n          ...list,\n          ...getFilters(groupElements, filters, groupName),\n        }\n      })\n      //@ts-ignore\n      arr = [...arr, list]\n    } else {\n      //@ts-ignore\n      arr = [...arr, filters.find(({ id }) => id === item) || item]\n    }\n  })\n  //@ts-ignore\n  return arr\n}\n\n/**\n * Показ даты с годом или без\n * @param {string} date - дата, которая приходит от сервера.\n */\nexport function dateWithYear(date: string) {\n  if (m(date).year() !== m().year()) return m(date).format('DD/MM/YY')\n  return m(date).format('DD/MM')\n}\n\n/**\n * Функция, которая нужна для отображения имени или слова на нужном языке.\n * @param {string} lang - параметр языка\n */\n//@ts-ignore\nexport function getSuffix(lang: string | null) {\n  return lang === 'ru' ? 'ru' : 'en'\n}\n\n/**\n * Функция, которая нужна для отображения длинного имени или длинного слова на нужном языке.\n * @param {string} lang - параметр языка\n */\nexport function getLongSuffix(lang: string) {\n  return lang === 'ru' ? 'rus' : 'eng'\n}\n\n/**\n * Перевод мер измерения в случае англоязычной версии\n * @param {number} cm - число, которе будем менять\n */\nexport function cmToFt(cm: number) {\n  const resArr = (cm / 30.48).toFixed(2).toString().split('.')\n  return `${resArr[0]}' ${resArr[1]}'' `\n}\n\n/**\n * Если нет аватара\n */\nexport const noImages = {\n  player: 'https://instatscout.com/images/players/96/no-photo.png',\n  team: 'https://volleyball.instatscout.com/images/team-no-photo.png',\n  tournament: 'https://volleyball.instatscout.com/images/team-no-photo.png',\n}\n\n/**\n * Получение id матчей из ответа сервера\n * @param {array} array - массив матчей из которых будем выдергивать id\n */\nexport const getMatchesIds = (array: Array<{ f_match: number }>) => {\n  //@ts-ignore\n  const newArray = []\n  array.forEach(elem => newArray.push(elem.f_match))\n  //@ts-ignore\n  return newArray\n}\n\n/**\n * получение изображения\n  TODO. В разработке\n */\nexport const getPic = (ent: string, size: number, id: number) => `https://instatscout.com/images/${ent}/${size}/${id}.png`\n\n/**\n * прелоадер для страницы\n  TODO. В разработке\n */\nexport const pagePreloader = (lexics: {}) => (\n  <img\n    src='http://volleyball.instatscout.com/images/page_preloader.gif'\n    //@ts-ignore\n    alt={lexics}\n    className='t-compare__preloader'\n  />\n)\n\n/**\n * Расчет координат для маркеров, используется для отображения карты ударов (со стралками)\n * @param {number} pos_x - позиция маркера по Х\n * @param {number} pos_y - позиция маркера по Y\n * @param {boolean} opponentSide - для какой стороны поля считаем.\n * @param {string} field - тип поля (для правильно расчета размера для формулы)\n */\nexport const setCoord = (\n  //@ts-ignore\n  pos_x: number | null,\n  //@ts-ignore\n  pos_y: number | null,\n  opponentSide: boolean = false,\n  field: string = 'STANDART',\n) => {\n  if (!pos_x && !pos_y) {\n    return {\n      pos_x: null,\n      pos_y: null,\n    }\n  }\n  //@ts-ignore\n  const { length, width } = fieldSize[field]\n  //@ts-ignore\n  const x = ((width - pos_x) * 100) / width\n  //@ts-ignore\n  const y = ((opponentSide ? pos_y : length - pos_y) * 100) / length\n  return {\n    pos_x: clamp(x, -9, 106),\n    pos_y: clamp(y, -3, 104),\n  }\n}\n\n/**\n * Расчет координат для маркеров, используется для отображения карты ударов (со стралками)\n * @param {string} tab - табы для страницы с маркерами (АТАКА, БЛОК, ПОДАЧА и тд)\n * @param {object} point - данные маркера(точки на поле)\n * @param {boolean} middle - центр\n */\nexport const getPoints = (\n  tab: string,\n  point: { prop: Array<{}> },\n  middle: Array<any> | boolean = false,\n) => {\n  const coordintaions = ['from_x', 'from_y', 'to_x', 'to_y', 'middle_x', 'middle_y']\n  //@ts-ignore\n  const points = positions[middle && tab === 'attack' ? `${tab}_with_middle_point` : tab]\n  const marker = {}\n  coordintaions.forEach((coord) => {\n    if (coord.includes('middle') && !middle) return null\n    //@ts-ignore\n    marker[`pos_${coord}`] = point.prop.find(p => p[0] === points[coord]) || []\n    //@ts-ignore\n  })\n  return marker\n}\n\n/**\n * Конвертация массива в объект\n * @param {array} arr - массив, с которым совершаются действия\n */\n//@ts-ignore\nexport const convertArrToObj = (arr: Array<{ slice: (number) => void }>) => {\n  const obj = {}\n  arr.forEach((item) => {\n    const shifted = item.slice(1)\n    //@ts-ignore\n    if (item[0]) obj[item[0]] = shifted\n  })\n  return obj\n}\n\n/**\n * Запись в стор данных посчитанных\n * @param {array} markers - массив маркеров\n * @param {number} types - тип маркера (из стора shootTypes, тип удара)\n */\nexport const applyMarkersState = (\n  markers: Array<{\n    prop: Array<any>,\n    //@ts-ignore\n    action_type?: string | null,\n    c_action: string | number,\n    ownSide?: boolean,\n    dontShowOpponentSide?: boolean,\n  }>,\n  types: Array<{\n    c_action: string | number,\n    c_match_event_prop: string | number,\n    c_match_event_prop_value: number | Array<number>,\n    //@ts-ignore\n    action_type?: string | null,\n  }>,\n) => {\n  markers.forEach((marker) => {\n    const actionTypes = types.filter(({ c_action }) => c_action === marker.c_action)\n    const convertedProps = convertArrToObj(marker.prop)\n    actionTypes.forEach(({\n      action_type,\n      c_match_event_prop,\n      c_match_event_prop_value,\n    }) => {\n      if (c_match_event_prop in convertedProps) {\n        //@ts-ignore\n        const currentProp = convertedProps[c_match_event_prop]\n        //@ts-ignore\n        if (includes(c_match_event_prop_value, currentProp[1])) {\n          marker.action_type = action_type\n        }\n      }\n\n      // Маркеры с данными ключами должны показываться на левой стороне\n      marker.ownSide = ownSideMarkers.some(key => key in convertedProps)\n\n      // У этих маркеров не должны отображаться точки КУДА\n      marker.dontShowOpponentSide = markersWithoutOpponentSide.some((item) => {\n        //@ts-ignore\n        const { checkTab, key, props } = item\n        if (isPlainObject(item)) {\n          return (\n            key in convertedProps\n            //@ts-ignore\n            && props.includes(convertedProps[key])\n            && checkTab(marker.c_action)\n          )\n        }\n        //@ts-ignore\n        return item in convertedProps\n      })\n    })\n  })\n  return markers\n}\n\nexport const checkArrayElements = (arr: Array<{}>, condition: (item: {}) => void) => {\n  let matchCondition = false\n  arr.forEach((item) => {\n    //@ts-ignore\n    if (condition(item)) return (matchCondition = true)\n  })\n  return matchCondition\n}\n\n/**\n * Формирование списка id игроков для запроса к серверу.\n * @param {array} data - массив маркеров\n * @param {array} propList - массив маркеров только для определенной вкладки (таб, АТАКА, БЛОК, ПОДАЧА и тд)\n */\nexport const getPlayers = (data: Array<{ prop: Array<any> }>, propList: Array<number>) => {\n  //@ts-ignore\n  const players = []\n\n  data.forEach(({ prop }) => {\n    const convertedProp = convertArrToObj(prop)\n    propList.forEach((id) => {\n      //@ts-ignore\n      if (id in convertedProp && !players.includes(convertedProp[id][1])) {\n        //@ts-ignore\n        players.push(convertedProp[id][1])\n      }\n    })\n  })\n  //@ts-ignore\n  return players\n}\n\n/**\n * Расчет процентов для значения статистики, если необходимо\n * @param {number} numerator - id фильтра по которому считаем статистику\n * @param {number} denominator - id фильтра, который нам нужен для расчета %\n * @param {array} stats - статистика по всем параметрам\n */\nexport const getPercents = (\n  numerator: number,\n  denominator: number,\n  stats: Array<{ f_param: number, value: number }>,\n  type?: string,\n) => {\n  const numeratorValue = stats\n    .filter(({ f_param }) => f_param === numerator)\n    .map(({ value }) => value)\n  const denominatorValue = stats\n    .filter(({ f_param }) => f_param === denominator)\n    .map(({ value }) => value)\n  if (numeratorValue.length && denominatorValue.length) {\n    const result = numeratorValue.reduce(\n      (prev, current, index) => prev + current / denominatorValue[index],\n      0,\n    )\n    switch (type) {\n      case 'total':\n        return Math.round((result * 100))\n      default:\n        // По умолчанию берем среднее значение\n        return Math.round((result * 100) / numeratorValue.length)\n    }\n  }\n  return '—'\n}\n\n/**\n * @param {object || array} filters - фильтры\n */\nexport const groupFilters = (filters: any) => {\n  const groups = {}\n  if (isPlainObject(filters)) {\n    filters = Object.values(filters)\n  }\n  //@ts-ignore\n  filters.forEach((filter) => {\n    const key = filter.groupName\n      || filter.c_match_event_prop2\n      || filter.c_match_event_prop\n    if (key in groups) {\n      //@ts-ignore\n      groups[key].push(filter)\n    } else {\n      //@ts-ignore\n      groups[key] = [filter]\n    }\n  })\n  return groups\n}\n\n/** Перевод из кг в фунты\n * @param {number} weight - вес в кг\n */\nexport const kgToPounds = ((weight: number) => +(weight / 0.455).toFixed(0))\n\n/** Получение аббревиатуры\n * @param {string} string - название команды\n */\nexport function getAbbr(string: string) {\n  if (!string) return ''\n  const strArr = string.split(' ')\n  if (strArr.length > 1) {\n    return strArr.map(word => word.charAt(0)).join('').toUpperCase()\n  }\n  return string.substring(0, 3).toUpperCase()\n}\n\n/** Фильтрация входящих параметров со статистикой с бэка (json)\n * @param {array} params - массив с параметрами, из json.data из ответа\n */\n\nexport function filterDBStats(params: Array<any>) {\n  return filter(params, ({\n    f_option_0,\n    f_option_3,\n    f_option_5,\n    f_param,\n    f_variant_zone,\n  }) => {\n    const {\n      ALL_LINES,\n      BACK_LINE,\n      FRONT_LINE,\n    } = fieldLines\n    const { ALL_SETS } = sets\n    const {\n      ATTACK_ZONE,\n      ATTACK_ZONE_SPECIAL,\n      SERVE_ZONE,\n    } = zones\n    const { ALL_BLOCKS } = blockTypes\n\n    // Для блоков фильтруем еще по свойству f_option_5\n    if (includes(allBlocks, f_param)) {\n      return (\n        f_option_0 === ALL_SETS\n        && f_variant_zone === SERVE_ZONE\n        && f_option_3 === ALL_LINES\n        && f_option_5 === ALL_BLOCKS\n      )\n    }\n    // По умолчанию берем статистику по всему полю ALL_LINES\n    // По умолчанию берем статистику по зоне подачи SERVE_ZONE\n    let fieldLine: number = ALL_LINES\n    let zone: number = SERVE_ZONE\n    // Если параметр относится к передней линии, меняем опцию на 57 - передняя линия\n    if (includes(frontLineParams, f_param)) {\n      fieldLine = FRONT_LINE\n    }\n    // Если параметр относится к задней линии, меняем опцию на 58 - задняя линия\n    if (includes(backLineParams, f_param)) {\n      fieldLine = BACK_LINE\n    }\n    // Если параметр относится к атакующему типу, меняем зону на зону атаки\n    if (includes(attackZone, f_param)) {\n      zone = ATTACK_ZONE\n    }\n    // Если параметр относится к специальному атакующему типу,\n    // меняем зону на зону специальную атаки\n    if (includes(attackZoneSpecial, f_param)) {\n      zone = ATTACK_ZONE_SPECIAL\n    }\n\n    return (\n      f_option_0 === ALL_SETS\n      && f_variant_zone === zone\n      && f_option_3 === fieldLine\n    )\n  })\n}\n/** Сохранение таблиц в localStorage\n * @param {string} tableName - имя таблицы для стора\n * @param {string} tables - сам объект таблицы в виде строки\n * @param {number} id - id амплуа игрока.\n */\nexport function saveTablesToLocalStorage(\n  {\n    id,\n    name,\n    tables,\n  }: {\n    name: string,\n    tables: {},\n    id?: number,\n  },\n) {\n  // id передаем, если сохраняем в localStorage таблицу для игрока\n  // Для каждого амплуа идет индивидуальная запись\n  if (id) {\n    //@ts-ignore\n    const table = JSON.parse(window.localStorage.getItem(name)) || {}\n    table[id] = tables\n    window.localStorage.setItem(name, JSON.stringify(table))\n  } else {\n    window.localStorage.setItem(name, JSON.stringify(tables))\n  }\n}\n\n/** Изменение окончания в русском слове в зависимости от числа\n * @param {number} number - число\n * @param {Array} textForms - массив слов, которые применяются ['матч', 'матча', 'матчей'])\n */\nexport function num2str(number: number, textForms: Array<string>) {\n  number = Math.abs(number) % 100\n  const dividedBy10: number = number % 10\n\n  if (number > 10 && number < 20) {\n    return textForms[2]\n  }\n  if (dividedBy10 > 1 && dividedBy10 < 5) {\n    return textForms[1]\n  }\n  if (dividedBy10 === 1) {\n    return textForms[0]\n  }\n  return textForms[2]\n}\n\n/**\n  * Функция, возвращающая объект кнопки удаления таблицы\n  * @param {object} tables - таблицы со статистикой\n  * @param {func} deleteTable - функция удаления таблицы\n  */\nconst getDeleteBtn = (\n  tables: {},\n  deleteTable: (position: number) => void,\n) => {\n  if (size(tables) > 1) {\n    return ({\n      //@ts-ignore\n      action: position => deleteTable(position),\n      t: 'remove_table',\n      buttonType: 'button_remove',\n    })\n  }\n  return false\n}\n\n\n/**\n  * Функция, возвращающая массив кнопок с действиями с таблицей\n  * @param {func} handleNewPopupAction - добавить новую таблицу\n  * @param {func} deleteTable - удалить таблицу\n  * @param {func} moveTableUp - переместить таблицу вверх\n  * @param {func} moveTableDown - переместить таблицу вниз\n  * @param {func} resetTable - возврат к таблицам по-умолчанию\n  * @param {object} tables - список всех таблиц на странице\n  */\ntype TBtnAction = (position: number) => void\n\nexport const tableHeaderButtons = (\n  handleNewPopupAction: () => void,\n  deleteTable: TBtnAction,\n  moveTableUp: TBtnAction,\n  moveTableDown: TBtnAction,\n  resetTable: TBtnAction,\n  tables: {},\n) => compact([\n  {\n    action: () => handleNewPopupAction(),\n    t: 'add_table',\n    buttonType: 'button_add',\n  },\n  getDeleteBtn(tables, deleteTable),\n  {\n    action: position => moveTableUp(position),\n    t: 'move_table_up',\n    buttonType: 'button_up',\n  },\n  {\n    action: position => moveTableDown(position),\n    t: 'move_table_down',\n    buttonType: 'button_down',\n  },\n  {\n    action: position => resetTable(position),\n    t: 'reset_tables',\n    buttonType: 'button_reset',\n  },\n])\n\n/**\n  * Функция, возвращающая количество выбранных чекбоксов в группе\n  * @param {Array} checkboxes - список всех чекбоксов для выпадающего меню\n  * @param {Object} checked - выбранные чекбоксы\n  * @param {String} groupName - название группы\n  */\nexport const getCheckedFiltersNumber = ({\n  checkboxes,\n  checked,\n  groupName,\n}: {\n  checkboxes: Array<any> | {},\n  checked: {},\n  groupName?: string,\n}) => {\n  const filtersCount = size(\n    filter(checkboxes, ({\n      f_player,\n      id,\n      player_id,\n    }) => {\n      const key = id\n        || f_player\n        || player_id\n      const checkedArray = keys(checked)\n      const checkedFilters = groupName\n        ? map(checkedArray, (id) => {\n          const newId = id.match(/(\\d+|\\D+)/g)\n          return newId\n        })\n        : checkedArray\n\n      return groupName\n        //@ts-ignore\n        ? find(checkedFilters, ([id, group]) => (\n          String(key) === id && groupName === group\n        ))\n        //@ts-ignore\n        : includes(checkedFilters, String(key))\n    }),\n  )\n  return filtersCount || null\n}\n\n/**\n  * Оборачиваем любое число в круглые скобки\n  * @param {number || null} number - число\n  */\nexport const addParenthesesToNumber = (number: number | null) => (\n  number ? `(${number})` : null\n)\n\n/**\n  * Получаем число выбранных фильтров в группе и оборачиваем в круглые скобки\n  * @param {Array} checkboxes - список всех чекбоксов для выпадающего меню\n  * @param {Object} checked - выбранные чекбоксы\n  * @param {String} groupName - название группы\n  */\nexport const checkedFiltersCount = ({\n  checkboxes,\n  checked,\n  groupName,\n}: {\n  checkboxes: Array<any> | {},\n  checked: {},\n  groupName?: string,\n}) => {\n  const number = getCheckedFiltersNumber({\n    checkboxes,\n    checked,\n    groupName,\n  })\n  return addParenthesesToNumber(number)\n}\n\n/** Возвращаем список айди выбранных фильтров.\n * В зависимости от типа применяем нужную функцию преобразования\n*/\nexport const getCheckedFiltersSubMenu = (data: any, type: string) => {\n  const getFiltersWithHeader = () => flatten(\n    map(data, ({ ids }) => ids),\n  )\n  const getFiltersWithZones = () => map(data, 'zoneId')\n  const getData = () => data\n\n  const types = {\n    popupWithColumns: getFiltersWithHeader,\n    popupWithZones: getFiltersWithZones,\n    popupSimple: getData,\n    popupWithPlayers: getData,\n    popupWithHomePlayers: getData,\n  }\n  //@ts-ignore\n  return types[type]()\n}\n\n/**\n  * Проверка на тип команды\n  * @param {number} teamType - тип команды\n    тип 2 - сборная\n  */\nexport const isNationalTeam = (teamType: number) => teamType === 2\n//@ts-ignore\nexport const getStore = (self, Store) => getRoot(self)[Store]\n","import { utils } from 'react-sport'\nimport { action } from 'mobx'\nimport routes from 'config/routes'\nimport map from 'lodash/map'\nimport get from 'lodash/get'\n\nimport BasicStore from 'features/stores/BasicStore'\nimport { headerPlayerParams } from 'config/params'\n\nimport { filterDBStats } from 'module/utils/helpers'\n\ntype TConfig = {\n  method: string,\n  body: string,\n}\n\ninterface IPlayerStatsApiStore {\n  fetch: (\n    playerId: number | string,\n    //@ts-ignore\n    selectedMatches: Array<number> | string | null,\n    playerTypeId: number,\n  ) => void,\n  eraseHeaderStats: () => void,\n}\n\n// Действия со стором статистики, получение от БД данных по статистике игрока.\nexport default class PlayerStatsApiStore extends BasicStore\n  implements IPlayerStatsApiStore {\n  @action\n  //@ts-ignore\n  fetch = (playerId, selectedMatches, playerTypeId) => {\n    const url: string = `${routes.API_ROOT}/data`\n    const playerParams: Array<number> = map(get(headerPlayerParams, playerTypeId), 'param_id')\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'ask_player_param_view',\n        params: {\n          _v_match_id: selectedMatches,\n          _v_player_id: [playerId],\n          _v_param_id: playerParams,\n        },\n      }),\n    }\n    utils.callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        this.stats = []\n        //@ts-ignore\n        this.isFetching = true\n      },\n      onSuccess: json => this._onSuccess(json),\n      onError: error => this._onError(error),\n    })\n  }\n\n  //@ts-ignore\n  _onSuccess = (json: { data?: Array<{}> }) => {\n    //@ts-ignore\n    this.isFetching = false\n    //@ts-ignore\n    this.stats = filterDBStats(json.data)\n    //@ts-ignore\n    this.error = null\n  }\n\n  //@ts-ignore\n  _onError = (error: {}) => {\n    //@ts-ignore\n    this.isFetching = false\n    //@ts-ignore\n    this.error = error\n  }\n\n  @action eraseHeaderStats = () => {\n    //@ts-ignore\n    this.stats = []\n  }\n}\n","import { observable } from 'mobx'\n// @ts-ignore\nimport PlayerStatsHeaderApiStore from 'features/stores/PlayerStatsHeader/PlayerStatsHeaderApiStore'\n\nexport default class PlayerStatsHeaderStore extends PlayerStatsHeaderApiStore {\n  @observable stats = [];\n\n  @observable isFetching = true;\n\n  @observable error = false;\n}\n","import { utils } from 'react-sport'\nimport { action } from 'mobx'\nimport routes from 'config/routes'\nimport concat from 'lodash/concat'\nimport map from 'lodash/map'\nimport BasicStore from 'features/stores/BasicStore'\nimport { team_params, additional_params } from 'config/params'\n\nimport { filterDBStats } from 'module/utils/helpers'\n\n\ninterface ITeamStatsApiStore {\n  fetch: (\n    teamId: number | string,\n    //@ts-ignore\n    selectedMatches: Array<number> | string | null,\n  ) => void,\n  eraseHeaderStats: () => void,\n}\n\n// Действия со стором статистики, получение от БД данных по статистике команды.\nexport default class TeamStatsApiStore extends BasicStore\n  implements ITeamStatsApiStore {\n  @action\n  //@ts-ignore\n  fetch = (teamId, selectedMatches) => {\n    const url: string = `${routes.API_ROOT}/data`\n    const teamParams: Array<number> = map(team_params, 'param_id')\n    const config: {\n      method: string,\n      body: string,\n    } = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'ask_team_param_view',\n        params: {\n          _v_match_id: selectedMatches,\n          _v_team_id: [teamId],\n          _v_param_id: concat(teamParams, additional_params),\n        },\n      }),\n    }\n    utils.callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        this.stats = []\n        //@ts-ignore\n        this.isFetching = true\n      },\n      //@ts-ignore\n      onSuccess: (json: { data?: Array<{}> }) => this._onSuccess(json, teamId),\n      onError: (error: any) => this._onError(error),\n    })\n  }\n\n  //@ts-ignore\n  _onSuccess = (json: { data?: Array<{}> }) => {\n    //@ts-ignore\n    this.isFetching = false\n    // Нужна статистика только по целому матчу f_option_0 = 0\n    // Фильтруем ответ от сервера, удаляем ненужные значения и записываем в стор\n    //@ts-ignore\n    this.stats = filterDBStats(json.data)\n    //@ts-ignore\n    this.error = null\n  }\n\n  //@ts-ignore\n  _onError = (error: {}) => {\n    //@ts-ignore\n    this.isFetching = false\n    //@ts-ignore\n    this.error = error\n  }\n\n  @action eraseHeaderStats = () => {\n    //@ts-ignore\n    this.stats = []\n  }\n}\n","import { observable } from 'mobx'\n// @ts-ignore\nimport TeamStatsApiStore from 'features/stores/TeamStatsHeader/TeamStatsHeaderApiStore'\n\nexport default class TeamStatsHeaderStore extends TeamStatsApiStore {\n  @observable stats = [];\n\n  @observable isFetching = false;\n\n  @observable error = false;\n}\n","import { observable, action } from 'mobx'\n\nexport default class InfoItem {\n  @observable clickCnt = 0;\n\n  //@ts-ignore\n  //@ts-ignore\n  @action clickHandle = (e, tooltips) => {\n    e.preventDefault()\n    this.clickCnt = this.clickCnt < tooltips.length - 1 ? this.clickCnt + 1 : 0\n  };\n}\n","// @ts-ignore\nimport { observable, computed } from 'mobx'\nimport isEmpty from 'lodash/isEmpty'\nimport filter from 'lodash/filter'\n\n// @ts-ignore\nimport stores from 'features/stores'\n\n// @ts-ignore\nconst Markers = superclass =>\n  class extends superclass {\n    //@ts-ignore\n    @observable loaded = false;\n\n    //@ts-ignore\n    @observable error = null;\n\n    //@ts-ignore\n    @observable data = [];\n\n    //@ts-ignore\n    @observable select = false;\n\n    //@ts-ignore\n    @observable directions = {\n      to: true,\n      from: true,\n    };\n\n    //@ts-ignore\n    @computed get list() {\n      //@ts-ignore\n      const { checked } = stores.filters\n      const store = this.getStore.bind(this)\n      const markers = this.select\n        //@ts-ignore\n        ? filter(this.data, marker => marker.visible)\n        : this.data\n      if (isEmpty(checked)) return markers\n      return this.getMarkers({\n        checkedFilters: checked,\n        markers,\n        store,\n      })\n    }\n  }\n\nexport default Markers\n","// @ts-ignore\nimport { action } from 'mobx'\nimport isPlainObject from 'lodash/isPlainObject'\nimport get from 'lodash/get'\nimport isEmpty from 'lodash/isEmpty'\nimport uniq from 'lodash/uniq'\nimport pickBy from 'lodash/pickBy'\nimport some from 'lodash/some'\nimport filter from 'lodash/filter'\n\nimport { groupFilters } from 'module/utils/helpers'\n\nimport { fetchProps } from 'config/markers'\n\nimport {\n  TCheckMarkerArgs,\n  TGetMarkersArgs,\n  TFilter,\n} from './types'\nimport { doubleKeyFiltration, singleKeyFiltration } from './KeysFiltration'\n\n//TODO Переписать функции фильтрации\n/**\n * checkMarker - проверка маркеров на соответствие фильтрам\n * @property {object} filter - добавление\n * @property {object} prop - параметры маркера, по которым будет проходить проверка\n * @property {number} player_id - id игрока, нужен в случае если нету 4х параметров ниже\n * @property {array} c_match_event_prop - основной ключ маркера, по которому будет поиск\n * @property {array} c_match_event_prop2 - дополнительный ключ, если есть,\n * то проверяется на соответствие обоим ключам\n * @property {array} c_match_event_prop_value - параметр поиска для первого ключа\n * @property {array} c_match_event_prop_value2 - параметр поиска для второго ключа\n *\n * возврощает значение bool\n */\n\nconst checkMarker = ({\n  c_match_event_prop,\n  c_match_event_prop_value,\n  c_match_event_prop_value2,\n  c_match_event_prop2,\n  f_player,\n  filter,\n  filterId,\n  player_id,\n  prop,\n  store,\n}: TCheckMarkerArgs) => {\n  if (!isPlainObject(filter)) return null\n  if (c_match_event_prop && c_match_event_prop2) {\n    return doubleKeyFiltration({\n      c_match_event_prop,\n      c_match_event_prop_value,\n      c_match_event_prop_value2,\n      c_match_event_prop2,\n      filterId,\n      prop,\n    })\n  }\n  if (c_match_event_prop) {\n    return singleKeyFiltration({\n      c_match_event_prop,\n      c_match_event_prop_value,\n      f_player,\n      filterId,\n      prop,\n    })\n  }\n  if (filter.fetchProps === 'mapShoot') {\n    const mapShoot = get(fetchProps, [store('tabs').active, 'mapShoot'])\n    const mapForCheck = prop.filter(property => mapShoot.includes(property[0]))\n    return (\n      mapForCheck && mapForCheck.some(property => property[2] === player_id)\n    )\n  }\n  if (\n    store('lexics').page === 'player'\n    || store('tabs').active === 'block'\n    || (store('tabs').active === 'attack' && filter.fetchProps === 'playerInfo')\n  ) {\n    const playerInfo = get(fetchProps, [store('tabs').active, 'playerInfo'])\n    const mapForCheck = prop.filter(property =>\n      playerInfo.includes(property[0]))\n    return (\n      mapForCheck && mapForCheck.some(property => property[2] === player_id)\n    )\n  }\n  return player_id === f_player\n}\n\n/**\n * Логика фильтрации следующая:\n * Приходят несколько фильтров и маркеры, если маркеры в одной группе,\n * то надо отдавать маркеры которые совпадают хотя бы с одним фильтром,\n * Если же маркеры из разных групп, то надо отдавать маркеры которые соответствуют всем фильтрам.\n * Но есть момент когда приходят маркеры из одной и из разных групп,\n * в этом случае маркеры разбиваются по группам,\n * и сначала делаем фильтрацию по группам, а после между группами\n */\nconst getMarkers = ({\n  checkedFilters,\n  markers,\n  store,\n}: TGetMarkersArgs) => {\n  const groupedFilters: {\n    [key: string]: Array<{}>,\n  } = groupFilters(checkedFilters)\n  const markersFilteredByGroup: {[key: string]: {}} = {}\n\n  /**\n   * Выше группируем фильтры и в данном цикле отфильтровываем маркеры, после\n   * забиваем тоже по группам.\n   * Здесь фильтрация происходит внутри одной группы, то есть как описал выше\n   * возвращаются маркера соответствующие любому фильтру из списка.\n   */\n  Object.entries(groupedFilters).forEach(([groupName, filters]) => {\n    markersFilteredByGroup[groupName] = filter(markers, ({ f_player, prop }) =>\n      some(filters, (filter: TFilter) => {\n        const {\n          c_match_event_prop,\n          c_match_event_prop_value,\n          c_match_event_prop_value2,\n          c_match_event_prop2,\n          id: filterId,\n          player_id,\n        }: TFilter = filter\n\n        return checkMarker({\n          c_match_event_prop,\n          c_match_event_prop_value,\n          c_match_event_prop_value2,\n          c_match_event_prop2,\n          f_player,\n          filter,\n          filterId,\n          player_id,\n          prop,\n          store,\n        })\n      }))\n  })\n\n  const markersToArray = Object.entries(markersFilteredByGroup)\n\n  /**\n   * если групп меньше 2х, то фильтрации между групп не требуется, поэтому возвращаем\n   * отфильтрованные выше маркеры\n   */\n  if (markersToArray.length < 2) {\n    return !isEmpty(markersFilteredByGroup) ? markersToArray[0][1] : []\n  }\n\n  /**\n   * Здесь делаем фильтрацию маркеров между разных групп.\n   */\n  let result: Array<number> = []\n  markersToArray.forEach(([markersGroup, markers]) => {\n    /**\n     * Отбираем фильтры, из других групп\n     */\n    const neededFilters = pickBy(\n      groupedFilters,\n      (group: Array<{}>) => ('c_match_event_prop' in group[0]\n        //@ts-ignore\n        ? !group[0].c_match_event_prop.includes(parseInt(markersGroup, 10))\n        //@ts-ignore\n        : group[0].groupName !== markersGroup),\n    )\n    /**\n     * Здесь делаем фильтрацию маркеров, на соответствие фильтрам из других групп\n     */\n    const linkedMarkers = filter(markers, ({ f_player, prop }) =>\n      Object.values(neededFilters).every(filters =>\n      //@ts-ignore\n        some(filters, (filter: TFilter) => {\n          const {\n            c_match_event_prop,\n            c_match_event_prop_value,\n            c_match_event_prop_value2,\n            c_match_event_prop2,\n            id: filterId,\n            player_id,\n          }: TFilter = filter\n\n          return checkMarker({\n            c_match_event_prop,\n            c_match_event_prop_value,\n            c_match_event_prop_value2,\n            c_match_event_prop2,\n            f_player,\n            filter,\n            filterId,\n            player_id,\n            prop,\n            store,\n          })\n        })))\n\n    result = [...result, ...linkedMarkers]\n  })\n  // Убираем дубли, если появились в процессе добавления нескольких фильтров\n  // Маркер может совпадать с несколькими фильтрами и добавиться несколько раз\n  return uniq(result)\n}\n\nconst MarkersFiltration = (superclass: any) =>\n  class extends superclass {\n    //@ts-ignore\n    @action getMarkers = (props: TGetMarkersArgs) => getMarkers(props);\n  }\n\nexport default MarkersFiltration\n","import find from 'lodash/find'\nimport size from 'lodash/size'\nimport every from 'lodash/every'\nimport includes from 'lodash/includes'\nimport some from 'lodash/some'\n\nimport {\n  playerExtraCheckMarkers,\n  teamExtraCheckMarkers,\n} from 'config/markers'\n\ntype TKeyFiltration = {\n  c_match_event_prop: Array<number>,\n  c_match_event_prop2?: Array<number> | null,\n  c_match_event_prop_value: Array<number>,\n  c_match_event_prop_value2?: Array<number> | null,\n  f_player?: number,\n  filterId: number,\n  prop: Array<Array<number>>,\n}\n\nexport const doubleKeyFiltration = ({\n  c_match_event_prop,\n  c_match_event_prop_value,\n  c_match_event_prop_value2,\n  c_match_event_prop2,\n  prop,\n}: TKeyFiltration) => {\n  /**\n   * Находим маркеры по группе и ключам, из списка выбранных фильтров,\n   * достаем пропсы и из списка маркеров достаем маркеры со схожими пропсами\n   * c_match_event_prop - группа из фильтра\n   * c_match_event_prop_value - значения из фильтра\n   * propGroup - группа\n   * propValue - значения\n   */\n  if (c_match_event_prop_value && c_match_event_prop_value2) {\n    const property1IsTrue = find(\n      prop,\n      ([propGroup, , propValue]) =>\n        includes(c_match_event_prop, propGroup)\n        && includes(c_match_event_prop_value, propValue),\n    )\n\n    const property2IsTrue = find(\n      prop,\n      ([propGroup, , propValue]) =>\n        includes(c_match_event_prop2, propGroup)\n        && includes(c_match_event_prop_value2, propValue),\n    )\n    return property1IsTrue && property2IsTrue\n  }\n\n  const property1IsTrue = find(prop, ([propGroup]) =>\n    includes(c_match_event_prop, propGroup))\n\n  const property2IsTrue = find(prop, ([propGroup]) =>\n    includes(c_match_event_prop2, propGroup))\n  return property1IsTrue && property2IsTrue\n}\n\nexport const singleKeyFiltration = ({\n  c_match_event_prop,\n  c_match_event_prop_value,\n  f_player,\n  filterId,\n  prop,\n}: TKeyFiltration) => {\n  /**\n   * Функция, которая осуществляет доп. фильтрацию маркера\n   * Работает так: если маркер не нуждается в доп. фильтрации, то возвращаем true\n   * Фильтруем от обратного - если наше условие выполнилось, то маркер НЕ показываем\n   * (не оставляем маркеры, которые подошли, а удаляем, которые не подошли)\n   * Это сделано для того, чтобы была возможность исключать маркеры (напр. с ошибкой)\n   * и наоборот оставлять подходящие под условие в одной функции\n   */\n  const additionalCheck = () => {\n    // Для команды у нас всегда 4 элемента в prop[0], а для игрока по 3 элемента\n    const extraCheckMarkers = size(prop[0]) === 4\n      ? teamExtraCheckMarkers\n      : playerExtraCheckMarkers\n    if (!extraCheckMarkers[filterId]) return true\n    const { group, values } = extraCheckMarkers[filterId]\n    return !every(\n      group,\n      groupItem =>\n        find(\n          prop,\n          ([propGroup, , propValue]) => {\n            // если есть массив values, то проверяем по нему, иначе проверка идет по айди игрока\n            const valueCheck = values\n              ? includes(values, propValue)\n              : propValue !== f_player\n\n            return groupItem === propGroup && valueCheck\n          },\n        ) || !find(prop, ([propGroup]) => propGroup === groupItem),\n    )\n  }\n\n  if (c_match_event_prop_value) {\n    return (\n      !!find(\n        prop,\n        ([propGroup, , propValue]) =>\n          c_match_event_prop.includes(propGroup)\n          && c_match_event_prop_value.includes(propValue),\n      ) && additionalCheck()\n    )\n  }\n\n  /**\n   * Находим маркеры только по группе\n   * c_match_event_prop - группа из фильтра\n   * propGroup - айди группы маркера\n   */\n  return (\n    some(c_match_event_prop, value =>\n      find(prop, ([propGroup]) => propGroup === value)) && additionalCheck()\n  )\n}\n","import { observable, action } from 'mobx'\n// @ts-ignore\nimport { middleOptions } from 'config/markers'\n// @ts-ignore\nimport { setCoord, getPoints } from 'module/utils/helpers'\n\n//функция проверки наличия точки по середине\n// @ts-ignore\n// @ts-ignore\n// @ts-ignore\nconst getMiddlePoint = ({ prop }) =>\n  prop.find(\n    //@ts-ignore\n    //@ts-ignore\n    ([key, property]) => key === 24 && middleOptions.includes(property),\n  )\n\nclass Marker {\n  @observable visible = true;\n\n  //@ts-ignore\n  //@ts-ignore\n  constructor(props, store) {\n    Object.assign(this, props)\n    const { active } = store('tabs')\n    //@ts-ignore\n    const withMiddlePoint = getMiddlePoint(this)\n    //получаем позицию маркера\n    const {\n      //@ts-ignore\n      pos_from_x,\n      //@ts-ignore\n      pos_from_y,\n      //@ts-ignore\n      pos_middle_x,\n      //@ts-ignore\n      pos_middle_y,\n      //@ts-ignore\n      pos_to_x,\n      //@ts-ignore\n      pos_to_y,\n      //@ts-ignore\n    } = getPoints(active, this, withMiddlePoint)\n    //устанавливаем координаты для точек откуда, куда и блок, если есть точка по середине\n    //@ts-ignore\n    this.from = setCoord(pos_from_x[2], pos_from_y[2])\n    //@ts-ignore\n    this.middle = withMiddlePoint && setCoord(pos_middle_x[2], pos_middle_y[2])\n    //@ts-ignore\n    this.to = setCoord(pos_to_x[2], pos_to_y[2])\n  }\n\n  //@ts-ignore\n  @action setVisible = (value) => {\n    this.visible = value\n  };\n}\n\nexport default Marker\n","// @ts-ignore\nimport { action } from 'mobx'\nimport { utils as remoteUtils } from 'react-sport'\nimport get from 'lodash/get'\n\n// @ts-ignore\nimport routes from 'config/routes'\n\n// @ts-ignore\n// @ts-ignore\nexport const getToolTipResult = (markers, resultList) => {\n  //@ts-ignore\n  const markersWithResult = []\n  //@ts-ignore\n  markers.forEach((marker) => {\n    const { prop } = marker\n    const result = resultList.find((\n      {\n        //@ts-ignore\n        //@ts-ignore\n        //@ts-ignore\n        prop_id,\n        //@ts-ignore\n        prop_value_id,\n      }, //@ts-ignore\n    ) =>\n      //@ts-ignore\n      prop.find(\n        //@ts-ignore\n        property => property[0] === prop_id && property[2] === prop_value_id,\n      ))\n    if (result) {\n      marker.result_lexic = result.lexical_formula\n      markersWithResult.push(marker)\n    } else {\n      markersWithResult.push(marker)\n    }\n  })\n  //@ts-ignore\n  return markersWithResult\n}\n\n// @ts-ignore\nconst ToolTipActions = superclass =>\n  class extends superclass {\n    //@ts-ignore\n    @action fetch = () => {\n      const url = `${routes.API_ROOT}/data`\n      const config = {\n        method: 'POST',\n        body: JSON.stringify({\n          proc: 'scout_event_prop_action_result',\n          params: {\n            _p_action_result: true,\n          },\n        }),\n      }\n\n      remoteUtils.callApi({\n        url,\n        config,\n        onRequest: this._onRequest.bind(this),\n        onSuccess: this._onSuccess.bind(this),\n        onError: this._onError.bind(this),\n      })\n    };\n\n    //@ts-ignore\n    _onSuccess({ data }) {\n      //@ts-ignore\n      this.loaded = true\n      //@ts-ignore\n      this.error = false\n      //@ts-ignore\n      this.data = get(data, '[0].scout_event_prop_action_result', [])\n    }\n\n    _onRequest() {\n      //@ts-ignore\n      this.loaded = false\n      //@ts-ignore\n      this.error = false\n    }\n\n    //@ts-ignore\n    _onError(error) {\n      //@ts-ignore\n      this.error = error\n      //@ts-ignore\n      this.loaded = false\n    }\n  }\n\nexport default ToolTipActions\n","// @ts-ignore\nimport { action } from 'mobx'\nimport { utils as remoteUtils } from 'react-sport'\nimport remove from 'lodash/remove'\n\n// @ts-ignore\nimport { getPlayers, getLongSuffix } from 'module/utils/helpers'\n// @ts-ignore\nimport { getFilteredMarkers } from 'features/stores/Markers/FetchMarkerActions'\n// @ts-ignore\nimport routes from 'config/routes'\n\nconst setMarkerPlayer = ({\n  //@ts-ignore\n  isBlock,\n  //@ts-ignore\n  language,\n  //@ts-ignore\n  marker,\n  //@ts-ignore\n  markerField = 'playerName',\n  //@ts-ignore\n  markersWithName,\n  //@ts-ignore\n  players,\n  //@ts-ignore\n  playerSource,\n}) => {\n  //@ts-ignore\n  const player = players.find(\n    //@ts-ignore\n    ({ f_player }) => f_player === (isBlock ? playerSource[2] : playerSource),\n  )\n  if (player) {\n    const firstname = player.prop_player[0][`firstname_${language}`]\n    const lastname = player.prop_player[0][`lastname_${language}`]\n    // Если имя уже есть, то дописываем остальные имена через разделитель\n    if (marker[markerField]) {\n      marker[markerField] = `${marker[markerField]},/ ${firstname} ${lastname}`\n    } else {\n      marker[markerField] = `${firstname} ${lastname}`\n    }\n    markersWithName.push(marker)\n  } else {\n    markersWithName.push(marker)\n  }\n}\n\n// @ts-ignore\n// @ts-ignore\n// @ts-ignore\nconst getPlayersIdList = (data, playerIdList, players) =>\n  //@ts-ignore\n  data.forEach(({ prop }) =>\n    // из маркеров достаем игроков по ключу\n    //@ts-ignore\n    playerIdList.forEach((id) => {\n      //@ts-ignore\n      const player = prop.find(property => property[0] === id)\n      if (player) {\n        players.push(player[2])\n      }\n    }))\n\n// @ts-ignore\n// @ts-ignore\n// @ts-ignore\n// @ts-ignore\nexport const getToolTipName = (markers, players, lang, tab) => {\n  //@ts-ignore\n  const markersWithName = []\n  const playerIdList = [39, 40, 41]\n  const language = getLongSuffix(lang)\n\n  if (tab === 'block') {\n    //@ts-ignore\n    markers.forEach((marker) => {\n      const { prop } = marker\n      // из маркеров достаем игроков по ключу\n      playerIdList.forEach((id) => {\n        //@ts-ignore\n        const player = prop.find(property => property[0] === id)\n        if (player) {\n          setMarkerPlayer({\n            players,\n            playerSource: player,\n            marker,\n            //@ts-ignore\n            markersWithName,\n            language,\n            markerField: 'firstPlayerName',\n            isBlock: true,\n          })\n        }\n      })\n    })\n  } else {\n    //@ts-ignore\n    markers.forEach((marker) => {\n      const { f_player } = marker\n\n      //@ts-ignore\n      setMarkerPlayer({\n        players,\n        playerSource: f_player,\n        marker,\n        //@ts-ignore\n        markersWithName,\n        language,\n      })\n    })\n  }\n  //@ts-ignore\n  return markersWithName\n}\n\n// @ts-ignore\nconst FetchPlayerInfo = superclass =>\n  class extends superclass {\n    //@ts-ignore\n    @action basicFetch = () => {\n      const promise = new Promise((resolve, reject) => {\n        const url = `${routes.API_ROOT}/data`\n        let { data } = this.getStore('markers')\n        //@ts-ignore\n        const players = []\n        if (this.getStore('tabs').active === 'block') {\n          const playerIdList = [39, 40, 41]\n          //@ts-ignore\n          getPlayersIdList(data, playerIdList, players)\n        } else {\n          if (this.getStore('tabs').active === 'serve_reception') {\n            data = getFilteredMarkers(data, 70, 195)\n          } else if (this.getStore('tabs').active === 'attack_reception') {\n            data = getFilteredMarkers(data, 70, 196)\n          }\n          //@ts-ignore\n          data.forEach(({ f_player }) => players.push(f_player))\n        }\n        const config = {\n          method: 'POST',\n          body: JSON.stringify({\n            proc: 'scout_players_info',\n            params: {\n              //@ts-ignore\n              _p_player_id: players,\n            },\n          }),\n        }\n\n        remoteUtils.callApi({\n          url,\n          config,\n          onRequest: this._basicRequest.bind(this),\n          onError: error => this._basicError(error, reject),\n          onSuccess: json => this._basicSuccess(json, resolve),\n        })\n      })\n\n      return promise\n    };\n\n    //@ts-ignore\n    //@ts-ignore\n    //@ts-ignore\n    @action fetch = (markers, propsList, excludePlayer = false) => {\n      const url = `${routes.API_ROOT}/data`\n      const players = getPlayers(markers, propsList)\n      if (excludePlayer) {\n        remove(players, player => player === excludePlayer)\n      }\n      const config = {\n        method: 'POST',\n        body: JSON.stringify({\n          proc: 'scout_players_info',\n          params: {\n            _p_player_id: players,\n          },\n        }),\n      }\n\n      remoteUtils.callApi({\n        url,\n        config,\n        onRequest: this._onRequest.bind(this),\n        onSuccess: this._onSuccess.bind(this),\n        onError: this._onError.bind(this),\n      })\n    };\n\n    _basicRequest() {\n      //@ts-ignore\n      this.basicLoaded = false\n    }\n\n    //@ts-ignore\n    //@ts-ignore\n    _basicSuccess({ data }, resolve) {\n      resolve(data)\n      //@ts-ignore\n      this.basicData = data\n      //@ts-ignore\n      this.basicLoaded = true\n    }\n\n    //@ts-ignore\n    //@ts-ignore\n    _basicError(error, reject) {\n      reject(error)\n      //@ts-ignore\n      this.basicLoaded = false\n    }\n\n    //@ts-ignore\n    _onSuccess({ data }) {\n      //@ts-ignore\n      this.data = data\n      //@ts-ignore\n      this.loaded = true\n      //@ts-ignore\n      this.error = false\n    }\n\n    _onRequest() {\n      //@ts-ignore\n      this.loaded = false\n      //@ts-ignore\n      this.error = false\n    }\n\n    //@ts-ignore\n    _onError(error) {\n      //@ts-ignore\n      this.error = error\n      //@ts-ignore\n      this.loaded = false\n    }\n  }\n\nexport default FetchPlayerInfo\n","// @ts-ignore\nimport { action } from 'mobx'\nimport { utils as remoteUtils } from 'react-sport'\nimport map from 'lodash/map'\nimport uniqBy from 'lodash/uniqBy'\n\n\n// @ts-ignore\nimport { getPlayers, getLongSuffix } from 'module/utils/helpers'\n// @ts-ignore\nimport routes from 'config/routes'\n\n// @ts-ignore\n// @ts-ignore\n// @ts-ignore\nexport const getToolTipOpponentTeam = (markers, teams, lang) => {\n  //@ts-ignore\n  const markersWithOpponentTeam = []\n  //@ts-ignore\n  markers.forEach((marker) => {\n    const { f_team_opponent } = marker\n    //@ts-ignore\n    const team = teams.find(({ f_player }) => f_player === f_team_opponent)\n    if (team) {\n      const name = team.prop_player[0][`name_${getLongSuffix(lang)}`]\n      marker.opponentTeam = name\n      markersWithOpponentTeam.push(marker)\n    } else {\n      markersWithOpponentTeam.push(marker)\n    }\n  })\n  //@ts-ignore\n  return markersWithOpponentTeam\n}\n\n// @ts-ignore\nconst FetchMapShoot = superclass =>\n  class extends superclass {\n    //@ts-ignore\n    @action basicFetch = () => {\n      const promise = new Promise((resolve, reject) => {\n        const url = `${routes.API_ROOT}/data`\n        //@ts-ignore\n        const teams = []\n        //@ts-ignore\n        this.getStore('markers').data.forEach(({ f_team_opponent }) => {\n          //@ts-ignore\n          if (teams.includes(f_team_opponent)) return null\n          return teams.push(f_team_opponent)\n        })\n        const config = {\n          method: 'POST',\n          body: JSON.stringify({\n            proc: 'scout_teams_info',\n            params: {\n              //@ts-ignore\n              _p_team_id: teams,\n            },\n          }),\n        }\n\n        remoteUtils.callApi({\n          url,\n          config,\n          onRequest: this._basicRequest.bind(this),\n          onError: error => this._basicError(error, reject),\n          onSuccess: json => this._basicSuccess(json, resolve),\n        })\n      })\n\n      return promise\n    };\n\n    //@ts-ignore\n    //@ts-ignore\n    //@ts-ignore\n    //@ts-ignore\n    @action fetch = (markers, propsList, matches) => {\n      const url = `${routes.API_ROOT}/data`\n      const players = getPlayers(markers, propsList)\n      const config = {\n        method: 'POST',\n        body: JSON.stringify({\n          proc: 'scout_teams_players_info',\n          params: {\n            _p_match_id: matches,\n            _p_player_id: players,\n          },\n        }),\n      }\n\n      remoteUtils.callApi({\n        url,\n        config,\n        onRequest: this._onRequest.bind(this),\n        onSuccess: this._onSuccess.bind(this),\n        onError: this._onError.bind(this),\n      })\n    };\n\n    _basicRequest() {\n      //@ts-ignore\n      this.basicLoaded = false\n    }\n\n    //@ts-ignore\n    //@ts-ignore\n    _basicSuccess({ data }, resolve) {\n      resolve(data)\n      //@ts-ignore\n      this.basicData = data\n      //@ts-ignore\n      this.basicLoaded = true\n    }\n\n    //@ts-ignore\n    //@ts-ignore\n    _basicError(error, reject) {\n      reject(error)\n      //@ts-ignore\n      this.basicLoaded = false\n    }\n\n    //@ts-ignore\n    _onSuccess({ data }) {\n      //@ts-ignore\n      //@ts-ignore\n      this.data = map(data, ({ prop_player, ...item }) => ({\n        ...item,\n        //@ts-ignore\n        //@ts-ignore\n        prop_player: uniqBy(\n          //@ts-ignore\n          map(prop_player, player => ({\n            ...player,\n            // добавляем поля для полученных игроков\n            groupName: 'who_served',\n            fetchProps: 'mapShoot',\n          })),\n          'player_id',\n        ),\n      }))\n      //@ts-ignore\n      this.loaded = true\n      //@ts-ignore\n      this.error = false\n    }\n\n    _onRequest() {\n      //@ts-ignore\n      this.loaded = false\n      //@ts-ignore\n      this.error = false\n    }\n\n    //@ts-ignore\n    _onError(error) {\n      //@ts-ignore\n      this.error = error\n      //@ts-ignore\n      this.loaded = false\n    }\n  }\n\nexport default FetchMapShoot\n","// @ts-ignore\nimport { action } from 'mobx'\nimport { utils as remoteUtils } from 'react-sport'\nimport uniq from 'lodash/uniq'\nimport find from 'lodash/find'\nimport map from 'lodash/map'\n\n// @ts-ignore\nimport routes from 'config/routes'\n// @ts-ignore\nimport Marker from 'features/stores/Markers/Marker'\n// @ts-ignore\nimport { actions } from 'config/tabsConfig'\n// @ts-ignore\nimport { fetchProps } from 'config/markers'\n// @ts-ignore\nimport { getToolTipResult } from 'features/stores/ToolTips/ToolTipActions'\n// @ts-ignore\nimport { getToolTipName } from 'features/stores/PlayerInfo/FetchPlayerInfo'\n// @ts-ignore\nimport { getToolTipOpponentTeam } from 'features/stores/MapShoot/FetchMapShoot'\n// @ts-ignore\nimport { applyMarkersState } from 'module/utils/helpers'\n\n// @ts-ignore\n// @ts-ignore\n// @ts-ignore\nconst getBody = (getStore, matches, id) => {\n  const tab = getStore('tabs').active\n  const { page } = getStore('lexics')\n  const proc = page === 'player' ? 'scout_player_map_shoot' : 'scout_team_map_shoot'\n  const pageId = page === 'player' ? '_p_player_id' : '_p_team_id'\n  return {\n    proc,\n    params: {\n      _p_match_arr: matches,\n      _p_date_from: null,\n      _p_date_to: null,\n      //@ts-ignore\n      _p_c_action_arr: [actions[tab]],\n      [pageId]: id,\n    },\n  }\n}\n\n// @ts-ignore\n// @ts-ignore\n// @ts-ignore\nexport const getFilteredMarkers = (data, id, value) =>\n  //@ts-ignore\n  data.filter(({ prop }) =>\n    find(prop, property => property[0] === id && property[2] === value))\n\n// @ts-ignore\nconst FetchMarkers = superclass =>\n  class extends superclass {\n    //@ts-ignore\n    //@ts-ignore\n    //@ts-ignore\n    @action fetch = (id, matches) => {\n      const url = `${routes.API_ROOT}/data`\n      const getStore = this.getStore.bind(this)\n      getStore('shotTypes').fetch()\n\n      const config = {\n        method: 'POST',\n        body: JSON.stringify(getBody(getStore, matches, id)),\n      }\n\n      remoteUtils.callApi({\n        url,\n        config,\n        onRequest: this._onRequest.bind(this),\n        onSuccess: this._onSuccess.bind(this, matches),\n        onError: this._onError.bind(this),\n      })\n    };\n\n    //@ts-ignore\n    //@ts-ignore\n    setMarkers = (data, matches) => {\n      const tab = this.getStore('tabs').active\n      let tooltips = this.getStore('tooltips').data\n      switch (tab) {\n        case 'attack':\n          this.getStore('mapShoot').fetch(\n            data,\n            //@ts-ignore\n            fetchProps[tab].mapShoot,\n            matches,\n          )\n          //@ts-ignore\n          this.getStore('playerInfo').fetch(data, fetchProps[tab].playerInfo)\n          //@ts-ignore\n          tooltips = tooltips.filter(({ prop_id }) => prop_id === 24)\n          //@ts-ignore\n          this.data = getToolTipResult(data, tooltips)\n          break\n        case 'block':\n          if (this.getStore('lexics').page === 'player') {\n            const { profile } = this.getStore('playerProfile')\n            this.getStore('playerInfo').fetch(\n              data,\n              //@ts-ignore\n              fetchProps[tab].playerInfo,\n              profile.id,\n            )\n          }\n          //@ts-ignore\n          tooltips = tooltips.filter(({ prop_id }) => prop_id === 27)\n          //@ts-ignore\n          this.data = getToolTipResult(data, tooltips)\n          break\n        case 'pass':\n          //@ts-ignore\n          this.getStore('playerInfo').fetch(data, fetchProps[tab].playerInfo)\n          //@ts-ignore\n          tooltips = tooltips.filter(({ prop_id }) => prop_id === 21)\n          //@ts-ignore\n          this.data = getToolTipResult(data, tooltips)\n          break\n        case 'serve':\n          this.getStore('mapShoot').fetch(\n            data,\n            //@ts-ignore\n            fetchProps[tab].mapShoot,\n            matches,\n          )\n          //@ts-ignore\n          this.getStore('playerInfo').fetch(data, fetchProps[tab].playerInfo)\n          //@ts-ignore\n          tooltips = tooltips.filter(({ prop_id }) => prop_id === 15)\n          //@ts-ignore\n          this.data = getToolTipResult(data, tooltips)\n          break\n        case 'attack_reception':\n          data = getFilteredMarkers(data, 70, 196)\n          //@ts-ignore\n          this.getStore('playerInfo').fetch(data, fetchProps[tab].playerInfo)\n          this.getStore('mapShoot').fetch(\n            data,\n            //@ts-ignore\n            fetchProps[tab].mapShoot,\n            matches,\n          )\n          //@ts-ignore\n          tooltips = tooltips.filter(({ prop_id }) => prop_id === 18)\n          //@ts-ignore\n          this.data = getToolTipResult(data, tooltips)\n          break\n        case 'serve_reception':\n          data = getFilteredMarkers(data, 70, 195)\n          //@ts-ignore\n          this.getStore('playerInfo').fetch(data, fetchProps[tab].playerInfo)\n          this.getStore('mapShoot').fetch(\n            data,\n            //@ts-ignore\n            fetchProps[tab].mapShoot,\n            matches,\n          )\n          //@ts-ignore\n          tooltips = tooltips.filter(({ prop_id }) => prop_id === 18)\n          //@ts-ignore\n          this.data = getToolTipResult(data, tooltips)\n          break\n        default:\n          //@ts-ignore\n          this.data = data\n      }\n    };\n\n    //@ts-ignore\n    //@ts-ignore\n    async _onSuccess(matches, { data }) {\n      const store = this.getStore.bind(this)\n      const markers = map(data, marker => new Marker(marker, store))\n      //@ts-ignore\n      this.data = markers\n      await this.getStore('playerInfo').basicFetch()\n      await this.getStore('mapShoot').basicFetch()\n      const { lang } = this.getStore('lexics')\n      const types = this.getStore('shotTypes').data\n      const players = this.getStore('playerInfo').basicData\n      const teams = this.getStore('mapShoot').basicData\n      //@ts-ignore\n      data = applyMarkersState(markers, types)\n      data = getToolTipOpponentTeam(data, teams, lang)\n      if (this.getStore('tabs').active === 'block') {\n        data = getToolTipName(data, players, lang, 'block')\n      } else {\n        //@ts-ignore\n        data = getToolTipName(data, players, lang)\n      }\n      this.setMarkers(uniq(data), matches)\n      //@ts-ignore\n      this.loaded = true\n      //@ts-ignore\n      this.error = false\n    }\n\n    _onRequest() {\n      //@ts-ignore\n      this.loaded = false\n      //@ts-ignore\n      this.error = false\n    }\n\n    //@ts-ignore\n    _onError(error) {\n      //@ts-ignore\n      this.error = error\n      //@ts-ignore\n      this.loaded = false\n    }\n  }\n\nexport default FetchMarkers\n","// @ts-ignore\nimport { action, toJS } from 'mobx'\n\nimport forIn from 'lodash/forIn'\nimport find from 'lodash/find'\nimport min from 'lodash/min'\nimport max from 'lodash/max'\nimport inRange from 'lodash/inRange'\nimport get from 'lodash/get'\nimport toPairs from 'lodash/toPairs'\n\nimport { defaultDirections } from 'config/tabsConfig'\n\ntype TMarker = {\n  setVisible: (arg: boolean) => void,\n}\n\ntype TRect = {\n  x1: number,\n  x2: number,\n  y1: number,\n  y2 : number,\n}\n\nconst Actions = (superclass: any) =>\n  class extends superclass {\n    //@ts-ignore\n    @action handleDirection = (name, value) => {\n      this.directions[name] = value\n    };\n\n    setDefaultDirections = () => {\n      const { active }: {active: string} = this.getStore('tabs')\n      const defaultDirectionsActive: {from: boolean, to: boolean } = get(\n        defaultDirections,\n        active,\n      )\n\n      return forIn(defaultDirectionsActive, (value, key) =>\n        this.handleDirection(key, value))\n    };\n\n    //@ts-ignore\n    @action selectToggle = (value: boolean) => {\n      //@ts-ignore\n      this.select = value\n    };\n\n    //@ts-ignore\n    @action setAllVisible = () => {\n      this.data.forEach(({ setVisible }: TMarker) => setVisible(true))\n    }\n\n    setRect = (\n      {\n        x1,\n        x2,\n        y1,\n        y2,\n      } : TRect,\n      rectWidth: number,\n      rectLength: number,\n      fieldWidth: number,\n      fieldLength: number,\n    ) => {\n      if (x1 === x2 || y1 === y2) {\n        return this.setAllVisible()\n      }\n      const xStart = min([x1, x2]) || 0\n      const xEnd = max([x1, x2]) || 0\n      const yStart = min([y1, y2]) || 0\n      const yEnd = max([y1, y2]) || 0\n      // для корректного подсчета нужно перевести в абсолютные значения\n      const xStartAbs = (xStart * rectWidth) / 100\n      const xEndInAbs = (xEnd * rectWidth) / 100\n      const yStartInAbs = (yStart * rectLength) / 100\n      const yEndInAbs = (yEnd * rectLength) / 100\n\n      const markersType = find(\n        toPairs(this.directions),\n        (direction: Array<string | boolean>) => direction[1] === true,\n      ) || ['to', true]\n\n      this.data.forEach((marker: TMarker) => {\n        const { pos_x, pos_y } = get(marker, get(markersType, '[0]'))\n        // координаты переводим в абсолютные значения\n        // (24 и 30 - это отступы у поля, которые необходимо учитывать)\n        const xCoordAbs = (pos_x * fieldWidth) / 100 + 24\n        const yCoordAbs = (pos_y * fieldLength) / 100 + 30\n        if (\n          !inRange(xCoordAbs, xStartAbs, xEndInAbs)\n          || !inRange(yCoordAbs, yStartInAbs, yEndInAbs)\n        ) {\n          marker.setVisible(false)\n        }\n      })\n    };\n\n    //@ts-ignore\n    @action deleteMarkers = () => {\n      //@ts-ignore\n      this.data = []\n    };\n  }\n\nexport default Actions\n","import { compose } from 'recompose'\n\n// @ts-ignore\nimport MarkersStore from 'features/stores/Markers/MarkersStore'\n// @ts-ignore\nimport MarkersFiltration from 'features/stores/Markers/MarkersFiltration/MarkersFiltration'\n// @ts-ignore\nimport FetchMarkers from 'features/stores/Markers/FetchMarkerActions'\n// @ts-ignore\nimport Actions from 'features/stores/Markers/Actions'\n\n// @ts-ignore\nconst ComposeMarkers = superclass =>\n  compose(\n    MarkersStore,\n    MarkersFiltration,\n    FetchMarkers,\n    Actions,\n  )(superclass)\n\nexport default ComposeMarkers\n","import { utils } from 'react-sport'\n// @ts-ignore\nimport { action } from 'mobx'\n\nimport forIn from 'lodash/forIn'\nimport includes from 'lodash/includes'\nimport get from 'lodash/get'\nimport map from 'lodash/map'\nimport filter from 'lodash/filter'\n\nimport routes from 'config/routes'\nimport { zone_params } from 'config/params'\nimport { defaultDirections } from 'config/tabsConfig'\n\ntype TCommonObjOptions = {\n  [key: string]: string,\n}\n\nconst procedures: TCommonObjOptions = {\n  player: 'ask_player_param_view',\n  team: 'ask_team_param_view',\n}\n\nconst fields: TCommonObjOptions = {\n  player: '_v_player_id',\n  team: '_v_team_id',\n}\n\n// @ts-ignore\nconst ZoneActionsMixin = superclass =>\n  class extends superclass {\n    // Ставим активную зону и меняем направления маркеров для этой зоны\n    //@ts-ignore\n    @action setChecked = (name) => {\n      //@ts-ignore\n      this.checked = name\n      const { active } = this.getStore('tabs')\n      const { handleDirection } = this.getStore('markers')\n      // Случай, если пользователь выбирает показывать зоны\n      // Для АТАК, БЛОК, ПЕРЕДАЧА показываем точки откуда, в остальных случаях точки куда\n      if (includes(['attack', 'pass'], active)) {\n        return forIn({ from: false, to: true }, (value, key) =>\n          handleDirection(key, value))\n      }\n      return forIn({ from: true, to: false }, (value, key) =>\n        handleDirection(key, value))\n    }\n\n    //@ts-ignore\n    @action resetToDefaultDirections = () => {\n      const { active } = this.getStore('tabs')\n      const { handleDirection } = this.getStore('markers')\n\n      const defaultDirectionsActive = get(defaultDirections, active)\n      return forIn(defaultDirectionsActive, (value, key) =>\n        handleDirection(key, value))\n    }\n\n    //@ts-ignore\n    @action setZone = (value) => {\n      //@ts-ignore\n      this.checked = value\n    };\n\n    //@ts-ignore\n    @action setTotal = (value) => {\n      //@ts-ignore\n      this.total = value\n    };\n\n    //@ts-ignore\n    @action fetch = (pageId, matches) => {\n      const url = `${routes.API_ROOT}/data`\n      const tab = this.getStore('tabs').active\n      const page: string = get(this.getStore('lexics'), 'page')\n      const params = map(zone_params, [tab, 'param_id'])\n      const config = {\n        body: JSON.stringify({\n          proc: procedures[page],\n          params: {\n            _v_match_id: matches,\n            [fields[page]]: [pageId],\n            _v_param_id: [params],\n          },\n        }),\n        method: 'POST',\n      }\n      utils.callApi({\n        config,\n        onError: error => this._onError(error),\n        onRequest: () => {\n          //@ts-ignore\n          this.stats = []\n          //@ts-ignore\n          this.loaded = null\n        },\n        onSuccess: json => this._onSuccess(json),\n        url,\n      })\n    };\n\n    //@ts-ignore\n    _onSuccess = ({ data }) => {\n      //@ts-ignore\n      this.loaded = true\n      // Нужна статистика только по целому матчу f_option_0 = 0\n      //@ts-ignore\n      this.stats = filter(data, ({ f_option_0 }) => f_option_0 === 0) || null\n\n      //@ts-ignore\n      this.error = null\n    };\n\n    //@ts-ignore\n    _onError = (error) => {\n      //@ts-ignore\n      this.loaded = true\n      //@ts-ignore\n      this.error = error\n    };\n  }\n\nexport default ZoneActionsMixin\n","import { observable, computed } from 'mobx'\n\n// @ts-ignore\nimport BasicStore from 'features/stores/BasicStore'\n// @ts-ignore\nimport ZoneActions from 'features/stores/Zones/ZoneActionsMixin'\n// @ts-ignore\nimport { zone_params } from 'config/params'\n\n// @ts-ignore\n// @ts-ignore\n// @ts-ignore\nconst setParam = (data, tab, key) =>\n  //@ts-ignore\n  data.filter(({ f_param }) => f_param === zone_params[tab][key].param_id)\n\nclass Zones extends ZoneActions(BasicStore) {\n  @observable checked = 'without_zone';\n\n  @observable total = false;\n\n  @observable stats = null;\n\n  @observable loaded = false;\n\n  //@ts-ignore\n  @observable error;\n\n  @observable basic = {\n    left: {},\n    right: {},\n  };\n\n  @observable advanced = {\n    left: {},\n    right: {},\n  };\n\n  @computed get activeStats() {\n    //@ts-ignore\n    const { active } = this.getStore('tabs')\n    const zoneStats = this.checked === 'advanced_zones'\n    //@ts-ignore\n      ? this.stats.filter(({ f_variant_zone }) => f_variant_zone === 124)\n    //@ts-ignore\n      : this.stats.filter(({ f_variant_zone }) => f_variant_zone !== 124)\n    return {\n      percent: setParam(zoneStats, active, 0),\n      successActions: setParam(zoneStats, active, 1),\n      totalActions: setParam(zoneStats, active, 2),\n    }\n  }\n}\n\nexport default Zones\n","import { observable } from 'mobx'\nimport BasicStore from '../BasicStore'\nimport FetchShotType from './FetchShotType'\n\nclass Markers extends FetchShotType(BasicStore) {\n  @observable loaded = false;\n\n  @observable error = null;\n\n  @observable data = [];\n}\n\nexport default Markers\n","// @ts-ignore\nimport { action } from 'mobx'\nimport { utils as remoteUtils } from 'react-sport'\n\n// @ts-ignore\nimport routes from 'config/routes'\n\n// @ts-ignore\nconst FetchShotType = superclass =>\n  class extends superclass {\n    //@ts-ignore\n    @action fetch = () => {\n      const url = `${routes.API_ROOT}/data`\n      const config = {\n        method: 'POST',\n        body: JSON.stringify({\n          proc: 'ask_type_of_actions_view',\n        }),\n      }\n\n      remoteUtils.callApi({\n        url,\n        config,\n        onRequest: this._onRequest.bind(this),\n        onSuccess: this._onSuccess.bind(this),\n        onError: this._onError.bind(this),\n      })\n    };\n\n    //@ts-ignore\n    _onSuccess({ data }) {\n      //@ts-ignore\n      this.data = data\n      //@ts-ignore\n      this.loaded = true\n      //@ts-ignore\n      this.error = false\n    }\n\n    _onRequest() {\n      //@ts-ignore\n      this.loaded = false\n      //@ts-ignore\n      this.error = false\n    }\n\n    //@ts-ignore\n    _onError(error) {\n      //@ts-ignore\n      this.error = error\n      //@ts-ignore\n      this.loaded = false\n    }\n  }\n\nexport default FetchShotType\n","import { observable, computed } from 'mobx'\nimport reduce from 'lodash/reduce'\n// @ts-ignore\nimport BasicStore from 'features/stores/BasicStore'\nimport FetchMapShoot from './FetchMapShoot'\n\nclass MapShootStore extends FetchMapShoot(BasicStore) {\n  @observable error = null;\n\n  @observable loaded = false;\n\n  @observable data = {};\n\n  @observable basicData = [];\n\n  @observable basicLoaded = false;\n\n  @computed get playersIds() {\n    //@ts-ignore\n    return reduce(\n      this.data,\n      (acc, { prop_player }) => {\n        //@ts-ignore\n        //@ts-ignore\n        //@ts-ignore\n        prop_player.forEach(({ player_id }) => acc.push(`${player_id}_player`))\n        return acc\n      },\n      [],\n    )\n  }\n}\n\nexport default MapShootStore\n","import { observable, computed } from 'mobx'\nimport map from 'lodash/map'\n// @ts-ignore\nimport BasicStore from 'features/stores/BasicStore'\nimport FetchPlayerInfo from './FetchPlayerInfo'\n\nclass PlayerInfoStore extends FetchPlayerInfo(BasicStore) {\n  @observable error = null;\n\n  @observable loaded = false;\n\n  @observable data = [];\n\n  @observable basicLoaded = false;\n\n  @observable basicData = [];\n\n  @computed get playersIds() {\n    //@ts-ignore\n    return map(this.basicData, ({ f_player }) => `${f_player}_player`)\n  }\n}\n\nexport default PlayerInfoStore\n","import { observable } from 'mobx'\n\n// @ts-ignore\nimport BasicStore from 'features/stores/BasicStore'\n// @ts-ignore\nimport ToolTipActions from 'features/stores/ToolTips/ToolTipActions'\n\nclass ToolTipStore extends ToolTipActions(BasicStore) {\n  //@ts-ignore\n  @observable loaded;\n\n  //@ts-ignore\n  @observable error;\n\n  @observable data = [];\n}\n\nexport default ToolTipStore\n","import { observable } from 'mobx'\n\n// @ts-ignore\nimport BasicStore from 'features/stores/BasicStore'\n// @ts-ignore\nimport RangeActions from 'features/stores/ShootsRange/RangeActions'\n\nclass ShootsRangeStore extends RangeActions(BasicStore) {\n  @observable before = 6;\n\n  @observable after = 6;\n\n  @observable allPossession = false;\n\n  @observable range = true;\n\n  @observable isOpened = false;\n}\n\nexport default ShootsRangeStore\n","\n// @ts-ignore\nimport { action, computed } from 'mobx'\n\ninterface IRangeActions {\n  rangePopup: () => void,\n  setAllPossession: () => void,\n  setRange: () => void,\n  setBefore: (value: number) => number | void,\n  setAfter: (value: number) => number | void,\n}\n\n// @ts-ignore\nconst RangeActions = (superclass: Class<any>) =>\n  class extends superclass implements IRangeActions {\n    /** Функция закрытия попап окна\n     */\n    //@ts-ignore\n    @action rangePopup = () => {\n      //@ts-ignore\n      //@ts-ignore\n      if (this.before === '' || this.before < 1) {\n        this.setBefore(6)\n      }\n      //@ts-ignore\n      //@ts-ignore\n      if (this.after === '' || this.after < 1) {\n        this.setAfter(6)\n      }\n      //@ts-ignore\n      //@ts-ignore\n      this.isOpened = !this.isOpened\n    };\n\n    /** Показать все владение (чекбокс)\n     */\n    //@ts-ignore\n    @action setAllPossession = () => {\n      //@ts-ignore\n      //@ts-ignore\n      this.allPossession = !this.allPossession\n    };\n\n    /** Показать диапазон (чекбокс)\n     */\n    //@ts-ignore\n    @action setRange = () => {\n      //@ts-ignore\n      //@ts-ignore\n      this.range = !this.range\n    };\n\n    /** Выставить секунды до события\n     * @param {number} before - секунды до момента\n     */\n    //@ts-ignore\n    @action setBefore = (before: number | string) => {\n      //@ts-ignore\n      this.before = before\n      // TODO переписать на общий\n      // Выставляем секунды во внутреннем плеере тоже\n      //@ts-ignore\n      this.getStore('videoPlayer').range.setVideoStart(before)\n    };\n\n    /** Выставить секунды после события\n     * @param {number} after - секунды до момента\n     */\n    //@ts-ignore\n    @action setAfter = (after: number | string) => {\n      //@ts-ignore\n      this.after = after\n      // TODO переписать на общий\n      // Выставляем секунды во внутреннем плеере тоже\n      //@ts-ignore\n      this.getStore('videoPlayer').range.setVideoEnd(after)\n    };\n\n    /** Считаем всю длительность владения\n     */\n    //@ts-ignore\n    @computed get possessionLength() {\n      //@ts-ignore\n      //@ts-ignore\n      return this.after + this.before\n    }\n  }\n\nexport default RangeActions\n","// @ts-ignore\nimport { observable, computed } from 'mobx'\nimport toString from 'lodash/toString'\nimport isEmpty from 'lodash/isEmpty'\n\nimport moment from 'moment'\n\n/**\n * Стор для видеонарезок, наследуется от стора видеонарезок из спорта\n */\n// @ts-ignore\n// @ts-ignore\nconst VideoCuts = markers => superclass =>\n  class extends superclass {\n    //@ts-ignore\n    @observable groups = {};\n\n    //@ts-ignore\n    @observable markers = markers;\n\n    /** получаем список событий, соответствующий фильтрам **/\n    //@ts-ignore\n    @computed get events() {\n      //@ts-ignore\n      const checked = []\n\n      //@ts-ignore\n      this.buttons.forEach(({ checkedFilters }) => {\n        if (!isEmpty(checkedFilters)) {\n          //@ts-ignore\n          checkedFilters.forEach(filter => checked.push(filter))\n        }\n      })\n\n      //@ts-ignore\n      return this.markers.data.filter(({ prop }) =>\n        //@ts-ignore\n        //@ts-ignore\n        prop.some(property =>\n          //@ts-ignore\n          checked.some(({ event_prop, event_value }) => {\n            const value = event_value.split(',')\n            return (\n              parseInt(event_prop, 10) === property[0]\n              && value.includes(toString(property[2]))\n            )\n          })))\n    }\n\n    /** Получаем общую длительность видео **/\n    //@ts-ignore\n    @computed get duration() {\n      return moment.duration(\n        this.events.length * this.range.sumRange,\n        'seconds',\n      )\n    }\n  }\n\nexport default VideoCuts\n","import { observable, computed, action } from 'mobx'\n\n/**\n * Класс попап-элементов в кнопках из видеонарезок\n */\nclass PopupItem {\n  @observable checked = false;\n\n  @observable items = [];\n\n  //@ts-ignore\n  constructor(props) {\n    Object.assign(this, props)\n  }\n\n  /** Если на попап-элемент активен, то достаем свойства, по которым далее фильтруем **/\n  @computed get checkedFilters() {\n    const filters = []\n    if (this.checked) {\n      filters.push({\n        //@ts-ignore\n        event_prop: this.c_match_event_prop,\n        //@ts-ignore\n        event_value: this.c_match_event_prop_value,\n        //@ts-ignore\n        lexicalFormula: this.lexical_formula,\n      })\n    }\n    return filters\n  }\n\n  //@ts-ignore\n  @action setChecked = value => (this.checked = value);\n}\n\nexport default PopupItem\n","import { observable, computed, action } from 'mobx'\nimport find from 'lodash/find'\nimport isEmpty from 'lodash/isEmpty'\n\nimport PopupItem from './PopupItem'\n\n/**\n * Класс кнопок из видеонарезок, через который задаются нужные параметры для кнопок\n *\n * @property {string} group - имя группы, к которой принадлежит кнопка\n *\n */\nclass Button {\n  @observable checked = false;\n\n  @observable popupItems = [];\n\n  /** Дополнительно передается название группы, к которой принадлежит кнопка **/\n  //@ts-ignore\n  //@ts-ignore\n  constructor(props, group) {\n    Object.assign(this, props)\n    //@ts-ignore\n    this.group = group\n\n    /** Здесь достаются id лексики кнопки и попап кнопок **/\n    //@ts-ignore\n    //@ts-ignore\n    this.popup.forEach((popup) => {\n      popup.lexical_formula = popup.popup_lexic\n    })\n    //@ts-ignore\n    //@ts-ignore\n    this.popupItems = this.popup.map(item => new PopupItem(item))\n  }\n\n  /** Кнопка активна, если хотя бы один из элементов относящихся к этой кнопке активен **/\n  @computed get activeItem() {\n    const active = find(this.popupItems, { checked: true })\n    return active || null\n  }\n\n  /** Получаем активные элементы из кнопки **/\n  @computed get activeItems() {\n    //@ts-ignore\n    return this.popupItems.filter(item => item.checked)\n  }\n\n  /** Получаем все активные фильтры **/\n  @computed get checkedFilters() {\n    //@ts-ignore\n    const filters = []\n\n    if (!isEmpty(this.activeItems)) {\n      this.activeItems.forEach(({ checkedFilters }) => {\n        //@ts-ignore\n        //@ts-ignore\n        checkedFilters.forEach(filter => filters.push(filter))\n      })\n    }\n\n    //@ts-ignore\n    return filters\n  }\n\n  //@ts-ignore\n  @action setActive = item => (this.activeItem = item);\n\n  /** Проходим по всем элементам и делаем их не активными **/\n  @action uncheckAll = () => {\n    this.popupItems.forEach((popupItem) => {\n      //@ts-ignore\n      popupItem.setChecked(false)\n    })\n  };\n\n  /** Устанавлием активную кнопку **/\n  //@ts-ignore\n  //@ts-ignore\n  //@ts-ignore\n  set activeItem({ c_match_event_prop, c_match_event_prop_value, popup }) {\n    const oldActive = find(this.popupItems, { checked: true })\n    const currentBtn = find(this.popupItems, { popup })\n\n    /** если кнопка, на которую нажали уже активна, то делаем её не активной **/\n    //@ts-ignore\n    //@ts-ignore\n    //@ts-ignore\n    //@ts-ignore\n    //@ts-ignore\n    if (currentBtn.checked) return currentBtn.setChecked(false)\n\n    /** Делаем не активным, все другие кнопки **/\n    //@ts-ignore\n    if (oldActive) {\n      //@ts-ignore\n      oldActive.checked = false\n    }\n\n    const newActive = find(this.popupItems, {\n      c_match_event_prop,\n      c_match_event_prop_value,\n    })\n\n    //@ts-ignore\n    //@ts-ignore\n    newActive.setChecked(true)\n  }\n}\nexport default Button\n","// @ts-ignore\nimport { action } from 'mobx'\nimport { utils as remoteUtils } from 'react-sport'\n\nimport Button from './Button'\n\n// @ts-ignore\nconst VideoCutsMixin = superclass =>\n  class extends superclass {\n    /** Получение кнопок **/\n    //@ts-ignore\n    @action fetchButtons = () => {\n      const url = `${this.rootUrl}/data`\n      const config = {\n        method: 'POST',\n        body: JSON.stringify({\n          proc: 'ask_filters_video_cutting_view',\n        }),\n      }\n\n      remoteUtils.callApi({\n        url,\n        config,\n        //@ts-ignore\n        onRequest: () => {\n          //@ts-ignore\n          this.isFetching = true\n        },\n        onSuccess: json => this._onSuccessButtons(json),\n        //@ts-ignore\n        onError: (error) => {\n          //@ts-ignore\n          this.error = error\n        },\n      })\n    };\n\n    //@ts-ignore\n    _onSuccessButtons = ({ data }) => {\n      //@ts-ignore\n      const newButtons = []\n      //@ts-ignore\n      const lexicIds = []\n\n      /** Собираем лексику из кнопок и создаем для каждой кнопки класс **/\n      //@ts-ignore\n      data.forEach(({ value }) => {\n        const { button, group } = value[0]\n        //@ts-ignore\n        //@ts-ignore\n        button.forEach(({ button_lexic, ...buttonInfo }) => {\n          buttonInfo.lexical_formula = button_lexic\n          newButtons.push(new Button(buttonInfo, group))\n          lexicIds.push(button_lexic)\n          //@ts-ignore\n          buttonInfo.popup.forEach(({ popup_lexic }) =>\n            lexicIds.push(popup_lexic))\n        })\n        this.groups[group] = value[0]\n      })\n      //@ts-ignore\n      this.isFetching = false\n\n      //если объект лексики передан\n      //то вытаскиваем всю лексику из кнопок и передаем ее\n      //для запроса в объект лексики\n      if (this.lexics) {\n        const phrases = {}\n        //@ts-ignore\n        //@ts-ignore\n        lexicIds.forEach((id) => { phrases[id] = id })\n        this.lexics.lexicFetch(phrases)\n      }\n\n      //@ts-ignore\n      //@ts-ignore\n      this.buttons = newButtons\n    };\n\n    //@ts-ignore\n    @action resetFilters = () => {\n      //@ts-ignore\n      this.buttons.forEach((button) => {\n        button.uncheckAll()\n      })\n    };\n  }\n\nexport default VideoCutsMixin\n","import { compose } from 'recompose'\n\n// @ts-ignore\nimport VideoCuts from 'features/stores/VideoCuts/VideoCuts'\n// @ts-ignore\nimport VideoCutsMixin from 'features/stores/VideoCuts/VideoCutsMixin'\n\n// @ts-ignore\n// @ts-ignore\nconst ComposeVideoCuts = (superclass, markers) =>\n  compose(\n    VideoCuts(markers),\n    VideoCutsMixin,\n  )(superclass)\n\nexport default ComposeVideoCuts\n","\nimport { observable } from 'mobx'\n// @ts-ignore\nimport MatchLinksApiStore from 'features/stores/MatchLinks/MatchLinksApiStore'\n\ninterface IMatchLinksStore {\n  links: Array<any>,\n  isFetching: boolean,\n  error: {} | null,\n}\n\nexport default class MatchLinksStore extends MatchLinksApiStore\n  implements IMatchLinksStore {\n  @observable links = [];\n\n  @observable isFetching = false;\n\n  @observable error = null;\n}\n","import { action } from 'mobx'\nimport { utils } from 'react-sport'\n\n// @ts-ignore\nimport routes from 'config/routes'\n// @ts-ignore\nimport BasicStore from 'features/stores/BasicStore'\n\ntype TParams = {\n  proc: string,\n  match_id: number,\n  team_id?: number,\n  player_id?: number,\n};\n\ntype TConfig = {\n  method: string,\n  body: string,\n};\n\ninterface IMatchLinksApi {\n  fetch: (match_id: number, id: number, type: string) => void,\n}\nexport default class MatchLinksApiStore extends BasicStore\n  implements IMatchLinksApi {\n  @action fetch = (\n    //@ts-ignore\n    match_id,\n    //@ts-ignore\n    pageId,\n    //@ts-ignore\n    type,\n  ) => {\n    const url = `${routes.API_ROOT}/video/match`\n    const id_type = type === 'team' ? 'team_id' : 'player_id'\n    const proc = type === 'team' ? 'scout_team_match_pop_up' : 'scout_match_pop_up'\n    const params: TParams = {\n      proc,\n      match_id,\n    }\n    params[id_type] = pageId\n\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify(params),\n    }\n\n    utils.callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        this.links = []\n        //@ts-ignore\n        this.isFetching = true\n      },\n      onSuccess: (json: { links: {} | Array<any> | void | null }) =>\n        this._onSuccess(json),\n      onError: (error: any) => this._onError(error),\n    })\n  };\n\n  _onSuccess = ({ links }: { links: {} | Array<any> | null | void }) => {\n    //@ts-ignore\n    this.links = links\n    //@ts-ignore\n    this.isFetching = false\n    //@ts-ignore\n    this.error = null\n  };\n\n  _onError = (error: {}) => {\n    //@ts-ignore\n    this.error = error\n    //@ts-ignore\n    this.isFetching = false\n  };\n}\n","import includes from 'lodash/includes'\n\nimport {\n  attackZone,\n  attackZoneSpecial,\n  frontLineParams,\n  backLineParams,\n  allBlocks,\n  fieldLines,\n  zones,\n  blockTypes,\n} from 'config/FieldZones'\n\nconst { BACK_LINE, FRONT_LINE } = fieldLines\nconst { ATTACK_ZONE, ATTACK_ZONE_SPECIAL } = zones\nconst { ALL_BLOCKS } = blockTypes\n\n// Формирование объекта с параметров для запроса отчета\nexport const getParamObj = (paramId: number) => {\n  const params: {\n    [key: string]: number | null,\n  } = {\n    param_id: paramId,\n  }\n  // Для некоторых параметров считается не вся площадка, добавляем f_option_3\n  if (includes(frontLineParams, paramId)) {\n    params.f_option_3 = FRONT_LINE\n  }\n  // Для некоторых параметров считается не вся площадка, добавляем f_option_3\n  if (includes(backLineParams, paramId)) {\n    params.f_option_3 = BACK_LINE\n  }\n  // Для блоков считается общее количество (без разновидностей), добавляем f_option_5\n  if (includes(allBlocks, paramId)) {\n    params.f_option_5 = ALL_BLOCKS\n  }\n  // для параметров атак, добавляем variant_zone\n  if (includes(attackZone, paramId)) {\n    params.f_variant_zone = ATTACK_ZONE\n  }\n  // Если параметр относится к специальному атакующему типу,\n  // меняем зону на зону специальную атаки\n  if (includes(attackZoneSpecial, paramId)) {\n    params.f_variant_zone = ATTACK_ZONE_SPECIAL\n  }\n\n  return params\n}\n","import { observable } from 'mobx'\n// @ts-ignore\nimport TableReportsApiStore from 'features/stores/TableReports/TableReportsApiStore'\n\nexport default class TableReportsStore extends TableReportsApiStore {\n  @observable pdfIsFetching = false;\n\n  @observable xlsIsFetching = false;\n\n  @observable error = null;\n}\n","import { action } from 'mobx'\n\nimport get from 'lodash/get'\nimport values from 'lodash/values'\nimport map from 'lodash/map'\n\nimport routes from 'config/routes'\nimport BasicStore from 'features/stores/BasicStore'\nimport stores from 'features/stores'\n\nimport { getParamObj } from './filterParams'\n\ninterface ITableReportsApiStore {\n  getReport: (\n    e: {},\n    key: string,\n    tableType?: string\n    //@ts-ignore\n  ) => Promise<void | null>,\n}\n\nexport default class TableReportsApiStore extends BasicStore\n  implements ITableReportsApiStore {\n  //@ts-ignore\n  getReportInfo = (tableType?: string, page: string, pageId: number) => {\n    // Общие методы для доступа к информации об игроке, команде или матче\n    const commonTable = get(this.getStore(`${page}Table`), 'tables')\n    const commonMatches = get(this.getStore('selectedMatches'), [page, pageId])\n    const commonShowOpponentStats = get(\n      this.getStore(`${page}Table`), 'showOpponentStats',\n    )\n\n    const tableReportOptions = {\n      matchPlayersTable: {\n        matches: [pageId],\n        tables: commonTable,\n      },\n      playerMatches: {\n        matches: commonMatches,\n        showOpponentStats: commonShowOpponentStats,\n        tables: commonTable,\n      },\n      teamMatches: {\n        matches: commonMatches,\n        showOpponentStats: commonShowOpponentStats,\n        tables: commonTable,\n      },\n\n      tournamentMatches: {\n        matches: map(get(stores, 'tournamentMatches.matches', []), 'f_match'),\n        showOpponentStats: get(stores, 'tournamentMatchesTableStore.tables'),\n        tables: get(stores, 'tournamentMatchesTableStore.tables'),\n      },\n      tournamentPlayers: {}, //тут пока заглушки TODO\n      tournamentTeams: {}, //тут пока заглушки TODO\n    }\n    //@ts-ignore\n    return get(tableReportOptions, tableType, {})\n  }\n\n  //@ts-ignore\n  @action getReport = (e: {}, key: string, tableType?: string) => {\n    const url: string = `${routes.API_ROOT}/report/tables_report`\n    const {\n      getLexics,\n      lang,\n      page,\n    }: {\n      getLexics: (tableName: string | number) => string | null,\n      lang: string,\n      page: string,\n    } = this.getStore('lexics')\n    const currentProfile: string = `${page}Profile`\n\n    const pageId: number = get(this.getStore(currentProfile).profile, 'id')\n      || +get(this.getStore(currentProfile), 'matchId')\n\n    const {\n      matches,\n      showOpponentStats,\n      tables,\n    } = this.getReportInfo(tableType, page, pageId)\n\n    // Если матчей не выбрано, то не делаем запрос на отчет\n    if (!matches.length) return null\n\n    const prepareMatchPlayersTable = () => {\n      const { team1_id, team2_id } = get(this.getStore('matchProfile'), 'data', {})\n\n      return {\n        lang_id: lang,\n        matches,\n        tables: map(values(tables), ({\n          activeId,\n          selectedParams,\n          sortInc,\n          tableName,\n        }: any) => ({\n          name: getLexics(tableName) || tableName,\n          params: map(selectedParams, 'param_id'),\n          sortby: {\n            flag: !sortInc ? 'ASC' : 'DESC',\n            param: activeId,\n          },\n        })),\n        teams: [team1_id, team2_id],\n        type: key,\n        [`${page}_id`]: pageId,\n      }\n    }\n\n    const prepareDefaultTable = () => ({\n      lang_id: lang,\n      matches,\n      tables: map(values(tables), ({\n        selectedParams,\n        summaryType,\n        tableName,\n      }: any) => ({\n        is_show_opponent: Number(showOpponentStats),\n        is_total: Boolean(summaryType === 'total'),\n        name: getLexics(tableName) || tableName,\n        params: map(selectedParams, ({ param_id }) => getParamObj(param_id)),\n      })),\n      type: key,\n      [`${page}_id`]: pageId,\n    })\n\n    // Для отчета по матчу нужна другая структура,\n    // в зависимости от типа таблицы вызываем нужную\n    // функцию для формирования конфига для запроса\n    const prepareConfig = {\n      default: prepareDefaultTable,\n      matchPlayersTable: prepareMatchPlayersTable,\n    }\n\n    //@ts-ignore\n    const getConfig = tableType => (\n      get(prepareConfig, tableType)\n      || get(prepareConfig, 'default')\n    )\n\n    const config: {\n      params: {},\n      uri: string,\n    } = {\n      params: getConfig(tableType)(),\n      uri: `request_${page}_stat_scout`,\n    }\n\n    //@ts-ignore\n    this[`${key}IsFetching`] = true\n\n    return fetch(url, {\n      body: JSON.stringify(config),\n      method: 'POST',\n    })\n      .then((response: any) => {\n        //@ts-ignore\n        this[`${key}IsFetching`] = false\n        return response.blob()\n      })\n      .catch((error: {}) => {\n        //@ts-ignore\n        this.error = error\n        //@ts-ignore\n        this[`${key}IsFetching`] = false\n      })\n  }\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport { compose, withHandlers } from 'recompose'\nimport cx from 'classnames'\nimport map from 'lodash/map'\n\nimport { T9n, OutsideClick } from 'react-sport'\n\ntype TProps = {\n  isFetching: boolean,\n  links: {} | Array<any>,\n  f_match: number,\n};\n\nconst MatchPopupComponent = ({ f_match, isFetching, links }: TProps) => (\n  <div\n    className={cx(\n      'popup-container',\n      'popup-matches-episodes',\n      'popup-matches-episodes__position-bottom',\n      { 'popup-container__loading': isFetching },\n    )}\n  >\n    {map(links, ({ link }, k) => (\n      <a\n        className='ui-button'\n        target='_blank'\n        rel='noopener noreferrer'\n        href={link}\n        key={k}\n      >\n        <i className='icon-play_volleyball_circle' />\n        <T9n className='ui-button__text' t={`match_popup_${k}`} />\n      </a>\n    ))}\n    <Link className='ui-button' target='_blank' to={`/matches/${f_match}`}>\n      <i className='icon-play_volleyball_circle' />\n      <T9n t='match_popup_details' />\n    </Link>\n  </div>\n)\n\nconst MatchPopupComposed = compose(\n  //@ts-ignore\n  withHandlers({\n    clickOutside: ({ toggleClose }) => () => {\n      toggleClose()\n    },\n  }),\n  OutsideClick,\n)\n\n// @ts-ignore\nexport const MatchPopup = MatchPopupComposed(MatchPopupComponent)\n","import React from 'react'\n\nimport { tBodyComposed } from './composed'\n\nimport { TPropsInner } from './types'\n\n// Основной блок таблицы со статистикой\nexport const TBodyComponent = ({\n  activeId,\n  pageId,\n  rowsList,\n  selectedParams,\n  showOpponentStats,\n  tableStats,\n  Tr,\n}: TPropsInner) => (\n  <tbody>\n    {rowsList\n      .map((trItem: { f_match?: number, f_player?: number }) => (\n        <Tr\n          key={trItem.f_player || trItem.f_match}\n          rowInfo={trItem}\n          pageId={pageId}\n          selectedParams={selectedParams}\n          tableStats={tableStats}\n          activeId={activeId}\n          showOpponentStats={showOpponentStats}\n        />\n      ))\n    }\n  </tbody>\n)\n\nexport const TBody = tBodyComposed(TBodyComponent)\n","import { observer } from 'mobx-react'\nimport { compose, withProps } from 'recompose'\n\nimport orderBy from 'lodash/orderBy'\n\nimport {\n  TPropsOuter,\n  TWithPropsInner,\n  TWithPropsOuter,\n  TPropsInner,\n} from './types'\n\nexport const tBodyComposed = compose<TPropsInner, TPropsOuter>(\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(({ rows, sortInc }) => {\n    const sortType = sortInc ? 'asc' : 'desc'\n\n    return {\n      rowsList: orderBy(\n        rows,\n        [row => Number(row.sortBy)],\n        sortType,\n      ),\n    }\n  }),\n)\n","// Файл конфигурации для правильного позиционирования параметров в шестеренке\n\n// Список параметров в шестеренке - последние в подгруппе параметров\nexport const lastElemsInGear = {\n  team: [219, 186, 174, 139, 194, 198, 237, 155, 157, 156, 166, 190],\n  rest: [\n    219,\n    186,\n    174,\n    139,\n    194,\n    198,\n    237,\n    155,\n    157,\n    156,\n    166,\n    190,\n    184,\n    203,\n    214,\n    215,\n    216,\n    217,\n  ],\n}\n\nexport const percentageParams = [\n  175,\n  161,\n  158,\n  184,\n  186,\n  174,\n  173,\n  175,\n  138,\n  139,\n  169,\n  188,\n  190,\n  142,\n  192,\n  194,\n  235,\n  233,\n  237,\n  143,\n  196,\n  198,\n  236,\n  234,\n  238,\n  154,\n  155,\n  157,\n  156,\n  166,\n  167,\n  159,\n  160,\n  158,\n  163,\n  161,\n  162,\n  144,\n  146,\n  148,\n  184,\n  222,\n  223,\n  224,\n  214,\n  215,\n  216,\n  217,\n  218,\n]\n\n// Список колонок для шестеренки.\n// Каждая колонка отображает группу параметров в соответствии с макетом\nexport const gearColumnsList: {\n  [key: string]: Array<{\n    className: string,\n    num: number,\n  }>,\n} = {\n  0: [\n    { num: 0, className: 'narrow' },\n    { num: 2, className: 'wide' },\n    { num: 1, className: 'narrow' },\n    { num: 3, className: 'narrow' },\n    { num: 4, className: 'narrow' },\n    { num: 5, className: 'narrow' },\n  ],\n  4: [\n    { num: 0, className: 'narrow' },\n    { num: 2, className: 'wide' },\n    { num: 1, className: 'narrow' },\n    { num: 3, className: 'narrow' },\n    { num: 5, className: 'narrow' },\n  ],\n  5: [\n    { num: 0, className: 'narrow' },\n    { num: 2, className: 'wide' },\n    { num: 1, className: 'narrow' },\n    { num: 3, className: 'narrow' },\n    { num: 5, className: 'narrow' },\n  ],\n  6: [\n    { num: 0, className: 'narrow' },\n    { num: 6, className: 'wide' },\n    { num: 1, className: 'narrow' },\n    { num: 3, className: 'narrow' },\n    { num: 5, className: 'narrow' },\n  ],\n  7: [\n    { num: 0, className: 'narrow' },\n    { num: 1, className: 'narrow' },\n    { num: 4, className: 'narrow' },\n  ],\n  8: [\n    { num: 0, className: 'narrow' },\n    { num: 2, className: 'wide' },\n    { num: 1, className: 'narrow' },\n    { num: 3, className: 'narrow' },\n    { num: 4, className: 'narrow' },\n    { num: 5, className: 'narrow' },\n  ],\n}\n","// Число знаков после запятой\nexport const getDigits = (paramId: number) => (paramId === 219 ? 1 : 0)\n","import filter from 'lodash/filter'\n\nexport const getFilteredStatsByParamId = (\n  stats: Array<{}>,\n  //@ts-ignore\n  paramId: number | null,\n) => filter(stats, { f_param: paramId })\n","import includes from 'lodash/includes'\nimport size from 'lodash/size'\nimport reduce from 'lodash/reduce'\n\nimport { percentageParams } from 'config/teamPopupParams'\nimport { getDigits } from 'module/utils/helpers/getDigits'\nimport { getFilteredStatsByParamId } from 'module/utils/helpers/getFilteredStatsByParamId'\n\n/**\n * Получение значения статистики в итоговой строке в таблице\n * @param {number} param_id - id фильтра по которому считаем статистику\n * @param {array} stats - статистика по всем параметрам\n * @param {string} type - тип итоговой строки, среднее значение или сумма всех значений в столбце\n */\nexport const getSummaryStatValue = (\n  param_id: number,\n  stats: Array<{\n    f_match_event_ids_json: Array<number> | null,\n    f_param: number,\n    value: number,\n  }> = [],\n  type: string,\n) => {\n  const filteredStats = getFilteredStatsByParamId(stats, param_id)\n\n  const filteredStatsCount = size(\n    reduce(filteredStats, (acc, curr) => {\n      //@ts-ignore\n\n      if (acc[curr.f_match]) return acc\n      //@ts-ignore\n\n      acc[curr.f_match] = curr\n      return acc\n    }, {}),\n  )\n\n  if (!filteredStatsCount) return '—'\n  //@ts-ignore\n\n  const value = reduce(filteredStats, (prev, { value }) => prev + value, 0)\n\n  if (includes(percentageParams, param_id)) {\n    return Number((value / filteredStatsCount).toFixed(getDigits(param_id)))\n  }\n\n  const types: {\n    [key: string]: () => number,\n  } = {\n    average_for_match: () => (\n      Number((value / filteredStatsCount)\n        .toFixed(getDigits(param_id)))\n    ),\n    total: () => Number(value.toFixed(getDigits(param_id))),\n  }\n\n  return types[type]() || '—'\n}\n","import React from 'react'\nimport { observer } from 'mobx-react'\n\nimport map from 'lodash/map'\nimport get from 'lodash/get'\n\nimport { compose, withHandlers } from 'recompose'\n\nimport { T9n, SimpleDropdown } from 'react-sport'\n\nimport { getSummaryStatValue } from 'module/utils/helpers/getSummaryStatValue'\n\ntype TProps = {\n  activeId?: string,\n  getActualMatchesList: (params: {\n    pageId: string,\n    forOpps?: boolean,\n  }) => Array<any>,\n  getClassName: (param: {}, activeId: string) => void,\n  getExtLink: (\n    param: {},\n    id: number,\n    forOpp: boolean,\n  ) => void,\n  //@ts-ignore\n  param?: { param1_id: {}, param2_id: {} },\n  showOpponentStats?: boolean,\n  page?: string,\n  pageId: string,\n  selectedMatches?: {},\n  setSummaryType: (summaryType: string, position: number) => () => void,\n  table: {\n    selectedParams: Array<{\n      param_id: number,\n      gear_group_id: number,\n      param1_id?: {},\n      param2_id?: {},\n    }>,\n    position: number,\n    summaryType?: string,\n  },\n}\n\n// Футер с выбранными параметрами в таблице статистики\nexport const TFootComponent = ({\n  activeId,\n  getActualMatchesList,\n  getClassName,\n  getExtLink,\n  page,\n  pageId,\n  selectedMatches,\n  setSummaryType,\n  showOpponentStats,\n  table: {\n    position,\n    selectedParams,\n    summaryType,\n  },\n}: TProps) => (\n  <tfoot>\n    <tr className='overall'>\n      <td className='overall__summary'>\n        <div>\n          {/*\n            //@ts-ignore */}\n          <SimpleDropdown placeholder={<T9n t='average_for_match' />}>\n            {map(['average_for_match', 'total'], summaryType => (\n              <T9n\n                key={summaryType}\n                t={summaryType}\n                onClick={setSummaryType(summaryType, position)}\n              />\n            ))}\n          </SimpleDropdown>\n        </div>\n      </td>\n      {get(selectedMatches, `${page}.${pageId}`, [])\n          && map(selectedParams, param => (\n            <td\n              //@ts-ignore\n              className={getClassName(param, activeId)}\n              key={`${param.param_id}_${param.gear_group_id}`}\n            >\n              <table>\n                <tbody>\n                  <tr onClick={() =>\n                    getExtLink(\n                      param,\n                      +pageId,\n                      false,\n                    )}\n                  >\n                    <td>\n                      {getSummaryStatValue(\n                        param.param_id,\n                        getActualMatchesList({\n                          pageId,\n                          forOpps: false,\n                        }),\n                        //@ts-ignore\n                        summaryType,\n                      )}\n                    </td>\n                  </tr>\n                  {showOpponentStats && page === 'team'\n                    && (\n                      <tr onClick={() =>\n                        getExtLink(\n                          param,\n                          +pageId,\n                          true,\n                        )}\n                      >\n                        <td>\n                          {getSummaryStatValue(\n                            param.param_id,\n                            getActualMatchesList({\n                              pageId,\n                              forOpps: true,\n                            }),\n                            //@ts-ignore\n                            summaryType,\n                          )}\n                        </td>\n                      </tr>\n                    )\n                  }\n                </tbody>\n              </table>\n            </td>\n          ))}\n    </tr>\n  </tfoot>\n)\n\nconst tFootComposed = compose(\n  //@ts-ignore\n  withHandlers({\n    setSummaryType: ({ setType }) => (\n      summaryType: string, position: number,\n    ) => () => setType(summaryType, position),\n  }),\n  observer,\n)\n\n//@ts-ignore\nexport const TFoot = tFootComposed(TFootComponent)\n","import React, { Fragment } from 'react'\nimport map from 'lodash/map'\nimport { compose, withHandlers } from 'recompose'\n\nimport { T9n } from 'react-sport'\n\ntype TParam = {\n  param_id: number,\n  gear_group_id: number,\n  full_lexical_formula: string,\n  short_lexical_formula: string,\n}\n\ntype TProps = {\n  table: { selectedParams: Array<TParam> },\n  onClick: (param: TParam) => void,\n}\n\n// Шапка с выбранными параметрами в таблице статистики\nexport const THeadComponent = ({\n  onClick,\n  table: { selectedParams },\n}: TProps) => (\n  <Fragment>\n    <th />\n    {map(selectedParams, param => (\n      <th\n        key={`${param.param_id}_${param.gear_group_id}`}\n          //@ts-ignore\n        onClick={onClick(param)}\n      >\n        <div>\n          <span className='th-tooltip'>\n            <T9n t={param.full_lexical_formula} />\n          </span>\n          <T9n t={param.short_lexical_formula} />\n        </div>\n      </th>\n    ))}\n  </Fragment>\n)\n\nconst THeadComposed = compose(\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    onClick: ({ setSortedId }) => param => () => setSortedId(param),\n  }),\n)\n\n// @ts-ignore\nexport const THead = THeadComposed(THeadComponent)\n","import React from 'react'\n\nimport cx from 'classnames'\n\nimport './Loader.scss'\n\ntype TProps = {\n  className?: string,\n}\n\nconst Loader = ({ className }: TProps) => (\n  <div className={cx(\n    'loader-wrapper',\n    className,\n  )}\n  />\n)\n\nexport default Loader\n","import React from 'react'\n\nimport Loader from 'features/components/common/loader/Loader'\n\ntype TProps = {\n  className?: string,\n}\n\nexport const TdLoader = ({ className = 'loader-wrapper_cell' }: TProps) => (\n  <td className='td-loader'>\n    <Loader className={className} />\n  </td>\n)\n","import get from 'lodash/get'\nimport size from 'lodash/size'\n\nimport { getDigits } from 'module/utils/helpers/getDigits'\nimport { getFilteredStatsByParamId } from 'module/utils/helpers/getFilteredStatsByParamId'\n/**\n * Получение значения статистики\n * @param {number} param_id - id фильтра по которому считаем статистику\n * @param {array} stats - статистика по всем параметрам\n */\nexport const getStatValue = (\n  { param_id }: { param_id: number },\n  stats: Array<{ f_param: number, value: number }> = [],\n) => {\n  const filteredStats = getFilteredStatsByParamId(stats, param_id)\n  if (size(filteredStats) === 1) {\n    const value = get(filteredStats, '[0].value')\n    return value.toFixed(getDigits(param_id)).toString()\n  }\n\n  return '—'\n}\n","import { observer, inject } from 'mobx-react'\n\nimport {\n  compose,\n  withHandlers,\n  withState,\n} from 'recompose'\nimport isEmpty from 'lodash/isEmpty'\nimport reduce from 'lodash/reduce'\n\nimport {\n  TWithHandlersOuter,\n  TWithHandlersInner,\n} from './types'\n\nexport const getExtLinkHOC = compose(\n  inject(\n    'lexics',\n    'videoLink',\n    'shootsRange',\n  ),\n  withState(\n    'linkIsFetching',\n    'toggleLinkIsFetching',\n    false,\n  ),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    getExtLink: ({\n      lexics: { lang },\n      shootsRange,\n      toggleLinkIsFetching,\n      videoLink: { request },\n    }) => ({\n      match,\n      param: { lexical_formula },\n      playerInfo,\n      playListType,\n      stats,\n    }) => () => {\n      const events = reduce(\n        stats,\n        (acc: Array<number>, { f_match_event_ids_json }) => {\n          if (f_match_event_ids_json) {\n            f_match_event_ids_json.forEach(event => acc.push(event))\n          }\n          return acc\n        },\n        [],\n      )\n\n      if (!isEmpty(events)) {\n        toggleLinkIsFetching(true)\n        request({\n          events,\n          lang,\n          lexical_formula,\n          matchInfo: match,\n          playerInfo,\n          range: shootsRange,\n          type: playListType,\n        }).then(() => toggleLinkIsFetching(false))\n      }\n    },\n  }),\n  observer,\n)\n","export const playListTypes = {\n  tournamentMatches: 'tournamentMatches',\n  matches: 'matches',\n}\n","import React, { Fragment } from 'react'\n\nimport { TableUI } from 'react-sport'\n\nimport { TdLoader } from 'features/TdLoader'\n\nimport { tdComposed } from './composed'\n\ntype Props = {\n  handleClick: () => void,\n  linkIsFetching: boolean,\n  value: string,\n}\nexport const TdComponent = ({\n  handleClick,\n  linkIsFetching,\n  value,\n}: Props) => (\n  <Fragment>\n    {linkIsFetching && <TdLoader />}\n    <TableUI.Td\n      onClick={handleClick}\n      value={value}\n      className=''\n    />\n  </Fragment>\n)\n\nexport const Td = tdComposed(TdComponent)\n","import { observer } from 'mobx-react'\n\nimport filter from 'lodash/filter'\nimport includes from 'lodash/includes'\nimport { compose, withProps } from 'recompose'\n\nimport { getStatValue } from 'module/utils/helpers/getStatValue'\nimport { getSummaryStatValue } from 'module/utils/helpers/getSummaryStatValue'\nimport { getLongSuffix } from 'module/utils/helpers'\n\nimport { getExtLinkHOC } from 'hocs/getExtLinkHOC'\n\nimport { playListTypes } from 'config/playListTypes'\n\nimport {\n  TPropsInner,\n  TPropsOuter,\n  TWithPropsInner,\n  TWithPropsOuter,\n  TStat,\n} from './types'\n\nimport { getStatsFilterOptions } from '../../helpers/getStatsFilterOptions'\n\nexport const tdComposed = compose<TPropsInner, TPropsOuter>(\n  getExtLinkHOC,\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(({\n    getExtLink,\n    id,\n    lexics: { lang },\n    param,\n    rowInfo,\n    tableStats,\n    tableType,\n    type = 'average_for_match',\n  }) => {\n    const preparedStats = filter<TStat>(\n      tableStats,\n      getStatsFilterOptions({\n        matchId: rowInfo.f_match,\n        param,\n        playerId: id,\n        tableType,\n      }),\n    )\n    const prepareExtLinkArgs = (lang: string) => {\n      const defaultOptions: {} = {\n        id,\n        match: rowInfo,\n        param,\n        playListType: playListTypes.matches,\n        stats: preparedStats,\n      }\n\n      if (includes(['playerMatches', 'matchPlayersTable'], tableType)) {\n        const suffix = getLongSuffix(lang)\n        const firstName = rowInfo[`firstname_${suffix}`]\n        const lastName = rowInfo[`lastname_${suffix}`]\n        const playerName = `${firstName} ${lastName}`\n\n        return {\n          ...defaultOptions,\n          playerInfo: playerName,\n        }\n      }\n\n      return defaultOptions\n    }\n\n    return {\n      handleClick: getExtLink(prepareExtLinkArgs(lang)),\n      value: type === 'total'\n        ? getSummaryStatValue(param.param_id, preparedStats, 'total')\n        : getStatValue(param, preparedStats),\n    }\n  }),\n  observer,\n)\n","type TArgs = {\n  matchId: number,\n  param: {\n    param_id: number,\n  },\n  playerId: number,\n  tableType: string,\n}\n\nexport const getStatsFilterOptions = ({\n  matchId,\n  param,\n  playerId,\n  tableType,\n}: TArgs) => {\n  const options: {[key: string]: {}} = {\n    matchPlayersTable: {\n      f_param: param.param_id,\n      f_player: playerId,\n    },\n    playerMatches: {\n      f_match: matchId,\n      f_param: param.param_id,\n      f_player: playerId,\n    },\n    teamMatches: {\n      f_match: matchId,\n      f_param: param.param_id,\n      f_team: playerId,\n    },\n    tournamentMatches: {\n      f_match: matchId,\n      f_param: param.param_id,\n      f_team: playerId,\n    },\n    tournamentMatchesTotal: {\n      f_match: matchId,\n      f_param: param.param_id,\n    },\n  }\n\n  return options[tableType]\n}\n","\nimport React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withHandlers,\n  withState,\n} from 'recompose'\n\nimport { T9n } from 'react-sport'\n\nimport {\n  TComposeInner,\n  TWithHandlersOuter1,\n  TWithHandlersInner1,\n  TWithHandlersOuter2,\n  TWithHandlersInner2,\n} from './types'\n\nexport const RangeSettingsComponent = ({\n  onBlurHandler,\n  onChangeHandler,\n  rangeAfter,\n  rangeBefore,\n}: TComposeInner) => (\n  <div className='main-page__range-checkboxes'>\n    <div className='main-page__range-fieldset'>\n      <span>\n        <T9n t='boxscore_sec_before' />\n        <input\n          type='number'\n          name='start'\n          className='main-page__range-short-input in'\n          value={rangeBefore}\n          onChange={onChangeHandler}\n          onBlur={onBlurHandler}\n        />\n        <T9n t='boxscore_sec_after' />\n        <input\n          type='number'\n          name='end'\n          className='main-page__range-short-input out'\n          value={rangeAfter}\n          onChange={onChangeHandler}\n          onBlur={onBlurHandler}\n        />\n      </span>\n    </div>\n  </div>\n)\n\nconst rangeSettingsComposed = compose<TComposeInner, {}>(\n  inject('shootsRange'),\n  withState(\n    'rangeBefore',\n    'setRangeBefore',\n    ({ shootsRange: { before } }) => before,\n  ),\n  withState(\n    'rangeAfter',\n    'setRangeAfter',\n    ({ shootsRange: { after } }) => after,\n  ),\n  withHandlers<TWithHandlersOuter1, TWithHandlersInner1>({\n    setRangeState: ({\n      setRangeAfter,\n      setRangeBefore,\n    }) => (name, value) => {\n      const setNewStateRange = name === 'start' ? setRangeBefore : setRangeAfter\n      setNewStateRange(value)\n    },\n  }),\n  withHandlers<TWithHandlersOuter2, TWithHandlersInner2>({\n    onBlurHandler: ({\n      rangeAfter,\n      rangeBefore,\n      shootsRange: { setAfter, setBefore },\n    }) => () => {\n      // Записываем в стор выбранный диапазон\n      setBefore(rangeBefore)\n      setAfter(rangeAfter)\n    },\n    onChangeHandler: ({ setRangeState }) => (e) => {\n      const { name, value } = e.target\n      const newValue = value === '' ? value : parseInt(value, 10)\n      setRangeState(name, newValue)\n    },\n  }),\n  observer,\n)\n\nexport const RangeSettings = rangeSettingsComposed(RangeSettingsComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers, withStateHandlers } from 'recompose'\n\ntype TProps = {\n  changeTableName: () => void,\n  handleFixName: () => void,\n  handleFocus: () => void,\n  newName: string,\n}\n\n// Input для редактирования названия таблицы\nconst EditableInput = ({\n  changeTableName,\n  handleFixName,\n  handleFocus,\n  newName,\n}: TProps) => (\n  <input\n    type='text'\n    onFocus={handleFocus}\n    onBlur={handleFixName}\n      //@ts-ignore\n    tabIndex='0'\n    value={newName}\n    onChange={changeTableName}\n  />\n)\n\nconst EditableInputComposed = compose(\n  inject('gearPopupStore'),\n  withStateHandlers(\n    props => ({\n      //@ts-ignore\n      newName: props.tableName,\n    }),\n    {\n      changeTableName: () => e => ({\n        newName: e.target.value,\n      }),\n    },\n  ),\n  //@ts-ignore\n  withHandlers({\n    /**\n     * Функция сохранения нового имени таблицы\n     * @param {func} handleShowInput - показываем ли инпут вместо блока\n     * @param {func} editTableName - функция редактирования названия таблицы\n     * @param {string} newName - название таблицы, новое\n     * @param {number} position - номер таблицы\n     * @param {string} tableName - название таблицы, изначальное\n     * @param {string} tableType - тип таблицы внутри основной страницы (прим. team/573/players)\n     */\n    handleFixName: ({\n      editTableName,\n      gearPopupStore: { editTempTableName },\n      handleShowInput,\n      newName,\n      newPopup,\n      position,\n      tableName,\n      tableType,\n    }) => () => {\n      // Изменяем название таблицы только если название поменялось на новое\n      if (tableName !== newName && !newPopup) {\n        editTableName(position, newName, tableType)\n      }\n      if (newPopup) {\n        editTempTableName(newName)\n      }\n      return handleShowInput()\n    },\n  }),\n  observer,\n  //@ts-ignore\n)(EditableInput)\n\nexport default EditableInputComposed\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withHandlers,\n  withState,\n\n} from 'recompose'\n\nimport { T9n } from 'react-sport'\n\nimport EditableInput from './EditableInput'\n\ntype TProps = {\n  editTableName: () => void,\n  //@ts-ignore\n  getTableName: (newPopup: string | null) => string,\n  handleFocus: () => void,\n  handleShowInput: () => boolean,\n  handleTranslateName: (tableName: string | number) => string,\n  newPopup?: boolean,\n  showInput: boolean,\n  table: {\n    tableName: string | number,\n    position: number,\n  },\n  currentStore: {},\n}\n\n// Компонент названия таблицы статистики\nconst EditTableNameComponent = ({\n  currentStore,\n  editTableName,\n  getTableName,\n  handleFocus,\n  handleShowInput,\n  handleTranslateName,\n  newPopup,\n  showInput,\n  table,\n}: TProps) => (\n  <div>\n    {showInput\n      ? (\n    //@ts-ignore\n        <EditableInput\n          tableName={handleTranslateName(table.tableName)}\n          handleFocus={handleFocus}\n          handleShowInput={handleShowInput}\n          editTableName={editTableName}\n          position={table.position}\n          newPopup={newPopup}\n          currentStore={currentStore}\n        />\n      )\n        //@ts-ignore\n      : <T9n t={getTableName(newPopup)} onClick={handleShowInput} />\n    }\n  </div>\n)\n\nconst EditTableNameComposed = compose<TProps, any>(\n  inject(\n    'lexics',\n    'teamTable',\n    'playerTable',\n    'teamPlayers',\n    'matchTable',\n    'tournamentMatchesTableStore',\n    'gearPopupStore',\n  ),\n  withState('showInput', 'setShowInput', false),\n  //@ts-ignore\n  withHandlers({\n    getTableName: ({\n      gearPopupStore: { tempTableName },\n      table: { tableName },\n      //@ts-ignore\n    }) => (newPopup) => {\n      if (!newPopup) return tableName\n      return tempTableName\n    },\n    /**\n    * Функция редактирования имени таблицы\n    * @param {number} position - номер таблицы\n    * @param {string} tableName - название таблицы\n    */\n    editTableName: ({\n      currentStore: {\n        editTable,\n        storeName,\n      },\n      gearPopupStore: { editTempTableName },\n      newPopup,\n      //@ts-ignore\n    }) => (position, tableName) => {\n      if (newPopup) {\n        return editTempTableName(tableName)\n      }\n      return editTable(position, tableName, storeName)\n    },\n    // Показываем или input или блок с названием\n    //@ts-ignore\n    handleShowInput: ({ setShowInput }) => () => setShowInput(n => !n),\n    // При фокусе выбираем весь текст в инпуте сразу\n    //@ts-ignore\n    handleFocus: () => e => e.target.select(),\n    // Переводим на нужный язык value в инпуте при фокусе\n    handleTranslateName: ({ lexics: { getLexics } }) => (\n      //@ts-ignore\n      tableName => getLexics(tableName) || tableName\n    ),\n  }),\n  observer,\n)\nexport const EditTableName = EditTableNameComposed(EditTableNameComponent)\n","import React, { Fragment } from 'react'\n\nimport cx from 'classnames'\nimport map from 'lodash/map'\nimport get from 'lodash/get'\nimport includes from 'lodash/includes'\n\nimport { T9n } from 'react-sport'\n\nimport { gearColumnsList } from 'config/teamPopupParams'\n\nimport { PopupItem } from 'features/GearPopup'\nimport { gearTableComposed } from './composed'\n\nimport { TComposeInner } from './types'\n\n/**\n * Компонент внутри попапа. Основной список чекбоксов\n */\nconst GearTableComponent = ({\n  ampluaId,\n  getCurrentGroupInfo,\n  isActive,\n  lastElemsInGear,\n  massCheck,\n}: TComposeInner) => (\n  <Fragment>\n    {map(gearColumnsList[ampluaId], ({ className, num }) => (\n      <div key={num} className={`popup-column-${className}`}>\n        <div className='popup-col-title' onClick={massCheck(num)}>\n          <T9n\n            className={cx(\n              'checkbox-label',\n              { 'checkbox-label_active': isActive(num) },\n            )}\n            t={get(getCurrentGroupInfo(num), 'groupName', '')}\n          />\n        </div>\n        <div className={`popup-column-${className}-table`}>\n          {map(\n            get(getCurrentGroupInfo(num), 'params'), param => (\n              <PopupItem\n                key={param.param_id}\n                last={includes(lastElemsInGear, param.param_id)}\n                param={param}\n              />\n            ),\n          )}\n        </div>\n      </div>\n    ))}\n  </Fragment>\n)\n\nexport const GearTable = gearTableComposed(GearTableComponent)\n","import { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers, withProps } from 'recompose'\nimport get from 'lodash/get'\nimport find from 'lodash/find'\nimport size from 'lodash/size'\nimport filter from 'lodash/filter'\n\nimport { lastElemsInGear } from 'config/teamPopupParams'\nimport { amplua } from 'config/amplua'\n\nimport {\n  TComposeInner,\n  TPropsOuter,\n  TWithPropsInner,\n  TWithPropsOuter,\n  TWithHandlersOuter1,\n  TWithHandlersInner1,\n  TWithHandlersOuter2,\n  TWithHandlersInner2,\n  TParam,\n} from './types'\n\nexport const gearTableComposed = compose<TComposeInner, TPropsOuter>(\n  inject('gearPopupStore'),\n  withProps<TWithPropsInner, TWithPropsOuter>(({ ampluaId }) => {\n    // Id последних параметров в подгруппе\n    const lastElemsIds = ampluaId === amplua.team\n      ? lastElemsInGear.team\n      : lastElemsInGear.rest\n\n    return {\n      lastElemsInGear: lastElemsIds,\n    }\n  }),\n  withHandlers<TWithHandlersOuter1, TWithHandlersInner1>({\n    getCurrentGroupInfo: ({ currentStore: { gearParams } }) => num =>\n      get(gearParams, num, {}),\n\n    getGroupTempSelected: ({ gearPopupStore: { tempSelected } }) => (\n      groupParams: Array<{}>,\n    ) =>\n      filter(\n        tempSelected,\n        ({ gear_group_id }) =>\n          gear_group_id === get(groupParams, '[0].gear_group_id'),\n      ),\n  }),\n  withHandlers<TWithHandlersOuter2, TWithHandlersInner2>({\n    /**\n     * Проверка активного класса для выбранного чекбокса заголовка групп параметров\n     * @param {array} tempSelected - массив выбранных параметров (не сохраненные в сторе)\n     */\n    isActive: ({\n      getCurrentGroupInfo,\n      getGroupTempSelected,\n    }) => (num) => {\n      const groupParams = get(getCurrentGroupInfo(num), 'params')\n\n      return size(getGroupTempSelected(groupParams)) === size(groupParams)\n    },\n    massCheck: ({\n      gearPopupStore: {\n        addToTempSelected,\n        removeFromTempSelected,\n        tempSelected,\n      },\n      getCurrentGroupInfo,\n      getGroupTempSelected,\n    }) => num => () => {\n      const groupParams: Array<TParam> = get(getCurrentGroupInfo(num), 'params')\n      // Если выбраны все чекбоксы в группе, то снимаем с каждого галочку\n      if (size(getGroupTempSelected(groupParams)) === size(groupParams)) {\n        groupParams.forEach((param) => {\n          removeFromTempSelected(param)\n        })\n        // Если нет, то выбираем все чекбоксы в группе\n      } else {\n        groupParams.forEach((param) => {\n          const {\n            gear_group_id,\n            param_id,\n            short_lexical_formula,\n          } = param\n\n          if (\n            find(tempSelected, {\n              gear_group_id,\n              param_id,\n              short_lexical_formula,\n            })\n          ) {\n            // Удаляем из временно выбранных, чтобы не было дублей\n            removeFromTempSelected(param)\n          }\n          addToTempSelected(param)\n        })\n      }\n    },\n  }),\n  observer,\n)\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport _assign from 'object-assign'\nimport invariant from 'fbjs/lib/invariant'\nimport isPlainObject from 'lodash/isPlainObject'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\nfunction shallowCopy(x) {\n  if (Array.isArray(x)) {\n    return x.concat()\n  } if (x && typeof x === 'object') {\n    return _assign(new x.constructor(), x)\n  }\n  return x\n}\n\nconst COMMAND_PUSH = '$push'\nconst COMMAND_UNSHIFT = '$unshift'\nconst COMMAND_SPLICE = '$splice'\nconst COMMAND_SET = '$set'\nconst COMMAND_MERGE = '$merge'\nconst COMMAND_APPLY = '$apply'\n\nconst ALL_COMMANDS_LIST = [\n  COMMAND_PUSH,\n  COMMAND_UNSHIFT,\n  COMMAND_SPLICE,\n  COMMAND_SET,\n  COMMAND_MERGE,\n  COMMAND_APPLY,\n]\n\nconst ALL_COMMANDS_SET = {}\n\nALL_COMMANDS_LIST.forEach((command) => {\n  ALL_COMMANDS_SET[command] = true\n})\n\nfunction invariantArrayCase(value, spec, command) {\n  invariant(\n    Array.isArray(value),\n    'update(): expected target of %s to be an array got %s.',\n    command,\n    value,\n  )\n  const specValue = spec[command]\n  invariant(\n    Array.isArray(specValue),\n    'update(): expected spec of %s to be an array got %s. '\n      + 'Did you forget to wrap your parameter in an array?',\n    command,\n    specValue,\n  )\n}\n\n/**\n * Returns a updated shallow copy of an object without mutating the original.\n * See https://facebook.github.io/react/docs/update.html for details.\n */\nfunction update(value, spec) {\n  invariant(\n    isPlainObject(spec),\n    'update(): You provided a key path to update() that did not contain one '\n      + 'of %s. Did you forget to include {%s: ...}?',\n    ALL_COMMANDS_LIST.join(', '),\n    COMMAND_SET,\n  )\n\n  if (hasOwnProperty.call(spec, COMMAND_SET)) {\n    invariant(\n      Object.keys(spec).length === 1,\n      'Cannot have more than one key in an object with %s',\n      COMMAND_SET,\n    )\n\n    return spec[COMMAND_SET]\n  }\n\n  let nextValue = shallowCopy(value)\n\n  if (hasOwnProperty.call(spec, COMMAND_MERGE)) {\n    const mergeObj = spec[COMMAND_MERGE]\n    invariant(\n      mergeObj && typeof mergeObj === 'object',\n      \"update(): %s expects a spec of type 'object' got %s\",\n      COMMAND_MERGE,\n      mergeObj,\n    )\n    invariant(\n      nextValue && typeof nextValue === 'object',\n      \"update(): %s expects a target of type 'object' got %s\",\n      COMMAND_MERGE,\n      nextValue,\n    )\n    _assign(nextValue, spec[COMMAND_MERGE])\n  }\n\n  if (hasOwnProperty.call(spec, COMMAND_PUSH)) {\n    invariantArrayCase(value, spec, COMMAND_PUSH)\n    spec[COMMAND_PUSH].forEach((item) => {\n      nextValue.push(item)\n    })\n  }\n\n  if (hasOwnProperty.call(spec, COMMAND_UNSHIFT)) {\n    invariantArrayCase(value, spec, COMMAND_UNSHIFT)\n    spec[COMMAND_UNSHIFT].forEach((item) => {\n      nextValue.unshift(item)\n    })\n  }\n\n  if (hasOwnProperty.call(spec, COMMAND_SPLICE)) {\n    invariant(\n      Array.isArray(value),\n      'Expected %s target to be an array got %s',\n      COMMAND_SPLICE,\n      value,\n    )\n    invariant(\n      Array.isArray(spec[COMMAND_SPLICE]),\n      'update(): expected spec of %s to be an array of arrays got %s. '\n        + 'Did you forget to wrap your parameters in an array?',\n      COMMAND_SPLICE,\n      spec[COMMAND_SPLICE],\n    )\n    spec[COMMAND_SPLICE].forEach((args) => {\n      invariant(\n        Array.isArray(args),\n        'update(): expected spec of %s to be an array of arrays got %s. '\n          + 'Did you forget to wrap your parameters in an array?',\n        COMMAND_SPLICE,\n        spec[COMMAND_SPLICE],\n      )\n      nextValue.splice(...args)\n    })\n  }\n\n  if (hasOwnProperty.call(spec, COMMAND_APPLY)) {\n    invariant(\n      typeof spec[COMMAND_APPLY] === 'function',\n      'update(): expected spec of %s to be a function got %s.',\n      COMMAND_APPLY,\n      spec[COMMAND_APPLY],\n    )\n    nextValue = spec[COMMAND_APPLY](nextValue)\n  }\n\n  for (const k in spec) {\n    if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {\n      nextValue[k] = update(value[k], spec[k])\n    }\n  }\n\n  return nextValue\n}\n\nexport default update\n","import React from 'react'\nimport { DragSource, DropTarget } from 'react-dnd'\nimport { compose, pure, withHandlers } from 'recompose'\nimport { findDOMNode } from 'react-dom'\n\nimport { T9n } from 'react-sport'\n\nimport {\n  THover,\n  TTargetProps,\n  TMonitor,\n  TComposedInner,\n  TPropsOuter,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n  TConnectDropTarget,\n  TConnectDragSource,\n  TMonitorDragSource,\n} from './types'\n\nconst cardSource = {\n  beginDrag({ id, index }: { id: number | string, index: number }) {\n    return { id, index }\n  },\n}\n\nconst cardTarget: THover = {\n  hover(\n    props: TTargetProps,\n    monitor: TMonitor,\n    component: React.ReactNode,\n  ): number | boolean {\n    // Это будущий индекс той карточки, которую перетягиваем\n    const dragIndex = monitor.getItem().index\n    // Это индекс той карточки, над которой находимся\n    const hoverIndex = props.index\n\n    // Если карточка находится над самой собой (над бывшим своим расположением),\n    // то ничего не высчитываем\n    if (dragIndex === hoverIndex) return false\n\n    const hoverBoundingRect: { bottom: number, top: number } = findDOMNode(\n      //@ts-ignore\n      component,\n    ).getBoundingClientRect()\n    const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\n    const clientOffset = monitor.getClientOffset()\n    const hoverClientY = clientOffset.y - hoverBoundingRect.top\n\n    // Меняем расположение карточек, только если перетаскиваемая пересекла половину следующей\n    if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) return false\n    if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) return false\n    // Меняем расположение карточек\n    props.moveCard(dragIndex, hoverIndex)\n    monitor.getItem().index = hoverIndex\n    return monitor.getItem().index\n  },\n}\n\nconst DndItemComponent = ({\n  connectDragSource,\n  connectDropTarget,\n  isDragging,\n  item,\n  removeParam,\n}: TComposedInner) =>\n  connectDragSource(\n    connectDropTarget(\n      <li style={{ opacity: Number(!isDragging) }}>\n        <T9n t={item.full_lexical_formula} />\n        <span className='remover' onClick={removeParam(item)}>\n          &times;\n        </span>\n      </li>,\n    ),\n  )\n\nconst dndItemComposed = compose<TComposedInner, TPropsOuter>(\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    removeParam: ({ removeFromTempSelected }) => param => () => {\n      removeFromTempSelected(param)\n    },\n  }),\n  pure,\n\n  DropTarget(\n    'item',\n    //@ts-ignore\n    cardTarget,\n    (connect: TConnectDropTarget) => ({\n      connectDropTarget: connect.dropTarget(),\n    }),\n  ),\n\n  DragSource(\n    'item',\n    cardSource,\n    (connect: TConnectDragSource, monitor: TMonitorDragSource) => ({\n      connectDragSource: connect.dragSource(),\n      isDragging: monitor.isDragging(),\n    }),\n  ),\n)\n\nexport const DndItem = dndItemComposed(DndItemComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers } from 'recompose'\n\nimport map from 'lodash/map'\n\nimport { T9n } from 'react-sport'\n\nimport update from 'module/utils/update'\nimport { DndItem } from '../DndItem'\n\nimport {\n  TComposeInner,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n} from './types'\n\nexport const DndParamsComponent = ({\n  gearPopupStore: { removeFromTempSelected, tempSelected },\n  getId,\n  moveHandler,\n}: TComposeInner) => (\n  <div className='popup-col-inner'>\n    <div className='popup-col-title'>\n      <T9n t='boxscore_selected_params' />\n      <span className='found-param-counter'>\n        {tempSelected && tempSelected.length}\n      </span>\n    </div>\n    <div className='popup-col-comment' />\n    <div className='ul-checked-wrapper'>\n      <ul>\n        {map(tempSelected, (item, index) => (\n          <DndItem\n            index={index}\n            id={getId(item)}\n            key={getId(item)}\n            item={item}\n            removeFromTempSelected={removeFromTempSelected}\n            moveCard={moveHandler}\n          />\n        ))}\n      </ul>\n    </div>\n  </div>\n)\n\nexport const DndParamsComposed = compose<TComposeInner, {}>(\n  inject('gearPopupStore'),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    getId: () => ({\n      gear_group_id,\n      short_lexical_formula,\n    }) => `${short_lexical_formula}_${gear_group_id}`,\n\n    moveHandler: ({\n      gearPopupStore: { fillTempSelected, tempSelected },\n    }) => (dragIndex, hoverIndex) => {\n      // Заменяем обновленный (после перестановки) список карточек с параметрами в правом меню\n      const updatedTempParamsList = update(tempSelected, {\n        $splice: [[dragIndex, 1], [hoverIndex, 0, tempSelected[dragIndex]]],\n      })\n      fillTempSelected(updatedTempParamsList)\n    },\n  }),\n  observer,\n)\n\nexport const DndParams = DndParamsComposed(DndParamsComponent)\n","export default {\n  ace: 7788,\n  ace_1: 10585,\n  ace_for_lose: 7789,\n  ace_from_grid: 7791,\n  ace_with_touch: 7790,\n  advanced_zones: 4311,\n  alignment_mistake: 7795,\n  all_assistance: 8868,\n  all_attack_receptions: 8087,\n  all_attacks: 967,\n  all_blocks: 8551,\n  all_passes: 8552,\n  all_serve_receptions: 8554,\n  all_serves: 8555,\n  amplua_who_blocked: 10666,\n  amplua_who_is_attacking: 10656,\n  amplua_who_passed: 10646,\n  amplua_who_served: 10643,\n  assist: 7783,\n  attack: 223,\n  attack_direction: 10658,\n  attack_receive_in_zone: 8363,\n  attack_reception: 8550,\n  attack_reception_result: 10669,\n  attack_type: 10668,\n  attack_which_receipt: 8348,\n  attacks_from_zone: 8344,\n  attacks_on_amplua: 8580,\n  attacks_to_zone: 8345,\n  bad: 7765,\n  bad_pass: 7780,\n  ball_on_own_side: 8576,\n  basic_zones: 4310,\n  binding_player: 7779,\n  binding_player_attack: 8584,\n  block: 7804,\n  block_assists: 7766,\n  block_attempt: 10659,\n  block_earned_points: 8029,\n  block_out: 7774,\n  block_out_or_in_your_own_area: 7728,\n  block_played_by_striker: 7773,\n  block_property: 8343,\n  block_type: 10668,\n  blocked_players: 8351,\n  blocked_second_pass: 7772,\n  blocked_shot: 7731,\n  bottom_side: 7785,\n  bounced_back_from_the_block: 7750,\n  center_player: 7777,\n  center_player_amplua: 8672,\n  central_player_attack: 8583,\n  characteristic: 10596,\n  coasting: 8371,\n  combination: 8556,\n  cover: 10671,\n  cross: 7743,\n  deceptive_shot: 7748,\n  deep: 8374,\n  deep_serve: 7798,\n  defender_out: 7729,\n  dense: 8373,\n  diagonal_player: 7778,\n  diagonal_player_attack: 8582,\n  difference: 8370,\n  difference_of_attacks: 8341,\n  differences: 8361,\n  dig: 10670,\n  direction: 8882,\n  double_back: 8383,\n  double_front: 8384,\n  filter: 8385,\n  finishing_player_attack: 8581,\n  first_ball_attackers_home: 10657,\n  first_ball_attackers_opp: 10602,\n  foot_fault: 8711,\n  for_1_block: 7753,\n  for_2_blocks: 7754,\n  for_3_blocks: 7755,\n  four_hits: 10653,\n  free_shot: 7751,\n  from_zone: 8358,\n  good: 7764,\n  good_pass: 7781,\n  grid_touch: 7733,\n  half_power_shot: 7742,\n  libero: 7887,\n  line_overstep: 7771,\n  lose_point: 7730,\n  mistake: 737,\n  mistake_while_pass: 7782,\n  mistake_while_serve: 8360,\n  negative_reception: 7787,\n  net_touching: 10654,\n  no_value_attacks: 7735,\n  on_clean_grid: 7752,\n  on_court: 8353,\n  opponent: 422,\n  opponent_court: 7727,\n  opponent_finished: 8577,\n  opponent_side_play: 10663,\n  opponents_count: 8342,\n  opponents_out_shots: 7768,\n  organized: 7756,\n  other_body_side: 7803,\n  other_players: 8673,\n  outside_player: 7776,\n  part: 8684,\n  pass: 8750,\n  pass_direction: 10648,\n  pass_from: 8347,\n  pass_to: 8359,\n  pass_type: 10647,\n  pass_types: 8356,\n  pass_zone: 10649,\n  pipe: 7736,\n  pipe_5: 7737,\n  planned_attack: 8369,\n  planning: 7800,\n  position_1: 9862,\n  position_2: 9863,\n  position_3: 9864,\n  position_4: 9865,\n  position_5: 9866,\n  position_6: 9867,\n  positioning: 10591,\n  positive_reception: 7786,\n  power: 7799,\n  power_attack: 7747,\n  power_attack_1: 8368,\n  power_shot: 7741,\n  receive_type: 8375,\n  receiver_mistake: 7801,\n  result: 10584,\n  reverse_cross: 7744,\n  rise: 7739,\n  rise_over_head: 7738,\n  roll_forward: 7749,\n  run_forward: 7745,\n  serve: 7805,\n  serve_receive_zone: 8376,\n  serve_reception: 7807,\n  serve_type: 8367,\n  serving: 10518,\n  short: 8372,\n  short_serve: 7796,\n  shot_out: 7732,\n  simple: 7746,\n  soften: 8575,\n  softening: 9880,\n  splited: 7757,\n  step_over: 7734,\n  team: 8364,\n  technique_difference: 8378,\n  temp: 9884,\n  temp1: 8541,\n  temp2: 8542,\n  to_grid: 7792,\n  to_out: 7793,\n  to_whom: 8362,\n  to_zone: 8357,\n  top_side: 7784,\n  touched_grid_by_blocker: 7770,\n  tough: 7797,\n  type: 8366,\n  unforced_opponent_mistakes: 7769,\n  wave: 7740,\n  which_pass: 8346,\n  which_receipt: 8380,\n  while_falling: 7802,\n  who_attacked: 8350,\n  who_attacking: 8351,\n  who_blocked: 8831,\n  who_blocking: 8349,\n  who_else_on_court: 8354,\n  who_gave_pass: 8832,\n  who_is_attacking: 10655,\n  who_is_blocking: 10665,\n  who_is_passing: 10645,\n  who_is_serving: 10642,\n  who_received: 8579,\n  who_received_amplua: 8578,\n  who_served: 8377,\n  who_served_list: 8833,\n  with_block_touching: 10650,\n  with_blocker_touching: 10651,\n  with_step_out: 7794,\n  without_zone: 4312,\n  won_point: 7726,\n  zero_attack: 10644,\n  zero_block: 8574,\n  zero_block_1: 10664,\n  zero_serve: 10785,\n  zone: 966,\n  zone_1: 7758,\n  zone_2: 7759,\n  zone_3: 7760,\n  zone_4: 7761,\n  zone_5: 7762,\n  zone_6: 7763,\n}\n","export default {\n  //лексика для формы авторизации\n  contact_us: 2497, //Свяжитесь с нами любым удобным вам способом, и мы вам поможем.\n  enter_email: 2498, //Введите ваш e-mail\n  enter_pass: 902, //Введите пароль для входа\n  force_aware: 655, //Кнопка все равно войти разлогинит другого пользователя...\n  force_submit: 553, //Все равно войти\n  force_text: 640, //Извините, вы уже вошли\n  log_in: 554,\n  problems_with_sign_in: 2501, //Проблемы со входом?\n  server_error: 952, //Нет связи с сервером\n  sign_in: 2500, //Войти\n  sign_in_pro: 4308, //Войти в pro версию\n  try_instat: 1493, //I want to try InStat,\n  wrong_sign_in: 712, //Wrong email or password\n}\n","export default {\n  //tabs\n  tabs_matches: 682, //Матчи\n  //heder\n  header_my_video: 688, //мои видео\n  header_my_profile: 690, //мой профиль\n  header_quit: 1924, //выход\n  header_team: 658, //Команда\n  header_nationality: 583, //Национальность\n  header_league: 675, //Лига\n  header_team_level: 855, //Уровень команды\n  header_age: 542, //Возраст\n  header_contract: 665, //Контракт\n  header_bodyPart: 3994, //Рука\n  header_position: 768, //позиция\n  header_goals: 2932, //очки\n  header_skills: 811, //навыки\n  header_instat_index: 113, //InStat Index\n  header_statistics: 1587, //Статистика\n  header_playlists: 2544,\n  header_shared_episodes: 3949,\n  f_goals: 3173,\n\n  //match select\n  match_show_opponent: 3376, //показать статистику соперника\n  average_for_match_opp: 2787, //Среднее для команд оппонентов\n  total: 416, // всего\n  home: 6609,\n  visitors: 6610,\n\n  //Cтатистика в шапке\n  total_attack_eff: 8025, //Реализация атак, %\n  attack_points: 7926, //Выполненные задачи\n  positive_def_receiption: 8095, //Позит. прием в защите, %\n  positive_serve_receiptions: 7957, //Ошибки\n  setting_assist: 8068, //Ассисты на передачах\n  setting_assist_percents: 8640, //Ассисты на передачах, %\n  good_bad_sets: 8539, //Плохие/Хорошие передачи\n  block_touch_for_own_rally: 8054, //Смягчения на блоке, %\n  positive_receiption: 8104, //Позитивный прием, %\n\n  //параметры таблиц матчей\n  ////дефолтные параметры\n  // params_matches_minutes: 4361, //- Минуты\n  params_matches_points: 3558, //- Набранные очки\n  params_matches_rebounds: 3570, // Подбор\n  params_matches_assist: 3174, // - Голевая передача\n  params_matches_steals: 3564, // = перехват\n  params_matches_turnover: 3565,\n  average_for_match: 426, //В среднем за матч\n  average_for_90: 1238,\n  //группы параметров\n  group_param_picking_up: 412, //подборы\n  group_param_boxscore: 2929, //протокол\n  group_param_combinations_and_iso: 3602, //комбинации и изоляции\n  group_param_shots_types: 4120, //типы бросков\n  group_param_add_data: 3604, //дополнительные показатели\n\n  //амплуа\n  amplua_center_short: 4809,\n  amplua_pforward_short: 4003,\n  amplua_lforward_short: 4002,\n  amplua_sguard_short: 4807,\n  amplua_pguard_short: 4808,\n\n  //Параметры в шапке\n  header_field_goals_percent: 5237,\n  header_3pt_shots_percent: 5238,\n  header_free_throws_percent: 5239,\n\n  //параметры\n  header_card_age: 542, //возраст\n  header_card_birth_data: 1045, //дата рождения\n  stat_year: 673, //лет\n  stat_sm: 817, //см\n  stat_foot: 6488, //футы\n  stat_pound: 6511, //фунты\n  stat_kg: 652, //кг\n  tp_stat_height_sm: 1563, //рост см\n  tp_stat_height_foot: 6509, //рост футы\n  tp_stat_weght_lbs: 6510, // вес фунты\n  tp_stat_weght_kg: 1564, // вес кг\n\n  //match select\n  match_select_3: 777, // последние 3\n  match_select_5: 778, // последние 5\n  match_select_10: 2471, // последние 10\n  match_select_all_season: 4805, //все матчи текущего сезона\n  match_select_this_year: 4806, //все матчи этого года\n  match_selected: 5638, // выбрано матчей\n  match_select_this_season: 2511, // текущий сезон\n\n  //tables Boxscore\n  boxscore_selected_params: 5639, // выбранные параметры\n  boxscore_sec_before: 4779, //сек до\n  boxscore_sec_after: 4780, //сек после\n  boxscore_all_range: 4781, //показать все владения\n  boxscore_setting_all_ep: 5640, //настройка показа всех эпизодов\n  boxscore_protocol: 3605, // протокол\n  boxscore_efficiency: 5229, // Показатели эффективности\n  boxscore_combinations: 5233, // комбинации\n  boxscore_with_fouls: 5252, // с учетом фолов\n  boxscore_deff_combine: 5234, // защита против комбинаций\n  boxscore_date: 473, // дата\n  boxscore_main_statistics: 4269,\n  boxscore_pass: 3180,\n  boxscore_challenges: 3187,\n  boxscore_lost: 6265,\n  boxscore_press: 5478,\n\n  //shoots map\n  shoots_goals_opponent: 7484, //броски соперника\n  shoots_goals: 3559, //Свои броски\n  shoots_without_zones: 4312, //без зон\n  shoots_basic_zones: 4310, //основные\n  shoots_extend_zones: 4311, //основные\n  shoots_2x_goals: 3560, //2х очковые\n  shoots_3x_goals: 3561, //3х очковые\n  shoots_opened: 5208, //Открытый\n  shoots_closed: 5209, //закрытый\n\n  //match popup\n  table_popup_dnd_info: 5725, //Drag params up or down to reorder\n  match_popup_full_game: 1295, // полный матч\n  match_popup_ball_in_play: 2489, // Мяч в игре\n  match_popup_all_time_player: 9477, //Все игровое время\n  match_popup_rifling_attack: 9577, // все розыгрыши с игроком\n  match_popup_rifling_defense: 2947, //Время в атаке\n}\n","export default {\n  //амплуа\n  amplua_center_short: 4809,\n  amplua_pforward_short: 4003,\n  amplua_lforward_short: 4002,\n  amplua_sguard_short: 4807,\n  amplua_pguard_short: 4808,\n  //heder\n  header_playlists: 2544,\n  header_shared_episodes: 3949,\n\n  show_photo: 7507, // Показать фото игрока\n\n  //Табы основные\n  matches_table: 682, // Матчи\n  players_table: 9457, //Игроки\n\n  //match select\n  match_select_3: 777, // последние 3\n  match_select_5: 778, // последние 5\n  match_select_10: 2471, // последние 10\n  match_select_all_season: 4805, //все матчи текущего сезона\n  match_select_this_year: 4806, //все матчи этого года\n  match_selected: 5638, // выбрано матчей\n  match_select_this_season: 2511, // текущий сезон\n  match_show_opponent: 3376, //показать статистику соперника\n  match_show_all_teams: 2867, //показать статистику команд\n  average_for_match: 426, //В среднем за матч\n  average_for_match_opp: 2787, //Среднее для команд оппонентов\n  total: 416, // всего\n  home: 6609,\n  visitors: 6610,\n\n  team_leaders: 449,\n\n  //stats\n  439: 439, //Голы забитые\n  441: 441, //голы пропущенные\n  3178: 3178, //удары\n  1327: 1327, //Удары соперника\n  92: 92, //Владения мячом\n  594: 594, // Единоборства, %\n  755: 755, // Передачи %\n  653: 653, //Ключевые передачи\n\n  total_attack_eff: 8025, // Реализация атаки, %\n  total_attack_points: 7962, //Очки в атаке\n  positive_serve_receiptions: 7957, //Позитивный прием подач, %\n\n  //tables Boxscore\n  boxscore_selected_params: 5639, // выбранные параметры\n  boxscore_sec_before: 4779, //сек до\n  boxscore_sec_after: 4780, //сек после\n  boxscore_all_range: 4781, //показать все владения\n  boxscore_setting_all_ep: 5640, //настройка показа всех эпизодов\n  boxscore_protocol: 3605, // протокол\n  boxscore_efficiency: 5229, // Показатели эффективности\n  boxscore_combinations: 5233, // комбинации\n  boxscore_with_fouls: 5252, // с учетом фолов\n  boxscore_deff_combine: 5234, // защита против комбинаций\n  boxscore_date: 473, // дата\n  boxscore_on_average: 1247, //среднее значение\n  boxscore_main_statistics: 4269, // протокол\n  boxscore_pass: 3180, // протокол\n  boxscore_challenges: 3187,\n  boxscore_lost: 6265,\n  boxscore_press: 5478,\n  boxscore_attack: 4092,\n  boxscore_flangs: 1992,\n  boxscore_type_attack: 6274,\n\n  //shoots map\n  shoots_goals_opponent: 7484, //броски соперника\n  shoots_goals: 3559, //Свои броски\n  shoots_without_zones: 4312, //без зон\n  shoots_basic_zones: 4310, //основные\n  shoots_extend_zones: 4311, //основные\n  shoots_2x_goals: 3560, //2х очковые\n  shoots_3x_goals: 3561, //3х очковые\n  average_assists: 3563,\n  shoots: 6416,\n  shoots_opponent: 1327,\n  shoots_gate: 6038,\n  shoots_field: 6612,\n  shoots_opened: 5208, //Открытый\n  shoots_closed: 5209, //закрытый\n  tabs_matches: 682, //матчи\n  tabs_players: 637, // игроки\n  tabs_lineups: 6175, // лайнапы\n\n  //match popup\n  table_popup_dnd_info: 5725, //Drag params up or down to reorder\n  match_popup_full_game: 1295, //полный матч\n  match_popup_ball_in_play: 2489, //Ball in play\n  match_popup_all_time_player: 5225, //Все игровое время\n  match_popup_rifling_attack: 2946, //Время в атаке\n  match_popup_rifling_defense: 2947, //Время в защите\n}\n","export default {\n  //амплуа\n  amplua_center_short: 4809,\n  amplua_pforward_short: 4003,\n  amplua_lforward_short: 4002,\n  amplua_sguard_short: 4807,\n  amplua_pguard_short: 4808,\n  //heder\n  header_playlists: 2544,\n  header_shared_episodes: 3949,\n\n  //Табы в виджетах\n  matches_table: 682, // Матчи\n  players_table: 9457, //Игроки\n  match: 9680, //Матч\n  teams_statistic: 2, // Статистика команд\n\n  //match select\n  match_select_3: 777, // последние 3\n  match_select_5: 778, // последние 5\n  match_select_10: 2471, // последние 10\n  match_select_all_season: 4805, //все матчи текущего сезона\n  match_select_this_year: 4806, //все матчи этого года\n  match_selected: 5638, // выбрано матчей\n  match_select_this_season: 2511, // текущий сезон\n  match_show_opponent: 3376, //показать статистику соперника\n  average_for_match: 426, //В среднем за матч\n  average_for_match_opp: 2787, //Среднее для команд оппонентов\n  total: 416, // всего\n  home: 6609,\n  visitors: 6610,\n\n  team_leaders: 449,\n\n  //stats\n  439: 439, //Голы забитые\n  441: 441, //голы пропущенные\n  3178: 3178, //удары\n  1327: 1327, //Удары соперника\n  92: 92, //Владения мячом\n  594: 594, // Единоборства, %\n  755: 755, // Передачи %\n  653: 653, //Ключевые передачи\n\n  total_attack_eff: 8025, // Реализация атаки, %\n  total_attack_points: 7962, //Очки в атаке\n  positive_serve_receiptions: 7957, //Позитивный прием подач, %\n\n  //tables Boxscore\n  boxscore_selected_params: 5639, // выбранные параметры\n  boxscore_sec_before: 4779, //сек до\n  boxscore_sec_after: 4780, //сек после\n  boxscore_all_range: 4781, //показать все владения\n  boxscore_setting_all_ep: 5640, //настройка показа всех эпизодов\n  boxscore_protocol: 3605, // протокол\n  boxscore_efficiency: 5229, // Показатели эффективности\n  boxscore_combinations: 5233, // комбинации\n  boxscore_with_fouls: 5252, // с учетом фолов\n  boxscore_deff_combine: 5234, // защита против комбинаций\n  boxscore_date: 473, // дата\n  boxscore_on_average: 1247, //среднее значение\n  boxscore_main_statistics: 4269, // протокол\n  boxscore_pass: 3180, // протокол\n  boxscore_challenges: 3187,\n  boxscore_lost: 6265,\n  boxscore_press: 5478,\n  boxscore_attack: 4092,\n  boxscore_flangs: 1992,\n  boxscore_type_attack: 6274,\n\n  //shoots map\n  shoots_goals_opponent: 7484, //броски соперника\n  shoots_goals: 3559, //Свои броски\n  shoots_without_zones: 4312, //без зон\n  shoots_basic_zones: 4310, //основные\n  shoots_extend_zones: 4311, //основные\n  shoots_2x_goals: 3560, //2х очковые\n  shoots_3x_goals: 3561, //3х очковые\n  average_assists: 3563,\n  shoots: 6416,\n  shoots_opponent: 1327,\n  shoots_gate: 6038,\n  shoots_field: 6612,\n  shoots_opened: 5208, //Открытый\n  shoots_closed: 5209, //закрытый\n  tabs_matches: 682, //матчи\n  tabs_players: 637, // игроки\n  tabs_lineups: 6175, // лайнапы\n\n  //match popup\n  table_popup_dnd_info: 5725, //Drag params up or down to reorder\n  match_popup_full_game: 1295, //полный матч\n  match_popup_ball_in_play: 2489, //Ball in play\n  match_popup_all_time_player: 5225, //Все игровое время\n  match_popup_rifling_attack: 2946, //Время в атаке\n  match_popup_rifling_defense: 2947, //Время в защите\n}\n","export default {\n  tooltip_fault: 8532,\n  tooltip_opponent_side_receive: 8649,\n  tooltip_positive_receive: 7786,\n  tooltip_handled_by_attacker: 7773,\n  tooltip_ace: 7789,\n  tooltip_ace_player: 7790,\n  tooltip_ace_from_grid: 7791,\n  tooltip_arrangement_mistake_receive: 7795,\n  tooltip_arrangement_mistake: 8650,\n  tooltip_good_pass: 7781,\n  tooltip_bad_pass: 7780,\n  tooltip_point_area: 8652,\n  tooltip_lost_point: 7732,\n  tooltip_lost_point_out: 7774,\n  tooltip_lost_point_block: 8654,\n  tooltip_point_block: 7728,\n  tooltip_useless_opponent_attack: 8577,\n  tooltip_lost_point_overstep: 7771,\n  tooltip_point_deffender: 7729,\n  tooltip_own_useless_attack: 8653,\n  tooltip_lost_point_grid: 8655,\n  tooltip_lost_point_grid_touch: 7733,\n  tooltip_block_area: 8656,\n  tooltip_useless_block_softed: 8575,\n  tooltip_lost_point_second_pass: 7772,\n  tooltip_lost_point_attack: 8660,\n  tooltip_useless_opponent_block: 8657,\n  tooltip_out_lost_point: 8659,\n  tooltip_overstep_lost_point: 8658,\n  tooltip_grid_lost_point: 7770,\n  tooltip_serve_fault: 8709,\n  tooltip_serve_another_fault: 8710,\n}\n","export default {\n  // Полное название параметра\n  // TODO Дописать недостающие ключи на англ. + комментарии\n  main_statisctic: 8479,\n  total_points_won: 8668,\n  attack_points: 7926,\n  attack_realisation: 8025,\n  block_points: 8029,\n  aces: 7788,\n  back_row_attack_eff: 9472,\n  block_touch_for_own_rally: 8054,\n  positive_attack_receiption: 7957,\n  positive_defence_receiption: 8095,\n  all_mistakes: 8600,\n  attack_mistakes: 7963,\n  block_mistakes: 8031,\n  serve_mistakes: 7890,\n  attack_receiption_mistakes: 7943,\n  defence_receiption_mistakes: 8090,\n  receive_mistakes: 8102,\n  block_assists: 7766,\n  pass_assist: 8068,\n  pass_assist_percents: 8640,\n  plus_minus_title: 8669,\n  plus_minus: 8669,\n  attack_play: 8529,\n  attacks: 967,\n  attack_points_percents: 8617,\n  attack_mistakes_percents: 8617,\n  blocked_attacks: 8728,\n  blocked_attacks_percents: 8617,\n  first_serve_attacks: 8729,\n  first_serve_attacks_points: 7962,\n  first_serve_attacks_points_percents: 8617,\n  first_serve_attacks_mistakes: 7963,\n  first_serve_attacks_mistakes_percents: 8617,\n  first_serve_attacks_blocked: 8728,\n  first_serve_attacks_blocked_percents: 8617,\n  positive_receiption_attacks: 8756,\n  positive_receiption_attacks_points: 7962,\n  positive_receiption_attacks_points_percents: 8617,\n  positive_receiption_attacks_mistakes: 7963,\n  positive_receiption_attacks_mistakes_percents: 8617,\n  positive_receiption_attacks_blocked: 8728,\n  positive_receiption_attacks_blocked_percents: 8617,\n  first_line_attacks: 7970,\n  first_line_attacks_points: 7962,\n  first_line_attacks_points_percents: 8617,\n  first_line_attacks_mistakes: 7963,\n  first_line_attacks_mistakes_percents: 8617,\n  first_line_attacks_blocked: 8728,\n  first_line_attacks_blocked_percents: 8617,\n  negative_receiption_attacks: 7990,\n  negative_receiption_attacks_points: 7962,\n  negative_receiption_attacks_points_percents: 8617,\n  negative_receiption_attacks_mistakes: 7963,\n  negative_receiption_attacks_mistakes_percents: 8617,\n  negative_receiption_attacks_blocked: 8728,\n  negative_receiption_attacks_blocked_percents: 8617,\n  back_line_attacks: 7965,\n  back_line_attacks_points: 7962,\n  back_line_attacks_points_percents: 8617,\n  back_line_attacks_mistakes: 7963,\n  back_line_attacks_mistakes_percents: 8617,\n  back_line_attacks_blocked: 8728,\n  back_line_attacks_blocked_percents: 8617,\n  serves: 8513,\n  all_serves: 7888,\n  negative_receiption_serves: 7897,\n  positive_receiption_serves: 7909,\n  force_serves: 7895,\n  force_serves_eff: 7929,\n  planned_serves: 7893,\n  planned_serves_eff: 7928,\n  serve_play: 8523,\n  serves_receiption: 7807,\n  negative_serves_receiption: 7945,\n  positive_serves_receiption: 7944,\n  defence_serve: 8087,\n  positive_defence_serve: 8488,\n  negative_defence_serve: 8553,\n  block_play: 8501,\n  all_blocks: 8028,\n  passes: 8847,\n  all_passes: 8804,\n  assists: 8605,\n  assists_mistakes: 8651,\n  positive_passes: 8063,\n  negative_passes: 8062,\n  to_back_line_passes: 8824,\n  to_first_line_passes: 8825,\n  rallies_won: 9469,\n  points_difference: 9773,\n}\n","export default {\n  // Короткое название параметра\n  // TODO переписать ключи на названия на англ.\n  8731: 8731,\n  8140: 8140,\n  8204: 8204,\n  8732: 8732,\n  7892: 7892,\n  8128: 8128,\n  8272: 8272,\n  8733: 8733,\n  8141: 8141,\n  8208: 8208,\n  7891: 7891,\n  8123: 8123,\n  8268: 8268,\n  8281: 8281,\n  8830: 8830,\n  8246: 8246,\n  8634: 8634,\n  8734: 8734,\n  8735: 8735,\n  8736: 8736,\n  8737: 8737,\n  8738: 8738,\n  8739: 8739,\n  8740: 8740,\n  8741: 8741,\n  8742: 8742,\n  8743: 8743,\n  8744: 8744,\n  8201: 8201,\n  8745: 8745,\n  8746: 8746,\n  8730: 8730,\n  8747: 8747,\n  8751: 8751,\n  8752: 8752,\n  8753: 8753,\n  8754: 8754,\n  8755: 8755,\n  8757: 8757,\n  8758: 8758,\n  8759: 8759,\n  8760: 8760,\n  8761: 8761,\n  8762: 8762,\n  8763: 8763,\n  8764: 8764,\n  8765: 8765,\n  8766: 8766,\n  8767: 8767,\n  8768: 8768,\n  8769: 8769,\n  8770: 8770,\n  8771: 8771,\n  8772: 8772,\n  8773: 8773,\n  8774: 8774,\n  8775: 8775,\n  8776: 8776,\n  8777: 8777,\n  8778: 8778,\n  8779: 8779,\n  8780: 8780,\n  8781: 8781,\n  8782: 8782,\n  8783: 8783,\n  8784: 8784,\n  8785: 8785,\n  8787: 8787,\n  8788: 8788,\n  8789: 8789,\n  8790: 8790,\n  8791: 8791,\n  8792: 8792,\n  8793: 8793,\n  8794: 8794,\n  7896: 7896,\n  7920: 7920,\n  8117: 8117,\n  7894: 7894,\n  7912: 7912,\n  8109: 8109,\n  8120: 8120,\n  8795: 8795,\n  8796: 8796,\n  8124: 8124,\n  8135: 8135,\n  8797: 8797,\n  8136: 8136,\n  8265: 8265,\n  8273: 8273,\n  8798: 8798,\n  8799: 8799,\n  8271: 8271,\n  8209: 8209,\n  8800: 8800,\n  8801: 8801,\n  8802: 8802,\n  8803: 8803,\n  8805: 8805,\n  8239: 8239,\n  8241: 8241,\n  8240: 8240,\n  8807: 8807,\n  8809: 8809,\n  8811: 8811,\n  8820: 8820,\n  8821: 8821,\n  8813: 8813,\n  8814: 8814,\n  8822: 8822,\n  8815: 8815,\n  8816: 8816,\n  8823: 8823,\n  8817: 8817,\n  8247: 8247,\n  8826: 8826,\n  8827: 8827,\n  8251: 8251,\n  8828: 8828,\n  8829: 8829,\n  9774: 9774,\n}\n","export default {\n  8724: 8724,\n  8725: 8725,\n  8617: 8617,\n  8726: 8726,\n  8727: 8727,\n  8053: 8053,\n  8806: 8806,\n  8808: 8808,\n  8810: 8810,\n  8812: 8812,\n  8814: 8814,\n  8816: 8816,\n  8818: 8818,\n  8819: 8819,\n  8952: 8952,\n  9006: 9006,\n  8954: 8954,\n  9007: 9007,\n  8487: 8487,\n  8022: 8022,\n  8496: 8496,\n  8956: 8956,\n  8957: 8957,\n  8958: 8958,\n  8959: 8959,\n  8960: 8960,\n  8961: 8961,\n  8962: 8962,\n  8963: 8963,\n  8964: 8964,\n  8965: 8965,\n  8966: 8966,\n  8967: 8967,\n  8968: 8968,\n  8969: 8969,\n  8970: 8970,\n  8971: 8971,\n  8972: 8972,\n  8973: 8973,\n  8974: 8974,\n  8975: 8975,\n  8976: 8976,\n  8977: 8977,\n  8978: 8978,\n  8979: 8979,\n  8980: 8980,\n  8981: 8981,\n  8982: 8982,\n  8983: 8983,\n  8984: 8984,\n  8985: 8985,\n  7933: 7933,\n  8543: 8543,\n  8986: 8986,\n  8987: 8987,\n  8988: 8988,\n  8989: 8989,\n  7917: 7917,\n  7911: 7911,\n  7958: 7958,\n  8992: 8992,\n  8993: 8993,\n  8096: 8096,\n  8995: 8995,\n  8994: 8994,\n  8059: 8059,\n  8058: 8058,\n  8054: 8054,\n  8662: 8662,\n  8996: 8996,\n  8997: 8997,\n  8998: 8998,\n  8999: 8999,\n  9000: 9000,\n  9001: 9001,\n  9002: 9002,\n  9003: 9003,\n  9004: 9004,\n  9005: 9005,\n  9473: 9473,\n  9470: 9470,\n  8859: 8859,\n}\n","export default {\n  video_cuts: 2862,\n  offensive: 8834,\n  deffensive: 8858,\n  cuts_favorite_play_list: 3397, //Плейлист команды\n  cuts_positional_atack: 5265, //позиционное нападение\n  cuts_free_throws: 3562, //штрафные броски\n  cuts_blocks: 3566, //блокшоты\n  cuts_fouls: 5021, //фолы\n  cuts_fouls_drawn: 5266, //фолы на нем\n  cuts_video_summary: 2862, //видео нарезки\n  cuts_off_actions: 2946, //действия в атаке\n  cuts_deff_actions: 5248, //действия в обороне\n  cuts_partner: 5988, // партнеры\n  cuts_opponent: 1024, //оппоненты\n  group_param_add_data: 3604, //дополнительные показатели\n}\n","import filtersLexic from './filters'\nimport loginLexic from './login'\nimport playerLexic from './player'\nimport teamLexic from './team'\nimport matchLexic from './match'\nimport markersLexic from './markers'\nimport tableParamsLexic from './tableParams'\nimport tableParamsLexicShort from './tableParamsShort'\nimport tableParamsNumLexic from './tableParamsNum'\nimport videoCutsLexic from './videoCuts'\n\nconst indexLexic = {\n  video_actions: 588,\n  video_select_all_actions: 6938,\n  video_select_partner: 6840,\n  video_select_opponent: 6841,\n  video_reload: 6939,\n  video_reset_filters: 6593,\n  //header\n  enter_team_or_player: 6575, //введите имя команды или игрока\n  header_my_video: 688, //мои видео\n  header_my_profile: 690, //мой профиль\n  header_upload_video: 6231, // загрузить видео\n  header_recently_visited: 7698, // Посещенные страницы\n  header_quit: 1924, //выход\n  header_team: 658, //Команда\n  header_nationality: 583, //Национальность\n  header_league: 675, //Лига\n  header_team_level: 855, //Уровень команды\n  header_age: 542, //Возраст\n  header_contract: 665, //Контракт\n  header_bodyPart: 3994, //Рука\n  header_position: 768, //позиция\n  header_goals: 55, //очки\n  header_skills: 811, //навыки\n  header_instat_index: 113, //InStat Index\n  header_statistics: 1587, //Статистика\n  header_my_players: 689,\n  header_invite_players: 1491,\n  header_comments: 1285,\n  header_flag_search: 2919,\n  header_playlists: 2638,\n  header_shared_episodes: 3949,\n  header_online_translation: 3518,\n  header_men: 6492, //мужчины\n  header_women: 6491, //женщины\n  boxscore_play_video: 6487, //воспроизвести видео\n  //duration settings\n  episodes_duration: 6227,\n  user_settings_duration: 6229,\n  default_settings_duration: 6228,\n  boxscore_popup_subtitle: 6583,\n\n  //play types\n  Playtype: 4167,\n  Isolations: 4181,\n  Transition: 5905,\n  Pick_n_rolls_handler: 6136,\n  Post_up: 4186,\n  Cuts: 4093,\n  Catch_and_shoot: 6428,\n  Put_back: 5215,\n  Catch_and_drive: 6429,\n  Pickn_Pop: 5918,\n  Hand_offs: 4188,\n  Screens: 4184,\n  Miscellaneous: 7153,\n  Pick_n_rolls_roller: 6135,\n\n  //параметры таблиц матчей\n  ////дефолтные параметры\n  reset_tables: 6945,\n  new_table: '5720', // Передаем специально в виде строки\n\n  // table names\n  main_statistics: 4269,\n  passes_table: 7037,\n  passes_table_gk: 3180,\n  shots_table: 3178,\n  shots_table_gk: 1327,\n  challenges: 251,\n  add_table: 6943,\n  remove_table: 6944,\n  move_table_down: 6947,\n  move_table_up: 6946,\n  downloadXLS: 3148,\n  downloadPDF: 3147,\n  vertical_view: 8687, // Вертикальный вид\n  horizontal_view: 8688, // Горизонтальный вид\n\n  params_matches_points: 3558, //- Набранные очки\n  params_matches_rebounds: 3570, // Подбор\n  params_matches_assist: 3174, // - Голевая передача\n  params_matches_steals: 3564, // = перехват\n  params_matches_turnover: 3565, //- Потеря\n  //\n  average_for_match: 426, //В среднем за матч\n  average_for_90: 1238,\n\n  //группы параметров\n  group_param_picking_up: 412, //подборы\n  group_param_boxscore: 2929, //протокол\n  group_param_combinations_and_iso: 3602, //комбинации и изоляции\n  group_param_shots_types: 4120, //типы бросков\n  group_param_add_data: 3604, //дополнительные показатели\n\n  //амплуа\n  amplua_center_short: 4809,\n  amplua_pforward_short: 4003,\n  amplua_lforward_short: 4002,\n  amplua_sguard_short: 4807,\n  amplua_pguard_short: 4808,\n\n  //Параметры в шапке\n  header_field_goals_percent: 5237,\n  header_3pt_shots_percent: 5238,\n  header_free_throws_percent: 5239,\n\n  //параметры\n  stat_year: 673, //лет\n  stat_sm: 817, //см\n  stat_kg: 652, //кг\n\n  //match select\n  match_select_3: 777, // последние 3\n  match_select_5: 778, // последние 5\n  match_select_10: 2471, // последние 10\n  match_select_all_season: 4805, //все матчи текущего сезона\n  match_select_this_year: 4806, //все матчи этого года\n  match_selected: 5638, // выбрано матчей\n  match_select_this_season: 2511, // текущий сезон\n\n  //tables Boxscore\n  boxscore_selected_params: 5639, // выбранные параметры\n  boxscore_sec_before: 4779, //сек до\n  boxscore_sec_after: 4780, //сек после\n  boxscore_all_range: 4781, //показать все владения\n  boxscore_setting_all_ep: 5640, //настройка показа всех эпизодов\n  boxscore_protocol: 3605, // протокол\n  boxscore_efficiency: 5229, // Показатели эффективности\n  boxscore_combinations: 5233, // комбинации\n  boxscore_with_fouls: 5252, // с учетом фолов\n  boxscore_deff_combine: 5234, // защита против комбинаций\n  boxscore_date: 473, // дата\n\n  //shoots map\n  shoots_goals_opponent: 3036, //броски соперника\n  shoots_goals: 3559, //Свои броски\n  shoots_without_zones: 4312, //без зон\n  shoots_basic_zones: 4310, //основные\n  shoots_extend_zones: 4311, //основные\n  shoots_2x_goals: 3560, //2х очковые\n  shoots_3x_goals: 3561, //3х очковые\n  shoots_opened: 5208, //Открытый\n  shoots_closed: 5209, //закрытый\n  markers_from: 9583, // точки откуда\n  markers_to: 9584, // точки куда\n  full_trajectory: 9585, // полная траектория\n\n  //match popup\n  table_popup_dnd_info: 5725, //Drag params up or down to reorder\n  match_popup_full_game: 1295, //полный матч\n  match_popup_ball_in_play: 2489, //Ball in play\n  match_popup_all_time_player: 5225, //Все игровое время\n  match_popup_rifling_attack: 2947, //Время в защите\n  match_popup_rifling_defense: 2946, //Время в атаке\n  match_popup_highlights: 2108,\n  match_popup_pure_time: 1345,\n  match_popup_goals: 55,\n  match_popup_pdf: 3553,\n  match_popup_details: 3366,\n\n  //video cuts\n  cuts_positional_atack: 5265, //позиционное нападение\n  cuts_free_throws: 3562, //штрафные броски\n  cuts_blocks: 3566, //блокшоты\n  cuts_fouls: 5021, //фолы\n  cuts_fouls_drawn: 5266, //фолы на нем\n  cuts_video_summary: 2862, //видео нарезки\n  cuts_off_actions: 2946, //действия в атаке\n  cuts_deff_actions: 5248, //действия в обороне\n  cuts_partner: 5988, // партнеры\n  cuts_opponent: 1024, //оппоненты\n\n  //common\n  cancel: 732,\n  ok: 724,\n  players: 9457,\n  teams: 660,\n  show_more: 7143, // кнопка 'показать больше'\n\n  //numeric lexics\n  7341: 7341, //external video\n}\n\nexport {\n  indexLexic,\n  filtersLexic,\n  loginLexic,\n  playerLexic,\n  teamLexic,\n  matchLexic,\n  markersLexic,\n  videoCutsLexic,\n  tableParamsLexic,\n  tableParamsLexicShort,\n  tableParamsNumLexic,\n}\n","import { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withHandlers,\n  lifecycle,\n} from 'recompose'\nimport get from 'lodash/get'\n\nimport { indexLexic } from 'config/lexics'\n\nimport {\n  TComposeInner,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n  TLifecycle,\n  TPropsOuter,\n} from './types'\n\nexport const gearPopupComposed = compose<TComposeInner, TPropsOuter>(\n  inject(\n    'lexics',\n    'playerProfile',\n    'gearPopupStore',\n  ),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    /**\n    * Функция для отображения названия для таблицы.\n    * @param {object} table - объект таблицы с параметрами\n    * @param {boolean} newPopup - флаг новое ли окно popup.\n      Если да, то отображаем название по-умолчанию Название таблицы\n  */\n    getTable: () => (table, newPopup) => {\n      if (newPopup) {\n        const newTable = {\n          position: 0,\n          tableName: indexLexic.new_table,\n        }\n        return newTable\n      }\n      return table\n    },\n    /**\n    * Запись в стор выбранных параметров в попапе шестеренки\n    * @param {bool} newPopup - если шестеренка для создания новой таблицы\n    * @param {func} handleNewPopupAction - функция закрытия попапа для новой таблцы\n    * @param {func} saveTempParams - функция сохранения параметров\n    * @param {func} handlePopupAction - функция закрытия попапа\n    * @param {number} position - номер таблицы\n    */\n    onApply: ({\n      currentStore: {\n        addTable,\n        saveTempParams,\n        storeName,\n      },\n      gearPopupStore: {\n        editTempTableName,\n        eraseTempSelected,\n        tempSelected,\n        tempTableName,\n      },\n      handleNewPopupAction,\n      handlePopupAction,\n      newPopup,\n      playerProfile: { profile },\n    }) => position => () => {\n      const ampluaId = get(profile, 'amplua.id')\n      if (newPopup) {\n        addTable(tempTableName, storeName, tempSelected)\n        editTempTableName(indexLexic.new_table, true)\n      } else {\n        saveTempParams({\n          ampluaId,\n          localStorageName: storeName,\n          position,\n          selectedParams: tempSelected,\n        })\n      }\n\n      if (newPopup) {\n        handleNewPopupAction()\n      } else {\n        handlePopupAction()\n      }\n      eraseTempSelected()\n    },\n    /**\n    * Закрытие попапа шестеренки\n    * @param {func} editTempSelected - функция очищения выбранных параметров\n    * @param {func} handlePopupAction - функция закрытия попапа\n    *\n    */\n    onClose: ({\n      gearPopupStore: { eraseTempSelected },\n      handleNewPopupAction,\n      handlePopupAction,\n      newPopup,\n    }) => () => {\n      eraseTempSelected()\n      if (newPopup) {\n        handleNewPopupAction()\n      } else {\n        handlePopupAction()\n      }\n    },\n  }),\n  lifecycle<TLifecycle, {}>({\n    componentDidMount() {\n      const {\n        gearPopupStore: { fillTempSelected },\n        newPopup,\n        table: { selectedParams },\n      } = this.props\n      if (!newPopup) {\n        fillTempSelected(selectedParams)\n      }\n    },\n  }),\n  observer,\n)\n","import React from 'react'\n\nimport get from 'lodash/get'\n\nimport { T9n } from 'react-sport'\n\nimport { RangeSettings } from 'features/components/common/map/RangeSettings'\nimport { EditTableName } from 'features/TableName/components/EditTableName'\nimport { GearTable } from './GearTable'\nimport { DndParams } from './DndParams'\nimport { gearPopupComposed } from './composed'\n\nimport { TComposeInner } from './types'\n\n// Попап окно с параметрами\nconst GearPopupComponent = ({\n  currentStore,\n  getTable,\n  lexics: { getLexics },\n  newPopup,\n  onApply,\n  onClose,\n  playerProfile: { profile },\n  table,\n}: TComposeInner) => (\n  <div className='popup popup-modern popup-modern_position-left popup-modern_active'>\n    <div className='popup-inner'>\n      <div className='popup-row-header'>\n        <h3 className='popup-title'>\n          <EditTableName\n            table={getTable(table, newPopup)}\n            newPopup={newPopup}\n            currentStore={currentStore}\n          />\n          <span className='popup-title__icon' />\n        </h3>\n        <span className='popup-close' onClick={onClose} />\n      </div>\n      <div className='popup-row-container'>\n        <GearTable\n          currentStore={currentStore}\n          ampluaId={get(profile, 'amplua.id', 0)}\n        />\n      </div>\n      <div className='popup-column-aside'>\n        <DndParams />\n        <div className='popup-duration-settings'>\n          <div className='popup-col-title'>\n            <T9n t='boxscore_setting_all_ep' />\n          </div>\n          <RangeSettings />\n        </div>\n      </div>\n      <div className='popup-row-footer'>\n        <div className='popup-buttons'>\n          <input\n            onClick={onClose}\n            type='button'\n            value={getLexics('cancel')}\n            className='popup-cancel'\n          />\n          <input\n            onClick={onApply(table.position)}\n            type='button'\n            value={getLexics('ok')}\n            className='popup-submit'\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n)\n\nexport const GearPopup = gearPopupComposed(GearPopupComponent)\n","import React, { Fragment } from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers } from 'recompose'\nimport cx from 'classnames'\nimport find from 'lodash/find'\n\nimport { T9n } from 'react-sport'\n\nimport {\n  TComposeInner,\n  TPropsOuter,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n} from './types'\n\nconst PopupItemComponent = ({\n  checkActive,\n  isActiveParam,\n  last,\n  param,\n  param: { lexical_formula },\n}: TComposeInner) => (\n  <Fragment>\n    <div className='checkbox-wrapper'>\n      <span\n        className={cx(\n          'checkbox-label',\n          { 'checkbox-label_active': isActiveParam(param) },\n        )}\n        data-name='param'\n        onClick={checkActive(param)}\n      >\n        <T9n t={lexical_formula} />\n      </span>\n    </div>\n    {last && <br />}\n  </Fragment>\n)\n\nexport const popupItemComposed = compose<TComposeInner, TPropsOuter>(\n  inject('gearPopupStore'),\n  withHandlers <TWithHandlersOuter, TWithHandlersInner>({\n    /**\n     * Функция выбора чекбокса\n     * @param {array} tempSelected - массив выбранных параметров (не сохраненные в сторе)\n     * @param {number} editTempSelected - функция действия с чекбоксом ('add', 'delete')\n     * @param {number} param_id - id параметра\n     * @param {number} gear_group_id - id группы параметров\n     * @param {string} short_lexical_formula - лексика параметра\n     * @param {object} param - весь параметр\n     */\n    checkActive: ({\n      gearPopupStore: {\n        addToTempSelected,\n        removeFromTempSelected,\n        tempSelected,\n      },\n    }) => param => () => {\n      const {\n        gear_group_id,\n        param_id,\n        short_lexical_formula,\n      } = param\n\n      if (\n        find(tempSelected, {\n          gear_group_id,\n          param_id,\n          short_lexical_formula,\n        })\n      ) {\n        removeFromTempSelected(param)\n      } else {\n        addToTempSelected(param)\n      }\n    },\n    /**\n     * Проверка активного класса для выбранного чекбокса\n     * @param {array} tempSelected - массив выбранных параметров (не сохраненные в сторе)\n     * @param {number} param_id - id параметра\n     * @param {number} gear_group_id - id группы параметров\n     * @param {string} short_lexical_formula - лексика параметра\n     */\n    isActiveParam: ({ gearPopupStore: { tempSelected } }) => ({\n      gear_group_id,\n      param_id,\n      short_lexical_formula,\n    }) => (\n      !!find(tempSelected, {\n        gear_group_id,\n        param_id,\n        short_lexical_formula,\n      })\n    ),\n  }),\n  observer,\n)\n\nexport const PopupItem = popupItemComposed(PopupItemComponent)\n","import { types } from 'mobx-state-tree'\n\n// @ts-ignore\nimport { indexLexic } from 'config/lexics'\n\nexport const gearPopupViews = types.model({}).volatile(() => ({\n  tempSelected: [], //Временно выбранные параметры (чекбоксы)\n  tempTableName: indexLexic.new_table, //Временно выбранное название таблицы\n}))\n","import { types } from 'mobx-state-tree'\nimport { toJS } from 'mobx'\n\nimport filter from 'lodash/filter'\nimport isEqual from 'lodash/isEqual'\nimport map from 'lodash/map'\n\n// @ts-ignore\nimport { indexLexic } from 'config/lexics'\n\nexport const gearPopupActions = types.model({}).actions(self => ({\n  //@ts-ignore\n  addToTempSelected(param) {\n    //@ts-ignore\n    //@ts-ignore\n    self.tempSelected = [...self.tempSelected, toJS(param)]\n  },\n\n  //@ts-ignore\n  removeFromTempSelected(param) {\n    //@ts-ignore\n    self.tempSelected = filter(\n      //@ts-ignore\n      self.tempSelected,\n      item => !isEqual(param, item),\n    )\n  },\n\n  eraseTempSelected() {\n    //@ts-ignore\n    self.tempSelected = []\n  },\n\n  //@ts-ignore\n  fillTempSelected(params) {\n    //@ts-ignore\n    self.tempSelected = map(params, param => toJS(param))\n  },\n  /** Редактирование названия таблицы\n   * @param {string} name - название таблицы\n   * @param {bool} erase - возврат к значению по-умолчанию\n   */\n  editTempTableName(name: string, erase: boolean = false) {\n    if (erase) {\n      //@ts-ignore\n      self.tempTableName = indexLexic.new_table\n    } else {\n      //@ts-ignore\n      self.tempTableName = name\n    }\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\nimport { gearPopupViews } from './gearPopupViews'\nimport { gearPopupActions } from './gearPopupActions'\n\nexport const GearPopupStore = types.compose(\n  gearPopupActions,\n  gearPopupViews,\n)\n","export const defaultTableName = '8479'\n\nexport const tableLexics = {\n  teamMatches: 'match_show_opponent',\n  tournamentMatches: 'match_show_all_teams',\n}\n\n// Типы итогового значения в ячейках таблицы\nexport const tableStatsTypes = ['total', 'average_for_match']\n\nexport const tableTypes = {\n  //Профиль турнира\n  tournamentMatches: 'tournamentMatches', //таблица матчей по турниру\n  tournamentPlayers: 'tournamentPlayers', //таблица игроков по турниру\n  //Профиль команды\n  teamMatches: 'teamMatches', // таблица матчей на профиле команды\n  teamPlayers: 'teamPlayers', // таблица игроков на профиле команды\n  //Профиль игрока\n  playerMatches: 'playerMatches', //таблица матчей на профиле игрока\n  //Профиль матча\n  matchPlayersTable: 'matchPlayersTable', //таблица игроков на профиле матча\n}\n","import React from 'react'\nimport { compose, withHandlers } from 'recompose'\nimport { observer } from 'mobx-react'\nimport { T9n } from 'react-sport'\n// @ts-ignore\nimport { tableLexics } from 'config/tables'\n\ntype TProps = {\n  getClassName: (value: boolean) => string,\n  currentStore: { showOpponentStats: boolean },\n  setShowOppStat: () => void,\n  tableType: string,\n};\n\n// Компонент шапки таблицы, где есть статистика соперника\nconst HeaderWithOppComponent = ({\n  currentStore: { showOpponentStats },\n  getClassName,\n  setShowOppStat,\n  tableType,\n}: TProps) => (\n  <a className={getClassName(showOpponentStats)} onClick={setShowOppStat}>\n    {/*\n    //@ts-ignore */}\n    <T9n t={tableLexics[tableType]} />\n  </a>\n)\n\nconst HeaderWithOppComposed = compose(\n  //@ts-ignore\n  withHandlers({\n    setShowOppStat: ({ currentStore: { toggleShowOpponent } }) => () =>\n      toggleShowOpponent(),\n  }),\n  observer,\n)\n\n// @ts-ignore\nexport const HeaderWithOpp = HeaderWithOppComposed(HeaderWithOppComponent)\n","\nimport * as React from 'react'\nimport { compose, withHandlers } from 'recompose'\n\nimport { T9n } from 'react-sport'\n\n// @ts-ignore\nimport { tableStatsTypes } from 'config/tables'\n\n// Хок для получения кнопок для выпадашки с типами значений для ячеек таблицы\n// тип *  - т.к. хок универсальный и мы не знаем, какие пропсы в компонентах\nexport const getDropdownBtnsHoc = compose<any, any>(\n  withHandlers({\n    getDropdownBtns: () => ({\n      //@ts-ignore\n      onClick,\n      //@ts-ignore\n      position,\n      //@ts-ignore\n      summaryType,\n    }) => {\n      const types = summaryType === 'total' ? tableStatsTypes : tableStatsTypes.reverse()\n\n      //@ts-ignore\n      return types.map(type => (\n        <T9n key={type} t={type} onClick={onClick(type, position)} />\n      ))\n    },\n  }),\n)\n","import React, { Fragment } from 'react'\nimport { observer } from 'mobx-react'\nimport { compose, withHandlers } from 'recompose'\n\nimport { T9n, SimpleDropdown } from 'react-sport'\n\n// @ts-ignore\nimport { getDropdownBtnsHoc } from 'hocs/getDropdownBtnsHoc'\n\ntype TProps = {\n  getClassName: (value: boolean) => string,\n  currentStore: {\n    avatarIsVisible: boolean,\n    toggleShowAvatar: () => void,\n    changeValueType: (type: string, position: number) => void,\n  },\n  getDropdownBtns: (options: {}) => Array<any>,\n  table: {\n    position: number,\n    summaryType: string,\n  },\n  setTypeHandler: () => void,\n}\n\n// Компонент левой части шапки таблицы, где есть статистика соперника\nconst HeaderWithAvatarComponent = observer(\n  ({\n    currentStore: { avatarIsVisible, toggleShowAvatar },\n    getClassName,\n    getDropdownBtns,\n    setTypeHandler,\n    table: { position, summaryType },\n  }: TProps) => (\n    <Fragment>\n      {/*\n      //@ts-ignore */}\n      <SimpleDropdown placeholder={<T9n t='total' />}>\n        {getDropdownBtns({\n          summaryType,\n          position,\n          onClick: setTypeHandler,\n        })}\n      </SimpleDropdown>\n      <a className={getClassName(avatarIsVisible)} onClick={toggleShowAvatar}>\n        <T9n t='show_photo' />\n      </a>\n    </Fragment>\n  ),\n)\n\nconst HeaderWithAvatarComposed = compose<any, TProps>(\n  //@ts-ignore\n  withHandlers({\n    setTypeHandler: ({ currentStore: { changeValueType } }) =>\n      //@ts-ignore\n      //@ts-ignore\n      (type, position) => () => changeValueType(type, position),\n  }),\n  getDropdownBtnsHoc,\n)\n\nexport const HeaderWithAvatar = HeaderWithAvatarComposed(\n  HeaderWithAvatarComponent,\n)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withProps, withHandlers } from 'recompose'\nimport get from 'lodash/get'\n\n// @ts-ignore\nimport { getSuffix } from 'module/utils/helpers'\n\ntype TProps = {\n  getClassName: (value: boolean) => string,\n  onClick: (team: string) => void,\n  teams: {\n    showTeam1: boolean,\n    showTeam2: boolean,\n  },\n  teamNames: {\n    home: string,\n    opp: string,\n  },\n}\n\n// Компонент шапки таблицы, где есть выбор у пользователя какую команду показывать\nconst HeaderWithTeams = ({\n  getClassName,\n  onClick,\n  teamNames: { home, opp },\n  teams: { showTeam1, showTeam2 },\n}: TProps) => (\n  <div className='stats-table-checkbox-opp'>\n    {/*\n    //@ts-ignore */}\n    <a className={getClassName(showTeam1)} onClick={onClick('showTeam1')}>\n      {home}\n    </a>\n    {/*\n    //@ts-ignore */}\n    <a className={getClassName(showTeam2)} onClick={onClick('showTeam2')}>\n      {opp}\n    </a>\n  </div>\n)\n\nexport const HeaderWithTeamsComposed = compose(\n  inject('matchProfile', 'lexics'),\n  observer,\n  //@ts-ignore\n  withProps(({ lexics: { lang }, matchProfile: { data } }) => {\n    const suffix = getSuffix(lang)\n    return {\n      teamNames: {\n        home: get(data, `team1_name_${suffix}`, 'home'),\n        opp: get(data, `team2_name_${suffix}`, 'opp'),\n      },\n    }\n  }),\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    onClick: ({ handleCheckTeam }) => team => () => handleCheckTeam(team),\n  }),\n  observer,\n  //@ts-ignore\n)(HeaderWithTeams)\n","import * as React from 'react'\nimport {\n  compose,\n  withHandlers,\n} from 'recompose'\n\nimport { HeaderWithOpp } from './HeaderWithOpp'\nimport { HeaderWithAvatar } from './HeaderWithAvatar'\nimport { HeaderWithTeamsComposed as HeaderWithTeams } from './HeaderWithTeams'\n\ntype TProps = {\n  //@ts-ignore\n  tableType: string | null,\n  currentStore: {},\n}\n\ntype TPropsComposed = {\n  //@ts-ignore\n  getTable: (type: string | null) => React.Node | null,\n}\n\nconst TableHeaderComponent = ({\n  getTable,\n  tableType,\n}: TProps & TPropsComposed) => getTable(tableType)\n\nconst tableHeaderComposed = compose<TProps & TPropsComposed, TProps>(\n  withHandlers({\n    //@ts-ignore\n    getTable: props => (tableType) => {\n      const tables = {\n        //@ts-ignore\n        teamMatches: <HeaderWithOpp {...props} />,\n        //@ts-ignore\n\n        matchPlayersTable: <HeaderWithTeams {...props} />,\n        //@ts-ignore\n        tournamentMatches: <HeaderWithOpp {...props} />,\n        //@ts-ignore\n        tournamentPlayers: <HeaderWithAvatar {...props} />,\n      }\n      //@ts-ignore\n      return tables[tableType] || null\n    },\n  }),\n)\n\nexport const TableHeader = tableHeaderComposed(TableHeaderComponent)\n","import { withStateHandlers } from 'recompose'\nimport isEmpty from 'lodash/isEmpty'\n/**\n * Получение отсортированных полей в таблице\n * @param {number} param - id параметра\n * @param {boolean} sortInc - порядок сортировки (по возрастанию)\n */\nexport const setSortedIdHOC = withStateHandlers(\n  //@ts-ignore\n  //@ts-ignore\n  ({ param = {}, sortInc = true }) => ({\n    param,\n    sortInc,\n  }),\n  {\n    setSortedId: ({ param, sortInc }) => (newParam) => {\n      const clickOnNewParam = param.param_id !== newParam.param_id\n      const sortIsNeedReset = Boolean(!clickOnNewParam && sortInc)\n      const clickCases = {\n        newParamClicked: {\n          param: newParam,\n          sortInc: false,\n        },\n        simpleClick: {\n          param: newParam,\n          sortInc: !sortInc,\n        },\n        default: {\n          param: {},\n          sortInc: true,\n        },\n      }\n      // При клике на другой столбец счетчик обнуляется и выделяется новый столбец\n      if (!isEmpty(param) && clickOnNewParam) return clickCases.newParamClicked\n      // При клике третий раз на одном и том же столбце, сбрасываем сортировку\n      if (sortIsNeedReset) return clickCases.default\n\n      return clickCases.simpleClick\n    },\n  },\n)\n","\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withHandlers,\n  withState,\n  withProps,\n  withStateHandlers,\n} from 'recompose'\n\nimport cx from 'classnames'\nimport get from 'lodash/get'\n\nimport { setSortedIdHOC } from 'hocs/setSortedIdHOC'\n\nimport {\n  TPropsInner,\n  TPropsOuter,\n  TWithStateHandlersState,\n  TWithHandlers,\n  TWithPropsInner,\n  TWithPropsOuter,\n  TStoreObj,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n  TProfileNames,\n} from './types'\n\nexport const tableComposed = compose<TPropsInner, TPropsOuter>(\n  inject(\n    'matchProfile',\n    'teamTable',\n    'playerTable',\n    'matchTable',\n    'lexics',\n    'tableReports',\n    'teamProfile',\n    'playerProfile',\n    'tournamentMatchesTableStore',\n    'tournamentsProfile',\n    'teamPlayers',\n    'tournamentPlayersTableStore',\n  ),\n  withState('popupOpened', 'openPopup', false),\n  withState('newPopupOpened', 'openNewPopup', false),\n  // Хок хендлера сортировки\n  setSortedIdHOC,\n  withStateHandlers<TWithStateHandlersState, TWithHandlers, TWithStateHandlersState>(\n    ({ teams = { showTeam1: true, showTeam2: true } }) => ({ teams }),\n    {\n      /**\n       * Выбор видимых команд в таблице\n       * @param {string} team - команда, с которой совершается действие\n       */\n      handleCheckTeam: ({ teams }) => (team) => {\n        teams[team] = !teams[team]\n        return {\n          teams: Object.create(teams),\n        }\n      },\n    },\n  ),\n\n  withProps<TWithPropsInner, TWithPropsOuter>(\n    ({\n      matchTable,\n      param: {\n        gear_group_id,\n        param_id,\n      },\n      playerTable,\n      tableType = 'default',\n      teamPlayers,\n      teamTable,\n      tournamentMatchesTableStore,\n      tournamentPlayersTableStore,\n    }) => {\n      // Используем нужный стор для использования методов\n      const stores: TStoreObj = {\n        matchPlayersTable: matchTable,\n        playerMatches: playerTable,\n        teamMatches: teamTable,\n        teamPlayers,\n        tournamentMatches: tournamentMatchesTableStore,\n        tournamentPlayers: tournamentPlayersTableStore,\n      }\n\n      return {\n        activeId: `${param_id}_${gear_group_id}`,\n        currentStore: stores[tableType],\n      }\n    },\n  ),\n\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    getClassName: ({ currentStore: { showOpponentStats } }) => checked =>\n      cx('team-stats-header-opponents-toggler', {\n        checked: showOpponentStats || checked,\n      }),\n\n    getLinks: ({ tableReports: { pdfIsFetching, xlsIsFetching } }) => () => [\n      { xls: xlsIsFetching },\n      { pdf: pdfIsFetching },\n    ],\n\n    handleNewPopupAction: ({ openNewPopup }) => () => openNewPopup(n => !n),\n\n    handlePopupAction: ({ openPopup }) => () => openPopup(n => !n),\n\n    saveReport: ({\n      lexics: { page },\n      matchProfile,\n      playerProfile,\n      tableReports: { getReport },\n      tableType,\n      teamProfile,\n      tournamentsProfile,\n    }) => (e, key) => {\n      const profilesNames: TProfileNames = {\n        match: get(matchProfile, ['data', 'match_date'], ''),\n        player: get(playerProfile, 'profile.short_name_eng'),\n        team: get(teamProfile, 'profile.name_eng'),\n        tournaments: get(tournamentsProfile, 'profile.name_eng'),\n      }\n      const name = profilesNames[page]\n      getReport(e, key, tableType)\n        .then((blob) => {\n          const link: any = document.getElementById('download-link')\n          const date = new Date()\n          link.href = URL.createObjectURL(blob)\n          link.download = `${date.getDate()}_${date.getMonth()\n            + 1}_${date.getFullYear()}_matches_${name}.${key}`\n          link.click()\n        })\n    },\n  }),\n  observer,\n)\n","import { types } from 'mobx-state-tree'\n\nimport size from 'lodash/size'\n\n// @ts-ignore\nimport { saveTablesToLocalStorage } from 'module/utils/helpers'\n\nexport const addTable = types.model({}).actions(self => ({\n  /**\n   * Добавляем новую таблицу\n   * @param {string | number} name - название таблицы\n   * @param {string} localStorageName - ключ для записи в localStorage\n   */\n  addTable(\n    name: string | number,\n    localStorageName: string,\n    selectedParams: Array<{}>,\n  ) {\n    //@ts-ignore\n    const position: number = size(self.tables) + 1\n    //@ts-ignore\n    self.tables = {\n      //@ts-ignore\n      ...self.tables,\n      [position]: {\n        position,\n        selectedParams,\n        tableName: name,\n        summaryType: 'average_for_match',\n      },\n    }\n    //@ts-ignore\n    saveTablesToLocalStorage({ name: localStorageName, tables: self.tables })\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\nimport get from 'lodash/get'\n\nexport const changeValueType = types.model({}).actions(self => ({\n  /** Меняем стиль отображения ячеек (итоговое по всем матчам или среднее значение)\n   * @param {string} type - тип отображения\n   */\n  changeValueType(type: string, position: number) {\n    // Если тип не меняется, то ничего не делаем\n    //@ts-ignore\n    //@ts-ignore\n    //@ts-ignore\n    if (get(self.tables, type === [position, 'summaryType'])) return null\n    //@ts-ignore\n    self.tables = {\n      //@ts-ignore\n      ...self.tables,\n      [position]: {\n        //@ts-ignore\n        ...self.tables[position],\n        summaryType: type,\n      },\n    }\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\nimport size from 'lodash/size'\nimport keys from 'lodash/keys'\nimport omit from 'lodash/omit'\nimport reduce from 'lodash/reduce'\n\n// @ts-ignore\nimport { saveTablesToLocalStorage } from 'module/utils/helpers'\n\nexport const deleteTable = types.model({}).actions(self => ({\n  /** удаления таблицы\n   * @param {number} position - порядковый номер таблицы\n   * @param {string} localStorageName - ключ для записи в localStorage\n   */\n  deleteTable(position: number, localStorageName: string) {\n    //@ts-ignore\n    const tablesList: Array<any> = keys(self.tables)\n    // Удаляем текущую таблицу\n    //@ts-ignore\n    const omitedTables = omit(self.tables, position)\n    // // Перезаписываем все таблицы, позиция которых после удаленной. Передвигаем весь список\n    const updatedTables = reduce(\n      omitedTables,\n      (acc, curr, key) => {\n        //@ts-ignore\n        if (key > position) {\n          //@ts-ignore\n          //@ts-ignore\n          acc[key - 1] = {\n            //@ts-ignore\n            ...self.tables[key],\n            //@ts-ignore\n            position: key - 1,\n          }\n        }\n        //@ts-ignore\n        //@ts-ignore\n        acc[key] = self.tables[key]\n        return acc\n      },\n      {},\n    )\n\n    // Удаляем последнюю таблицу, дубль при перемещении всех наверх\n    //@ts-ignore\n    self.tables = omit(updatedTables, size(tablesList))\n\n    //@ts-ignore\n    saveTablesToLocalStorage({ name: localStorageName, tables: self.tables })\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\n// @ts-ignore\nimport { saveTablesToLocalStorage } from 'module/utils/helpers'\n\nexport const editTable = types.model({}).actions(self => ({\n  /** Редактирование таблицы\n   * @param {number} position - порядковый номер таблицы\n   * @param {string | number} name - новое название таблицы\n   * @param {string} localStorageName - ключ для записи в localStorage\n   */\n  editTable(position: number, name: string | number, localStorageName: string) {\n    //@ts-ignore\n    self.tables = {\n      //@ts-ignore\n      ...self.tables,\n      [position]: {\n        //@ts-ignore\n        ...self.tables[position],\n        tableName: name,\n      },\n    }\n    //@ts-ignore\n    saveTablesToLocalStorage({ name: localStorageName, tables: self.tables })\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\n// @ts-ignore\nimport { indexLexic } from 'config/lexics'\n\nexport const editTempTableName = types.model({}).actions(self => ({\n  /** Редактирование названия таблицы\n   * @param {string} name - название таблицы\n   * @param {bool} erase - возврат к значению по-умолчанию\n   */\n  editTempTableName(name: string, erase: boolean = false) {\n    if (erase) {\n      //@ts-ignore\n      self.tempTableName = indexLexic.new_table\n    } else {\n      //@ts-ignore\n      self.tempTableName = name\n    }\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\nimport size from 'lodash/size'\n\nimport { saveTablesToLocalStorage } from 'module/utils/helpers'\n\nexport const moveTable = types.model({}).actions(self => ({\n  /** Перемещение таблицы вверх/вниз\n* @param {number} position - порядковый номер таблицы\n* @param {string} type - тип перемещения (вверх или вниз)\n* @param {string} localStorageName - ключ для записи в localStorage\n  */\n  moveTable(\n    position: number,\n    type: string,\n    localStorageName: string,\n  ) {\n    //@ts-ignore\n    const tableCount: number = size(self.tables)\n    //@ts-ignore\n    const currentTable: {} = self.tables[position]\n    //@ts-ignore\n    const prevTable: {} = self.tables[position - 1]\n    //@ts-ignore\n    const nextTable: {} = self.tables[position + 1]\n\n    if (\n      (type === 'up' && position === 1)\n      || (type === 'down' && position === tableCount)\n    ) return null\n\n    if (type === 'up') {\n      //@ts-ignore\n      self.tables = {\n        //@ts-ignore\n        ...self.tables,\n        [position - 1]: {\n          ...currentTable,\n          position: position - 1,\n        },\n        [position]: {\n          ...prevTable,\n          position,\n        },\n      }\n    }\n\n    if (type === 'down') {\n      //@ts-ignore\n      self.tables = {\n        //@ts-ignore\n        ...self.tables,\n        [position]: {\n          ...nextTable,\n          position,\n        },\n        [position + 1]: {\n          ...currentTable,\n          position: position + 1,\n        },\n      }\n    }\n    //@ts-ignore\n    saveTablesToLocalStorage({ name: localStorageName, tables: self.tables })\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\nexport const resetTable = types.model({}).actions(self => ({\n  /** Сброс всех таблиц по-умолчанию\n   * @param {string} localStorageName - ключ для записи в localStorage\n   */\n  resetTable(localStorageName: string) {\n    // Сначала удаляем таблицы уже сформированные\n    window.localStorage.removeItem(localStorageName)\n    //@ts-ignore\n    self.tables = {}\n    //@ts-ignore\n    self.saveTables(localStorageName)\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\nimport { saveTablesToLocalStorage } from 'module/utils/helpers'\n\nexport const saveTempParams = types.model({}).actions(self => ({\n  /**\n   * Выбранные параметры (чекбоксы) сохраняем в стор\n   * @param {number} position - порядковый номер таблицы\n   * @param {string} localStorageName - ключ для записи в localStorage\n   * @param {array} selectedParams - выбранные параметры, которые мы записываем в постоянные\n   */\n  saveTempParams({\n    ampluaId,\n    localStorageName,\n    position,\n    selectedParams,\n  }: {\n    ampluaId?: number,\n    localStorageName: string,\n    position: number,\n    selectedParams: Array<{}>,\n  }) {\n    //@ts-ignore\n    self.tables = {\n      //@ts-ignore\n      ...self.tables,\n      [position]: {\n        //@ts-ignore\n        ...self.tables[position],\n        selectedParams,\n      },\n    }\n    // Сохраняем выбранные параметры в localStorage\n    saveTablesToLocalStorage({\n      id: ampluaId,\n      name: localStorageName,\n      //@ts-ignore\n      tables: self.tables,\n    })\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\nimport { addTable } from './addTable'\nimport { changeValueType } from './changeValueType'\nimport { deleteTable } from './deleteTable'\nimport { editTable } from './editTable'\nimport { editTempTableName } from './editTempTableName'\nimport { moveTable } from './moveTable'\nimport { resetTable } from './resetTable'\nimport { saveTempParams } from './saveTempParams'\n\nexport const tableActions = types.compose(\n  addTable,\n  changeValueType,\n  deleteTable,\n  editTable,\n  editTempTableName,\n  moveTable,\n  resetTable,\n  saveTempParams,\n)\n","import { types } from 'mobx-state-tree'\nimport { toJS } from 'mobx'\nimport reduce from 'lodash/reduce'\nimport filter from 'lodash/filter'\nimport sortBy from 'lodash/sortBy'\n\nimport { callApi } from 'react-sport'\n\nimport routes from 'config/routes'\n\nconst url: string = `${routes.API_ROOT}/data`\n\nexport const tableApiActions = types.model({}).actions(self => ({\n  getGearParamsList(ampluaId: number) {\n    //@ts-ignore\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'ask_gear_params',\n        params: {\n          _v_amplua_id: ampluaId,\n        },\n      }),\n    }\n\n    return callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        self.error = null\n      },\n      //@ts-ignore\n      onSuccess: self._onSuccessGearParams,\n      //@ts-ignore\n      onError: self._onError,\n    })\n  },\n\n  //@ts-ignore\n  _onSuccessGearParams({ data }) {\n    //@ts-ignore\n    self.totalParams = data\n    //@ts-ignore\n    self.fetchGroups()\n  },\n\n  fetchGroups() {\n    //@ts-ignore\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'ask_gear_group_view',\n      }),\n    }\n    return callApi({\n      url,\n      config,\n      onRequest: () => {},\n      //@ts-ignore\n      onSuccess: self._onSuccessGroups,\n      //@ts-ignore\n      onError: self._onError,\n    })\n  },\n\n  _onSuccessGroups(json: {\n    data: Array<{\n      group_id: number,\n      group_lexical_formula: number,\n      group_name: string,\n    }>,\n  }) {\n    //@ts-ignore\n    self.gearParams = reduce(\n      json.data,\n      //@ts-ignore\n      (prev, curr) => {\n        const current = {\n          params: sortBy(\n            filter(\n              //@ts-ignore\n              toJS(self.totalParams),\n              ({ gear_group_id }) => gear_group_id === curr.group_id,\n            ),\n            'sort_order',\n          ),\n          groupName: String(curr.group_lexical_formula),\n        }\n        return [...prev, current]\n      },\n      [],\n    )\n  },\n\n  _onError(error: any) {\n    //@ts-ignore\n    self.error = error\n  },\n}))\n","import { types, Instance } from 'mobx-state-tree'\n\nimport { tableActions } from './tableActions'\nimport { tableApiActions } from './tableApiActions'\n\nconst Param = types.model('Param', {\n  clickable: types.number,\n  f_option_3: types.number,\n  full_lexical_formula: types.string,\n  gear_group_id: types.number,\n  gear_subgroup_id: types.number,\n  is_default: types.maybeNull(types.string),\n  lexical_formula: types.string,\n  name: types.string,\n  param1_id: types.maybeNull(types.array(types.string)),\n  param2_id: types.maybeNull(types.array(types.string)),\n  param_id: types.identifierNumber,\n  short_lexical_formula: types.string,\n  sort_order: types.number,\n})\n\nconst GearParam = types.model('GearParam', {\n  groupName: types.maybeNull(types.string),\n  params: types.array(Param),\n})\n\n// Модель группы с названием\nconst ParamGroup = types.model('ParamGroup', {\n  group_id: types.number,\n  group_lexical_formula: types.number,\n  group_name: types.string,\n})\n\nexport const TableCommon = types.model('tableCommon', {\n  error: types.frozen({}),\n  gearParams: types.array(GearParam),\n  paramGroups: types.array(ParamGroup),\n  tempSelected: types.array(Param),\n  tempTableName: types.union(types.string, types.number, types.undefined),\n  totalParams: types.array(Param),\n})\n\nexport const TableStore = types.compose(\n  TableCommon,\n  tableActions,\n  tableApiActions,\n)\n\nexport type TParam = Instance<typeof Param>\n","\nimport { types, flow } from 'mobx-state-tree'\nimport isEmpty from 'lodash/isEmpty'\nimport flatten from 'lodash/flatten'\nimport uniqBy from 'lodash/uniqBy'\nimport size from 'lodash/size'\n\nimport { callApi } from 'react-sport'\n\n// @ts-ignore\nimport routes from 'config/routes'\n// @ts-ignore\nimport { filterDBStats } from 'module/utils/helpers'\nimport { matchesToShow } from '../config'\n\ntype TConfig = {\n  method: string,\n  body: string,\n};\n\nconst url: string = `${routes.API_ROOT}/data`\n\nexport const TournamentMatchesTableApiActions = types\n  .model({})\n  .actions(self => ({\n    fetchTableInfo: flow(function* fetchTableInfo() {\n      //@ts-ignore\n      yield self.getGearParamsList(0)\n      //@ts-ignore\n      yield self.fetchTableParams()\n    }),\n\n    fetchTableParams() {\n      //@ts-ignore\n      const paramsList: Array<number> = isEmpty(\n        //@ts-ignore\n        self.summarySelectedParamsFromTables,\n      )\n        //@ts-ignore\n        ? self.defaultParams\n        //@ts-ignore\n        : self.summarySelectedParamsFromTables\n      const config: TConfig = {\n        method: 'POST',\n        body: JSON.stringify({\n          proc: 'ask_tournament_param_view',\n          params: {\n            //@ts-ignore\n            _v_match_id: self.matchesToFetch,\n            _v_param_id: paramsList,\n          },\n        }),\n      }\n\n      return callApi({\n        url,\n        config,\n        onRequest: () => {\n          //@ts-ignore\n          self.partFetching = true\n          //@ts-ignore\n          self.error = null\n        },\n        //@ts-ignore\n        onSuccess: self._onSuccesTableParams,\n        //@ts-ignore\n        onError: self._onError,\n      })\n    },\n\n    _onSuccesTableParams(json: { data: Array<{}> }) {\n      //@ts-ignore\n      //@ts-ignore\n      self.stats = uniqBy(\n        //@ts-ignore\n        flatten([...self.stats, filterDBStats(json.data)]),\n        'id',\n      )\n      //@ts-ignore\n      if (size(self.matchesToFetch) < matchesToShow) {\n        //@ts-ignore\n        self.canFetch = false\n      }\n      if (window.localStorage.getItem('tournamentMatchesTableStore') === null) {\n        //@ts-ignore\n        self.saveTables()\n      } else {\n        //@ts-ignore\n        //@ts-ignore\n        self.tables = JSON.parse(\n          //@ts-ignore\n          window.localStorage.getItem('tournamentMatchesTableStore'),\n        )\n      }\n      //@ts-ignore\n      self.partFetching = false\n      //@ts-ignore\n      self.isLoaded = true\n    },\n\n    _onError(error: any) {\n      //@ts-ignore\n      self.error = error\n    },\n  }))\n","export const matchesToShow = 5\n","import { types } from 'mobx-state-tree'\n\nimport filter from 'lodash/fp/filter'\nimport sortBy from 'lodash/fp/sortBy'\nimport flow from 'lodash/fp/flow'\n\n// @ts-ignore\nimport { saveTablesToLocalStorage } from 'module/utils/helpers'\n// @ts-ignore\nimport { defaultTableName } from 'config/tables'\n\nexport const TournamentMatchesTableActions = types.model({}).actions(self => ({\n  saveTables() {\n    const defaultTable = {\n      position: 1,\n      selectedParams: flow(\n        filter('is_default'),\n        sortBy(['gear_group_id', 'sort_order']),\n        //@ts-ignore\n      )(self.totalParams),\n      tableName: defaultTableName,\n      summaryType: 'average_for_match',\n    }\n    //@ts-ignore\n    self.tables = {\n      1: defaultTable,\n    }\n    //@ts-ignore\n    saveTablesToLocalStorage({\n      name: 'tournamentMatchesTableStore',\n      //@ts-ignore\n      tables: self.tables,\n    })\n  },\n\n  addOffset() {\n    //@ts-ignore\n    self.offset += 1\n    //@ts-ignore\n    return self.fetchTableParams()\n  },\n\n  toggleShowOpponent() {\n    //@ts-ignore\n    //@ts-ignore\n    self.showOpponentStats = !self.showOpponentStats\n  },\n}))\n","import { types, getParent } from 'mobx-state-tree'\n\nimport map from 'lodash/map'\nimport reduce from 'lodash/reduce'\nimport values from 'lodash/values'\nimport flatten from 'lodash/flatten'\nimport take from 'lodash/take'\nimport chunk from 'lodash/chunk'\n\nimport { matchesToShow } from '../config'\n\nexport const TournamentMatchesTableViews = types\n  .model({})\n  .volatile(() => ({\n    // offSet - кол-во частей запрашиваемых матчей.\n    //Т.к. их очень много, запрашивать будем по частям\n    offset: 1,\n    canFetch: true,\n    showOpponentStats: false,\n    partFetching: false,\n  }))\n  .views(self => ({\n    get summarySelectedParamsFromTables() {\n      const paramsSummary = reduce(\n        //@ts-ignore\n        values(self.tables),\n        (acc, curr) => {\n          const currentTableSelectedParams = map(\n            curr.selectedParams,\n            'param_id',\n          )\n          //@ts-ignore\n          acc.push(currentTableSelectedParams)\n          return acc\n        },\n        [],\n      )\n      return flatten(paramsSummary)\n    },\n\n    get defaultParams() {\n      return reduce(\n        //@ts-ignore\n        self.totalParams,\n        (acc, { is_default, param_id }) => {\n          if (is_default) {\n            //@ts-ignore\n            acc.push(param_id)\n          }\n          return acc\n        },\n        [],\n      )\n    },\n\n    get actualMatchesList() {\n      return take(\n        map(getParent(self).tournamentMatches.matches),\n        self.offset * matchesToShow,\n      )\n    },\n\n    // Считаем кол-во матчей для запроса\n    get matchesToFetch() {\n      const matchesTotal = getParent(self).tournamentMatches.matchesIds // Общее коли-во матчей\n      // Разбиваем общее кол-во матчей на части\n      const chunkedMatchesList = chunk(matchesTotal, matchesToShow)\n      return chunkedMatchesList[self.offset - 1]\n    },\n  }))\n","import { types } from 'mobx-state-tree'\n\n// @ts-ignore\nimport { TableStore } from 'features/Table/models/tableModel'\n\nimport { TournamentMatchesTableApiActions } from './TournamentMatchesTableApiActions'\nimport { TournamentMatchesTableActions } from './TournamentMatchesTableActions'\nimport { TournamentMatchesTableViews } from './TournamentMatchesTableViews'\n\nconst ParamExtended = types.model('Param', {\n  f_match: types.number,\n  f_match_event_ids: types.maybeNull(types.array(types.number)),\n  f_match_event_ids_json: types.maybeNull(types.array(types.number)),\n  f_option_0: types.number,\n  f_option_1: types.maybeNull(types.number),\n  f_option_2: types.maybeNull(types.number),\n  f_option_3: types.maybeNull(types.number),\n  f_option_4: types.maybeNull(types.number),\n  f_option_5: types.maybeNull(types.number),\n  f_option_6: types.maybeNull(types.number),\n  f_param: types.maybeNull(types.number),\n  f_team: types.maybeNull(types.number),\n  f_variant_zone: types.maybeNull(types.number),\n  id: types.string,\n  param_name: types.string,\n  value: types.maybeNull(types.number),\n})\n\nexport const TournamentMatchesTable = types.model('TournamentMatches', {\n  storeName: 'tournamentMatchesTableStore',\n  isLoaded: false,\n  error: types.maybeNull(types.frozen({})),\n  tables: types.frozen({}),\n  stats: types.array(ParamExtended),\n})\n\nexport const TournamentMatchesTableStore = types.compose(\n  // общие методы и свойства таблиц\n  TableStore,\n  // Собственные методы и свойства\n  TournamentMatchesTable,\n  TournamentMatchesTableActions,\n  TournamentMatchesTableApiActions,\n  TournamentMatchesTableViews,\n)\n","\nimport React from 'react'\nimport { lifecycle, compose } from 'recompose'\nimport { inject, observer } from 'mobx-react'\n// @ts-ignore\nimport { Tables } from 'features/Table'\n// @ts-ignore\nimport Loader from 'features/components/common/loader/Loader'\n// @ts-ignore\nimport { tableTypes } from 'config/tables'\n\ntype TProps = {\n  tournamentMatchesTableStore: {\n    isLoaded: boolean,\n    tables: {},\n  },\n  lexics: { page: string },\n  tournamentId: number,\n};\n\nconst TournamentMatches = ({\n  tournamentId,\n  tournamentMatchesTableStore: { isLoaded, tables },\n}: TProps) =>\n  (isLoaded ? (\n    <Tables\n      tableType={tableTypes.tournamentMatches}\n      tables={tables}\n      pageId={String(tournamentId)}\n    />\n  ) : (\n    <Loader />\n  ))\n\nexport const TournamentMatchesComposed = compose(\n  inject('lexics', 'tournamentMatchesTableStore'),\n  lifecycle({\n    componentDidMount() {\n      //@ts-ignore\n      const {\n        //@ts-ignore\n        tournamentMatchesTableStore: { fetchTableInfo },\n      } = this.props\n      fetchTableInfo()\n    },\n  }),\n  observer,\n  //@ts-ignore\n)(TournamentMatches)\n","/*\n Функция перевода '-' в '0' для того, чтобы сортировка работала по значению\n !Тут длинный прочерк!\n*/\nexport const emptyStatToZero = (value: string): string => (\n  value === '—' ? '0' : value\n)\n","\nimport React from 'react'\nimport cx from 'classnames'\n\nimport { T9n } from 'react-sport'\n\nimport './styles.scss'\n\ntype TProps = {\n  isFetching: boolean,\n  onClick: () => void,\n};\n\nexport const ShowMoreBtn = ({ isFetching, onClick }: TProps) => (\n  <div\n    className={cx('show-more-btn', { 'show-more-btn_loading': isFetching })}\n    onClick={onClick}\n  >\n    {!isFetching && <T9n t='show_more' />}\n  </div>\n)\n","import { compose, withHandlers } from 'recompose'\nimport cx from 'classnames'\n\ntype TParam = {\n  clickable: number,\n  gear_group_id: number,\n  param1_id: number | null,\n  param_id: number,\n}\n\nexport const clickableClassNameHOC = compose(\n  withHandlers({\n    /**\n     * Получение класса\n     * @param {number} param_id - id параметра\n     * @param {number} param1_id - id параметра необходимого для вычисления значения (проверка на %)\n     * @param {number} gear_group_id - айди группы параметров\n     * @param {number} activeId - активный id параметра (для отображения отсортированного)\n     */\n    getClassName: () => ({\n      clickable,\n      gear_group_id,\n      param_id,\n      param1_id,\n    }: TParam,\n    activeId: string) => cx({\n      cell: !clickable,\n      'clickable-cell': Boolean(clickable),\n      percents: param1_id,\n      'sorted-by': `${param_id}_${gear_group_id}` === activeId,\n    }),\n  }),\n)\n","import { inject, observer } from 'mobx-react'\nimport {\n  compose,\n  withHandlers,\n} from 'recompose'\nimport isEmpty from 'lodash/isEmpty'\nimport reduce from 'lodash/reduce'\nimport filter from 'lodash/filter'\nimport forEach from 'lodash/forEach'\n\nimport { clickableClassNameHOC } from 'hocs/getClickableTdClassNameHoc'\n\nimport { TFoot as TFootComponent } from 'features/Table'\n\ntype TProps = {\n  activeId: string,\n  getActualMatchesList: (\n    page: string,\n    pageId: string,\n    tableStats: Array<{}>,\n    opps?: boolean,\n  ) => Array<any>,\n  //@ts-ignore\n  getClassName: (param: {}, activeId: string) => void,\n  getExtLink: (\n    param?: {},\n    //@ts-ignore\n    tableStats: Array<{}>,\n    id: number,\n    forOpp: boolean,\n  ) => void,\n  //@ts-ignore\n  param?: { param1_id: {}, param2_id: {} },\n  showOpponentStats: boolean,\n  page?: string,\n  pageId: string,\n  selectedMatches: {},\n  setType: (arg: string) => void,\n  table: {\n    selectedParams: Array<{\n      //@ts-ignore\n      param_id: number | null,\n      gear_group_id: number,\n      //@ts-ignore\n      param1_id?: {},\n      //@ts-ignore\n      param2_id?: {},\n    }>,\n  },\n  tableStats: Array<{}>,\n}\n\nexport const tfootComposed = compose<any, TProps>(\n  inject(\n    'shootsRange',\n    'lexics',\n    'videoLink',\n    'tournamentMatchesTableStore',\n  ),\n  //@ts-ignore\n  withHandlers({\n    /**\n    * Функция для открытия попап окна с видео повторами\n    * @param {number} param_id - id параметра\n    * @param {string} lexical_formula - название параметра\n    * @param {array} tableStats - массив всех параметров\n    * @param {number} id - id игрока или команды\n    * @param {boolean} forOpp - флаг для фильтрации. Ищем для своей команды или для команд соперника\n    */\n    getExtLink: ({\n      lexics: { lang },\n      shootsRange,\n      tableStats,\n      videoLink: { request },\n    }) => (\n      {\n        //@ts-ignore\n        lexical_formula,\n        //@ts-ignore\n        param_id,\n      },\n    ) => {\n      // Фильтруем сначала по команде\n      const teamTableStats = filter(\n        tableStats,\n        { f_param: param_id },\n      )\n      if (isEmpty(teamTableStats)) return null\n\n      // Выдергиваем только ивенты из массива статистики для конкретной команды\n      // и делаем из них просто общий массив [number]\n      const filteredEvents = reduce(\n        teamTableStats,\n        (acc, { f_match_event_ids_json: events }) => {\n          if (!events) return acc\n          //@ts-ignore\n          forEach(events, event => acc.push(event))\n          return acc\n        }, [],\n      )\n\n      return request({\n        events: filteredEvents,\n        lang,\n        lexical_formula,\n        range: shootsRange,\n        type: 'tablesFooter',\n      })\n    },\n    /**\n    * Функция установки выбранного типа итогового значения в таблице\n    * @param {string} type - типа итогового значения\n    */\n    setType: ({\n      tournamentMatchesTableStore: { changeValueType },\n    }) => (type: string, position: number) => changeValueType(type, position),\n    /**\n    * Функция фильтрации статистики по всем матчам только по выбранным матчам.\n    И для команды соперника или нашей\n    * @param {string} page - игрок или команда\n    * @param {string} pageId - id игрока/команды\n    * @param {array} tableStats - массив параметров\n    */\n    getActualMatchesList: ({ tableStats }) => () => tableStats,\n  }),\n  clickableClassNameHOC,\n  observer,\n)\n\nexport const TFoot = tfootComposed(TFootComponent)\n","import { observer, inject } from 'mobx-react'\n\nimport {\n  dateWithYear,\n  getSuffix,\n  getAbbr,\n  //@ts-ignore\n} from 'module/utils/helpers'\n\nimport { compose, withProps } from 'recompose'\nimport get from 'lodash/get'\n\nexport const leftSideTrComposed = compose(\n  inject('lexics'),\n  observer,\n  //@ts-ignore\n  withProps(\n    //@ts-ignore\n    ({\n      handleClick,\n      lexics: { lang },\n      pageId,\n      rowInfo: { f_match, match_date, opponent_score, score, ...rowInfo },\n      showOpponentStats,\n    }) => {\n      const suffix = getSuffix(lang)\n      const oppTeamName = get(rowInfo, `name_opponent_${suffix}`)\n      const teamName = get(rowInfo, `name_${suffix}`)\n\n      return {\n        rowspan: '',\n        handleClick: handleClick(f_match, pageId),\n        titleClassName: 'match-score',\n        showOpponent: showOpponentStats,\n        ownerTeamName: getAbbr(teamName),\n        oppTeamName: getAbbr(oppTeamName),\n        titleScore: `${score}:${opponent_score}`,\n        shortName: teamName,\n        shortNameOpponent: oppTeamName,\n        matchDate: dateWithYear(match_date),\n        match: {\n          has_video: true,\n          f_match,\n        },\n      }\n    },\n  ),\n)\n","import * as React from 'react'\nimport { PlayButton, MatchName, TableUI } from 'react-sport'\nimport { MatchPopup } from 'features/Table'\nimport { leftSideTrComposed } from './composed'\n\ntype TProps = {\n  showOpponent: boolean,\n  rowspan: string,\n  match: {\n    has_video: boolean,\n    f_match: number,\n  },\n  //@ts-ignore\n  handleClick: (value: SyntheticEvent<HTMLButtonElement>) => void,\n  titleScore: string,\n  titleClassName: string,\n  matchDate: string,\n  shortNameOpponent: string,\n  shortName: string,\n  ownerTeamName: string,\n  oppTeamName: string,\n  matchPopupOpened: boolean,\n  isFetching: boolean,\n  links: {},\n  toggleClose: () => {},\n}\n\n// @ts-ignore\nexport const LeftSideTr = leftSideTrComposed(\n  //@ts-ignore\n  ({\n    handleClick,\n    isFetching,\n    links,\n    match: { f_match, has_video },\n    matchDate,\n    matchPopupOpened,\n    oppTeamName,\n    ownerTeamName,\n    rowspan,\n    shortName,\n    shortNameOpponent,\n    showOpponent,\n    titleClassName,\n    titleScore,\n    toggleClose,\n  }: TProps) => (\n    //@ts-ignore\n    <TableUI.LeftSideTrWrapper rowSpan={rowspan}>\n      {matchPopupOpened && (\n      //@ts-ignore\n        <MatchPopup\n          isFetching={isFetching}\n          links={links}\n          f_match={f_match}\n          toggleClose={toggleClose}\n        />\n      )}\n      <TableUI.PlayButtonWrapper>\n        {has_video && (\n          <PlayButton\n            //@ts-ignore\n            handleClick={handleClick}\n          />\n        )}\n      </TableUI.PlayButtonWrapper>\n\n      <TableUI.MatchDate>{matchDate}</TableUI.MatchDate>\n\n      <TableUI.MatchNameWrapper>\n        <MatchName\n          //@ts-ignore\n          handleClick={handleClick}\n          teamName={shortNameOpponent}\n        />\n      </TableUI.MatchNameWrapper>\n      {/*\n        //@ts-ignore */}\n      <TableUI.MatchScoreWrapper className={titleClassName}>\n        {titleScore}\n      </TableUI.MatchScoreWrapper>\n\n      <TableUI.MatchNameWrapper>\n        {/*\n        //@ts-ignore */}\n        <MatchName handleClick={handleClick} teamName={shortName} />\n      </TableUI.MatchNameWrapper>\n\n      {showOpponent && (\n        <TableUI.MatchScoreForOppWrapper>\n          <TableUI.MatchAbbrName side='home'>\n            {ownerTeamName}\n          </TableUI.MatchAbbrName>\n          <TableUI.MatchAbbrName side='opp'>\n            {oppTeamName}\n          </TableUI.MatchAbbrName>\n        </TableUI.MatchScoreForOppWrapper>\n      )}\n    </TableUI.LeftSideTrWrapper>\n  ),\n)\n","import { compose, withHandlers, withState } from 'recompose'\nimport { inject } from 'mobx-react'\n\n// Хок для компонента c выпадашкой, в которой содержится информация о матче.\n// При клике на матч делается запрос на получение ссылок с бэка.\n// в компоненте который оборачиваестя хоком появляется метод toggleClose\n// для открытия/закрытие попап окна со списком ссылок\nconst getMatchLinksHoc = compose(\n  inject('lexics', 'matchLinks'),\n  withState('matchPopupOpened', 'setOpened', false),\n  //@ts-ignore\n  withHandlers({\n    toggleClose: ({ matchPopupOpened, setOpened }) => () =>\n      setOpened(!matchPopupOpened),\n\n    getPost: ({\n      lexics: { page },\n      matchLinks: { fetch },\n      matchPopupOpened,\n      setOpened,\n      //@ts-ignore\n      //@ts-ignore\n    }) => (f_match, pageId) => () => {\n      fetch(f_match, pageId, page)\n      setOpened(!matchPopupOpened)\n    },\n  }),\n)\n\nexport default getMatchLinksHoc\n","import { inject, observer } from 'mobx-react'\n\nimport { compose } from 'recompose'\n\nimport getMatchLinksHoc from 'hocs/getMatchLinksHoc'\nimport { getExtLinkHOC } from 'hocs/getExtLinkHOC'\nimport { clickableClassNameHOC } from 'hocs/getClickableTdClassNameHoc'\n\n//TODO типизировать этот список хоков\n//@ts-ignore\nexport const TrComposed = compose<any, {}>(\n  inject(\n    'videoLink',\n    'lexics',\n    'shootsRange',\n    'matchLinks',\n  ),\n  getMatchLinksHoc,\n  getExtLinkHOC,\n  clickableClassNameHOC,\n  observer,\n)\n","import React from 'react'\nimport map from 'lodash/map'\n\nimport { Td } from 'features/Table/components/Td'\n\nimport { TPropsTr } from './types'\n\nimport { LeftSideTr } from '../LeftSideTr'\nimport { TrComposed } from './composed'\n\n// Строка со статистикой по матчу\nexport const Tr = TrComposed(\n  ({\n    activeId,\n    getClassName,\n    getPost,\n    matchLinks: { isFetching, links },\n    matchPopupOpened,\n    pageId,\n    rowInfo,\n    selectedParams,\n    showOpponentStats,\n    tableStats,\n    toggleClose,\n  }: TPropsTr) => (\n    <tr className='stats-table__table-row'>\n      {/*\n        //@ts-ignore */}\n      <LeftSideTr\n        showOpponentStats={showOpponentStats}\n        rowInfo={rowInfo}\n        pageId={pageId}\n        handleClick={getPost}\n        matchPopupOpened={matchPopupOpened}\n        isFetching={isFetching}\n        links={links}\n        toggleClose={toggleClose}\n      />\n      {map(selectedParams, param => (\n        <td\n          key={`${param.param_id}_${param.gear_group_id}`}\n          className={getClassName(param, activeId)}\n        >\n          {showOpponentStats ? (\n            <table>\n              <tbody>\n                {map([rowInfo.team_id, rowInfo.opp_team_id], team => (\n                  <tr key={team}>\n                    <Td\n                      id={team}\n                      param={param}\n                      tableStats={tableStats}\n                      rowInfo={rowInfo}\n                      tableType='tournamentMatches'\n                    />\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          ) : (\n            <table>\n              <tbody>\n                <tr>\n                  <Td\n                    param={param}\n                    tableStats={tableStats}\n                    rowInfo={rowInfo}\n                    type='total'\n                    tableType='tournamentMatchesTotal'\n                  />\n                </tr>\n              </tbody>\n            </table>\n          )}\n        </td>\n      ))}\n    </tr>\n  ),\n)\n","import React, { Fragment } from 'react'\nimport { inject, observer } from 'mobx-react'\nimport { compose, withHandlers } from 'recompose'\nimport map from 'lodash/map'\nimport filter from 'lodash/filter'\n\nimport { TableUI } from 'react-sport'\n\n// @ts-ignore\nimport { getSummaryStatValue } from 'module/utils/helpers/getSummaryStatValue'\n// @ts-ignore\nimport { emptyStatToZero } from 'module/utils/helpers/emptyStatToZero'\n\n// @ts-ignore\nimport Loader from 'features/components/common/loader/Loader'\n// @ts-ignore\nimport { THead, TBody } from 'features/Table'\n// @ts-ignore\nimport { ShowMoreBtn } from 'features/ShowMoreBtn'\n\nimport { TFoot } from './HOCs/TFootHOC'\nimport { Tr } from './Tr'\n\nimport './styles.scss'\n\ntype TParam = {\n  param_id: number,\n  gear_group_id: number,\n  full_lexical_formula: string,\n  short_lexical_formula: string,\n}\n\ntype TProps = {\n  pageId: string,\n  sortInc: boolean,\n  activeId: string,\n  table: {\n    selectedParams: Array<TParam>,\n  },\n  setSortedId: () => {},\n  getMatchesList: () => Array<{}>,\n  currentStore: {\n    isLoaded: boolean,\n    showOpponentStats: boolean,\n    stats: Array<{}>,\n    addOffset: () => void,\n    partFetching: boolean,\n    canFetch: boolean,\n  },\n  param?: {},\n}\n\n// Основной блок таблицы со статистикой для страницы турнира\nconst TournamentTableComponent = ({\n  activeId,\n  currentStore: {\n    addOffset,\n    canFetch,\n    isLoaded,\n    partFetching,\n    showOpponentStats,\n    stats,\n  },\n  getMatchesList,\n  pageId,\n  setSortedId,\n  sortInc,\n  table,\n}: TProps) => (\n\n  <Fragment>\n    <div className='stats-table__wrapper'>\n\n      <table className='stats-table__table'>\n        <TableUI.Thead>\n          {/*\n          //@ts-ignore */}\n          <THead table={table} setSortedId={setSortedId} />\n        </TableUI.Thead>\n        {isLoaded ? (\n          <Fragment>\n            {/*\n            //@ts-ignore */}\n            <TBody\n              selectedParams={table.selectedParams}\n              rows={getMatchesList()}\n              tableStats={stats}\n              pageId={pageId}\n              sortInc={sortInc}\n              activeId={activeId}\n              showOpponentStats={showOpponentStats}\n              Tr={Tr}\n            />\n            {/*\n            //@ts-ignore */}\n            <TFoot\n              table={table}\n              tableStats={stats}\n              pageId={pageId}\n              activeId={activeId}\n              showOpponentStats={showOpponentStats}\n            />\n          </Fragment>\n        ) : (\n          <Loader />\n        )}\n      </table>\n    </div>\n    {canFetch && (\n      <div className='show-btn-container'>\n        <ShowMoreBtn onClick={addOffset} isFetching={partFetching} />\n      </div>\n    )}\n  </Fragment>\n)\n\nconst tournamentTableComposed = compose(\n  inject('tournamentMatchesTableStore'),\n  //@ts-ignore\n  withHandlers({\n    /**\n     * Получение списка матчей, отсортированного по значению выбранного параметра\n     * @param {boolean} sortInc - флаг для сортировки (по убыванию или по возрастанию)\n     */\n    getMatchesList: ({\n      param,\n      tournamentMatchesTableStore: { actualMatchesList, stats },\n    }) => () =>\n      map(actualMatchesList, (match) => {\n        const sortedValue = getSummaryStatValue(\n          param.param_id,\n          filter(stats, { f_match: match.f_match }),\n          'total',\n        ).toString()\n        return {\n          ...match,\n          param,\n          sortBy: emptyStatToZero(sortedValue),\n        }\n      }),\n  }),\n  observer,\n)\n\n// @ts-ignore\nexport const TournamentTable = tournamentTableComposed(\n  //@ts-ignore\n  TournamentTableComponent,\n)\n","\nimport { types } from 'mobx-state-tree'\n\nimport { callApi } from 'react-sport'\n\nimport get from 'lodash/get'\n\n// @ts-ignore\nimport routes from 'config/routes'\n\ntype TConfig = {\n  method: string,\n  body: string,\n};\n\nconst url: string = `${routes.API_ROOT}/data`\n\nexport const TournamentPagePlayersApiActions = types\n  .model({})\n  .actions(self => ({\n    fetchTableParams(tournamentId: number, seasonId: number) {\n      const config: TConfig = {\n        method: 'POST',\n        body: JSON.stringify({\n          proc: 'scout_tournament_players_stat',\n          params: {\n            _p_tournament_id: tournamentId,\n            _p_season_id: seasonId,\n          },\n        }),\n      }\n\n      // Делаем также запрос для параметров шестеренки\n      //@ts-ignore\n      self.getGearParamsList(0)\n\n      return callApi({\n        url,\n        config,\n        onRequest: () => {\n          //@ts-ignore\n          self.error = null\n          //@ts-ignore\n          self.isLoaded = false\n        },\n        //@ts-ignore\n        onSuccess: self._onSuccesPlayers,\n        //@ts-ignore\n        onError: self._onError,\n      })\n    },\n\n    //@ts-ignore\n    _onSuccesPlayers({ data }: {}) {\n      //@ts-ignore\n      self.players = get(data, '[0].scout_tournament_players_stat') || []\n\n      if (window.localStorage.getItem('tournamentPlayersTableStore') === null) {\n        //@ts-ignore\n        self.saveTables()\n      } else {\n        //@ts-ignore\n        //@ts-ignore\n        self.tables = JSON.parse(\n          //@ts-ignore\n          window.localStorage.getItem('tournamentPlayersTableStore'),\n        )\n      }\n\n      //@ts-ignore\n      self.isLoaded = true\n    },\n\n    _onError(error: any) {\n      //@ts-ignore\n      self.error = error\n    },\n  }))\n","import { types } from 'mobx-state-tree'\n\nimport filter from 'lodash/fp/filter'\nimport sortBy from 'lodash/fp/sortBy'\nimport flow from 'lodash/fp/flow'\n\n// @ts-ignore\nimport { saveTablesToLocalStorage } from 'module/utils/helpers'\n// @ts-ignore\nimport { defaultTableName } from 'config/tables'\n\nexport const TournamentPagePlayersActions = types.model({}).actions(self => ({\n  saveTables() {\n    const defaultTable = {\n      position: 1,\n      selectedParams: flow(\n        filter('is_default'),\n        sortBy(['gear_group_id', 'sort_order']),\n        //@ts-ignore\n      )(self.totalParams),\n      tableName: defaultTableName,\n      summaryType: 'total',\n    }\n    //@ts-ignore\n    self.tables = {\n      1: defaultTable,\n    }\n    //@ts-ignore\n    saveTablesToLocalStorage({\n      name: 'tournamentPlayersTableStore',\n      //@ts-ignore\n      tables: self.tables,\n    })\n  },\n\n  toggleShowAvatar() {\n    //@ts-ignore\n    //@ts-ignore\n    self.avatarIsVisible = !self.avatarIsVisible\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\nexport const TournamentPagePlayersViews = types.model({}).volatile(() => ({\n  avatarIsVisible: false,\n}))\n","import { types } from 'mobx-state-tree'\n\n// @ts-ignore\nimport { TableStore } from 'features/Table/models/tableModel'\n\nimport { TournamentPagePlayersApiActions } from './apiActions'\nimport { TournamentPagePlayersActions } from './actions'\nimport { TournamentPagePlayersViews } from './views'\n\nconst Param = types.model('Param', {\n  p: types.number,\n  o: types.number,\n  v: types.number,\n})\n\nconst Player = types.model('Player', {\n  f_player: types.number,\n  shirt_num: types.maybeNull(types.string),\n  name_rus: types.string,\n  name_eng: types.string,\n  f_team: types.maybeNull(types.number),\n  pos1: types.maybeNull(types.number),\n  params: types.maybeNull(types.array(Param)),\n})\n\nexport const TournamentPagePlayersTable = types.model('TournamentPlayers', {\n  storeName: 'tournamentPlayersTableStore',\n  isLoaded: false,\n  error: types.maybeNull(types.frozen({})),\n  tables: types.frozen({}),\n  players: types.array(Player),\n})\n\nexport const TournamentPlayersTableStore = types.compose(\n  // общие методы и свойства таблиц\n  TableStore,\n  // Собственные методы и свойства\n  TournamentPagePlayersTable,\n  TournamentPagePlayersApiActions,\n  TournamentPagePlayersActions,\n  TournamentPagePlayersViews,\n)\n","\nimport React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { lifecycle, compose } from 'recompose'\n\n// @ts-ignore\nimport { Tables } from 'features/Table'\n// @ts-ignore\nimport Loader from 'features/components/common/loader/Loader'\n// @ts-ignore\nimport { tableTypes } from 'config/tables'\n\ntype TProps = {\n  lexics: { page: string },\n  tournamentId: number,\n  tournamentPlayersTableStore: { isLoaded: boolean, tables: {} },\n};\n\nconst TournamentPlayersTableComponent = ({\n  tournamentId,\n  tournamentPlayersTableStore: { isLoaded, tables },\n}: TProps) =>\n  (isLoaded ? (\n    <Tables\n      tableType={tableTypes.tournamentPlayers}\n      tables={tables}\n      pageId={String(tournamentId)}\n    />\n  ) : (\n    <Loader />\n  ))\n\nexport const TournamentPlayersTableComposed = compose(\n  inject('lexics', 'tournamentPlayersTableStore', 'tournamentSeasonSelect'),\n  lifecycle({\n    componentDidMount() {\n      const {\n        //@ts-ignore\n        tournamentId,\n        //@ts-ignore\n        tournamentPlayersTableStore: { fetchTableParams },\n        //@ts-ignore\n        tournamentSeasonSelect: { selectedSeason },\n      } = this.props\n      fetchTableParams(tournamentId, selectedSeason.season_id)\n    },\n  }),\n  observer,\n)\n\n// @ts-ignore\nexport const TournamentPlayersTable = TournamentPlayersTableComposed(\n  //@ts-ignore\n  TournamentPlayersTableComponent,\n)\n","import { observer, inject } from 'mobx-react'\n\nimport get from 'lodash/get'\nimport { compose, withProps } from 'recompose'\n\nimport { utils } from 'react-sport'\n\n// @ts-ignore\nimport { getLongSuffix } from 'module/utils/helpers'\n\nexport const leftSideTrComposed = compose(\n  inject('lexics', 'tournamentPlayersTableStore'),\n  observer,\n  //@ts-ignore\n  withProps(\n    //@ts-ignore\n    ({\n      lexics: { lang },\n      rowInfo: {\n        f_player,\n        ...rowInfo\n      },\n      tournamentPlayersTableStore: { avatarIsVisible },\n    }) => {\n      const suffix = getLongSuffix(lang)\n\n      return {\n        rowspan: '',\n        avatarUrl: utils.helpers.getLogo({\n          type: 'players_volleyball',\n          id: f_player,\n        }),\n        avatarIsVisible,\n        playerProfileLink: `/players/${f_player}`,\n        shirtNumber: get(rowInfo, 'shirt_num'),\n        playerName: get(rowInfo, `name_${suffix}`),\n      }\n    },\n  ),\n)\n","import * as React from 'react'\n\nimport { TableUI, utils } from 'react-sport'\n\nimport { leftSideTrComposed } from './composed'\n\ntype TProps = {\n  rowspan: string,\n  //@ts-ignore\n  shirtNumber: string | null,\n  playerName: string,\n  avatarUrl: string,\n  playerProfileLink: string,\n  avatarIsVisible: boolean,\n}\n//@ts-ignore\nexport const LeftSideTr = leftSideTrComposed(({\n  avatarIsVisible,\n  avatarUrl,\n  playerName,\n  playerProfileLink,\n  shirtNumber,\n}: TProps) => (\n  <TableUI.LeftSideTrPlayersWrapper>\n    {avatarIsVisible && (\n      <TableUI.ResultsAvatar\n        src={avatarUrl}\n        onError={utils.helpers.onProfileImageError}\n      />\n    )}\n    <TableUI.PlayerNumber>\n      {shirtNumber}\n    </TableUI.PlayerNumber>\n    {/*\n        //@ts-ignore */}\n    <TableUI.PlayerName href={playerProfileLink}>\n      {playerName}\n    </TableUI.PlayerName>\n  </TableUI.LeftSideTrPlayersWrapper>\n))\n","import { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers } from 'recompose'\n\nimport get from 'lodash/get'\nimport find from 'lodash/find'\n\n// @ts-ignore\nimport getMatchLinksHoc from 'hocs/getMatchLinksHoc'\n// @ts-ignore\nimport { getExtLinkHOC } from 'hocs/getExtLinkHOC'\n// @ts-ignore\nimport { clickableClassNameHOC } from 'hocs/getClickableTdClassNameHoc'\n\nimport { TPropsTrComposed } from './types'\n\nexport const TrComposed = compose<any, TPropsTrComposed>(\n  inject('videoLink', 'lexics', 'shootsRange', 'matchLinks'),\n  getMatchLinksHoc,\n  getExtLinkHOC,\n  clickableClassNameHOC,\n  //@ts-ignore\n  withHandlers({\n    getStat: ({ rowInfo: { params } }) =>\n      //@ts-ignore\n      paramId => String(get(find(params, { p: paramId }), 'v', 0)),\n  }),\n  observer,\n)\n","import React from 'react'\nimport map from 'lodash/map'\n\nimport { TableUI } from 'react-sport'\nimport { LeftSideTr } from '../LeftSideTr'\nimport { TrComposed } from './composed'\n\n// import { TPropsTr } from './types'\n\ntype TProps = {\n  activeId: string,\n  //@ts-ignore\n  getClassName: (param: {}, activeId: string) => void,\n  rowInfo: {},\n  pageId: string,\n  selectedParams: Array<{}>,\n  getStat: (param: number) => string,\n}\n\n// Строка со статистикой по игроку\nexport const Tr = TrComposed(\n  ({\n    activeId,\n    getClassName,\n    getStat,\n    pageId,\n    rowInfo,\n    selectedParams,\n  }: TProps) => (\n    <tr className='stats-table__table-row'>\n      {/*\n          //@ts-ignore */}\n      <LeftSideTr rowInfo={rowInfo} pageId={pageId} />\n      {map(selectedParams, param => (\n        <TableUI.Td\n          //@ts-ignore\n          key={`${param.param_id}_${param.gear_group_id}`}\n            //@ts-ignore\n          className={getClassName(param, activeId)}\n            //@ts-ignore\n          value={getStat(param.param_id)}\n          onClick={() => { }}\n        />\n      ))}\n    </tr>\n  ),\n)\n","import React, { Fragment } from 'react'\nimport { inject } from 'mobx-react'\n\nimport { compose, withHandlers } from 'recompose'\n\nimport map from 'lodash/map'\nimport find from 'lodash/find'\nimport get from 'lodash/get'\n\nimport { TableUI } from 'react-sport'\n\n// @ts-ignore\nimport { emptyStatToZero } from 'module/utils/helpers/emptyStatToZero'\nimport Loader from 'features/components/common/loader/Loader'\n// @ts-ignore\nimport { THead, TBody } from 'features/Table'\n\nimport { Tr } from './Tr'\n\ntype TParam = {\n  param_id: number,\n  gear_group_id: number,\n  full_lexical_formula: string,\n  short_lexical_formula: string,\n};\n\ntype TProps = {\n  pageId: string,\n  sortInc: boolean,\n  activeId: string,\n  table: {\n    selectedParams: Array<TParam>,\n  },\n  setSortedId: () => {},\n  currentStore: {\n    isLoaded: boolean,\n  },\n  param?: {},\n  getPlayersList: () => Array<{}>,\n};\n\n// Основной блок таблицы со статистикой для страницы турнира\nconst TournamentPlayersComponent = ({\n  activeId,\n  currentStore: { isLoaded },\n  getPlayersList,\n  pageId,\n  setSortedId,\n  sortInc,\n  table,\n}: TProps) => (\n  <Fragment>\n    <div className='stats-table__wrapper'>\n      <table className='stats-table__table'>\n        <TableUI.Thead>\n          {/*\n              // @ts-ignore */}\n          <THead table={table} setSortedId={setSortedId} />\n        </TableUI.Thead>\n        {isLoaded ? (\n          <Fragment>\n            {/*\n                //@ts-ignore */}\n            <TBody\n              selectedParams={table.selectedParams}\n              rows={getPlayersList()}\n              pageId={pageId}\n              sortInc={sortInc}\n              activeId={activeId}\n              Tr={Tr}\n            />\n          </Fragment>\n        ) : (\n          <Loader />\n        )}\n      </table>\n    </div>\n  </Fragment>\n)\n\nconst tournamentPlayersComposed = compose(\n  inject('tournamentPlayersTableStore'),\n  //@ts-ignore\n  withHandlers({\n    /**\n     * Получение списка матчей, отсортированного по значению выбранного параметра\n     * @param {boolean} sortInc - флаг для сортировки (по убыванию или по возрастанию)\n     */\n    getPlayersList: ({\n      param,\n      tournamentPlayersTableStore: { players },\n    }) => () =>\n      map(players, (player) => {\n        const sortedValue = get(\n          find(player.params, { p: param.param_id }),\n          'v',\n          0,\n        )\n        return {\n          ...player,\n          param,\n          sortBy: emptyStatToZero(sortedValue),\n        }\n      }),\n  }),\n)\n\n// @ts-ignore\nexport const TournamentPlayers = tournamentPlayersComposed(\n  //@ts-ignore\n  TournamentPlayersComponent,\n)\n","import { inject, observer } from 'mobx-react'\nimport { compose, withProps } from 'recompose'\n\nimport { getLongSuffix } from 'module/utils/helpers'\n\nimport { clickableClassNameHOC } from 'hocs/getClickableTdClassNameHoc'\n\nimport {\n  TPropsInner,\n  TPropsOuter,\n  TWithPropsInner,\n  TWithPropsOuter,\n} from './types'\n\nexport const TrMatchComposed = compose<TPropsInner, TPropsOuter>(\n  inject('videoLink', 'lexics'),\n  withProps<TWithPropsInner, TWithPropsOuter>(({\n    lexics: { lang },\n    rowInfo,\n  }) => {\n    const suffix = getLongSuffix(lang)\n    const firstName = rowInfo[`firstname_${suffix}`]\n    const lastName = rowInfo[`lastname_${suffix}`]\n\n    return {\n      playerName: `${firstName} ${lastName}`,\n    }\n  }),\n  clickableClassNameHOC,\n  observer,\n)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport map from 'lodash/map'\n\nimport { Td } from 'features/Table/components/Td'\n\nimport { TrMatchComposed } from './composed'\n\nimport { TPropsInner } from './types'\n\n// Строка со статистикой по матчу\nconst TrMatchComponent = ({\n  activeId,\n  getClassName,\n  playerName,\n  rowInfo,\n  selectedParams,\n  tableStats,\n}: TPropsInner) => (\n  <tr className='stats-table__table-row'>\n    <td>\n      <Link target='_blank' to={`/players/${rowInfo.f_player}`}>\n        <div className='stats-cell'>\n          <div className='player-number'>{rowInfo.num}</div>\n          <div className='player-name'>{playerName}</div>\n        </div>\n      </Link>\n    </td>\n    {map(selectedParams, param => (\n      <td\n        key={`${param.param_id}_${param.gear_group_id}`}\n        className={getClassName(param, activeId)}\n      >\n        <table>\n          <tbody>\n            <tr>\n              <Td\n                id={rowInfo.f_player}\n                param={param}\n                tableStats={tableStats}\n                rowInfo={rowInfo}\n                tableType='matchPlayersTable'\n              />\n            </tr>\n          </tbody>\n        </table>\n      </td>\n    ))}\n  </tr>\n)\n\nexport const TrMatch = TrMatchComposed(TrMatchComponent)\n","import React, { Fragment } from 'react'\nimport { observer } from 'mobx-react'\n\nimport { TableUI } from 'react-sport'\n\nimport { THead, TBody } from 'features/Table'\n\nimport { TrMatch } from '../Tr'\n\ntype TProps = {\n  table: {},\n  setSortedId: () => {},\n  tableStats: Array<{}>,\n  pageId: string,\n  sortInc: boolean,\n  activeId: string,\n  param: {},\n  rows: Array<{}>,\n}\n\nexport const Table = observer(\n  ({\n    activeId,\n    pageId,\n    param,\n    rows,\n    setSortedId,\n    sortInc,\n    table,\n    tableStats,\n  }: TProps) => (\n    <Fragment>\n      <TableUI.Thead>\n        {/*\n        //@ts-ignore */}\n        <THead table={table} setSortedId={setSortedId} />\n      </TableUI.Thead>\n      {/*\n      //@ts-ignore */}\n      <TBody\n        //@ts-ignore\n        selectedParams={table.selectedParams}\n        rows={rows}\n        tableStats={tableStats}\n        pageId={pageId}\n        sortInc={sortInc}\n        activeId={activeId}\n        param={param}\n        Tr={TrMatch}\n      />\n    </Fragment>\n  ),\n)\n","import { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withProps,\n  withHandlers,\n  lifecycle,\n} from 'recompose'\nimport reduce from 'lodash/reduce'\nimport map from 'lodash/map'\nimport isEmpty from 'lodash/isEmpty'\nimport filter from 'lodash/filter'\n\nimport { emptyStatToZero } from 'module/utils/helpers/emptyStatToZero'\nimport { getStatValue } from 'module/utils/helpers/getStatValue'\n\nimport {\n  TProps,\n  TWithPropsInner,\n  TWithPropsOuter,\n  THocInner,\n  TParam,\n  TComposedInner,\n  TWithHandlersInner,\n  TStats,\n} from './types'\n\nexport const tableComposed = compose<TComposedInner, TProps>(\n  inject('matchTable', 'matchProfile'),\n\n  withProps<TWithPropsOuter, TWithPropsInner>(({\n    matchTable: { playerList, tableStats },\n    param,\n  }) => {\n    const playerListByTeams = playerList || []\n    const filteredPlayerStats = ({ f_player }: { f_player: number }): TStats =>\n      filter(tableStats, { f_player })\n\n    // Добавляем поле sortBy для каждого игрока, если есть параметр, по которому сортировать\n    const teamsPlayersStats = isEmpty(param)\n      ? playerListByTeams\n      : reduce(\n        playerListByTeams,\n        (\n          acc: {[key: number] : {}},\n          curr: {},\n          team: number,\n        ) => {\n          acc[team] = map(curr, (player: {f_player: number}) => {\n            const sortedValue = getStatValue(\n              param,\n              filteredPlayerStats(player),\n            )\n            return {\n              ...player,\n              sortBy: emptyStatToZero(sortedValue),\n            }\n          })\n          return acc\n        },\n        {},\n      )\n\n    return {\n      teamsPlayersStats,\n    }\n  }),\n\n  withHandlers<THocInner, TWithHandlersInner>({\n    // Дополняем метод записью в сторе для таблицы\n    // Устанавливаем активный параметр - по нему идет сортировка в таблице\n    handleSetActiveParam: ({\n      matchTable: { setActiveParam },\n      setSortedId,\n      table,\n    }) => (param: {}) => {\n      setSortedId(param)\n      setActiveParam(table, param)\n    },\n  }),\n  lifecycle<THocInner & TParam, {}>({\n    componentDidUpdate(prevProps) {\n      const {\n        matchTable: { setActiveParam },\n        param,\n        table,\n      } = this.props\n      if (isEmpty(param) && !isEmpty(prevProps.param)) {\n        setActiveParam(table, param)\n      }\n    },\n  }),\n  observer,\n)\n","import React, { Fragment } from 'react'\n\nimport { Table } from './Table'\nimport { tableComposed } from './tableComposed'\n\ntype TProps = {\n  activeId: string,\n  currentStore: { tableStats: Array<{}> },\n  matchTable: {\n    playerList: [] | {},\n  },\n  matchProfile: {\n    data: {\n      team1_id: number,\n      team2_id: number,\n    },\n  },\n  pageId: string,\n  param: {},\n  handleSetActiveParam: () => void,\n  sortInc: boolean,\n  table: {},\n  teams: {\n    showTeam1: boolean,\n    showTeam2: boolean,\n  },\n  teamsPlayersStats: {},\n}\n\n// Основной блок таблицы со статистикой для страницы матча\nexport const TableMatchWrapper = tableComposed(\n  ({\n    activeId,\n    currentStore: { tableStats },\n    handleSetActiveParam,\n    matchProfile: {\n      data: { team1_id, team2_id },\n    },\n    pageId,\n    param,\n    sortInc,\n    table,\n    teams: { showTeam1, showTeam2 },\n    teamsPlayersStats,\n  }: TProps) => (\n    <div className='stats-table__wrapper'>\n      <table className='stats-table__table'>\n        <Fragment>\n          {showTeam1 && (\n            <Table\n              //@ts-ignore\n              rows={teamsPlayersStats[team1_id]}\n              tableStats={tableStats}\n              table={table}\n                //@ts-ignore\n              setSortedId={handleSetActiveParam}\n              pageId={pageId}\n              sortInc={sortInc}\n              activeId={activeId}\n              param={param}\n            />\n          )}\n          {showTeam2 && (\n            <Table\n              //@ts-ignore\n              rows={teamsPlayersStats[team2_id]}\n              tableStats={tableStats}\n              table={table}\n                //@ts-ignore\n              setSortedId={handleSetActiveParam}\n              pageId={pageId}\n              sortInc={sortInc}\n              activeId={activeId}\n              param={param}\n            />\n          )}\n        </Fragment>\n      </table>\n    </div>\n  ),\n)\n","import { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withHandlers,\n} from 'recompose'\nimport get from 'lodash/get'\n\nimport { clickableClassNameHOC } from 'hocs/getClickableTdClassNameHoc'\n\nimport { TFoot as TFootComponent } from 'features/Table'\n\nconst TfootComposed = compose(\n  inject(\n    'selectedMatches',\n    'matches',\n    'shootsRange',\n    'lexics',\n    'videoLink',\n    'teamTable',\n    'playerTable',\n  ),\n  //@ts-ignore\n  withHandlers({\n    /**\n    * Функция для открытия попап окна с видео повторами\n    * @param {number} param_id - id параметра\n    * @param {string} lexical_formula - название параметра\n    * @param {array} tableStats - массив всех параметров\n    * @param {number} id - id игрока или команды\n    * @param {boolean} forOpp - флаг для фильтрации. Ищем для своей команды или для команд соперника\n    */\n    getExtLink: ({\n      lexics: { lang, page },\n      shootsRange,\n      tableStats,\n      videoLink: { request },\n    }) => (\n      {\n        //@ts-ignore\n        lexical_formula,\n        //@ts-ignore\n        param_id,\n      },\n      //@ts-ignore\n      id,\n      //@ts-ignore\n      forOpp,\n    ) => {\n      //@ts-ignore\n      const checkId = (teamId) => {\n        if (page === 'player') {\n          return true\n        }\n        if (forOpp) {\n          return teamId !== id\n        }\n        return teamId === id\n      }\n\n      // Фильтруем сначала по команде\n      const events = tableStats.filter(\n        //@ts-ignore\n        ({ f_param, f_team }) => (\n          f_param === param_id && checkId(f_team)),\n      )\n      const filteredEvents = events.map(\n        (\n          { f_match_event_ids_json }\n          //@ts-ignore\n          : { f_match_event_ids_json: Array<number | null> },\n        ) => f_match_event_ids_json,\n      )\n        .flat()\n      // удаляем все null из массива эвентов\n        .filter(Boolean)\n\n      if (events.length) {\n        request({\n          events: filteredEvents,\n          lang,\n          lexical_formula,\n          range: shootsRange,\n          type: 'tablesFooter',\n        })\n      }\n    },\n    /**\n    * Функция установки выбранного типа итогового значения в таблице\n    * @param {string} type - типа итогового значения\n    */\n    setType: ({\n      lexics: { page },\n      playerTable,\n      teamTable,\n    }) => (type: string, position: number) => {\n      if (page === 'team') {\n        return teamTable.changeValueType(type, position)\n      }\n      return playerTable.changeValueType(type, position)\n    },\n    /**\n    * Функция фильтрации статистики по всем матчам только по выбранным матчам.\n    И для команды соперника или нашей\n    * @param {string} page - игрок или команда\n    * @param {string} pageId - id игрока/команды\n    * @param {array} tableStats - массив параметров\n    */\n    getActualMatchesList: ({\n      lexics: { page },\n      selectedMatches,\n      tableStats,\n    }) => ({\n      forOpps,\n      pageId,\n    }: {\n      pageId: string,\n      forOpps: boolean,\n    }) => {\n      const selectedMatchesList: Array<number> = get(selectedMatches, `${page}.${pageId}`, [])\n      // Для команды соперника\n      if (forOpps) {\n        //@ts-ignore\n        return tableStats.filter(({ f_match, f_team }) => (\n          f_team !== +pageId && selectedMatchesList.includes(f_match)))\n      }\n      // для страницы игрока возвращем просто весь массив со значением параметров\n      // (нам нужны все для среднего значения)\n      if (page === 'player') {\n        //@ts-ignore\n\n        return tableStats.filter(({ f_match }) => (\n          selectedMatchesList.includes(f_match)))\n      }\n      // Для текущей команды\n      //@ts-ignore\n      return tableStats.filter(({ f_match, f_team }) => (\n        f_team === +pageId && selectedMatchesList.includes(f_match)))\n    },\n  }),\n  clickableClassNameHOC,\n  observer,\n)\n\nexport const TFoot = TfootComposed(TFootComponent)\n","import { observer, inject } from 'mobx-react'\n\nimport get from 'lodash/get'\nimport find from 'lodash/find'\n\nimport {\n  compose,\n  withProps,\n} from 'recompose'\n\nimport getMatchLinksHoc from 'hocs/getMatchLinksHoc'\nimport { clickableClassNameHOC } from 'hocs/getClickableTdClassNameHoc'\n\nimport {\n  TWithPropsInner,\n  TWithPropsOuter,\n} from './types'\n\nexport const trComposed = compose(\n  inject(\n    'videoLink',\n    'lexics',\n    'shootsRange',\n    'matchLinks',\n    'matches',\n  ),\n  getMatchLinksHoc,\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(({\n    lexics: { page },\n    matches: { list },\n    pageId,\n    rowInfo: { f_match },\n  }) => {\n    const matchesList = get(list, [pageId, 'matches'], [])\n\n    return {\n      rowInfo: find(matchesList, { f_match }),\n      tableType: page === 'team' ? 'teamMatches' : 'playerMatches',\n    }\n  }),\n  clickableClassNameHOC,\n  observer,\n)\n","import * as React from 'react'\nimport { PlayButton, MatchName, TableUI } from 'react-sport'\n// @ts-ignore\nimport { MatchPopup } from 'features/Table'\nimport { leftSideTrComposed } from './composed'\n\ntype TProps = {\n  showOpponent?: boolean,\n  tdClassName: string,\n  rowspan: string,\n  match: {\n    has_video: boolean,\n    home_match: string,\n    f_match: number,\n  },\n  //@ts-ignore\n  handleClick: (value: SyntheticEvent<HTMLButtonElement>) => void,\n  titleScore: string,\n  titleClassName: string,\n  matchDate: string,\n  shortNameOpponent: string,\n  ownerTeamName: string,\n  oppTeamName: string,\n  matchPopupOpened: boolean,\n  isFetching: boolean,\n  links: {},\n  toggleClose: () => {},\n}\n\n// @ts-ignore\nexport const LeftSideTr = leftSideTrComposed(\n  //@ts-ignore\n  ({\n    handleClick,\n    isFetching,\n    links,\n    match: { f_match, has_video, home_match },\n    matchDate,\n    matchPopupOpened,\n    oppTeamName,\n    ownerTeamName,\n    rowspan,\n    shortNameOpponent,\n    showOpponent,\n    tdClassName,\n    titleClassName,\n    titleScore,\n    toggleClose,\n  }: TProps) => (\n    //@ts-ignore\n    <TableUI.LeftSideTrWrapper rowSpan={rowspan}>\n      {matchPopupOpened && (\n      //@ts-ignore\n        <MatchPopup\n          isFetching={isFetching}\n          links={links}\n          f_match={f_match}\n          toggleClose={toggleClose}\n        />\n      )}\n      <TableUI.PlayButtonWrapper>\n        {/*\n        //@ts-ignore */}\n        {has_video && <PlayButton handleClick={handleClick} />}\n      </TableUI.PlayButtonWrapper>\n\n      <TableUI.MatchDate>{matchDate}</TableUI.MatchDate>\n      {/*\n        //@ts-ignore */}\n      <TableUI.MatchNameWrapper home_match={home_match}>\n        {/*\n        //@ts-ignore */}\n        <TableUI.MatchSide className={tdClassName}>\n          {home_match}\n        </TableUI.MatchSide>\n        {/*\n        //@ts-ignore */}\n        <MatchName handleClick={handleClick} teamName={shortNameOpponent} />\n      </TableUI.MatchNameWrapper>\n      {/*\n        //@ts-ignore */}\n      <TableUI.MatchScoreWrapper className={titleClassName}>\n        {titleScore}\n      </TableUI.MatchScoreWrapper>\n\n      {showOpponent && (\n        <TableUI.MatchScoreForOppWrapper>\n          <TableUI.MatchAbbrName side='home'>\n            {ownerTeamName}\n          </TableUI.MatchAbbrName>\n          <TableUI.MatchAbbrName side='opp'>\n            {oppTeamName}\n          </TableUI.MatchAbbrName>\n        </TableUI.MatchScoreForOppWrapper>\n      )}\n    </TableUI.LeftSideTrWrapper>\n  ),\n)\n","import { observer, inject } from 'mobx-react'\n\nimport {\n  dateWithYear,\n  getSuffix,\n  getAbbr,\n  //@ts-ignore\n} from 'module/utils/helpers'\n\nimport { compose, withProps } from 'recompose'\nimport get from 'lodash/get'\n\nexport const leftSideTrComposed = compose(\n  inject('lexics'),\n  observer,\n  //@ts-ignore\n  withProps(\n    //@ts-ignore\n    ({\n      handleClick,\n      lexics: { lang },\n      pageId,\n      rowInfo: {\n        f_match,\n        home_match,\n        match_date,\n        opponent_score,\n        score,\n        ...rowInfo\n      },\n      showOpponentStats,\n    }) => {\n      const suffix = getSuffix(lang)\n      const oppTeamName = get(rowInfo, `name_opponent_${suffix}`)\n      const teamName = get(rowInfo, `name_${suffix}`)\n\n      return {\n        tdClassName: home_match === '@' ? 'opponent' : '',\n        rowspan: '',\n        handleClick: handleClick(f_match, pageId),\n        titleClassName: 'match-score',\n        showOpponent: showOpponentStats,\n        ownerTeamName: getAbbr(teamName),\n        oppTeamName: getAbbr(oppTeamName),\n        titleScore: `${score}:${opponent_score}`,\n        shortNameOpponent: oppTeamName,\n        matchDate: dateWithYear(match_date),\n        match: {\n          has_video: false,\n          home_match,\n          f_match,\n        },\n      }\n    },\n  ),\n)\n","import React from 'react'\n\nimport map from 'lodash/map'\n\nimport { Td } from 'features/Table/components/Td'\n\nimport { TPropsTr } from './types'\n\nimport { trComposed } from './composed'\nimport { LeftSideTr } from '../LeftSideTr'\n\n// Строка со статистикой по матчу\nexport const Tr = trComposed(\n  //@ts-ignore\n  ({\n    activeId,\n    getClassName,\n    getPost,\n    matchLinks: { isFetching, links },\n    matchPopupOpened,\n    pageId,\n    rowInfo,\n    rowInfo: { f_team_opponent },\n    selectedParams,\n    showOpponentStats,\n    tableStats,\n    tableType,\n    toggleClose,\n  }: TPropsTr) => (\n    <tr className='stats-table__table-row'>\n      {/*\n      //@ts-ignore */}\n      <LeftSideTr\n        showOpponentStats={showOpponentStats}\n        rowInfo={rowInfo}\n        pageId={pageId}\n        handleClick={getPost}\n        matchPopupOpened={matchPopupOpened}\n        isFetching={isFetching}\n        links={links}\n        toggleClose={toggleClose}\n      />\n      {map(selectedParams, param => (\n        <td\n          key={`${param.param_id}_${param.gear_group_id}`}\n          className={getClassName(param, activeId)}\n        >\n          <table>\n            <tbody>\n              <tr>\n                <Td\n                  id={Number(pageId)}\n                  param={param}\n                  tableStats={tableStats}\n                  rowInfo={rowInfo}\n                  tableType={tableType}\n                />\n              </tr>\n            </tbody>\n          </table>\n          {showOpponentStats && (\n            <table>\n              <tbody>\n                <tr>\n                  <Td\n                    id={f_team_opponent}\n                    param={param}\n                    tableStats={tableStats}\n                    rowInfo={rowInfo}\n                    tableType={tableType}\n                  />\n                </tr>\n              </tbody>\n            </table>\n          )}\n        </td>\n      ))}\n    </tr>\n  ),\n)\n","import React, { Fragment } from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers } from 'recompose'\nimport get from 'lodash/get'\nimport filter from 'lodash/filter'\nimport map from 'lodash/map'\n\nimport { TableUI } from 'react-sport'\n\nimport { getStatValue } from 'module/utils/helpers/getStatValue'\nimport { emptyStatToZero } from 'module/utils/helpers/emptyStatToZero'\n\nimport { THead, TBody } from 'features/Table'\n\n\nimport { TFoot } from './HOCs/TFootHOC'\nimport { Tr } from './Tr'\n\nimport {\n  TProps,\n  TPropsOuter,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n} from './types'\n\nexport const CommonTableComponent = ({\n  activeId,\n  currentStore,\n  getMatchesList,\n  lexics: { page },\n  pageId,\n  param,\n  setSortedId,\n  sortInc,\n  table,\n}: TProps) => (\n  <div className='stats-table__wrapper'>\n    <table className='stats-table__table'>\n      <TableUI.Thead>\n        {/*\n        //@ts-ignore */}\n        <THead table={table} setSortedId={setSortedId} />\n      </TableUI.Thead>\n      {/* Тут пока используем в т.ч. isFetching, т.к. не все сторы переписаны на один стиль */}\n      {currentStore.isLoaded || !currentStore.isFetching ? (\n        <Fragment>\n          {/*\n          //@ts-ignore */}\n          <TBody\n            selectedParams={table.selectedParams}\n            rows={getMatchesList(pageId, param)}\n            pageId={pageId}\n            tableStats={currentStore.tableStats}\n            sortInc={sortInc}\n            activeId={activeId}\n            showOpponentStats={currentStore.showOpponentStats}\n            Tr={Tr}\n          />\n          {/*\n          //@ts-ignore */}\n          <TFoot\n            table={table}\n            tableStats={currentStore.tableStats}\n            pageId={pageId}\n            page={page}\n            activeId={activeId}\n            showOpponentStats={currentStore.showOpponentStats}\n          />\n        </Fragment>\n      ) : (\n        <tbody className='loader-wrapper' />\n      )}\n    </table>\n  </div>\n)\n\nconst CommonTableComposed = compose<TProps, TPropsOuter>(\n  inject('lexics', 'selectedMatches'),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    getMatchesList: ({\n      currentStore: { tableStats },\n      lexics: { page },\n      selectedMatches,\n    }) => (pageId, param) => {\n      const selectedMatchesList = get(selectedMatches, `${page}.${pageId}`, [])\n      const tableStatsFiltered = (match: number) => (\n        filter(\n          tableStats,\n          ({\n            f_match,\n            f_param,\n            f_player,\n            f_team,\n          }) => {\n            const pageType = page === 'player' ? f_player : f_team\n            return (\n              f_match === match\n            && pageType === +pageId\n            && f_param === param.param_id\n            )\n          },\n        )\n      )\n\n      return map(selectedMatchesList, (match) => {\n        const sortedValue = getStatValue(param, tableStatsFiltered(match))\n        return {\n          f_match: match,\n          param,\n          sortBy: emptyStatToZero(sortedValue),\n        }\n      })\n    },\n  }),\n  observer,\n)\n\nexport const CommonTable = CommonTableComposed(CommonTableComponent)\n","import React from 'react'\nimport {\n  compose,\n  withHandlers,\n} from 'recompose'\n\nimport { TournamentTable } from 'features/TournamentPageMatchesTable'\nimport { TournamentPlayers } from 'features/TournamentPagePlayersTable'\nimport { TableMatchWrapper } from 'features/MatchProfileTable'\nimport { CommonTable } from 'features/CommonTable'\n\nimport {\n  TPropsInner,\n  TPropsOuter,\n  TWithHandlersInner,\n  TTables,\n} from './types'\n\nconst TableContentComponent = ({\n  getTable,\n  tableType,\n}: TPropsInner) => getTable(tableType) || null\n\nconst tableContentComposed = compose<TPropsInner, TPropsOuter>(\n  withHandlers<TPropsOuter, TWithHandlersInner>({\n    getTable: ({ ...props }) => (tableType) => {\n      const tables: TTables = {\n        //@ts-ignore\n        matchPlayersTable: <TableMatchWrapper {...props} />,\n        playerMatches: <CommonTable {...props} />,\n        teamMatches: <CommonTable {...props} />,\n        tournamentMatches: <TournamentTable {...props} />,\n        tournamentPlayers: <TournamentPlayers {...props} />,\n      }\n\n      if (!tableType) return null\n\n      return tables[tableType]\n    },\n  }),\n)\n\nexport const TableContent = tableContentComposed(TableContentComponent)\n","\nimport React, { Fragment } from 'react'\n\nimport { compose, withHandlers } from 'recompose'\n\nimport { TableHeaderSettingsButton, T9n } from 'react-sport'\n\n// @ts-ignore\nimport { tableHeaderButtons } from 'module/utils/helpers'\n\ntype TProps = {\n  handleNewPopupAction: () => void,\n  handlePopupAction: () => void,\n  deleteTable: () => void,\n  moveTableUp: () => void,\n  moveTableDown: () => void,\n  resetTable: () => void,\n  currentStore: {\n    tables: {},\n  },\n  table: {},\n}\n\nconst TableActionsComponent = ({\n  currentStore,\n  deleteTable,\n  handleNewPopupAction,\n  handlePopupAction,\n  moveTableDown,\n  moveTableUp,\n  resetTable,\n}: TProps) => (\n  <Fragment>\n    {tableHeaderButtons(\n      handleNewPopupAction,\n      deleteTable,\n      moveTableUp,\n      moveTableDown,\n      resetTable,\n      currentStore.tables,\n    ).map(({ action, buttonType, t }) => (\n      <TableHeaderSettingsButton\n        onClick={action}\n        buttonType={buttonType}\n        key={t}\n      >\n        <T9n t={t} />\n      </TableHeaderSettingsButton>\n    ))}\n    <a className='stats-table__action-link' onClick={handlePopupAction}>\n      <i className='icon-settings' />\n    </a>\n  </Fragment>\n)\n\nconst TableActionsComposed = compose(\n  //@ts-ignore\n  withHandlers({\n    // Функция удаления таблицы\n    deleteTable: ({\n      currentStore: { deleteTable, storeName },\n      table: { position },\n    }) => () => deleteTable(position, storeName),\n\n    // Поднятие таблицы в списке\n    moveTableUp: ({\n      currentStore: { moveTable, storeName },\n      table: { position },\n    }) => () => moveTable(position, 'up', storeName),\n\n    // Спуск таблицы вниз по списку\n    moveTableDown: ({\n      currentStore: { moveTable, storeName },\n      table: { position },\n    }) => () => moveTable(position, 'down', storeName),\n\n    // Функция возврата таблице значений по-умолчанию\n    resetTable: ({ currentStore: { resetTable, storeName } }) => () =>\n      resetTable(storeName),\n  }),\n)\n\n// @ts-ignore\nexport const TableActions = TableActionsComposed(TableActionsComponent)\n","import React from 'react'\n\nimport { DownloadLinksComponent } from 'react-sport'\n\nimport { GearPopup } from 'features/GearPopup'\nimport { TableHeader } from 'features/TableHeader/components/'\nimport { EditTableName } from 'features/TableName/components/EditTableName'\n\nimport { tableComposed } from './composed'\nimport { TableContent } from '../TableContent'\nimport { TableActions } from '../TableActions'\n\nimport 'features/Table/styles/StatsTable.scss'\nimport 'features/Table/styles/TablePopup.scss'\n\nimport { TPropsInner } from './types'\n\n// Таблица со статистикой по выбранным матчам\nconst TableComponent = ({\n  activeId,\n  currentStore,\n  getClassName,\n  getLinks,\n  handleCheckTeam, // объект таблицы\n  handleNewPopupAction,\n  handlePopupAction,\n  newPopupOpened,\n  pageId,\n  param,\n  popupOpened,\n  saveReport,\n  setSortedId,\n  sortInc,\n  table,\n  tableType,\n  teams,\n}: TPropsInner) => (\n  <div className='stats-table'>\n    <div className='stats-table__header'>\n      <div className='stats-table__header-left'>\n        <TableHeader\n          table={table}\n            //@ts-ignore\n          tableType={tableType}\n          currentStore={currentStore}\n          getClassName={getClassName}\n          teams={teams}\n          handleCheckTeam={handleCheckTeam}\n        />\n      </div>\n      <div className='stats-table__name'>\n        <EditTableName table={table} currentStore={currentStore} />\n      </div>\n      <div className='stats-table__actions'>\n        {/*\n          //@ts-ignore */}\n        <DownloadLinksComponent links={getLinks()} reportHandle={saveReport} />\n        {/*\n          //@ts-ignore */}\n        <TableActions\n          currentStore={currentStore}\n          handleNewPopupAction={handleNewPopupAction}\n          handlePopupAction={handlePopupAction}\n          table={table}\n        />\n      </div>\n    </div>\n    <TableContent\n      activeId={activeId}\n      currentStore={currentStore}\n      pageId={pageId}\n      param={param}\n      setSortedId={setSortedId}\n      sortInc={sortInc}\n      table={table}\n        //@ts-ignore\n      tableType={tableType}\n      teams={teams}\n    />\n    {(popupOpened || newPopupOpened) && (\n      <GearPopup\n        table={table}\n        handlePopupAction={handlePopupAction}\n        handleNewPopupAction={handleNewPopupAction}\n        popupOpened={popupOpened}\n        newPopupOpened={newPopupOpened}\n        currentStore={currentStore}\n        newPopup={newPopupOpened}\n      />\n    )}\n  </div>\n)\n\nexport const Table = tableComposed(TableComponent)\n","import React, { Fragment } from 'react'\n\nimport map from 'lodash/map'\n\nimport { Table } from './Table'\nimport { TParam } from '../models/tableModel'\n\ntype TProps = {\n  pageId: string,\n  tableType?: string,\n  tables: {\n    [key: number]: {\n      position: number,\n      selectedParams: Array<TParam>,\n    },\n  },\n}\n\nexport const Tables = ({\n  pageId,\n  tables,\n  tableType,\n}: TProps) => (\n  <Fragment>\n    {map(\n      tables,\n      table => (\n        <Table\n          tableType={tableType}\n          key={table.position}\n          pageId={pageId}\n          table={table}\n        />\n      ),\n    )}\n  </Fragment>\n)\n","\nimport { types, flow } from 'mobx-state-tree'\n\nimport get from 'lodash/get'\nimport reduce from 'lodash/reduce'\nimport find from 'lodash/find'\nimport pick from 'lodash/pick'\nimport filter from 'lodash/filter'\n\nimport { callApi } from 'react-sport'\n// @ts-ignore\nimport routes from 'config/routes'\n\ntype TConfig = {\n  method: string,\n  body: string,\n};\n\ntype TFetch = {\n  lang: string,\n  matchId: string,\n  params: Array<number>,\n};\n\nconst url: string = `${routes.API_ROOT}/data`\n\nexport const PlayersCompareApiActions = types.model({}).actions(self => ({\n  // Запрос при первом рендере компонента.\n  basicFetch: flow(function* basicFetch({ lang, matchId, params }: TFetch) {\n    try {\n      // Запрашиваем список всех игроков для обеих команд\n      //@ts-ignore\n      yield self.fetchPlayers(matchId)\n\n      // Предвыбираем по умолчанию первых игроков в каждой команде\n      //@ts-ignore\n      const defaultPlayers = reduce(\n        //@ts-ignore\n        self.playerList,\n        (acc, curr) => {\n          if (!find(acc, { f_team: curr.f_team })) {\n            //@ts-ignore\n            acc.push(curr)\n          }\n          return acc\n        },\n        [],\n      )\n      //@ts-ignore\n      self.updateSelectedPlayers({\n        lang,\n        matchId,\n        players: defaultPlayers,\n      })\n\n      // Запрашиваем данные по выбранным игрокам\n      //@ts-ignore\n      yield self.fetch({\n        lang,\n        matchId,\n        params,\n      })\n\n      // Запрашиваем список всех параметров для шестеренки и групп\n      //@ts-ignore\n      yield self.getGearParamsList(1)\n      // Ставим по умолчанию выбранные параметры (чтобы при открытии шестеренки они были выбраны)\n      //@ts-ignore\n      self.setDefaultSelectedParams()\n    } catch (error) {\n      //@ts-ignore\n      self._onError(error)\n    }\n  }),\n\n  fetch({ lang, matchId, params }: TFetch) {\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'scout_players_all_stat',\n        params: {\n          _p_match_id: +matchId,\n          //@ts-ignore\n          _p_player_arr: Object.values(self.selectedPlayers),\n          _p_param_arr: params,\n          _p_lang_id: Number(lang !== 'ru'),\n        },\n      }),\n    }\n    return callApi({\n      url,\n      config,\n      //@ts-ignore\n      onRequest: self._onRequest,\n      //@ts-ignore\n      onSuccess: self._onSuccess,\n      //@ts-ignore\n      onError: self._onError,\n    })\n  },\n\n  _onRequest() {\n    //@ts-ignore\n    self.stats = []\n    //@ts-ignore\n    self.playersInfo = null\n    //@ts-ignore\n    self.isLoaded = false\n  },\n\n  _onSuccess(json: { data: Array<{}> } = { data: [] }) {\n    const players = get(json.data, '[0].scout_players_all_stat') || []\n    //@ts-ignore\n    self.stats = get(\n      //@ts-ignore\n      find(players, 'params_info', {}),\n      'params_info',\n      [],\n    )\n    //@ts-ignore\n    //@ts-ignore\n    //@ts-ignore\n    self.playersInfo = players.reduce((acc, current) => {\n      acc[current.f_player] = pick(current, [\n        'f_player',\n        'f_team',\n        'params',\n        'photo_player',\n        'photo_team',\n      ])\n      return acc\n    }, {})\n    //@ts-ignore\n    self.error = null\n    //@ts-ignore\n    self.isLoaded = true\n  },\n\n  fetchPlayers(matchId: number | string) {\n    const url: string = `${routes.API_ROOT}/data`\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'ask_players_list_match',\n        params: {\n          _v_match_id: matchId,\n          _v_played: true,\n        },\n      }),\n    }\n    return callApi({\n      url,\n      config,\n      onRequest: () => {},\n      //@ts-ignore\n      onSuccess: self._onSuccessPlayers,\n      //@ts-ignore\n      onError: self._onError,\n    })\n  },\n\n  //@ts-ignore\n  _onSuccessPlayers(json: { data?: Array<any> | null } = []) {\n    //@ts-ignore\n    self.playerList = filter(json.data, 'played')\n  },\n\n  _onError(error: any) {\n    //@ts-ignore\n    self.isLoaded = false\n    //@ts-ignore\n    self.error = error\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\nimport map from 'lodash/map'\nimport size from 'lodash/size'\nimport isEmpty from 'lodash/isEmpty'\nimport compact from 'lodash/compact'\nimport forEach from 'lodash/forEach'\nimport filter from 'lodash/filter'\nimport includes from 'lodash/includes'\n\ntype TUpdateSelectedPlayers = {\n  lang: string,\n  matchId: string,\n  players: Array<{\n    f_team: number,\n    f_player: number,\n  } | null>,\n};\n\ntype TSaveTempParams = {\n  lang: string,\n  matchId: string,\n  params: Array<{}>,\n};\n\nexport const PlayersCompareActions = types.model({}).actions(self => ({\n  // Обновляем список игроков при выборе нового игрока из раскрывающегося списка\n  updateSelectedPlayers({ lang, matchId, players }: TUpdateSelectedPlayers) {\n    if (isEmpty(compact(players))) return null\n    // При инициализации стора у нас нет игроков,\n    // но при изменении пользователем игрока учитываем предыдущее состояние\n    //@ts-ignore\n    const newSelectedPlayers = { ...self.selectedPlayers }\n    // При обновлении одного игрока из команды мы меняем только нужного, второй остается в объекте\n    forEach(\n      players,\n      //@ts-ignore\n      //@ts-ignore\n      ({ f_player, f_team }) => { newSelectedPlayers[f_team] = f_player },\n    )\n    // Заменяем в сторе обновленный список игроков для дальнейшего запроса к API\n    //@ts-ignore\n    self.selectedPlayers = newSelectedPlayers\n    if (size(players) === 1) {\n      //@ts-ignore\n      self.fetch({\n        lang,\n        matchId,\n        //@ts-ignore\n        params: self.getParamsIds,\n      })\n    }\n  },\n\n  // Сохранение временно выбранных параметров (при закрытии шестеренки)\n  saveTempParams({ lang, matchId, params }: TSaveTempParams) {\n    //@ts-ignore\n    self.selectedParams = params\n    //@ts-ignore\n    self.fetch({\n      lang,\n      matchId,\n      //@ts-ignore\n      params: self.getParamsIds,\n    })\n  },\n\n  //Сохраняем все параметры в шестеренке и предвыбираем дефолтные (при первом открытии)\n  setDefaultSelectedParams() {\n    // По умолчанию предвыбираем дефолтные параметры\n    //@ts-ignore\n    const defaultIds = map(self.stats, 'param')\n    //@ts-ignore\n    self.selectedParams = filter(\n      //@ts-ignore\n      self.totalParams,\n      ({ param_id }) => includes(defaultIds, param_id),\n    )\n  },\n}))\n","\nimport { types } from 'mobx-state-tree'\n\nimport sortBy from 'lodash/sortBy'\nimport findIndex from 'lodash/findIndex'\nimport map from 'lodash/map'\n\nexport const PlayersCompareViews = types.model({}).views(self => ({\n  get sortedStats() {\n    //@ts-ignore\n    const ids = self.getParamsIds\n    return sortBy(\n      //@ts-ignore\n      self.stats,\n      ({ param }) => findIndex(ids, o => o === Number(param)),\n    )\n  },\n\n  get getParamsIds(): Array<number> {\n    //@ts-ignore\n    return map(self.selectedParams, 'param_id')\n  },\n}))\n","\nimport { types } from 'mobx-state-tree'\n\n// @ts-ignore\nimport { tableApiActions } from 'features/Table'\n\nimport { PlayersCompareApiActions } from './apiActions'\nimport { PlayersCompareActions } from './actions'\nimport { PlayersCompareViews } from './views'\n\nconst Stat = types.model('Stat', {\n  param: types.number,\n  param_name: types.maybeNull(types.string),\n  param_name_short: types.maybeNull(types.string),\n})\n\nconst GearParam = types.model('SelectedGearParam', {\n  clickable: types.number,\n  f_option_3: types.number,\n  full_lexical_formula: types.string,\n  gear_group_id: types.number,\n  gear_subgroup_id: types.number,\n  is_default: types.maybeNull(types.string),\n  lexical_formula: types.string,\n  name: types.string,\n  param1_id: types.maybeNull(types.array(types.string)),\n  param2_id: types.maybeNull(types.array(types.string)),\n  param_id: types.number,\n  short_lexical_formula: types.string,\n  sort_order: types.number,\n})\n\nexport const PlayersCompare = types.model('PlayersCompareWidget', {\n  stats: types.maybeNull(types.array(Stat)),\n  playersInfo: types.frozen({}),\n  isLoaded: types.boolean,\n  error: types.frozen({}),\n  selectedPlayers: types.frozen({}),\n  selectedParams: types.maybeNull(types.array(GearParam)),\n  tempSelected: types.array(GearParam),\n})\n\nexport const PlayersCompareStore = types.compose(\n  // Общие методы для получения параметров для шестеренки\n  tableApiActions,\n  // Собственные методы\n  PlayersCompare,\n  PlayersCompareApiActions,\n  PlayersCompareActions,\n  PlayersCompareViews,\n)\n","import { PlayersCompareStore } from './PlayersCompareStore'\n\nexport default PlayersCompareStore.create({\n  playersInfo: {},\n  stats: [],\n  isLoaded: false,\n  error: {},\n  selectedPlayers: {},\n  selectedParams: [],\n  tempSelected: [],\n})\n","import { types } from 'mobx-state-tree'\nimport includes from 'lodash/includes'\nimport get from 'lodash/get'\nimport map from 'lodash/map'\nimport sortBy from 'lodash/sortBy'\nimport filter from 'lodash/filter'\nimport reduce from 'lodash/reduce'\n\nimport { toJS } from 'mobx'\nimport { callApi } from 'react-sport'\nimport { percentageParams } from 'config/teamPopupParams'\nimport routes from 'config/routes'\n\ntype TConfig = {\n  method: string,\n  body: string,\n}\n\nconst TeamPlayersApiActions = types.model({}).actions(self => ({\n  // Получение всех параметров для игроков в команде\n  //@ts-ignore\n  fetchParams(id, selectedMatches) {\n    const url: string = `${routes.API_ROOT}/data`\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'ask_gear_params',\n        params: {\n          _v_amplua_id: 0,\n        },\n      }),\n    }\n    callApi({\n      url,\n      config,\n      //@ts-ignore\n      onRequest: () => self._onRequest(),\n      onSuccess: (\n        //@ts-ignore\n        json: { data: Array<{}> },\n        //@ts-ignore\n      ) => self._onSuccessParams(json, id, selectedMatches),\n      //@ts-ignore\n      onError: (error: any) => self._onError(error),\n    })\n  },\n\n  _onRequest() {\n    //@ts-ignore\n    self.isFetching = true\n    //@ts-ignore\n    self.error = null\n  },\n\n  _onSuccessParams(\n    //@ts-ignore\n    json: { data: Array<{}> },\n    //@ts-ignore\n    id,\n    //@ts-ignore\n    selectedMatches,\n  ) {\n    //@ts-ignore\n    self.totalParams = get(json, 'data', [])\n    //@ts-ignore\n    self.error = null\n    //@ts-ignore\n    self.fetchGroups()\n    //@ts-ignore\n    self.fetchPlayers(id, selectedMatches)\n  },\n\n  //@ts-ignore\n  _onError(error: {}) {\n    //@ts-ignore\n    self.isFetching = false\n    //@ts-ignore\n    self.error = error\n  },\n\n  // Получение общего списка игроков\n  //@ts-ignore\n  fetchPlayers(id, selectedMatches) {\n    const url: string = `${routes.API_ROOT}/data`\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'scout_team_players_stat',\n        params: {\n          _p_team_id: id,\n          _p_match_arr: selectedMatches.team[id],\n          //@ts-ignore\n          _p_params_arr: map(self.totalParams, 'param_id'),\n        },\n      }),\n    }\n    callApi({\n      url,\n      config,\n      //@ts-ignore\n      onRequest: () => self._onRequest(),\n      //@ts-ignore\n      onSuccess: (json: { data: Array<{}> }) => self._onSuccessPlayers(json),\n      //@ts-ignore\n      onError: (error: any) => self._onError(error),\n    })\n  },\n  //@ts-ignore\n  _onSuccessPlayers(json: { data: Array<{}> }) {\n    //@ts-ignore\n    self.isFetching = false\n    //@ts-ignore\n    self.players = map(\n      get(json.data, '[0].scout_team_players_stat', []),\n      player => ({\n        ...player,\n        params: get(player, 'params') && map(player.params, param => ({\n          ...param,\n          // для % параметров не используем формулу, не меняем значение\n          // % параметры берем из конфига\n          value: includes(percentageParams, param.param)\n            ? param.value / param.matches_count\n            : param.value,\n          averageValue: param.value / param.matches_count,\n        })),\n      }),\n    )\n    //@ts-ignore\n    self.error = null\n  },\n\n  // Получение списка групп для шестеренки\n  fetchGroups() {\n    const url: string = `${routes.API_ROOT}/data`\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'ask_gear_group_view',\n      }),\n    }\n    callApi({\n      url,\n      config,\n      //@ts-ignore\n      onRequest: () => self._onRequest(),\n      //@ts-ignore\n      onSuccess: (json: { data: Array<any> }) => self._onSuccessGroups(json),\n      //@ts-ignore\n      onError: (error: any) => self._onError(error),\n    })\n  },\n\n  //@ts-ignore\n  _onSuccessGroups(json: { data: Array<any> }) {\n    //@ts-ignore\n    self.paramGroups = get(json, 'data', [])\n    //@ts-ignore\n    self.paramGroupsError = null\n    //@ts-ignore\n    const serializedParams = map(self.totalParams, item => toJS(item))\n    //@ts-ignore\n    self.gearParams = reduce(self.paramGroups, (prev, curr) => {\n      const current = {\n        params: sortBy(\n          filter(\n            serializedParams, ({ gear_group_id }) => gear_group_id === curr.group_id,\n          ), 'sort_order',\n        ),\n        groupName: String(curr.group_lexical_formula),\n      }\n      return [...prev, current]\n    }, [])\n    if (window.localStorage.getItem('teamPlayersTable') === null) {\n      //@ts-ignore\n      self.saveTables()\n    } else {\n      //@ts-ignore\n      self.tables = JSON.parse(window.localStorage.getItem('teamPlayersTable'))\n    }\n  },\n\n  // Получение списка ивентов для игрока\n  fetchEvents(\n    //@ts-ignore\n    lang,\n    //@ts-ignore\n    lexical_formula,\n    //@ts-ignore\n    playerId,\n    //@ts-ignore\n    paramId,\n    //@ts-ignore\n    request,\n    //@ts-ignore\n    selectedMatches,\n    //@ts-ignore\n    shootsRange,\n  ) {\n    const url: string = `${routes.API_ROOT}/data`\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'scout_events_sec_by_param',\n        params: {\n          _p_matches: selectedMatches,\n          _p_param_id: paramId,\n          _p_player_id: playerId,\n        },\n      }),\n    }\n    return callApi({\n      url,\n      config,\n      onRequest: () => { },\n      //@ts-ignore\n      onSuccess: (json: { data: Array<any> }) => (\n        //@ts-ignore\n        self._onSuccessEvents(\n          json,\n          lang,\n          lexical_formula,\n          request,\n          shootsRange,\n          playerId,\n        )\n      ),\n      //@ts-ignore\n      onError: (error: any) => self._onError(error),\n    })\n  },\n\n  _onSuccessEvents(\n    //@ts-ignore\n    json: { data: Array<any> },\n    lang: string,\n    lexical_formula: string,\n    request: (arg: { }) => void,\n    shootsRange: {},\n    playerId: number,\n  ) {\n    //@ts-ignore\n    self.events = map(\n      get(json.data, '[0].scout_events_sec_by_param', []), 'id',\n    )\n    //@ts-ignore\n    if (self.events.length) {\n      request({\n        //@ts-ignore\n        events: self.events,\n        range: shootsRange,\n        lang,\n        lexical_formula,\n        playerInfo: playerId,\n        type: 'teamPlayers',\n      })\n    }\n  },\n}))\n\nexport default TeamPlayersApiActions\n","import { toJS } from 'mobx'\nimport { types } from 'mobx-state-tree'\n\nimport filter from 'lodash/filter'\nimport omit from 'lodash/omit'\nimport get from 'lodash/get'\nimport reduce from 'lodash/reduce'\nimport isEqual from 'lodash/isEqual'\n\nimport { indexLexic } from 'config/lexics'\nimport { saveTablesToLocalStorage } from 'module/utils/helpers'\n\nconst TeamPlayersActions = types.model({}).actions(self => ({\n  // Записываем в стор таблицы после получения параметров\n  saveTables() {\n    //@ts-ignore\n    self.gearParams.forEach(({ groupName, params }, index) => {\n      const position: number = index + 1\n      const table: {\n        position: number,\n        selectedParams: Array<{ is_default: string }>,\n        tableName: string | number,\n      } = {\n        position,\n        //@ts-ignore\n        selectedParams: params.filter(({ is_default }) => is_default === 'default'),\n        tableName: String(groupName),\n        //@ts-ignore\n        summaryType: 'average_for_match',\n        avatarIsVisible: false,\n      }\n      //@ts-ignore\n      if (table.selectedParams.length) {\n        //@ts-ignore\n        self.tables = {\n          //@ts-ignore\n          ...self.tables,\n          [position]: {\n            ...table,\n            sortInc: false,\n            activeId: null,\n          },\n        }\n      }\n      //@ts-ignore\n      saveTablesToLocalStorage({ name: 'teamPlayersTable', tables: self.tables })\n    })\n  },\n  /**\n   * Действия с выбранными в шестеренке параметрами\n   * (добавление, удаление, очищение выбранных параметров, перемещение карточек в правом меню)\n   * @param {string} action - название действия\n   * @param {object} param - параметр, с которым выполняем действие или список параметров\n   */\n  //@ts-ignore\n  editTempSelected(action = null, param) {\n    switch (action) {\n      //@ts-ignore\n      case 'add':\n        //@ts-ignore\n        self.tempSelected = [...self.tempSelected, toJS(param)]\n        break\n      //@ts-ignore\n      case 'delete':\n        //@ts-ignore\n        self.tempSelected = filter(\n          //@ts-ignore\n          self.tempSelected,\n          item => !isEqual(param, item),\n        )\n        break\n      //@ts-ignore\n      case 'erase':\n        //@ts-ignore\n        self.tempSelected = []\n        break\n      default:\n        //@ts-ignore\n        self.tempSelected = param.map(param => toJS(param))\n        break\n    }\n  },\n  /**\n   * Выбранные параметры (чекбоксы) сохраняем в стор\n   * @param {number} position - порядковый номер таблицы\n   */\n  saveTempParams({\n    localStorageName = 'teamPlayersTable',\n    position,\n    selectedParams,\n  }: {\n    localStorageName: string,\n    position: number,\n    selectedParams: Array<{}>,\n  }) {\n    //@ts-ignore\n    self.tables = {\n      //@ts-ignore\n      ...self.tables,\n      [position]: {\n        //@ts-ignore\n        ...self.tables[position],\n        selectedParams,\n      },\n    }\n    // Сохраняем выбранные параметры в localStorage\n    //@ts-ignore\n    saveTablesToLocalStorage({ name: localStorageName, tables: self.tables })\n    // Очищаем временно выбранные параметры из popup\n    //@ts-ignore\n    self.editTempSelected('erase')\n  },\n  /**\n   * Добавляем новую таблицу\n   * @param {string | number} name - название таблицы\n   */\n  addTable(\n    name: string | number,\n    localStorageName: string = 'teamPlayersTable',\n    selectedParams: Array<{}>,\n  ) {\n    //@ts-ignore\n    const position: number = Object.keys(self.tables).length + 1\n    //@ts-ignore\n    self.tables = {\n      //@ts-ignore\n      ...self.tables,\n      [position]: {\n        position,\n        selectedParams,\n        tableName: name,\n        summaryType: 'average_for_match',\n        avatarIsVisible: false,\n      },\n    }\n    // Сохраняем таблицы в localStorage\n    //@ts-ignore\n    saveTablesToLocalStorage({ name: localStorageName, tables: self.tables })\n  },\n\n  /** удаления таблицы\n* @param {number} position - порядковый номер таблицы\n*/\n  deleteTable(position: number) {\n    //@ts-ignore\n    const tablesList: Array<any> = Object.keys(self.tables)\n    // Удаляем текущую таблицу\n    //@ts-ignore\n    const omitedTables = omit(self.tables, position)\n    // Перезаписываем все таблицы, позиция которых после удаленной. Передвигаем весь список\n    const updatedTables = reduce(omitedTables, (acc, curr, key) => {\n      //@ts-ignore\n      if (key > position) {\n        //@ts-ignore\n        acc[key - 1] = {\n          //@ts-ignore\n          ...self.tables[key],\n          //@ts-ignore\n          position: key - 1,\n        }\n      }\n      //@ts-ignore\n      acc[key] = self.tables[key]\n      return acc\n    }, {})\n    //@ts-ignore\n    self.tables = omit(updatedTables, tablesList.length)\n    // Удаляем и из localStorage\n    //@ts-ignore\n    saveTablesToLocalStorage({ name: 'teamPlayersTable', tables: self.tables })\n  },\n\n  /** Редактирование таблицы\n* @param {number} position - порядковый номер таблицы\n* @param {string | number} name - новое название таблицы\n*/\n  editTable(position: number, name: string | number) {\n    //@ts-ignore\n    self.tables = {\n      //@ts-ignore\n      ...self.tables,\n      [position]: {\n        //@ts-ignore\n        ...self.tables[position],\n        tableName: name,\n      },\n    }\n    //@ts-ignore\n    saveTablesToLocalStorage({ name: 'teamPlayersTable', tables: self.tables })\n  },\n\n  /** Сброс всех таблиц по-умолчанию*/\n  resetTable() {\n    // Сначала удаляем таблицы уже сформированные\n    window.localStorage.removeItem('teamPlayersTable')\n    //@ts-ignore\n    self.tables = {}\n    //@ts-ignore\n    self.saveTables()\n  },\n\n  /** Перемещение таблицы вверх/вниз\n  * @param {number} position - порядковый номер таблицы\n  * @param {string} type - тип перемещения (вверх или вниз)\n  */\n  moveTable(position: number, type: string) {\n    //@ts-ignore\n    const tableCount: number = Object.keys(self.tables).length\n    //@ts-ignore\n    const current: {} = self.tables[position]\n    //@ts-ignore\n    const prev: {} = self.tables[position - 1]\n    //@ts-ignore\n    const next: {} = self.tables[position + 1]\n    if (type === 'up') {\n      //@ts-ignore\n      self.tables = {\n        //@ts-ignore\n        ...self.tables,\n        [position - 1]: {\n          ...current,\n          position: position - 1,\n        },\n        [position]: {\n          ...prev,\n          position,\n        },\n      }\n    }\n    if (type === 'down') {\n      // Если мы опускаем последнюю таблицу вниз, то ничего не происходит\n      if (position === tableCount) return null\n      //@ts-ignore\n      self.tables = {\n        //@ts-ignore\n        ...self.tables,\n        [position]: {\n          ...next,\n          position,\n        },\n        [position + 1]: {\n          ...current,\n          position: position + 1,\n        },\n      }\n    }\n    //@ts-ignore\n    saveTablesToLocalStorage({ name: 'teamPlayersTable', tables: self.tables })\n  },\n\n  /** Редактирование названия таблицы\n  * @param {string | number} name - название таблицы\n  * @param {bool} erase - возврат к значению по-умолчанию\n  */\n  editTempTableName(name: string | number, erase: boolean = false) {\n    if (erase) {\n      //@ts-ignore\n      self.tempTableName = indexLexic.new_table\n    } else {\n      //@ts-ignore\n      self.tempTableName = name\n    }\n  },\n\n  /** Меняем стиль отображения ячеек (итоговое по всем матчам или среднее значение)\n  * @param {string} type - тип отображения\n  */\n  changeValueType(type: string, position: number) {\n    // Если тип не меняется, то не используем формулу\n    //@ts-ignore\n    if (get(self.tables, `${position}.summaryType`) === type) return null\n    //@ts-ignore\n    self.tables = {\n      //@ts-ignore\n      ...self.tables,\n      [position]: {\n        //@ts-ignore\n        ...self.tables[position],\n        summaryType: type,\n      },\n    }\n  },\n  showAvatarToggle(position: number) {\n    //@ts-ignore\n    self.tables = {\n      //@ts-ignore\n      ...self.tables,\n      [position]: {\n        //@ts-ignore\n        ...self.tables[position],\n        //@ts-ignore\n        avatarIsVisible: !self.tables[position].avatarIsVisible,\n      },\n    }\n  },\n  //@ts-ignore\n  setActiveParam(table, param) {\n    const { position } = table\n    //@ts-ignore\n    self.tables = {\n      //@ts-ignore\n      ...self.tables,\n      [position]: {\n        ...table,\n        //@ts-ignore\n        sortInc: !get(self.tables, [position, 'sortInc']),\n        activeId: param.param_id,\n      },\n    }\n  },\n}))\n\nexport default TeamPlayersActions\n","\nimport { types } from 'mobx-state-tree'\nimport TeamPlayersApiActions from './TeamPlayersApiActions'\nimport TeamPlayersActions from './TeamPlayersActions'\n\n// Модель параметра для игрока\nconst PlayerParam = types.model('PlayerParam', {\n  data_type: types.string,\n  f_match_event_ids: types.maybeNull(types.number),\n  matches_count: types.maybeNull(types.number),\n  option: types.number,\n  param: types.number,\n  value: types.number,\n  averageValue: types.number,\n})\n\n// Модель параметра(шестеренка)\nconst Param = types.model('Param', {\n  clickable: types.number,\n  f_option_3: types.number,\n  full_lexical_formula: types.string,\n  gear_group_id: types.number,\n  gear_subgroup_id: types.number,\n  is_default: types.maybeNull(types.string),\n  lexical_formula: types.string,\n  name: types.string,\n  param1_id: types.maybeNull(types.array(types.string)),\n  param2_id: types.maybeNull(types.array(types.string)),\n  param_id: types.identifierNumber,\n  short_lexical_formula: types.string,\n  sort_order: types.number,\n})\n\n// Модель параметров, разбитых на логические группы (основные, подачи и тд)\nconst GearParam = types.model('GearParam', {\n  groupName: types.maybeNull(types.string),\n  params: types.array(Param),\n})\n\n//Модель игрока\nconst Player = types.model('Player', {\n  f_player: types.number,\n  matches_count: types.number,\n  nickname_eng: types.maybeNull(types.string),\n  nickname_rus: types.maybeNull(types.string),\n  params: types.maybeNull(types.array(PlayerParam)),\n  shirt_num: types.string,\n  short_name_eng: types.string,\n  short_name_rus: types.string,\n})\n\n// Модель группы с названием\nconst ParamGroup = types.model('ParamGroup', {\n  group_id: types.number,\n  group_lexical_formula: types.number,\n  group_name: types.string,\n})\n\nexport const TeamPlayers = types.model('TeamPlayers', {\n  totalParams: types.array(Param),\n  gearParams: types.array(GearParam),\n  tables: types.frozen({\n    position: types.number,\n    selectedParams: types.array(Param),\n    tableName: types.string,\n    summaryType: types.string,\n    avatarIsVisible: types.boolean,\n  }),\n  tempSelected: types.array(Param),\n  players: types.array(Player),\n  tempTableName: types.union(types.string, types.number, types.undefined),\n  isFetching: types.boolean,\n  error: types.frozen({}),\n  paramGroups: types.array(ParamGroup),\n  events: types.array(types.number),\n})\n\nconst TeamPlayersStore = types.compose(\n  TeamPlayers,\n  TeamPlayersActions,\n  TeamPlayersApiActions,\n)\n\nexport default TeamPlayersStore\n","// @ts-ignore\nimport { indexLexic } from 'config/lexics'\n\nimport TeamPlayersStore from './TeamPlayersStore'\n\n// @ts-ignore\nexport default TeamPlayersStore.create({\n  gearParams: [],\n  totalParams: [],\n  tables: {},\n  tempSelected: [],\n  players: [],\n  tempTableName: indexLexic.new_table,\n  isFetching: false,\n  error: {},\n  events: [],\n})\n","import { types } from 'mobx-state-tree'\nimport isEqual from 'lodash/isEqual'\nimport isEmpty from 'lodash/isEmpty'\nimport reduce from 'lodash/reduce'\nimport uniq from 'lodash/uniq'\n\nimport stores from 'features/stores'\n\nconst SelectedMatchesActions = types.model({}).actions(self => ({\n  // запись выбранных матчей в стор\n  //@ts-ignore\n  setSelected(selected: Array<number>, pageId: string) {\n    //@ts-ignore\n    const { page } = stores.lexics\n    //@ts-ignore\n    self[page] = {\n      [pageId]: selected,\n    }\n  },\n\n  // запись выбранных матчей как временно выбранные (пока меню не закрыто)\n  setTempSelected(selected: Array<number>) {\n    //@ts-ignore\n    self.tempSelected = selected\n  },\n\n  // указываем выбранный период (за последний год, за последний сезон)\n  //@ts-ignore\n  setPeriod(period?: (string | number)) {\n    //@ts-ignore\n    self.selectedPeriod = period\n  },\n\n  // действия при открытии/закрытии меню\n  //@ts-ignore\n  setOpened(pageId) {\n    //@ts-ignore\n    const { page } = stores.lexics\n    //@ts-ignore\n    self.toggleSelect(!self.opened)\n\n    //@ts-ignore\n    if (self.opened) {\n      // При открытии раскрывающегося меню с матчами сразу записываем выбранные\n      //@ts-ignore\n      self.setTempSelected(self[page][pageId])\n    } else {\n      // При закрытии меню делаем запросы к API для получения статистики по выбранным матчам\n      // и сохраняем выбранные матчи\n      //@ts-ignore\n      self.onCloseActions(page, pageId)\n      //@ts-ignore\n      self.setSelected([...self.tempSelected], pageId)\n    }\n  },\n  //@ts-ignore\n  toggleSelect(select) {\n    //@ts-ignore\n    self.opened = select\n  },\n\n  onCloseActions(page: string, pageId: string) {\n    // Проверка, обновился ли список выбранных матчей.\n    const matchesListDidUpdate = (page: {}) => (\n      //@ts-ignore\n      !isEqual(self.tempSelected, page[pageId])\n    )\n    //@ts-ignore\n    const { profile } = stores.playerProfile\n    //@ts-ignore\n    const { player, team } = stores.selectedMatches\n    const isPlayerPage = page === 'player'\n    //@ts-ignore\n    const { fetch: fetchMarkers } = stores.markers\n    //@ts-ignore\n    if (isEmpty(self.tempSelected)) return self.eraseAllData(isPlayerPage)\n\n    if (isPlayerPage && matchesListDidUpdate(player)) {\n      //@ts-ignore\n      const { fetch: fetchHeaderStats } = stores.playerStats\n      //@ts-ignore\n      const { fetchTableStats } = stores.playerTable\n      // Запрашиваем новую статистику для таблиц с матчами\n      //@ts-ignore\n      fetchTableStats(self.tempSelected, pageId)\n      // Запрашиваем новую статистику для шапки\n      //@ts-ignore\n      fetchHeaderStats(pageId, self.tempSelected, profile.amplua.id)\n      // Запрашиваем новые маркеры\n      //@ts-ignore\n      fetchMarkers(pageId, self.tempSelected)\n    }\n\n    if (!isPlayerPage && matchesListDidUpdate(team)) {\n      //@ts-ignore\n      const { fetch: fetchHeaderStats } = stores.teamStats\n      //@ts-ignore\n      const { list } = stores.matches\n      //@ts-ignore\n      const { fetchTableStats } = stores.teamTable\n      //@ts-ignore\n      const { fetchParams } = stores.teamPlayers\n      const teamIds = reduce(list[pageId].matches,\n        (ids, { f_match, f_team_opponent }) => {\n          //@ts-ignore\n          if (self.tempSelected.includes(f_match)) {\n            //@ts-ignore\n            ids.push(f_team_opponent)\n          }\n          // Добавляем айди текущей команды в массив\n          //@ts-ignore\n          ids.push(+pageId)\n          return uniq(ids)\n        }, [])\n\n      // Запрашиваем новую статистику для шапки\n      //@ts-ignore\n      fetchHeaderStats(pageId, self.tempSelected)\n      // Запрашиваем новую статистику для таблиц с матчами\n      //@ts-ignore\n      fetchTableStats(self.tempSelected, teamIds)\n      // Запрашиваем новый список игроков\n      //@ts-ignore\n      fetchParams(+pageId, stores.selectedMatches)\n      // Запрашиваем новые маркеры\n      //@ts-ignore\n      fetchMarkers(pageId, self.tempSelected)\n    }\n  },\n\n  // Если выбрали 0 матчей, полостью очищам всю статистику и маркеры\n  eraseAllData(isPlayerPage: boolean) {\n    const { eraseHeaderStats } = isPlayerPage\n      //@ts-ignore\n      ? stores.playerStats\n      //@ts-ignore\n      : stores.teamStats\n    eraseHeaderStats()\n    //@ts-ignore\n    stores.markers.deleteMarkers()\n  },\n}))\n\nexport default SelectedMatchesActions\n","\nimport { types } from 'mobx-state-tree'\nimport SelectedMatchesActions from './SelectedMatchesActions'\n\nexport const SelectedMatches = types.model('SelectedMatches', {\n  opened: types.boolean,\n  pageId: types.string,\n  player: types.frozen({}),\n  team: types.frozen({}),\n  tempSelected: types.array(types.number),\n  selectedPeriod: types.maybeNull(types.union(types.string, types.number)),\n})\n\nconst SelectedMatchesStore = types.compose(\n  SelectedMatches,\n  SelectedMatchesActions,\n)\n\nexport default SelectedMatchesStore\n","import SelectedMatchesStore from './SelectedMatchesStore'\n\nexport default SelectedMatchesStore.create({\n  opened: false,\n  pageId: '',\n  player: {},\n  team: {},\n  tempSelected: [],\n  selectedPeriod: null,\n})\n","import { types } from 'mobx-state-tree'\n// @ts-ignore\nimport routes from 'config/routes'\n\ntype TOptions = {\n  lang_id: string,\n  team: number,\n  matches: Array<any>,\n  tables: {},\n};\n\nconst TableReportsApiActions = types.model({}).actions(self => ({\n  //@ts-ignore\n  //@ts-ignore\n  //@ts-ignore\n  fetchData(e, key, options) {\n    const url: string = `${routes.API_ROOT}/report/tables_report`\n    const { lang_id, matches, tables, team }: TOptions = options\n    const body = {\n      uri: 'request_players_stat_scout',\n      test: true,\n      params: {\n        type: key,\n        lang_id,\n        team,\n        matches,\n        tables,\n      },\n    }\n    //@ts-ignore\n    self.changeFetchingStatus(key)\n    return fetch(url, { method: 'POST', body: JSON.stringify(body) })\n      .then((response: any) => {\n        //@ts-ignore\n        self.changeFetchingStatus(key)\n        return response.blob()\n      })\n      .catch((error: {}) => {\n        //@ts-ignore\n        self.onError(error)\n        //@ts-ignore\n        self.changeFetchingStatus(key)\n      })\n  },\n  //@ts-ignore\n  changeFetchingStatus(key) {\n    //@ts-ignore\n    //@ts-ignore\n    self[`${key}IsFetching`] = !self[`${key}IsFetching`]\n  },\n  //@ts-ignore\n  onError(error) {\n    //@ts-ignore\n    self.error = error\n  },\n}))\n\nexport default TableReportsApiActions\n","\nimport { types } from 'mobx-state-tree'\nimport TableReportsApiActions from './TableReportsApiActions'\n\nconst TableReports = types.model('TableReports', {\n  pdfIsFetching: types.boolean,\n  xlsIsFetching: types.boolean,\n  error: types.frozen({}),\n})\n\nconst TableReportsStore = types.compose(\n  TableReports,\n  TableReportsApiActions,\n)\n\nexport default TableReportsStore\n","import TableReportsStore from './TableReportsStore'\n\nexport default TableReportsStore.create({\n  pdfIsFetching: false,\n  xlsIsFetching: false,\n  error: {},\n})\n","import { types } from 'mobx-state-tree'\nimport get from 'lodash/get'\nimport values from 'lodash/values'\nimport reduce from 'lodash/reduce'\nimport filter from 'lodash/filter'\n\n\nimport { callApi } from 'react-sport'\nimport routes from 'config/routes'\n\nconst MatchProfileApiActions = types.model({}).actions(self => ({\n  //@ts-ignore\n  fetch(matchId) {\n    const url = `${routes.API_ROOT}/data`\n    const config = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'scout_match_inf',\n        params: {\n          _p_match_id: matchId,\n        },\n      }),\n    }\n\n    callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        self.data = {}\n        //@ts-ignore\n        self.isFetching = true\n      },\n      //@ts-ignore\n      onSuccess: json => self._onSuccess(json, matchId),\n      //@ts-ignore\n      onError: error => self._onError(error),\n    })\n  },\n\n  _onSuccess({ data }: { data: {} }, matchId: string) {\n    //@ts-ignore\n    self.data = get(data, '[0].scout_match_inf', {})\n    //@ts-ignore\n    self.fetchPeriods(matchId)\n    //@ts-ignore\n    self.fetchVideoLinks(matchId)\n    //@ts-ignore\n    self.error = null\n    //@ts-ignore\n    self.matchId = matchId\n  },\n\n  _onError(error: any) {\n    //@ts-ignore\n    self.error = error\n    //@ts-ignore\n    self.isFetching = false\n  },\n\n  fetchPeriods(matchId: string) {\n    const url = `${routes.API_ROOT}/data`\n    const config = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'ask_team_param_view',\n        params: {\n          _v_match_id: [matchId],\n          //@ts-ignore\n          //@ts-ignore\n          _v_team_id: [self.data.team1_id, self.data.team2_id],\n          _v_param_id: [239],\n        },\n      }),\n    }\n\n    callApi({\n      url,\n      config,\n      onRequest: () => {},\n      //@ts-ignore\n      onSuccess: json => self._onSuccessPeriods(json),\n      //@ts-ignore\n      onError: error => self._onError(error),\n    })\n  },\n\n  _onSuccessPeriods(json: {\n    data: Array<{\n      value: number,\n      f_option_0: number,\n      f_team: number,\n    }>,\n  }) {\n    const data = json.data.map(({ f_option_0, f_team, value }) => ({\n      value,\n      period: f_option_0,\n      team: f_team,\n    }))\n    //@ts-ignore\n    self.periods = values(\n      reduce(\n        data,\n        (res, { period }) => {\n          if (period !== 0) {\n            //@ts-ignore\n            res[period] = filter(data, item => item.period === period)\n          }\n          return res\n        },\n        {},\n      ),\n    )\n  },\n\n  fetchVideoLinks(matchId: string) {\n    const url = `${routes.API_ROOT}/video/match`\n    const config = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'scout_team_match_pop_up',\n        //@ts-ignore\n        team_id: `${get(self.data, 'team1_id', '')}`,\n        match_id: +matchId,\n      }),\n    }\n\n    callApi({\n      url,\n      config,\n      onRequest: () => {},\n      //@ts-ignore\n      onSuccess: json => self._onSuccessVideoLinks(json),\n      //@ts-ignore\n      onError: error => self._onError(error),\n    })\n  },\n\n  _onSuccessVideoLinks(json: { links: {} }) {\n    //@ts-ignore\n    self.videoLinks = json.links\n    //@ts-ignore\n    self.isFetching = false\n  },\n}))\n\nexport default MatchProfileApiActions\n","\nimport { types } from 'mobx-state-tree'\nimport MatchProfileApiActions from './MatchProfileApiActions'\n\nexport const MatchProfile = types.model('MatchProfile', {\n  data: types.frozen({}),\n  periods: types.array(types.array(types.frozen({}))),\n  isFetching: types.boolean,\n  matchId: types.maybeNull(types.string),\n  videoLinks: types.frozen({}),\n  error: types.maybeNull(types.frozen({})),\n})\n\nconst MatchProfileStore = types.compose(\n  MatchProfile,\n  MatchProfileApiActions,\n)\n\nexport default MatchProfileStore\n","import MatchProfileStore from './MatchProfileStore'\n\nexport default MatchProfileStore.create({\n  data: {},\n  periods: [],\n  isFetching: true,\n  matchId: null,\n  videoLinks: {},\n  error: null,\n})\n","\n// Получение тайтлов для шапки профиля команды/игрока\n\ntype TArgs = {\n  simpleName: string,\n  matchesCount: number,\n  matchName: string,\n  paramName: string | number,\n};\n\nconst getHeaderStatsTitle = ({\n  matchesCount,\n  matchName,\n  paramName,\n  simpleName,\n}: TArgs) => () => ({\n  playlist_title: `${simpleName}`,\n  playlist_subtitle: `${matchesCount} ${matchName} - ${paramName}`,\n})\n\nexport default getHeaderStatsTitle\n","type TArgs = {\n  getMatchInfo: () => {\n    teamName: string,\n    oppTeamName: string,\n    teamScore: number,\n    oppTeamScore: number,\n    activeTeam: string,\n  },\n  //@ts-ignore\n  activeTab: string | null,\n  page: string,\n  simpleName: string,\n  matchesCount: number,\n  matchName: string,\n}\n\n// Получение тайтлов для карты ударов\nconst getMapShootsTitle = ({\n  activeTab,\n  getMatchInfo,\n  matchesCount,\n  matchName,\n  page,\n  simpleName,\n}: TArgs) => () => {\n  // Для страницы матча\n  const getMatchMapShootsTitle = () => {\n    const {\n      activeTeam,\n      oppTeamName,\n      oppTeamScore,\n      teamName,\n      teamScore,\n    } = getMatchInfo()\n    return {\n      playlist_title: `${activeTeam}`,\n      playlist_subtitle: `${teamName} ${teamScore}:${oppTeamScore} ${oppTeamName} - ${activeTab}`,\n    }\n  }\n\n  // Для страницы команды или игрока\n  const getTeamOrPlayerMapShootsTitle = () => ({\n    playlist_title: `${simpleName}`,\n    playlist_subtitle: `${matchesCount} ${matchName} - ${activeTab}`,\n  })\n\n  const pages = {\n    team: getTeamOrPlayerMapShootsTitle,\n    player: getTeamOrPlayerMapShootsTitle,\n    match: getMatchMapShootsTitle,\n  }\n  // запускаем для каждой страницы свою функцию\n  //@ts-ignore\n  if (!pages[page]) return null\n  //@ts-ignore\n  return pages[page]()\n}\n\nexport default getMapShootsTitle\n","import get from 'lodash/get'\n\ntype TArgs = {\n  getMatchInfo: () => {\n    teamName: string,\n    oppTeamName: string,\n    teamScore: number,\n    oppTeamScore: number,\n  },\n  matchInfo: any,\n  page: string,\n  suffix: string,\n  longSuffix: string,\n  paramName: string | number,\n  stores: {\n    //@ts-ignore\n    playerProfile: { profile: {} },\n  },\n  playerInfo: any,\n}\n\n// Получение тайтлов для ячеек таблиц со статистикой по матчам\nconst getTableMatchesTitle = ({\n  getMatchInfo,\n  longSuffix,\n  matchInfo,\n  page,\n  paramName,\n  playerInfo,\n  stores,\n  suffix,\n}: TArgs) => () => {\n  const oppTeamName: string = get(matchInfo, `name_opponent_${suffix}`, '')\n  const teamName: string = get(matchInfo, `name_${suffix}`, '')\n    || get(matchInfo, `name_${longSuffix}`, '')\n\n  // Матчи с профиля команды\n  const getTeamTableMatchesTitle = () => ({\n    playlist_title: `${teamName}`,\n    playlist_subtitle: `vs ${oppTeamName} - ${paramName}`,\n    title: '',\n  })\n\n  // Матчи с профиля игрока\n  const getPlayerTableMatchesTitle = () => {\n    const { playerProfile: { profile } } = stores\n    const firstName: string = get(profile, `firstname_${longSuffix}`)\n    const lastName: string = get(profile, `lastname_${longSuffix}`)\n    const playerName = `${firstName} ${lastName}`\n\n    return {\n      playlist_title: `${playerName} - ${teamName}`,\n      playlist_subtitle: `vs ${oppTeamName} - ${paramName}`,\n      title: '',\n    }\n  }\n\n  // Таблица со статистикой с профиля матча\n  const getStatsTableMatchesTitle = () => {\n    const { oppTeamName, teamName } = getMatchInfo()\n    return {\n      playlist_title: `${playerInfo} - ${teamName}`,\n      playlist_subtitle: `vs ${oppTeamName} - ${paramName}`,\n      title: '',\n    }\n  }\n\n  const pages = {\n    team: getTeamTableMatchesTitle,\n    player: getPlayerTableMatchesTitle,\n    match: getStatsTableMatchesTitle,\n  }\n  //@ts-ignore\n  if (!pages[page]) return null\n  //@ts-ignore\n  return pages[page]()\n}\n\nexport default getTableMatchesTitle\n","\n\ntype TArgs = {\n  paramName: string | number,\n  simpleName: string,\n  matchesCount: number,\n  matchName: string,\n};\n\n// Получение тайтлов для футера таблиц со статистикой по матчам\nconst getTablesFooterTitle = ({\n  matchesCount,\n  matchName,\n  paramName,\n  simpleName,\n}: TArgs) => () => ({\n  playlist_title: `${simpleName}`,\n  playlist_subtitle: `${matchesCount} ${matchName} - ${paramName}`,\n})\n\nexport default getTablesFooterTitle\n","\nimport find from 'lodash/find'\nimport get from 'lodash/get'\n\ntype TArgs = {\n  teamPlayers: {},\n  paramName: string | number,\n  playerInfo: any,\n  longSuffix: string,\n};\n\n// Получение тайтлов для игроков в команде на вкладке ИГРОКИ\nconst getTeamPlayersTitle = ({\n  longSuffix,\n  paramName,\n  playerInfo,\n  teamPlayers,\n}: TArgs) => () => {\n  const player = find(\n    get(teamPlayers, 'players'),\n    ({ f_player }) => f_player === playerInfo,\n  )\n  const playerName = get(player, `short_name_${longSuffix}`, '')\n\n  return {\n    playlist_title: `${playerName}`,\n    playlist_subtitle: `${paramName}`,\n  }\n}\n\nexport default getTeamPlayersTitle\n","\ntype TArgs = {\n  getMatchInfo: () => {\n    teamName: string,\n    oppTeamName: string,\n    teamScore: number,\n    oppTeamScore: number,\n  },\n  playerInfo: any,\n  paramName: string | number,\n};\n\n// Получение тайтлов для виджетов\nconst getWidgetsTitle = ({ getMatchInfo, paramName, playerInfo }: TArgs) => (\n  widgetType: string,\n) => {\n  // Виджет сравнения игроков из 2 команд\n  const getPlayersCompareWidgetsTitle = () => {\n    const { oppTeamName, oppTeamScore, teamName, teamScore } = getMatchInfo()\n    const title = `${teamName} ${teamScore}:${oppTeamScore} ${oppTeamName} - ${playerInfo}`\n    return {\n      playlist_title: title,\n      playlist_subtitle: `${paramName}`,\n      title,\n    }\n  }\n\n  const getTeamsCompareWidgterTitle = () => {\n    const { oppTeamName, oppTeamScore, teamName, teamScore } = getMatchInfo()\n    const title = `${teamName} ${teamScore}:${oppTeamScore} ${oppTeamName}`\n    return {\n      playlist_title: title,\n      playlist_subtitle: `${paramName}`,\n      title,\n    }\n  }\n\n  // Все виджеты тут\n  const widgetTypes = {\n    playersCompare: getPlayersCompareWidgetsTitle,\n    teamsCompare: getTeamsCompareWidgterTitle,\n  }\n\n  //@ts-ignore\n  return widgetTypes[widgetType]()\n}\n\nexport default getWidgetsTitle\n","import get from 'lodash/get'\nimport size from 'lodash/size'\n\nimport { getSuffix, getLongSuffix, num2str } from 'module/utils/helpers'\nimport stores from 'features/stores'\n\nimport getHeaderStatsTitle from './titles/getHeaderStatsTitle'\nimport getMapShootsTitle from './titles/getMapShootsTitle'\nimport getTableMatchesTitle from './titles/getTableMatchesTitle'\nimport getTablesFooterTitle from './titles/getTablesFooterTitle'\nimport getTeamPlayersTitle from './titles/getTeamPlayersTitle'\nimport getWidgetsTitle from './titles/getWidgetsTitle'\n\n/** создаем объект с названием плейлиста для внешней видео ссылки\n * @param {string} lexical_formula - название параметра\n * @param {object} matchInfo - Информация о матче. Нужна для имен команд\n * @param {string} tab - активный таб на карте ударов\n * @param {string} lang - язык\n * @param {string} playerInfo - Информация об игроке, если доступна.\n * @param {string} type - тип запроса, для составления title (приходит из компонента)\n * @param {string} widgetType - тип виджета, если доступен\n\n * @returns {object} возвращаемое значение - объект с полями тайтлов\n */\nconst setTitle = ({\n  lang,\n  lexical_formula,\n  matchInfo,\n  playerInfo,\n  tab = '',\n  type,\n  widgetType,\n}: {\n  lexical_formula: string | number,\n  matchInfo: any,\n  tab: string,\n  lang: string,\n  playerInfo: any,\n  type: string,\n  widgetType: string,\n}) => {\n  const {\n    //@ts-ignore\n    lexics: { getLexics, page },\n    //@ts-ignore\n    playerProfile,\n    //@ts-ignore\n    selectedMatches,\n    //@ts-ignore\n    teamPlayers,\n    //@ts-ignore\n    teamProfile,\n  } = stores\n  //@ts-ignore\n  const activeTab: string | null = getLexics(tab)\n  const suffix: string = getSuffix(lang)\n  const longSuffix: string = getLongSuffix(lang)\n  const paramName: string | number = getLexics(lexical_formula) || lexical_formula\n\n  const pageId: string | number = get(stores, `${page}Profile.profile.id`, '')\n  const matchesCount: number = size(get(selectedMatches, `${page}.${pageId}`))\n  let matchName: string\n  if (lang === 'ru') {\n    matchName = num2str(matchesCount, ['матч', 'матча', 'матчей'])\n  } else {\n    //@ts-ignore\n    matchName = matchesCount.toString().split('').pop() === 1\n      ? 'match'\n      : 'matches'\n  }\n\n  const simpleName: string = get(teamProfile, `profile.name_${longSuffix}`, '')\n    || get(playerProfile, `profile.short_name_${longSuffix}`, '')\n\n  const getMatchInfo = () => {\n    const {\n      //@ts-ignore\n      matches: { active },\n      //@ts-ignore\n      matchProfile: { data },\n    } = stores\n    const {\n      score_team1: teamScore,\n      score_team2: oppTeamScore,\n    } = data\n    const teamName: string = get(data, `team1_name_${suffix}`, '')\n    const oppTeamName: string = get(data, `team2_name_${suffix}`, '')\n    const activeTeam: string = get(data, `${active}_name_${suffix}`)\n    return {\n      teamScore,\n      oppTeamScore,\n      teamName,\n      oppTeamName,\n      activeTeam,\n    }\n  }\n\n  // Аргументы для передачи в функцию создания тайтлов\n  const args = {\n    matches: {\n      matchInfo,\n      suffix,\n      longSuffix,\n      paramName,\n      stores,\n      getMatchInfo,\n      playerInfo,\n      page,\n    },\n    tablesFooter: {\n      simpleName,\n      matchesCount,\n      matchName,\n      paramName,\n    },\n    widgets: {\n      getMatchInfo,\n      playerInfo,\n      paramName,\n    },\n    mapShoots: {\n      getMatchInfo,\n      activeTab,\n      page,\n      simpleName,\n      matchesCount,\n      matchName,\n    },\n    headerStats: {\n      simpleName,\n      matchesCount,\n      matchName,\n      paramName,\n    },\n    teamPlayers: {\n      teamPlayers,\n      paramName,\n      playerInfo,\n      longSuffix,\n    },\n  }\n\n  // Объект со ссылками на функции для составления названия плейлиста\n  // В зависимости от type вызывается нужная функция\n  const titleTypes = {\n    //@ts-ignore\n    matches: getTableMatchesTitle(args.matches),\n    tablesFooter: getTablesFooterTitle(args.tablesFooter),\n    widgets: getWidgetsTitle(args.widgets),\n    mapShoots: getMapShootsTitle(args.mapShoots),\n    headerStats: getHeaderStatsTitle(args.headerStats),\n    teamPlayers: getTeamPlayersTitle(args.teamPlayers),\n  }\n  //@ts-ignore\n  if (!titleTypes[type]) return null\n\n  if (type === 'widgets') {\n    return titleTypes[type](widgetType)\n  }\n  //@ts-ignore\n  return titleTypes[type]()\n}\n\nexport default setTitle\n","import { types } from 'mobx-state-tree'\nimport { callApi } from 'react-sport'\n\nimport routes from 'config/routes'\nimport setTitle from './setTitle'\n\nconst ExternalVideoLinksActions = types.model({}).actions(self => ({\n  /** Запрос ссылки для попап окна для видео повторов\n   * @param {Array} events - список ивентов для повтора\n   * @param {Object} range - Объект с диапазонами с секундами до ивента и после\n   * @param {string} lang - язык\n   * @param {number || null} matchId - айди матча, пока не передаем\n   * @param {string} lexical_formula - название параметра\n   * @param {number || null} matchesCount - количество выбранных матчей\n   * @param {object} matchInfo - Информация о матче. Нужна для имен команд\n   * @param {string} playerInfo - Информация об игроке, если доступна.\n   * @param {string} tab - активный таб на карте ударов\n   * @param {string} type - тип запроса, для составления title (приходит из компонента)\n   * @param {string} widgetType - тип виджета, если доступен\n   */\n  request({\n    //@ts-ignore\n    events,\n    //@ts-ignore\n    lang,\n    lexical_formula = '',\n    matchesCount = null,\n    matchId = null,\n    //@ts-ignore\n    matchInfo,\n    //@ts-ignore\n    playerInfo,\n    //@ts-ignore\n    range,\n    tab = '',\n    type = '',\n    widgetType = '',\n  }) {\n    const title = setTitle({\n      lexical_formula,\n      //@ts-ignore\n      matchesCount,\n      matchInfo,\n      tab,\n      lang,\n      playerInfo,\n      type,\n      widgetType,\n    })\n    const url: string = `${routes.API_ROOT}/video`\n    const body: {\n      allRange: boolean,\n      //@ts-ignore\n      events: Array<string | number | null>,\n      lang: string,\n      //@ts-ignore\n      matchId: number | null,\n      //@ts-ignore\n      offset_start: number | null,\n      //@ts-ignore\n      offset_end: number | null,\n    } = {\n      allRange: false,\n      events,\n      lang,\n      matchId,\n      offset_start: range.before,\n      offset_end: range.after,\n      ...title,\n    }\n\n    return callApi({\n      url,\n      config: {\n        method: 'POST',\n        body: JSON.stringify(body),\n      },\n      //@ts-ignore\n      onRequest: () => self._onRequest(),\n      //@ts-ignore\n      onSuccess: ({ link }) => self._onSuccess(link),\n      //@ts-ignore\n      onError: (error: any) => self._onError(error),\n    })\n  },\n\n  _onRequest() {\n    //@ts-ignore\n    self.isFetching = true\n  },\n  //@ts-ignore\n  _onSuccess(link) {\n    if (link) {\n      window.open(link, '_blank')\n    }\n    //@ts-ignore\n    self.isFetching = false\n  },\n  //@ts-ignore\n  _onError(error) {\n    //@ts-ignore\n    self.error = error\n    //@ts-ignore\n    self.isFetching = false\n  },\n}))\n\nexport default ExternalVideoLinksActions\n","\nimport { types } from 'mobx-state-tree'\nimport ExternalVideoLinksActions from './ExternalVideoLinksActions'\n\nexport const ExternalVideoLinks = types.model('ExternalVideoLinks', {\n  isFetching: types.boolean,\n})\n\nconst ExternalVideoLinksStore = types.compose(\n  ExternalVideoLinks,\n  ExternalVideoLinksActions,\n)\n\nexport default ExternalVideoLinksStore\n","import ExternalVideoLinksStore from './ExternalVideoLinksStore'\n\nexport default ExternalVideoLinksStore.create({\n  isFetching: false,\n})\n","import { types } from 'mobx-state-tree'\nimport { callApi } from 'react-sport'\n// @ts-ignore\nimport routes from 'config/routes'\n\nconst FiltersApiActions = types.model({}).actions(self => ({\n  fetch() {\n    const url = `${routes.API_ROOT}/data`\n    const config = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'ask_filters_manual_view',\n      }),\n    }\n\n    callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        self.data = []\n        //@ts-ignore\n        self.error = null\n        //@ts-ignore\n        self.loaded = false\n      },\n      //@ts-ignore\n      onSuccess: json => self._onSuccess(json),\n      //@ts-ignore\n      onError: error => self._onError(error),\n    })\n  },\n\n  _onSuccess({ data }: { data: {} }) {\n    //@ts-ignore\n    self.data = data\n    //@ts-ignore\n    self.loaded = true\n    //@ts-ignore\n    self.error = null\n  },\n\n  _onError(error: any) {\n    //@ts-ignore\n    self.error = error\n    //@ts-ignore\n    self.loaded = true\n  },\n}))\n\nexport default FiltersApiActions\n","import { types } from 'mobx-state-tree'\nimport has from 'lodash/has'\nimport every from 'lodash/every'\nimport forEach from 'lodash/forEach'\nimport find from 'lodash/find'\nimport get from 'lodash/get'\nimport reduce from 'lodash/reduce'\n\nimport { toJS } from 'mobx'\n// @ts-ignore\nimport stores from 'features/stores'\n\nconst FilterActions = types\n  .model({})\n  .volatile(() => ({\n    tempSelectedFilters: {},\n  }))\n  .actions(self => ({\n    clear() {\n      //@ts-ignore\n      self.checked = {}\n    },\n\n    //@ts-ignore\n    toggleOpenMenu(type) {\n      //@ts-ignore\n      //@ts-ignore\n      self.opened = !self.opened\n      if (type === 'reset') {\n        self.tempSelectedFilters = {}\n        return null\n      }\n      //@ts-ignore\n      if (self.opened) {\n        //@ts-ignore\n        self.tempSelectedFilters = self.checked\n      } else {\n        //@ts-ignore\n        self.checked = self.tempSelectedFilters\n        self.tempSelectedFilters = {}\n      }\n      return null\n    },\n\n    handleTempCheck(id: number | string, popupType?: string) {\n      const tempClone = { ...self.tempSelectedFilters }\n      //@ts-ignore\n      const filterInfo = toJS(self.findFilterInfo(id, popupType))\n      if (has(tempClone, id)) {\n        //@ts-ignore\n        delete tempClone[id]\n      } else if (filterInfo) {\n        //@ts-ignore\n        tempClone[id] = filterInfo\n      }\n      self.tempSelectedFilters = tempClone\n      return null\n    },\n\n    //@ts-ignore\n    handleAllTempCheck(ids, popupType?: string) {\n      const tempClone = { ...self.tempSelectedFilters }\n      if (every(ids, id => has(tempClone, id))) {\n        forEach(ids, (id) => {\n          //@ts-ignore\n          delete tempClone[id]\n        })\n      } else {\n        forEach(ids, (id) => {\n          //@ts-ignore\n          const filterInfo = toJS(self.findFilterInfo(id, popupType))\n          if (filterInfo) {\n            //@ts-ignore\n            tempClone[id] = filterInfo\n          }\n        })\n      }\n      self.tempSelectedFilters = tempClone\n    },\n\n    handleUncheck(id: number | string) {\n      //@ts-ignore\n      const checkedCloned = { ...self.checked }\n      delete checkedCloned[id]\n      //@ts-ignore\n      self.checked = checkedCloned\n    },\n  }))\n  .views(self => ({\n    findFilterInfo(id: number | string, popupType?: string) {\n      //@ts-ignore\n      if (!popupType) return find(self.data, { id })\n\n      //@ts-ignore\n      const getIdFromString = id => Number(id.split('_')[0])\n      const players = popupType === 'popupWithHomePlayers'\n        //@ts-ignore\n        ? self.homePlayers\n        //@ts-ignore\n        : self.teamPlayers\n      return find(players, { player_id: getIdFromString(id) })\n    },\n\n    get teamPlayers() {\n      const players = get(stores, 'mapShoot.data')\n      return reduce(\n        players,\n        (acc, { prop_player }) => {\n          //@ts-ignore\n          //@ts-ignore\n          prop_player.forEach(player => acc.push(player))\n          return acc\n        },\n        [],\n      )\n    },\n\n    get homePlayers() {\n      const players = get(stores, 'playerInfo.basicData')\n      //@ts-ignore\n      return reduce(\n        players,\n        //@ts-ignore\n        (acc, { f_player, prop_player }) => {\n          const newObj = prop_player[0]\n          newObj.player_id = f_player\n          return [...acc, newObj]\n        },\n        [],\n      )\n    },\n  }))\n\nexport default FilterActions\n","\nimport { types } from 'mobx-state-tree'\nimport FiltersApiActions from './FiltersApiActions'\nimport FilterActions from './FilterActions'\n\n// Модель группы с названием\nconst FilterElem = types.model('FilterElem', {\n  c_action: types.maybeNull(types.number),\n  c_match_event_prop: types.maybeNull(types.array(types.number)),\n  c_match_event_prop2: types.maybeNull(types.array(types.number)),\n  c_match_event_prop_value: types.maybeNull(types.array(types.number)),\n  c_match_event_prop_value2: types.maybeNull(types.array(types.number)),\n  filter_name: types.string,\n  id: types.number,\n  lexic_id: types.maybeNull(types.number),\n})\n\nexport const Filters = types.model('Filters', {\n  data: types.array(FilterElem),\n  checked: types.frozen({}),\n  opened: types.boolean,\n  loaded: types.boolean,\n  error: types.maybeNull(types.frozen({})),\n})\n\nconst FiltersStore = types.compose(\n  Filters,\n  FiltersApiActions,\n  FilterActions,\n)\n\nexport default FiltersStore\n","import FiltersStore from './FiltersStore'\n\nexport default FiltersStore.create({\n  data: [],\n  checked: {},\n  opened: false,\n  loaded: false,\n  //@ts-ignore\n  tempChecked: {},\n  error: null,\n})\n","import { types } from 'mobx-state-tree'\n\nimport filter from 'lodash/filter'\nimport includes from 'lodash/includes'\nimport map from 'lodash/map'\n\nexport const TeamsCompareActions = types\n  .model({})\n  .volatile(() => ({\n    teamsInfoLoaded: false,\n  }))\n  .actions(self => ({\n    // Сохранение временно выбранных параметров (при закрытии шестеренки)\n    saveTempParams(\n      lang: string,\n      matchId: string,\n      userConfirmedParams: Array<{}>,\n    ) {\n      //@ts-ignore\n      const paramsIdList = map(userConfirmedParams, 'param_id', [])\n\n      //@ts-ignore\n      self.selectedParams = userConfirmedParams\n      //@ts-ignore\n      self.fetchStats(lang, matchId, paramsIdList)\n    },\n\n    //Сохраняем все параметры в шестеренке и предвыбираем дефолтные (при первом открытии)\n    setDefaultSelectedParams() {\n      // По умолчанию предвыбираем дефолтные параметры\n      //@ts-ignore\n      const defaultIds = map(self.stats, 'param')\n      //@ts-ignore\n      self.selectedParams = filter(\n        //@ts-ignore\n        self.totalParams,\n        ({ param_id }) => includes(defaultIds, param_id),\n      )\n    },\n  }))\n","import { types, flow } from 'mobx-state-tree'\n\nimport { utils } from 'react-sport'\n\nimport get from 'lodash/get'\nimport find from 'lodash/find'\nimport reduce from 'lodash/reduce'\nimport pick from 'lodash/pick'\n\nimport stores from 'features/stores'\n\nimport routes from 'config/routes'\n\ntype TConfig = {\n  method: string,\n  body: string,\n}\n\nexport const TeamsCompareApiActions = types.model({})\n  .actions(self => ({\n    // Запрос при первом рендере компонента.\n    // Нам нужны все параметры для шестеренки\n    // После ответа делаем запрос на получение данных для виджета\n    basicFetch: flow(function* basicFetch(\n      //@ts-ignore\n      lang,\n      //@ts-ignore\n      matchId,\n      //@ts-ignore\n      paramsList,\n    ) {\n      // Делаем запрос данных для таблицы\n      //@ts-ignore\n      yield self.fetchStats(lang, matchId, paramsList)\n      // Делаем запрос всех параметров (для шестеренки)\n      //@ts-ignore\n      yield self.getGearParamsList(1)\n      // Устанавливаем выбранные параметры по-умолчанию\n      //@ts-ignore\n      self.setDefaultSelectedParams()\n    }),\n    // Запрос к API для получения статистики команд\n    fetchStats(\n      lang: string,\n      matchId: string,\n      params: Array<number>,\n    ) {\n      const matchInfo = get(stores, 'matchProfile.data', {})\n      const teams = [matchInfo.team1_id, matchInfo.team2_id]\n      const url: string = `${routes.API_ROOT}/data`\n      const config: TConfig = {\n        method: 'POST',\n        body: JSON.stringify({\n          proc: 'scout_teams_all_stat',\n          params: {\n            _p_match_id: Number(matchId),\n            _p_season_id: null,\n            _p_team_arr: teams,\n            _p_param_arr: params,\n            _p_lang_id: Number(lang !== 'ru'),\n          },\n        }),\n      }\n      return utils.callApi({\n        url,\n        config,\n        //@ts-ignore\n        onRequest: self._onRequest,\n        //@ts-ignore\n        onSuccess: self._onSuccess,\n        //@ts-ignore\n        onError: self._onError,\n      })\n    },\n\n    _onRequest() {\n      //@ts-ignore\n      self.stats = []\n      //@ts-ignore\n      self.teamsInfo = null\n      //@ts-ignore\n      self.teamsInfoLoaded = false\n    },\n\n    //@ts-ignore\n    _onSuccess(json: { data?: Array<{}> }) {\n      const teams = get(json.data, '[0].scout_teams_all_stat', [])\n      //@ts-ignore\n      self.stats = get(find(teams, 'params_info', {}), 'params_info')\n      //@ts-ignore\n      self.teamsInfo = reduce(teams, (acc, current) => {\n        //@ts-ignore\n        acc[current.f_team] = pick(\n          current,\n          ['f_team', 'params', 'photo_team'],\n        )\n        return acc\n      }, {})\n      //@ts-ignore\n      self.error = null\n      //@ts-ignore\n      self.teamsInfoLoaded = true\n    },\n\n    _onError(error: any) {\n      //@ts-ignore\n      self.error = error\n      //@ts-ignore\n      self.teamsInfoLoaded = false\n    },\n  }))\n","\nimport { types } from 'mobx-state-tree'\n\n// @ts-ignore\nimport { tableApiActions } from 'features/Table'\n\nimport { TeamsCompareActions } from './TeamsCompareActions'\nimport { TeamsCompareApiActions } from './TeamsCompareApiActions'\n\nconst Stat = types.model('Stat', {\n  param: types.number,\n  param_name: types.maybeNull(types.string),\n  param_name_short: types.maybeNull(types.string),\n})\n\nconst GearParam = types.model('SelectedGearParam', {\n  clickable: types.number,\n  f_option_3: types.number,\n  full_lexical_formula: types.string,\n  gear_group_id: types.number,\n  gear_subgroup_id: types.number,\n  is_default: types.maybeNull(types.string),\n  lexical_formula: types.string,\n  name: types.string,\n  param1_id: types.maybeNull(types.array(types.string)),\n  param2_id: types.maybeNull(types.array(types.string)),\n  param_id: types.number,\n  short_lexical_formula: types.string,\n  sort_order: types.number,\n})\n\nconst TeamsCompare = types.model('TeamsCompareWidget', {\n  stats: types.maybeNull(types.array(Stat)),\n  teamsInfo: types.frozen({}),\n  isLoaded: false,\n  error: types.frozen({}),\n  selectedParams: types.maybeNull(types.array(GearParam)),\n})\n\nexport const TeamsCompareStore = types.compose(\n  // Общие методы для получения параметров для шестеренки\n  tableApiActions,\n  // Собственные методы\n  TeamsCompare,\n  TeamsCompareActions,\n  TeamsCompareApiActions,\n)\n","import React from 'react'\nimport map from 'lodash/map'\nimport { TTeamStats } from '../types'\n\nexport const TeamsStats = ({\n  getClassName,\n  getExtLink,\n  getStatValue,\n  stats,\n  team1,\n  team2,\n}: TTeamStats) => (\n  <div className='t-compare__stats-container'>\n    {map(stats, ({ param, param_name, param_name_short }, index) => (\n      <div\n        key={`${param}_${param_name_short}_${index}`}\n        className='t-compare__stats-row'\n      >\n        <span\n          className={getClassName(param, team1)}\n            //@ts-ignore\n          onClick={getExtLink(param, param_name, team1)}\n        >\n          {getStatValue(param, team1)}\n        </span>\n        <span className='t-compare__stats-name'>{param_name}</span>\n        <span\n          className={getClassName(param, team2)}\n            //@ts-ignore\n          onClick={getExtLink(param, param_name, team2)}\n        >\n          {getStatValue(param, team2)}\n        </span>\n      </div>\n    ))}\n  </div>\n)\n\nexport default TeamsStats\n","import React from 'react'\nimport { T9n, utils } from 'react-sport'\nimport { TTeamsCompareLogos } from '../types'\n\nconst {\n  helpers: { onProfileImageError },\n} = utils\n\nexport const TeamsCompareLogos = ({\n  getImage,\n  team1,\n  team2,\n}: TTeamsCompareLogos) => (\n  <div className='t-compare__control-row'>\n    <div className='t-compare__logo-container t-compare__logo-container_teams'>\n      <img\n        className='t-compare__logo t-compare__logo_team'\n        //@ts-ignore\n        src={getImage(team1)}\n        alt='logoTeam'\n        onError={e => onProfileImageError(e, 'team')}\n      />\n    </div>\n\n    <div className='t-compare__controls t-compare__controls_player'>\n      <T9n className='t-compare__toggler' t='match' />\n    </div>\n    <div className='t-compare__logo-container t-compare__logo-container_teams'>\n      <img\n        className='t-compare__logo t-compare__logo_team t-compare__logo_team-right'\n        //@ts-ignore\n        src={getImage(team2)}\n        alt='logoTeam'\n        onError={e => onProfileImageError(e, 'team')}\n      />\n    </div>\n  </div>\n)\n\nexport default TeamsCompareLogos\n","import React, { Fragment } from 'react'\n\nimport { TPropsInner } from './types'\n\nimport TeamsCompareStats from '../TeamsCompareStats'\nimport TeamsCompareLogos from '../TeamsCompareLogos'\nimport { teamsCompareInfoComposed } from './composed'\n\nexport const TeamsCompareInfoComponent = ({\n  getClassName,\n  getExtLink,\n  getImage,\n  getSortedStats,\n  getStatValue,\n  team1,\n  team2,\n}: TPropsInner) => (\n  <Fragment>\n    <TeamsCompareLogos\n      getImage={getImage}\n      team1={team1}\n      team2={team2}\n    />\n    <TeamsCompareStats\n      stats={getSortedStats()}\n      team1={team1}\n      team2={team2}\n      getStatValue={getStatValue}\n      getClassName={getClassName}\n      getExtLink={getExtLink}\n    />\n  </Fragment>\n)\n\nexport const TeamsCompareInfo = teamsCompareInfoComposed(TeamsCompareInfoComponent)\n","import { inject, observer } from 'mobx-react'\n\nimport { withHandlers, compose } from 'recompose'\nimport cx from 'classnames'\nimport uniqBy from 'lodash/uniqBy'\nimport sortBy from 'lodash/sortBy'\nimport map from 'lodash/map'\nimport get from 'lodash/get'\nimport find from 'lodash/find'\n\nimport {\n  TPropsInner,\n  TPropsOuter,\n  TWithHandlersOuter1,\n  TWithHandlersInner1,\n  TWithHandlersOuter2,\n  TWithHandlersInner2,\n} from './types'\n\nexport const teamsCompareInfoComposed = compose<TPropsInner, TPropsOuter>(\n  inject(\n    'lexics',\n    'videoLink',\n    'shootsRange',\n    'matchTable',\n    'teamsCompareWidget',\n  ),\n  withHandlers<TWithHandlersOuter1, TWithHandlersInner1>({\n    getTeamParams: ({\n      teamsCompareWidget: { teamsInfo },\n    }) => teamId => get(teamsInfo, [teamId, 'params'], []),\n  }),\n  withHandlers<TWithHandlersOuter2, TWithHandlersInner2>({\n    getClassName: ({ getTeamParams }) => (param, teamId) => {\n      const hasVideo = get(\n        find(getTeamParams(teamId), { param }),\n        'f_match_event_ids',\n      )\n      return cx(\n        't-compare__stats-num',\n        { 't-compare__clickable-cell': hasVideo },\n      )\n    },\n\n    getExtLink: ({\n      getTeamParams,\n      lexics: { lang },\n      shootsRange,\n      videoLink: { request },\n    }) => (param, param_name, teamId) => () => {\n      const events = get(\n        find(getTeamParams(teamId), { param }), 'f_match_event_ids',\n      )\n      if (events) {\n        request({\n          events,\n          lang,\n          lexical_formula: param_name,\n          range: shootsRange,\n          type: 'widgets',\n          widgetType: 'teamsCompare',\n        })\n      }\n    },\n\n    getImage: ({ teamsCompareWidget: { teamsInfo } }) => teamId => (\n      get(teamsInfo, `${teamId}.photo_team`, '')\n    ),\n\n    getSortedStats: ({\n      teamsCompareWidget: {\n        selectedParams,\n        stats,\n      },\n    }) => () => {\n      if (stats) {\n        const uniqStats = uniqBy(stats, 'param')\n        return sortBy(uniqStats, ({ param }) => {\n          const selectedParamsIds = map(selectedParams, 'param_id')\n          return selectedParamsIds.indexOf(param)\n        })\n      }\n      return []\n    },\n\n    getStatValue: ({ getTeamParams }) => (param, teamId) => {\n      const value = get(\n        find(getTeamParams(teamId), { param }),\n        'value',\n      )\n      return value ? value.toFixed() : '-'\n    },\n  }),\n  observer,\n)\n","import React from 'react'\n\nimport { T9n } from 'react-sport'\n\nimport { DndParams, GearTable } from 'features/GearPopup'\n\nimport TeamsComparePopupComposed from './TeamsComparePopupComposed'\n\ntype TProps = {\n  //@ts-ignore\n  lexics: { getLexics: (string) => string },\n  onApply: () => void,\n  //@ts-ignore\n  onClose: (value: string | null) => void,\n  teamsCompareWidget: {},\n}\n\n// Попап окно с параметрами (шестеренка)\nexport const TeamsComparePopup = ({\n  lexics: { getLexics },\n  onApply,\n  onClose,\n  teamsCompareWidget,\n}: TProps) => (\n  <div className='popup popup-modern popup-modern_position-left popup-modern_active'>\n    <div className='popup-inner'>\n      <div className='popup-row-header'>\n        <h3 className='popup-title'>\n          <T9n t='main_statisctic' />\n        </h3>\n        {/*\n          //@ts-ignore */}\n        <span className='popup-close' onClick={onClose} />\n\n      </div>\n      <div className='popup-row-container'>\n        <GearTable\n          tableType='teamsCompareWidget'\n          currentStore={teamsCompareWidget}\n          ampluaId={0}\n        />\n      </div>\n      <div className='popup-column-aside'>\n        <DndParams />\n      </div>\n      <div className='popup-row-footer'>\n        <div className='popup-buttons'>\n          <input\n            //@ts-ignore\n            onClick={onClose}\n            type='button'\n            value={getLexics('cancel')}\n            className='popup-cancel'\n          />\n          <input\n            onClick={onApply}\n            type='button'\n            value={getLexics('ok')}\n            className='popup-submit'\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n)\n\n//@ts-ignore\nexport default TeamsComparePopupComposed(TeamsComparePopup)\n","\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers, lifecycle } from 'recompose'\n\nconst TeamsComparePupupComposed = compose(\n  inject(\n    'matchProfile',\n    'teamProfile',\n    'matchTable',\n    'lexics',\n    'teamsCompareWidget',\n    'gearPopupStore',\n  ),\n  //@ts-ignore\n  withHandlers({\n    /**\n     * Запись в стор выбранных параметров в попапе шестеренки\n     * @param {func} saveTempParams - функция сохранения параметров\n     * @param {func} handlePopupAction - функция закрытия попапа\n     * @param {string} lang - выбранный язык\n     * @param {string} matchId - id матча\n     */\n    onApply: ({\n      gearPopupStore: { tempSelected },\n      handlePopupAction,\n      lexics: { lang },\n      matchProfile: { matchId },\n      teamsCompareWidget: { saveTempParams },\n    }) => () => {\n      saveTempParams(lang, matchId, tempSelected)\n      handlePopupAction()\n    },\n    /**\n     * Закрытие попапа шестеренки\n     * @param {func} editTempSelected - функция очищения выбранных параметров\n     * @param {func} handlePopupAction - функция закрытия попапа\n     *\n     */\n    onClose: ({\n      gearPopupStore: { eraseTempSelected },\n      handlePopupAction,\n    }) => () => {\n      eraseTempSelected()\n      handlePopupAction()\n    },\n  }),\n  lifecycle({\n    componentDidMount() {\n      const {\n        //@ts-ignore\n        gearPopupStore: { fillTempSelected },\n        //@ts-ignore\n        teamsCompareWidget: { selectedParams },\n      } = this.props\n      fillTempSelected(selectedParams)\n    },\n  }),\n  observer,\n)\n\nexport default TeamsComparePupupComposed\n","\nimport React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers, withState } from 'recompose'\n\nimport { T9n } from 'react-sport'\n\nimport TeamsComparePopup from './TeamsComparePopup'\nimport { TTeamsCompareHeder } from '../types'\n\nexport const TeamsCompareHeder = ({\n  handlePopupAction,\n  popupOpened,\n}: TTeamsCompareHeder) => (\n  <div className='t-compare__header'>\n    <T9n className='t-compare__title' t='teams_statistic' />\n    <a className='t-compare__gear-options' onClick={handlePopupAction}>\n      <i className='icon-settings' />\n    </a>\n    {popupOpened && <TeamsComparePopup handlePopupAction={handlePopupAction} />}\n  </div>\n)\n\nconst TeamsCompareHeaderComposed = compose(\n  inject('lexics', 'videoLink', 'shootsRange', 'teamsCompareWidget'),\n  withState('popupOpened', 'openPopup', false),\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    handlePopupAction: ({ openPopup }) => () => openPopup(n => !n),\n  }),\n  observer,\n  //@ts-ignore\n)(TeamsCompareHeder)\n\nexport default TeamsCompareHeaderComposed\n","const defaultParams = [\n  101,\n  102,\n  103,\n  124,\n  137,\n  142,\n  158,\n  169,\n  171,\n  172,\n  175,\n  239,\n]\n\nexport default defaultParams\n","import React from 'react'\nimport { observer, inject } from 'mobx-react'\n\nimport map from 'lodash/map'\nimport {\n  compose,\n  lifecycle,\n  withProps,\n} from 'recompose'\n\nimport { getSuffix } from 'module/utils/helpers'\n\nimport { TeamsCompareInfo } from '../TeamsCompareInfo'\nimport TeamsCompareHeader from '../TeamsCompareHeader'\n\nimport defaultParams from '../../config'\n\nimport {\n  TPropsInner,\n  TWithPropsInner,\n  TWithPropsOuter,\n  TLifecycle,\n} from './types'\n\nexport const TeamsCompareComponent = ({\n  matchProfile: {\n    data: {\n      team1_id,\n      team2_id,\n      ...data\n    },\n  },\n  suffix,\n  teamsCompareWidget: { stats, teamsInfoLoaded },\n}: TPropsInner) => (\n  <div className='t-compare'>\n    <TeamsCompareHeader />\n    <div className='t-compare__container'>\n      <div className='t-compare__teams'>\n        <div className='t-compare__team'>\n          <span className='t-compare__team-name'>\n            {data[`team1_name_${suffix}`]}\n          </span>\n        </div>\n        <div className='t-compare__team'>\n          <span className='t-compare__team-name'>\n            {data[`team2_name_${suffix}`]}\n          </span>\n        </div>\n      </div>\n      {teamsInfoLoaded ? (\n        <TeamsCompareInfo\n          team1={team1_id}\n          team2={team2_id}\n          stats={stats}\n        />\n      ) : (\n        <div className='loading' />\n      )}\n    </div>\n  </div>\n)\n\nconst TeamsCompareComposed = compose<TPropsInner, {}>(\n  inject(\n    'lexics',\n    'teamsCompareWidget',\n    'matchProfile',\n  ),\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(\n    ({ lexics: { lang } }) => ({\n      lang,\n      suffix: getSuffix(lang),\n    }),\n  ),\n  lifecycle<TLifecycle>({\n    componentDidMount() {\n      const {\n        lang: currentLang,\n        matchProfile: { matchId },\n        teamsCompareWidget: { basicFetch },\n      } = this.props\n      basicFetch(currentLang, matchId, defaultParams)\n    },\n    componentDidUpdate(prevProps) {\n      const {\n        lang: currentLang,\n        matchProfile: { matchId },\n        teamsCompareWidget: { fetchStats, selectedParams },\n      } = this.props\n\n      if (prevProps.lang !== currentLang) {\n        const paramsIds = map(selectedParams, 'param_id')\n        fetchStats(currentLang, matchId, paramsIds)\n      }\n    },\n  }),\n  observer,\n)\n\nexport const TeamsCompare = TeamsCompareComposed(TeamsCompareComponent)\n","import { types } from 'mobx-state-tree'\nimport { callApi } from 'react-sport'\n// @ts-ignore\nimport routes from 'config/routes'\n\nconst TeamProfileApiActions = types.model({}).actions(self => ({\n  fetch(teamId: string | number) {\n    const url = `${routes.API_ROOT}/data`\n    const config = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'scout_team_inf',\n        params: {\n          _p_team_id: teamId,\n        },\n      }),\n    }\n    callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        self.profile = null\n        //@ts-ignore\n        self.isLoaded = false\n      },\n      //@ts-ignore\n      onSuccess: self._onSuccess,\n      //@ts-ignore\n      onError: self._onError,\n    })\n  },\n\n  _onSuccess(json: {\n    data: Array<{\n      scout_team_inf: Array<{}>,\n    }>,\n  }) {\n    //@ts-ignore\n    self.isLoaded = true\n    //@ts-ignore\n    self.profile = json.data[0].scout_team_inf[0] || null\n    //@ts-ignore\n    self.error = null\n  },\n\n  _onError(error: any) {\n    //@ts-ignore\n    self.error = error\n  },\n}))\n\nexport default TeamProfileApiActions\n","import { types } from 'mobx-state-tree'\nimport TeamProfileApiActions from './TeamProfileApiActions'\n\nexport const TeamProfile = types.model('TeamProfile', {\n  profile: types.maybeNull(types.frozen({})),\n  isLoaded: types.boolean,\n  error: types.maybeNull(types.frozen({})),\n})\n\nconst TeamProfileStore = types.compose(\n  TeamProfile,\n  TeamProfileApiActions,\n)\n\nexport default TeamProfileStore\n","import TeamProfileStore from './TeamProfileStore'\n\nexport default TeamProfileStore.create({\n  profile: null,\n  isLoaded: false,\n  error: null,\n})\n","import { types } from 'mobx-state-tree'\nimport { values } from 'mobx'\n\nimport orderBy from 'lodash/orderBy'\nimport get from 'lodash/get'\nimport head from 'lodash/head'\n\nimport { callApi } from 'react-sport'\n// @ts-ignore\nimport routes from 'config/routes'\n\nconst TournamentPageApiActions = types.model({}).actions(self => ({\n  fetchSeasons(tournamentId: number) {\n    const url = `${routes.API_ROOT}/data`\n    const config = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'scout_tournament_season_list',\n        params: {\n          _p_tournament_id: tournamentId,\n        },\n      }),\n    }\n\n    return callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        self.isLoaded = false\n        //@ts-ignore\n        self.error = null\n      },\n      //@ts-ignore\n      onSuccess: json => self._onSuccessSeasons(json, tournamentId),\n      //@ts-ignore\n      onError: self._onError,\n    })\n  },\n\n  _onSuccessSeasons(\n    json: {\n      data: Array<{\n        scout_tournament_season_list: Array<{}>,\n      }>,\n    },\n    tournamentId: number,\n  ) {\n    const apiResponse = orderBy(\n      get(json, 'data[0].scout_tournament_season_list', []),\n      ['season_id'],\n      ['desc'],\n    )\n    //@ts-ignore\n    apiResponse.forEach(season => self.seasons.set(season.season_id, season))\n    //@ts-ignore\n    const defaultSeasonId = head(values(self.seasons)).season_id\n    //@ts-ignore\n    self.changeActiveSeason(tournamentId, defaultSeasonId)\n    //@ts-ignore\n    self.error = null\n    //@ts-ignore\n    self.isLoaded = true\n  },\n\n  _onError(error: any) {\n    //@ts-ignore\n    self.error = error\n  },\n}))\n\nexport default TournamentPageApiActions\n","import { types, getRoot } from 'mobx-state-tree'\nimport { values } from 'mobx'\n\nconst TournamentSeasonSelectActions = types\n  .model({})\n  .volatile(() => ({\n    selectedSeason: {},\n    opened: false,\n  }))\n  .actions(self => ({\n    changeActiveSeason: (tournamentId: number, id: number) => {\n      //@ts-ignore\n      self.selectedSeason = self.seasons.get(id)\n      getRoot(self).tournamentMatches.fetchMatchesInfo(tournamentId, id)\n    },\n  }))\n  .views(self => ({\n    get seasonsList() {\n      //@ts-ignore\n      return values(self.seasons)\n    },\n  }))\n\nexport default TournamentSeasonSelectActions\n","import { types } from 'mobx-state-tree'\nimport TournamentSeasonSelectApiActions from './TournamentSeasonSelectApiActions'\nimport TournamentSeasonSelectActions from './TournamentSeasonSelectActions'\n\nconst Season = types.model('Season', {\n  season_id: types.maybeNull(types.number),\n  season_name: types.maybeNull(types.string),\n})\n\nexport const TournamentSeasons = types.model('TournamentSeasons', {\n  seasons: types.map(Season),\n  isLoaded: false,\n  error: types.maybeNull(types.frozen({})),\n})\n\nconst TournamentSeasonsStore = types.compose(\n  TournamentSeasons,\n  TournamentSeasonSelectApiActions,\n  TournamentSeasonSelectActions,\n)\n\nexport default TournamentSeasonsStore\n","import { types } from 'mobx-state-tree'\n\nimport get from 'lodash/get'\n\nimport { callApi } from 'react-sport'\n\n// @ts-ignore\nimport routes from 'config/routes'\n\nconst TournamentPageApiActions = types.model({}).actions(self => ({\n  fetchTournamentProfile(tournamentId: number) {\n    const url = `${routes.API_ROOT}/data`\n    const config = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'scout_tournament_inf',\n        params: {\n          _p_tournament_id: tournamentId,\n        },\n      }),\n    }\n\n    return callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        self.profile = {}\n        //@ts-ignore\n        self.isLoaded = false\n      },\n      //@ts-ignore\n      onSuccess: self._onSuccess,\n      //@ts-ignore\n      onError: self._onError,\n    })\n  },\n\n  _onSuccess(json: {\n    data: Array<{\n      scout_tournament_inf: {},\n    }>,\n  }) {\n    //@ts-ignore\n    self.profile = get(json, 'data[0].scout_tournament_inf', {})\n    //@ts-ignore\n    self.error = null\n    //@ts-ignore\n    self.isLoaded = true\n  },\n\n  _onError(error: any) {\n    //@ts-ignore\n    self.error = error\n  },\n}))\n\nexport default TournamentPageApiActions\n","import { types } from 'mobx-state-tree'\nimport TournamentPageApiActions from './TournamentPageApiActions'\n\nexport const TournamentPage = types.model('TournamentProfile', {\n  profile: types.maybeNull(types.frozen({})),\n  isLoaded: false,\n  error: types.maybeNull(types.frozen({})),\n})\n\nconst TournamentPageStore = types.compose(\n  TournamentPage,\n  TournamentPageApiActions,\n)\n\nexport default TournamentPageStore\n","import { types, flow } from 'mobx-state-tree'\n\nimport map from 'lodash/fp/map'\nimport isEmpty from 'lodash/isEmpty'\nimport values from 'lodash/fp/values'\nimport flatten from 'lodash/fp/flatten'\nimport filter from 'lodash/fp/filter'\nimport reduce from 'lodash/reduce'\nimport pipe from 'lodash/fp/pipe'\n\nimport { callApi } from 'react-sport'\n\nimport { filterDBStats } from 'module/utils/helpers'\nimport routes from 'config/routes'\n\ntype TConfig = {\n  method: string,\n  body: string,\n}\n\nexport const MatchPagePlayersApiActions = types.model({})\n  .actions(self => ({\n    fetchMatchesInfo: flow(\n      //@ts-ignore\n      function* fetchMatchesInfo(matchId) {\n        try {\n          // Делаем запрос для получения списка игроков в командах\n          //@ts-ignore\n          yield self.fetchPlayers(matchId)\n          // Делаем запрос для получения списка всех параметров\n          //@ts-ignore\n          yield self.getGearParamsList(1)\n          // Делаем запрос для получения значений для игроков\n          //@ts-ignore\n          yield self.fetchTableStats(matchId)\n        } catch (error) {\n          //@ts-ignore\n          self._onError(error)\n        }\n      },\n    ),\n\n    fetchPlayers(matchId: number | string) {\n      const url: string = `${routes.API_ROOT}/data`\n      const config: TConfig = {\n        method: 'POST',\n        body: JSON.stringify({\n          proc: 'ask_players_list_match',\n          params: {\n            _v_match_id: matchId,\n            _v_played: true,\n          },\n        }),\n      }\n      return callApi({\n        url,\n        config,\n        //@ts-ignore\n        onRequest: () => { self.isLoaded = false },\n        //@ts-ignore\n        onSuccess: self._onSuccessPlayers,\n        //@ts-ignore\n        onError: self._onError,\n      })\n    },\n\n    //@ts-ignore\n    _onSuccessPlayers(json: { data?: Array<any> } = []) {\n      const playersPlayedThisMatch = filter('played')(json.data)\n      //@ts-ignore\n      self.playerList = reduce(\n        playersPlayedThisMatch,\n        (acc, curr) => {\n          //@ts-ignore\n          const players = acc[curr.f_team] || []\n          //@ts-ignore\n          acc[curr.f_team] = [\n            ...players,\n            {\n              ...curr,\n              sortBy: 0,\n            },\n          ]\n          return acc\n        }, {},\n      )\n\n      //@ts-ignore\n      self.error = null\n      // Делаем запрос для получения данных по полученным игрокам\n      //@ts-ignore\n      self.fetchPlayersInfo()\n    },\n\n    fetchPlayersInfo() {\n      const url: string = `${routes.API_ROOT}/data`\n      const players = pipe(\n        values,\n        flatten,\n        filter({ type_player: 'p' }),\n        map('f_player'),\n        //@ts-ignore\n      )(self.playerList)\n\n      const config: TConfig = {\n        method: 'POST',\n        body: JSON.stringify({\n          proc: 'scout_players_info',\n          params: {\n            _p_player_id: players,\n          },\n        }),\n      }\n      return callApi({\n        url,\n        config,\n        //@ts-ignore\n        onRequest: () => { self.isLoaded = false },\n        //@ts-ignore\n        onSuccess: self._onSuccessPlayersInfo,\n        //@ts-ignore\n        onError: self._onError,\n      })\n    },\n\n    //@ts-ignore\n    _onSuccessPlayersInfo(json: { data: Array<any> }) {\n      //@ts-ignore\n      self.playersInfo = json.data || []\n      //@ts-ignore\n      self.error = null\n      //@ts-ignore\n      self.updatePlayerProfile()\n    },\n\n    fetchTableStats(matchId: number | string) {\n      const url: string = `${routes.API_ROOT}/data`\n      const config: TConfig = {\n        method: 'POST',\n        body: JSON.stringify({\n          proc: 'ask_player_param_view',\n          params: {\n            _v_match_id: [matchId],\n            _v_player_id:\n              pipe(\n                values,\n                flatten,\n                map('f_player'),\n                //@ts-ignore\n              )(self.playerList),\n            //@ts-ignore\n            _v_param_id: map('param_id')(self.totalParams),\n          },\n        }),\n      }\n      return callApi({\n        url,\n        config,\n        onRequest: () => {\n          //@ts-ignore\n          self.error = null\n        },\n        //@ts-ignore\n        onSuccess: self._onSuccessStats,\n        //@ts-ignore\n        onError: self._onError,\n      })\n    },\n\n    //@ts-ignore\n    _onSuccessStats(json: { data: Array<{}> }) {\n      //@ts-ignore\n      self.tableStats = filterDBStats(json.data)\n      if (\n        //@ts-ignore\n        isEmpty(self.tables)\n        && window.localStorage.getItem('matchPagePlayers') === null\n      ) {\n        //@ts-ignore\n        self.saveTables()\n      } else {\n        //@ts-ignore\n        self.tables = JSON.parse(window.localStorage.getItem('matchPagePlayers'))\n      }\n      //@ts-ignore\n      self.isLoaded = true\n      //@ts-ignore\n      self.error = null\n    },\n\n    //@ts-ignore\n    _onError(error: {}) {\n      //@ts-ignore\n      self.error = error\n    },\n\n    setIsLoaded() {\n      //@ts-ignore\n      self.isLoaded = !self.isLoaded\n    },\n  }))\n","import { types } from 'mobx-state-tree'\n\nimport filter from 'lodash/fp/filter'\nimport sortBy from 'lodash/fp/sortBy'\nimport flow from 'lodash/fp/flow'\nimport reduce from 'lodash/reduce'\nimport map from 'lodash/map'\nimport get from 'lodash/get'\nimport find from 'lodash/find'\nimport forEach from 'lodash/forEach'\n\n// @ts-ignore\nimport stores from 'features/stores'\n\n// @ts-ignore\nimport { saveTablesToLocalStorage } from 'module/utils/helpers'\n\nexport const MatchPagePlayersActions = types.model({}).actions(self => ({\n  saveTables() {\n    //@ts-ignore\n    forEach(self.gearParams, ({ groupName, params }, index) => {\n      //@ts-ignore\n      const position: number = index + 1\n      const table: {\n        position: number,\n        selectedParams: Array<{ is_default: string }>,\n        tableName: string | number,\n      } = {\n        position,\n        //@ts-ignore\n        selectedParams: flow(\n          filter('is_default'),\n          sortBy(['gear_group_id', 'sort_order']),\n        )(params),\n        tableName: String(groupName),\n        summaryType: 'average_for_match',\n      }\n      if (table.selectedParams.length) {\n        //@ts-ignore\n        self.tables = {\n          //@ts-ignore\n          ...self.tables,\n          [position]: {\n            ...table,\n            sortInc: false,\n            activeId: null,\n          },\n        }\n      }\n      //@ts-ignore\n      saveTablesToLocalStorage({\n        name: 'matchPagePlayers',\n        //@ts-ignore\n        tables: self.tables,\n      })\n    })\n  },\n\n  // Дополняем профиль игрока именем и фамилией\n  updatePlayerProfile() {\n    const {\n      data: { team1_id, team2_id },\n      //@ts-ignore\n    } = stores.matchProfile\n    const teams = [team1_id, team2_id]\n\n    //@ts-ignore\n    self.playerList = reduce(\n      teams,\n      (acc, curr) => {\n        //@ts-ignore\n        const currentTeamPlayers = get(self.playerList, curr, [])\n        //@ts-ignore\n        acc[curr] = map(currentTeamPlayers, (player) => {\n          const {\n            firstname_eng,\n            firstname_rus,\n            lastname_eng,\n            lastname_rus,\n          } = get(\n            //@ts-ignore\n            find(self.playersInfo, { f_player: player.f_player }),\n            'prop_player[0]',\n            {},\n          )\n\n          return {\n            ...player,\n            firstname_eng,\n            firstname_rus,\n            lastname_eng,\n            lastname_rus,\n          }\n        })\n        return acc\n      },\n      {},\n    )\n  },\n\n  //@ts-ignore\n  //@ts-ignore\n  setActiveParam(table, param) {\n    const { position } = table\n    //@ts-ignore\n    self.tables = {\n      //@ts-ignore\n      ...self.tables,\n      [position]: {\n        ...table,\n        //@ts-ignore\n        sortInc: !get(self.tables, [position, 'sortInc']),\n        activeId: param.param_id,\n      },\n    }\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\nimport { TableStore } from 'features/Table/models/tableModel'\n\nimport { MatchPagePlayersApiActions } from './apiActions'\nimport { MatchPagePlayersActions } from './actions'\n\nconst PlayerData = types.model('PlayerData', {\n  firstname_eng: types.maybeNull(types.string),\n  firstname_rus: types.maybeNull(types.string),\n  lastname_eng: types.maybeNull(types.string),\n  lastname_rus: types.maybeNull(types.string),\n  nickname_eng: types.maybeNull(types.string),\n  nickname_rus: types.maybeNull(types.string),\n})\n\nconst PlayerSimpleModel = types.model('PlayerSimple', {\n  f_player: types.number,\n  prop_player: types.array(PlayerData),\n})\n\nconst ParamExtended = types.model('Param', {\n  f_match: types.number,\n  f_match_event_ids: types.maybeNull(types.array(types.number)),\n  f_match_event_ids_json: types.maybeNull(types.array(types.number)),\n  f_option_0: types.number,\n  f_option_1: types.maybeNull(types.number),\n  f_option_2: types.maybeNull(types.number),\n  f_option_3: types.maybeNull(types.number),\n  f_option_4: types.maybeNull(types.number),\n  f_option_5: types.maybeNull(types.number),\n  f_option_6: types.maybeNull(types.number),\n  f_param: types.maybeNull(types.number),\n  f_team: types.maybeNull(types.number),\n  f_player: types.maybeNull(types.number),\n  f_variant_zone: types.maybeNull(types.number),\n  id: types.string,\n  param_name: types.string,\n  value: types.maybeNull(types.number),\n})\n\nexport const MatchPagePlayersTable = types.model('MatchPagePlayers', {\n  storeName: 'matchPagePlayers',\n  isLoaded: false,\n  tableStats: types.array(ParamExtended),\n  error: types.maybeNull(types.frozen({})),\n  playersInfo: types.array(PlayerSimpleModel),\n  tables: types.frozen({}),\n  playerList: types.frozen({}),\n})\n\nexport const MatchPagePlayersStore = types.compose(\n  // общие методы и свойства таблиц\n  TableStore,\n  // Собственные методы и свойства\n  MatchPagePlayersTable,\n  MatchPagePlayersApiActions,\n  MatchPagePlayersActions,\n)\n","import { types } from 'mobx-state-tree'\n\nconst Param = types.model('ParamSimple', {\n  p: types.number,\n  o: types.number,\n  v: types.number,\n})\n\nconst Match = types.model('Match', {\n  f_match: types.number,\n  match_date: types.string,\n  match_status: types.number,\n  home_match: types.string,\n  win_lose: types.string,\n  name_ru: types.string,\n  name_en: types.string,\n  name_opponent_ru: types.string,\n  name_opponent_en: types.string,\n  score: types.number,\n  opponent_score: types.number,\n  team_id: types.number,\n  opp_team_id: types.number,\n  params: types.maybeNull(types.array(Param)),\n  params_opp: types.maybeNull(types.array(Param)),\n})\n\nexport const TournamentMatches = types.model('TournamentSeasons', {\n  storeName: 'tournamentMatches',\n  matches: types.array(Match),\n  isLoaded: false,\n  error: types.maybeNull(types.frozen({})),\n})\n","\nimport { types } from 'mobx-state-tree'\nimport orderBy from 'lodash/orderBy'\nimport get from 'lodash/get'\n\nimport { callApi } from 'react-sport'\n\n// @ts-ignore\nimport routes from 'config/routes'\n\ntype TConfig = {\n  method: string,\n  body: string,\n};\n\nconst url: string = `${routes.API_ROOT}/data`\n\nexport const TournamentMatchesApiActions = types.model({}).actions(self => ({\n  fetchMatchesInfo(tournamentId: number, seasonId: number) {\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'scout_tournament_matches_stat',\n        params: {\n          _p_tournament_id: tournamentId,\n          _p_season_id: seasonId,\n        },\n      }),\n    }\n\n    return callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        self.isLoaded = false\n        //@ts-ignore\n        self.error = null\n        //@ts-ignore\n        self.matches = []\n      },\n      //@ts-ignore\n      onSuccess: self._onSuccessMatchesInfo,\n      //@ts-ignore\n      onError: self._onError,\n    })\n  },\n\n  _onSuccessMatchesInfo(json: {\n    data: Array<{\n      scout_tournament_matches_stat: Array<{}>,\n    }>,\n  }) {\n    //@ts-ignore\n    self.matches = orderBy(\n      get(json, 'data[0].scout_tournament_matches_stat', []),\n      'match_date',\n      'desc',\n    )\n    //@ts-ignore\n    self.error = null\n    //@ts-ignore\n    self.isLoaded = true\n  },\n\n  _onError(error: any) {\n    //@ts-ignore\n    self.error = error\n  },\n}))\n","\nimport { types } from 'mobx-state-tree'\n\nimport map from 'lodash/map'\n\nexport const TournamentMatchesViews = types.model({}).views(self => ({\n  // Считаем кол-во матчей для запроса\n  get matchesIds() {\n    //@ts-ignore\n    return map(self.matches, 'f_match')\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\nimport { TournamentMatches } from './TournamentMatchesStore'\nimport { TournamentMatchesApiActions } from './TournamentMatchesApiActions'\nimport { TournamentMatchesViews } from './TournamentMatchesViews'\n\nexport const TournamentMatchesStore = types.compose(\n  TournamentMatches,\n  TournamentMatchesApiActions,\n  TournamentMatchesViews,\n)\n","import { types } from 'mobx-state-tree'\n\nimport set from 'lodash/set'\nimport reduce from 'lodash/reduce'\nimport uniq from 'lodash/uniq'\nimport get from 'lodash/get'\nimport map from 'lodash/map'\n\nimport { callApi } from 'react-sport'\n\nimport routes from 'config/routes'\n\nimport { team_params } from 'config/params'\nimport { filterDBStats } from 'module/utils/helpers'\n\ntype TConfig = {\n  method: string,\n  body: string,\n}\n\nconst TournamentHeaderStatsApiActions = types.model({}).actions(self => ({\n  fetchHeaderParams() {\n    const url: string = `${routes.API_ROOT}/data`\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'ask_tournament_param_view',\n        params: {\n          //@ts-ignore\n          _v_match_id: self.matchesIds,\n          _v_param_id: map(team_params, 'param_id'),\n        },\n      }),\n    }\n    return callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        self.loaded = false\n        //@ts-ignore\n        self.error = null\n      },\n      //@ts-ignore\n      onSuccess: (json: { data: Array<{}> }) => self._onSuccesHeaderParams(json),\n      //@ts-ignore\n      onError: (error: any) => self._onError(error),\n    })\n  },\n\n  _onSuccesHeaderParams(json: { data: Array<{}> }) {\n    // Фильтруем ответ. Нужно отсеить параметры для части поля и тд\n    const filteredStats = filterDBStats(json.data)\n    //@ts-ignore\n    self.stats = reduce(\n      filteredStats,\n      (acc, { f_match, f_match_event_ids_json, f_param, value }) => {\n        //@ts-ignore\n        if (acc[f_param]) {\n          const allEvents = get(acc, `${f_param}.events`) || []\n          const matches = get(acc, `${f_param}.matches`) || []\n          const currentEvents = f_match_event_ids_json || []\n\n          //@ts-ignore\n          acc[f_param] = {\n            //@ts-ignore\n            count: acc[f_param].count + 1,\n            //@ts-ignore\n            value: acc[f_param].value + value,\n            matches: [...matches, f_match],\n            events: [...allEvents, ...currentEvents],\n          }\n        } else {\n          //@ts-ignore\n          acc[f_param] = {\n            count: 1,\n            matches: [f_match],\n            value,\n            events: f_match_event_ids_json,\n          }\n        }\n        //@ts-ignore\n        const { matches } = acc[f_param]\n        set(acc, `${f_param}.matches`, uniq(matches))\n\n        return acc\n      }, {},\n    )\n    //@ts-ignore\n    self.loaded = true\n  },\n\n  _onError(error: any) {\n    //@ts-ignore\n    self.error = error\n  },\n\n}))\n\nexport default TournamentHeaderStatsApiActions\n","import { types, getParent } from 'mobx-state-tree'\n\nimport reduce from 'lodash/reduce'\nimport size from 'lodash/size'\nimport includes from 'lodash/includes'\n\n// @ts-ignore\nimport { percentageParams } from 'config/teamPopupParams'\n\nconst TournamentHeaderStatsActions = types\n  .model({})\n  .volatile(() => ({\n    stats: {},\n  }))\n  .views(self => ({\n    get matchesIds() {\n      return getParent(self).tournamentMatches.matchesIds\n    },\n\n    get countAverageStatValue() {\n      return reduce(\n        self.stats,\n        (result, { count, matches, value }, key) => {\n          const denominator = includes(percentageParams, Number(key))\n            ? count\n            : size(matches)\n\n          return {\n            ...result,\n            [key]: value / denominator,\n          }\n        },\n        {},\n      )\n    },\n  }))\n\nexport default TournamentHeaderStatsActions\n","import { types } from 'mobx-state-tree'\nimport TournamentHeaderStatsApiActions from './TournamentHeaderStatsApiActions'\nimport TournamentHeaderStatsActions from './TournamentHeaderStatsActions'\n\nconst Param = types.model('Param', {\n  p: types.number,\n  o: types.number,\n  v: types.number,\n})\n\nconst GearParam = types.model('GearParam', {\n  f_option_3: types.number,\n  full_lexical_formula: types.string,\n  gear_group_id: types.number,\n  gear_subgroup_id: types.number,\n  is_default: types.maybeNull(types.string),\n  lexical_formula: types.string,\n  name: types.string,\n  param1_id: types.maybeNull(types.array(types.string)),\n  param2_id: types.maybeNull(types.array(types.string)),\n  param_id: types.number,\n  short_lexical_formula: types.string,\n  sort_order: types.number,\n})\n\nconst Match = types.model('Match', {\n  f_match: types.number,\n  match_date: types.string,\n  match_status: types.number,\n  home_match: types.string,\n  win_lose: types.string,\n  name_ru: types.string,\n  name_en: types.string,\n  name_opponent_ru: types.string,\n  name_opponent_en: types.string,\n  score: types.number,\n  opponent_score: types.number,\n  team_id: types.number,\n  opp_team_id: types.number,\n  params: types.maybeNull(types.array(Param)),\n  params_opp: types.maybeNull(types.array(Param)),\n})\n\nexport const TournamentHeaderStats = types.model('TournamentHeaderStats', {\n  matches: types.map(Match),\n  loaded: false,\n  error: types.maybeNull(types.frozen({})),\n  gearParams: types.maybeNull(types.array(GearParam)),\n})\n\nconst TournamentHeaderStatsStore = types.compose(\n  TournamentHeaderStats,\n  TournamentHeaderStatsApiActions,\n  TournamentHeaderStatsActions,\n)\n\nexport default TournamentHeaderStatsStore\n","import { types, Instance } from 'mobx-state-tree'\n\nimport { TableStore } from 'features/Table/models/tableModel'\n\nconst ParamExtended = types.model('Param', {\n  f_match: types.number,\n  f_match_event_ids: types.maybeNull(types.array(types.number)),\n  f_match_event_ids_json: types.maybeNull(types.array(types.number)),\n  f_option_0: types.number,\n  f_option_1: types.maybeNull(types.number),\n  f_option_2: types.maybeNull(types.number),\n  f_option_3: types.maybeNull(types.number),\n  f_option_4: types.maybeNull(types.number),\n  f_option_5: types.maybeNull(types.number),\n  f_option_6: types.maybeNull(types.number),\n  f_param: types.maybeNull(types.number),\n  f_player: types.maybeNull(types.number),\n  f_team: types.maybeNull(types.number),\n  f_variant_zone: types.maybeNull(types.number),\n  id: types.string,\n  param_name: types.string,\n  value: types.maybeNull(types.number),\n})\n\nexport const PlayerMatchesModel = types.compose(\n  types.model('PlayerMatchesModel', {\n    error: types.maybeNull(types.frozen({})),\n    isLoaded: false,\n    storeName: 'playerMatches',\n    tableStats: types.array(ParamExtended),\n    tables: types.frozen({}),\n    url: types.string,\n  }),\n  // общие методы и свойства таблиц\n  TableStore,\n)\n\nexport type TParamExtended = Instance<typeof ParamExtended>\n","import { flow } from 'mobx-state-tree'\n\nimport map from 'lodash/map'\nimport get from 'lodash/get'\n\nimport { callApi } from 'react-sport'\n\nimport { filterDBStats } from 'module/utils/helpers'\nimport stores from 'features/stores'\n\nimport { TParamExtended } from './PlayerPageMatchesStore'\n\nimport { PlayerPageMatchesActions } from './actions'\n\ntype TConfig = {\n  body: string,\n  method: string,\n}\n\ntype TFetchPlayerMatches = {\n  ampluaId: number,\n  matches: Array<number>,\n  playerId: number,\n}\n\nexport const PlayerPageMatchesApiActions = PlayerPageMatchesActions\n  .actions(self => ({\n    _onError(error: {}) {\n      self.error = error\n      self.isLoaded = false\n    },\n\n    _onSuccessStats(json: { data: Array<TParamExtended> }) {\n      //@ts-ignore\n      self.tableStats = filterDBStats(json.data)\n      const playerMatches = get(\n        JSON.parse(window.localStorage.getItem('playerMatches') || '{}'),\n        get(stores, 'playerProfile.profile.amplua.id'),\n      )\n      if (playerMatches) {\n        self.tables = playerMatches\n      } else {\n        self.saveTables()\n      }\n      self.error = {}\n      self.isLoaded = true\n    },\n  }))\n  .actions(self => ({\n    /** Запрос для получения статистики по параметрам\n      * @param {array} matches - список матчей\n      * @param {string} teamId - айди игрока\n      */\n    fetchTableStats(matches: Array<number>, playerId: number | string) {\n      const config: TConfig = {\n        body: JSON.stringify({\n          params: {\n            _v_match_id: matches,\n            _v_param_id: map(self.totalParams, 'param_id'),\n            _v_player_id: [playerId],\n          },\n          proc: 'ask_player_param_view',\n        }),\n        method: 'POST',\n      }\n      return callApi({\n        config,\n        onError: self._onError,\n        onRequest: () => {\n          self.isLoaded = false\n          self.error = {}\n        },\n        onSuccess: self._onSuccessStats,\n        url: self.url,\n      })\n    },\n  }))\n  .actions(self => ({\n    fetchPlayerMatches: flow(\n      function* fetchPlayerMatches({\n        ampluaId,\n        matches,\n        playerId,\n      }: TFetchPlayerMatches) {\n        try {\n          // Делаем запрос для получения списка всех параметров\n          yield self.getGearParamsList(ampluaId)\n          // Делаем запрос для получения списка всех групп параметров\n          yield self.fetchGroups()\n          // Делаем запрос для получения значений для игроков\n          yield self.fetchTableStats(matches, playerId)\n        } catch (error) {\n          self._onError(error)\n        }\n      },\n    ),\n  }))\n","import filter from 'lodash/filter'\nimport get from 'lodash/get'\nimport forEach from 'lodash/forEach'\n\nimport { saveTablesToLocalStorage } from 'module/utils/helpers'\n\nimport stores from 'features/stores'\nimport { PlayerMatchesModel } from './PlayerPageMatchesStore'\n\nexport const PlayerPageMatchesActions = PlayerMatchesModel\n  .actions(self => ({\n    // Записываем в стор таблицы после получения параметров\n    saveTables() {\n      const filteredParams = filter(self.gearParams, ({ params }) => params.length)\n      forEach(filteredParams, (\n        { groupName, params }\n        : {\n          groupName: string | null,\n          params: Array<{ is_default: string | null }>,\n        },\n        index: number,\n      ) => {\n        const position: number = index + 1\n        const table: {\n          position: number,\n          selectedParams: Array<{ is_default: string | null }>,\n          summaryType: string,\n          tableName: string | number,\n        } = {\n          position,\n          selectedParams: filter(params, { is_default: 'default' }),\n          summaryType: 'average_for_match',\n          tableName: String(groupName),\n        }\n        if (table.selectedParams.length) {\n          self.tables = {\n            ...self.tables,\n            [position]: {\n              ...table,\n              sortInc: false,\n              activeId: null,\n            },\n          }\n        }\n      })\n\n      saveTablesToLocalStorage({\n        id: get(stores, 'playerProfile.profile.amplua.id'),\n        name: 'playerMatches',\n        tables: self.tables,\n      })\n    },\n  }))\n","import routes from 'config/routes'\n\nimport { PlayerPageMatchesApiActions } from './apiActions'\n\nconst url: string = `${routes.API_ROOT}/data`\n\nexport const playerMatchesStore = PlayerPageMatchesApiActions.create({\n  error: {},\n  isLoaded: false,\n  storeName: 'playerMatches',\n  tableStats: [],\n  tables: {},\n  tempTableName: '',\n  url,\n})\n","import { types } from 'mobx-state-tree'\n\nconst getPlainError = (error: Error | null) =>\n  (error\n    ? {\n      message: error.message,\n      name: error.name,\n      stack: error.stack,\n    }\n    : null)\n\nconst Error = types.model({\n  message: types.string,\n  name: '',\n  stack: types.maybe(types.string),\n})\n\nexport const ErrorModel = types\n  .model({\n    error: types.maybeNull(Error),\n  })\n  .actions(self => ({\n    setError(error: Error | null) {\n      self.error = getPlainError(error)\n    },\n  }))\n","import { types } from 'mobx-state-tree'\n\nexport const FetchModel = types\n  .model('Fetch', {\n    isLoaded: false,\n  })\n  .actions(self => ({\n    setIsLoaded(isLoaded: boolean) {\n      self.isLoaded = isLoaded\n    },\n  }))\n","import { types, Instance } from 'mobx-state-tree'\n\nimport { TableStore } from 'features/Table/models/tableModel'\nimport { ErrorModel } from 'features/ErrorModel'\nimport { FetchModel } from 'features/FetchModel'\n\nconst ParamExtended = types.model('Param', {\n  f_match: types.number,\n  f_match_event_ids: types.maybeNull(types.array(types.number)),\n  f_match_event_ids_json: types.maybeNull(types.array(types.number)),\n  f_option_0: types.number,\n  f_option_1: types.maybeNull(types.number),\n  f_option_2: types.maybeNull(types.number),\n  f_option_3: types.maybeNull(types.number),\n  f_option_4: types.maybeNull(types.number),\n  f_option_5: types.maybeNull(types.number),\n  f_option_6: types.maybeNull(types.number),\n  f_param: types.maybeNull(types.number),\n  f_player: types.maybeNull(types.number),\n  f_team: types.maybeNull(types.number),\n  f_variant_zone: types.maybeNull(types.number),\n  id: types.string,\n  param_name: types.string,\n  value: types.maybeNull(types.number),\n})\n\nexport const TeamMatchesModel = types.compose(\n  types.model('TeamMatchesModel', {\n    isLoaded: false,\n    showOpponentStats: types.boolean,\n    storeName: 'teamMatches',\n    tableStats: types.array(ParamExtended),\n    tables: types.frozen({}),\n    url: types.string,\n  }),\n  ErrorModel,\n  FetchModel,\n  // общие методы и свойства таблиц\n  TableStore,\n)\n\nexport type TParamExtended = Instance<typeof ParamExtended>\n","import { dataURL } from 'config/routes'\n\nimport { TeamPageMatchesApiActions } from './apiActions'\n\nexport const teamMatchesStore = TeamPageMatchesApiActions.create({\n  error: null,\n  isLoaded: false,\n  showOpponentStats: false,\n  storeName: 'teamMatches',\n  tableStats: [],\n  tables: {},\n  tempTableName: '',\n  url: dataURL,\n})\n","import filter from 'lodash/filter'\n\nimport { saveTablesToLocalStorage } from 'module/utils/helpers'\n\nimport { TeamMatchesModel, TParamExtended } from './model'\n\ntype TGearParam = {\n  groupName: string | null,\n  params: Array<{ is_default: string | null }>,\n}\n\ntype TTable = {\n  position: number,\n  selectedParams: Array<{ is_default: string | null }>,\n  summaryType: string,\n  tableName: string | number,\n}\nexport const TeamPageMatchesActions = TeamMatchesModel\n  .actions(self => ({\n    setTableStats(tableStats: Array<TParamExtended>) {\n      //@ts-ignore\n      self.tableStats = tableStats\n    },\n    setTables(tables:{}) {\n      self.tables = tables\n    },\n  }))\n  .actions(self => ({\n    // Записываем в стор таблицы после получения параметров\n    saveTables() {\n      self.gearParams.forEach((\n        { groupName, params }: TGearParam,\n        index: number,\n      ) => {\n        const position: number = index + 1\n        const table: TTable = {\n          position: index + 1,\n          selectedParams: filter(params, { is_default: 'default' }),\n          summaryType: 'average_for_match',\n          tableName: String(groupName),\n        }\n\n        if (table.selectedParams.length) {\n          self.setTables({\n            ...self.tables,\n            [position]: {\n              ...table,\n              sortInc: false,\n              activeId: null,\n            },\n          })\n        }\n      })\n\n      saveTablesToLocalStorage({\n        name: 'teamMatches',\n        tables: self.tables,\n      })\n    },\n\n    toggleShowOpponent() {\n      self.showOpponentStats = !self.showOpponentStats\n    },\n  }))\n","import { flow } from 'mobx-state-tree'\n\nimport map from 'lodash/map'\nimport isEmpty from 'lodash/isEmpty'\n\nimport { callApi } from 'react-sport'\n\nimport { filterDBStats } from 'module/utils/helpers'\n\nimport { TeamPageMatchesActions } from './actions'\n\nimport { TParamExtended } from './model'\n\ntype TConfig = {\n  body: string,\n  method: string,\n}\n\ntype TFetchTeamMatches = {\n  matches: Array<number>,\n  teamId: Array<number>,\n}\n\nexport const TeamPageMatchesApiActions = TeamPageMatchesActions\n  .actions(self => ({\n    _onError(error: Error) {\n      self.setError(error)\n      self.setIsLoaded(false)\n    },\n\n    _onSuccessStats(json: { data: Array<TParamExtended> }) {\n      const teamMatches = JSON.parse(window.localStorage.getItem('teamMatches') || '{}')\n\n      self.setTableStats(filterDBStats(json.data))\n\n      if (!isEmpty(teamMatches)) {\n        self.setTables(teamMatches)\n      } else {\n        self.saveTables()\n      }\n      self.setError(null)\n      self.setIsLoaded(true)\n    },\n  }))\n  .actions(self => ({\n    /** Запрос для получения статистики по параметрам\n      * @param {array} matches - список матчей\n      * @param {array} teamId - массив айди команд\n      */\n    fetchTableStats(matches: Array<number>, teamId: Array<number | string>) {\n      const config: TConfig = {\n        body: JSON.stringify({\n          params: {\n            _v_match_id: matches,\n            _v_param_id: map(self.totalParams, 'param_id'),\n            _v_team_id: teamId,\n          },\n          proc: 'ask_team_param_view',\n        }),\n        method: 'POST',\n      }\n      return callApi({\n        config,\n        onError: self._onError,\n        onRequest: () => {\n          self.setIsLoaded(false)\n          self.setError(null)\n        },\n        onSuccess: self._onSuccessStats,\n        url: self.url,\n      })\n    },\n  }))\n  .actions(self => ({\n    fetchTeamMatches: flow(\n      function* fetchTeamMatches({\n        matches,\n        teamId,\n      }: TFetchTeamMatches) {\n        try {\n          // Делаем запрос для получения списка всех параметров для шестеренки\n          yield self.getGearParamsList(0)\n          // Делаем запрос для получения значений для команд\n          yield self.fetchTableStats(matches, teamId)\n        } catch (error) {\n          self.setError(error)\n        }\n      },\n    ),\n  }))\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, lifecycle } from 'recompose'\nimport get from 'lodash/get'\nimport reduce from 'lodash/reduce'\nimport includes from 'lodash/includes'\n\nimport { Tables } from 'features/Table'\nimport Loader from 'features/components/common/loader/Loader'\n\nimport { tableTypes } from 'config/tables'\n\nimport {\n  TPropsInner,\n  TProps,\n  TLifecycle,\n  TParam,\n} from './types'\n\nconst TeamPageMatchesComponent = ({\n  pageId,\n  teamTable: {\n    isLoaded,\n    tables,\n  },\n}: TPropsInner) => (\n  <div>\n    {isLoaded\n      ? (\n        <Tables\n          tableType={tableTypes.teamMatches}\n          tables={tables}\n          pageId={pageId}\n        />\n      )\n      : <Loader />}\n  </div>\n)\n\nconst teamPageMatchesComposed = compose<TPropsInner, TProps>(\n  inject(\n    'teamTable',\n    'selectedMatches',\n    'matches',\n  ),\n  lifecycle<TLifecycle>({\n    componentDidMount() {\n      const {\n        matches: { list },\n        pageId,\n        selectedMatches,\n        teamTable: { fetchTeamMatches },\n      } = this.props\n\n      // Необходимо подготовить id команд соперников из выбранных матчей\n      const selectedMatchesIds = get(selectedMatches, ['team', pageId])\n      const allMatches = get(list, [pageId, 'matches'])\n      const opponentsIds = reduce(\n        allMatches,\n        (acc: Array<number>, curr: TParam) => {\n          if (includes(selectedMatchesIds, curr.f_match)) {\n            acc.push(Number(curr.f_team_opponent))\n          }\n          return acc\n        }, [],\n      )\n      fetchTeamMatches({\n        matches: selectedMatchesIds,\n        teamId: [Number(pageId), ...opponentsIds],\n      })\n    },\n    componentDidUpdate() {\n      const {\n        matches: { list },\n        pageId,\n        selectedMatches,\n        teamTable: { fetchTeamMatches },\n      } = this.props\n      const selectedMatchesIds = get(selectedMatches, ['team', pageId])\n      const allMatches = get(list, [pageId, 'matches'])\n\n      const opponentsIds = reduce(\n        allMatches,\n        (acc: Array<number>, curr: TParam) => {\n          if (includes(selectedMatchesIds, curr.f_match)) {\n            acc.push(Number(curr.f_team_opponent))\n          }\n          return acc\n        }, [],\n      )\n\n      fetchTeamMatches({\n        matches: selectedMatchesIds,\n        teamId: [Number(pageId), ...opponentsIds],\n      })\n    },\n  }),\n  observer,\n)\n\nexport const TeamPageMatches = teamPageMatchesComposed(TeamPageMatchesComponent)\n","import { types } from 'mobx-state-tree'\n\nimport { stores as remoteStore } from 'react-sport'\n\nimport routes from 'config/routes'\nimport { langsList, profilePaths } from 'config/common'\n\nimport history from 'features/history'\n\n// @ts-ignore\nimport BasicStore from 'features/stores/BasicStore'\n// @ts-ignore\nimport Tabs from 'features/stores/Tabs'\n// @ts-ignore\nimport Matches from 'features/stores/Matches/MatchesStore'\n// @ts-ignore\nimport PlayerProfile from 'features/stores/PlayerProfile/PlayerProfileStore'\n// @ts-ignore\nimport PlayerStats from 'features/stores/PlayerStatsHeader/PlayerStatsHeaderStore'\n// @ts-ignore\nimport TeamStats from 'features/stores/TeamStatsHeader/TeamStatsHeaderStore'\n// @ts-ignore\nimport InfoItem from 'features/stores/InfoItem'\n// @ts-ignore\nimport ComposeMarkers from 'features/stores/Markers/ComposeMarkers'\n// @ts-ignore\nimport Zones from 'features/stores/Zones/ZonesStore'\n// @ts-ignore\nimport ShotTypes from 'features/stores/ShotType/ShotTypeStore'\n// @ts-ignore\nimport MapShoot from 'features/stores/MapShoot/MapShootStore'\n// @ts-ignore\nimport PlayerInfo from 'features/stores/PlayerInfo/PlayerInfoStore'\n// @ts-ignore\nimport ToolTips from 'features/stores/ToolTips/ToolTipsStore'\n// @ts-ignore\nimport ShootsRange from 'features/stores/ShootsRange/ShootsRange'\n// @ts-ignore\nimport VideoCuts from 'features/stores/VideoCuts/ComposeVideoCuts'\n//@ts-ignore\nimport MatchLinks from 'features/stores/MatchLinks/MatchLinksStore'\n// @ts-ignore\nimport TableReports from 'features/stores/TableReports/TableReportsStore'\n// @ts-ignore\nimport playersCompareWidget from 'models/Widgets/PlayersCompare'\n// @ts-ignore\nimport teamPlayers from 'models/StatsTable/TeamTable/TeamPlayers'\n// @ts-ignore\nimport selectedMatches from 'models/SelectedMatches'\n// @ts-ignore\nimport tableReportsMST from 'models/TableReports'\n// @ts-ignore\nimport matchProfile from 'models/MatchProfile'\n// @ts-ignore\nimport videoLink from 'models/ExternalVideoLinks'\n// @ts-ignore\nimport filters from 'features/MapFilters/models'\n// @ts-ignore\nimport { TeamsCompareStore } from 'features/TeamsCompareWidget'\n// @ts-ignore\nimport teamProfile from 'features/TeamPage/models'\n// @ts-ignore\nimport TournamentSeasonSelectStore from 'features/TournamentSeasonSelect/models/TournamentSeasonSelectStore'\n// @ts-ignore\nimport TournamentPageStore from 'features/TournamentPage/models/TournamentPageStore'\n// @ts-ignore\nimport { TournamentMatchesTableStore } from 'features/TournamentPageMatchesTable/models/TournamentMatchesTableStore'\n// @ts-ignore\nimport { MatchPagePlayersStore } from 'features/MatchPagePlayers/models/matchPlayersStore'\n// @ts-ignore\nimport { TournamentMatchesStore } from 'features/TournamentPageMatches'\n// @ts-ignore\nimport { TournamentPlayersTableStore } from 'features/TournamentPagePlayersTable'\n// @ts-ignore\nimport TournamentHeaderStatsStore from 'features/TournamentHeaderStats/models/TournamentHeaderStatsStore'\n// @ts-ignore\nimport { playerMatchesStore } from 'features/PlayerPageMatches/models'\nimport { teamMatchesStore } from 'features/TeamPageMatches'\nimport { GearPopupStore } from 'features/GearPopup'\n\nconst stores = {}\nconst Markers = ComposeMarkers(BasicStore)\nconst markers = new Markers(stores)\nconst lexics = new remoteStore.Lexics(routes.API_ROOT, langsList)\nconst Cuts = VideoCuts(remoteStore.VideoSummaries, markers)\n\nconst mstRootStore = types\n  .model('rootStore', {\n    tournamentSeasonSelect: types.optional(TournamentSeasonSelectStore, {}),\n    tournamentsProfile: types.optional(TournamentPageStore, {}),\n    tournamentHeaderStats: types.optional(TournamentHeaderStatsStore, {}),\n    tournamentMatches: types.optional(TournamentMatchesStore, {}),\n    tournamentMatchesTableStore: types.optional(\n      TournamentMatchesTableStore,\n      //@ts-ignore\n      {},\n    ),\n    tournamentPlayersTableStore: types.optional(\n      TournamentPlayersTableStore,\n      //@ts-ignore\n      {},\n    ),\n    gearPopupStore: types.optional(GearPopupStore, {}),\n    teamsCompareWidget: types.optional(TeamsCompareStore, {}),\n  })\n  .create()\n\nObject.assign(stores, {\n  playersCompareWidget,\n  teamPlayers,\n  tableReportsMST,\n  matchProfile,\n  teamProfile,\n  selectedMatches,\n  videoLink,\n  filters,\n  // TODO заглушка для стора\n  tutorials: {},\n  tabs: new Tabs(stores),\n  matches: new Matches(stores),\n  matchTable: MatchPagePlayersStore.create(),\n  liveSearch: remoteStore.LiveSearch.create({\n    rootUrl: routes.API_ROOT,\n    sport: 'volleyball',\n  }),\n  //@ts-ignore\n  infoItem: new InfoItem(stores),\n  matchLinks: new MatchLinks(stores),\n  playerProfile: new PlayerProfile(stores),\n  playerStats: new PlayerStats(stores),\n  teamStats: new TeamStats(stores),\n  teamTable: teamMatchesStore,\n  playerTable: playerMatchesStore,\n  //@ts-ignore\n  zones: new Zones(stores),\n  //@ts-ignore\n  shotTypes: new ShotTypes(stores),\n  //@ts-ignore\n  mapShoot: new MapShoot(stores),\n  //@ts-ignore\n  playerInfo: new PlayerInfo(stores),\n  //@ts-ignore\n  tooltips: new ToolTips(stores),\n  tableReports: new TableReports(stores),\n  //@ts-ignore\n  shootsRange: new ShootsRange(stores),\n  videoPlayer: new remoteStore.VideoPlayer(routes.API_ROOT, 50000000),\n  header: new remoteStore.Header({\n    profilePopup: profilePaths,\n  }),\n  recent: new remoteStore.Recent(routes.API_ROOT),\n  searchString: new remoteStore.SearchString(routes.API_ROOT),\n  auth: new remoteStore.Auth(routes.API_ROOT, history),\n  //@ts-ignore\n  playersVS: new Cuts(routes.API_ROOT, 'player', lexics),\n  //@ts-ignore\n  teamsVS: new Cuts(routes.API_ROOT, 'team', lexics),\n  lexics,\n  markers,\n  ...mstRootStore,\n})\n\nexport default stores\n","import React from 'react'\n\nimport {\n  compose,\n  withHandlers,\n  withState,\n} from 'recompose'\nimport cx from 'classnames'\nimport map from 'lodash/map'\n\nimport { T9n, OutsideClick } from 'react-sport'\n\nimport { profilePaths } from 'config/common'\nimport { beta } from 'config/routes'\n\nimport {\n  TComposedInner,\n  TPropsOuter,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n} from './types'\n\nconst ProfilePopupComponent = ({\n  isOpened,\n  logoutClick,\n  toggleOpened,\n}: TComposedInner) => (\n  <div className='link-iconed-wrapper'>\n    <a\n      onClick={() => toggleOpened(!isOpened)}\n      className={\n        cx('link-iconed link-iconed-primary header-profile-link',\n          'js-open-dropdown tooltip-trigger')}\n    >\n      <div className='hover-tooltip'>\n        <T9n t='header_my_profile' />\n      </div>\n      <i className='icon-person' />\n      <T9n t='header_my_profile' className='link-iconed-text' />\n    </a>\n    {\n      isOpened && (\n        <div className='dropdown-menu-container js-dropdown-profile open'>\n          <ul className='list-unstyled'>\n            {map(profilePaths, (path, name) => (\n              <li>\n                <a\n                  href={`${beta}/${path}`}\n                >\n                  <T9n t={name} />\n                </a>\n              </li>\n            ))}\n            <li>\n              <a className='js-sign-out' onClick={logoutClick}>\n                <T9n t='header_quit' />\n              </a>\n            </li>\n          </ul>\n        </div>\n      )\n    }\n  </div>\n)\n\nconst composed = compose<TComposedInner, TPropsOuter >(\n  withState(\n    'isOpened',\n    'toggleOpened',\n    false,\n  ),\n  withState(\n    'componentName',\n    'changeComponentName',\n    'profilePopup',\n  ),\n\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    clickOutside: ({ toggleOpened }) => () => toggleOpened(false),\n\n    logoutClick: ({ logout }) => (e) => {\n      e.preventDefault()\n      logout()\n    },\n  }),\n  OutsideClick,\n)\n\nexport const ProfilePopup = composed(ProfilePopupComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withProps } from 'recompose'\nimport cx from 'classnames'\n\nimport { T9n } from 'react-sport'\n\nimport { beta } from 'config/routes'\nimport { profilePaths } from 'config/common'\n\ntype TProps = {\n  externalLink: string,\n}\n\nconst UploadVideoBtnComponent = ({\n  externalLink,\n}: TProps) => (\n  <div className='link-iconed-wrapper'>\n    <a\n      href={externalLink}\n      className={cx(\n        'link-iconed link-iconed-primary header-profile-link',\n        'js-open-dropdown tooltip-trigger',\n      )}\n    >\n      <div className='hover-tooltip'>\n        <T9n t='header_upload_video' />\n      </div>\n      <i className='upload-video__icon' />\n    </a>\n  </div>\n)\n\nconst injectedUploadVideoBtn = compose<TProps, {}>(\n  inject('auth'),\n  observer,\n  withProps<TProps, {}>(() =>\n    ({\n      externalLink: `${beta}/${profilePaths.header_upload_video}`,\n    })),\n  observer,\n)\n\nexport const UploadVideoBtn = injectedUploadVideoBtn(UploadVideoBtnComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, lifecycle } from 'recompose'\n\nimport {\n  T9n,\n  Langs,\n  TLexics,\n  LiveSearchUI,\n} from 'react-sport'\n\nimport { indexLexic } from 'config/lexics'\n\nimport { ProfilePopup } from 'features/ProfilePopup'\nimport { UploadVideoBtn } from 'features/UploadVideoBtn'\n\ntype TPropsLifecycle = {\n  lexics: TLexics,\n}\n\ntype TComposeInner = {\n  auth: {\n    logout: () => void,\n  },\n  lexics: TLexics,\n}\n\nexport const HomeComponent = ({ auth: { logout } }: TComposeInner) => (\n  <section className='home'>\n    <div className='header'>\n      <div className='header-table' data-block='sharedHeaderTable'>\n        <div className='header-row'>\n          <div className='header-column-left'>\n            <div className='container-fluid'>\n              <div className='row'>\n                <div className='logo' />\n              </div>\n            </div>\n          </div>\n          <p className='home__text'>\n            <T9n t='enter_team_or_player' />\n          </p>\n          <div className='header-column-responsive' id='header-live-search'>\n            <LiveSearchUI.LiveSearch />\n          </div>\n          <div className='header-column-right'>\n            <UploadVideoBtn />\n            <ProfilePopup logout={logout} />\n            <div className='lang-wrapper'>\n              <Langs />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </section>\n)\n\nconst homeComposed = compose<TComposeInner, {}>(\n  inject('auth', 'lexics'),\n  lifecycle<TPropsLifecycle, {}>({\n    componentDidMount() {\n      const { lexics } = this.props\n      lexics.appPage = { page: 'index', phrases: indexLexic }\n    },\n  }),\n  observer,\n)\n\nexport const Home = homeComposed(HomeComponent)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose } from 'recompose'\n\nimport { Langs, LiveSearchUI } from 'react-sport'\n\nimport { ProfilePopup } from 'features/ProfilePopup'\nimport { UploadVideoBtn } from 'features/UploadVideoBtn'\n\ntype TProps = {\n  auth: {\n    logout: () => void,\n  },\n}\n\nconst HeaderComponent = ({ auth: { logout } }: TProps) => (\n  <div>\n    <header className='header'>\n      <div className='header-table' data-block='sharedHeaderTable'>\n        <div className='header-row'>\n          <div className='header-column-left'>\n            <div className='container-fluid'>\n              <div className='row'>\n                <Link className='logo' to='/' />\n              </div>\n            </div>\n          </div>\n          <div className='header-column-responsive' id='header-live-search'>\n            <LiveSearchUI.LiveSearch />\n          </div>\n          <div className='header-column-right'>\n            <UploadVideoBtn />\n            <ProfilePopup logout={logout} />\n            <div className='lang-wrapper'>\n              <Langs />\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  </div>\n)\n\nconst headerComposed = compose<TProps, {}>(\n  inject('lexics', 'auth'),\n  observer,\n)\n\nexport const Header = headerComposed(HeaderComponent)\n","import React, { Fragment } from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { observer } from 'mobx-react'\n\nimport { compose, withProps } from 'recompose'\nimport includes from 'lodash/includes'\nimport filter from 'lodash/filter'\nimport map from 'lodash/map'\n\nimport { T9n } from 'react-sport'\n\nimport { mainPageTabs } from 'config/tabsConfig'\nimport {\n  TProps,\n  TPropsOuter,\n  TComposedInner,\n  TWithPropsInner,\n  TWithPropsOuter,\n} from './types'\n\nexport const LinksListComponent = ({ match: { url }, tabs }: TProps) => (\n  <Fragment>\n    {map(tabs, ({ exact, lexics, link }) => (\n      <li className='stats-tabs__item' key={link}>\n        <NavLink\n          to={`${url}${link}`}\n          activeClassName='active'\n          exact={exact}\n        >\n          <T9n t={lexics} />\n        </NavLink>\n      </li>\n    ))}\n  </Fragment>\n)\n\nconst linksListComposed = compose<TComposedInner, TPropsOuter>(\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(({ page }) => {\n    const tabs = filter(mainPageTabs, ({ pages }) => includes(pages, page))\n    return { tabs }\n  }),\n)\n\nexport const LinksList = linksListComposed(LinksListComponent)\n","import React from 'react'\nimport { observer, inject } from 'mobx-react'\n\nimport {\n  withHandlers,\n  compose,\n  lifecycle,\n} from 'recompose'\nimport cx from 'classnames'\n\nimport { T9n } from 'react-sport'\n\nimport { LinksList } from 'features/components/common/stats-tabs/LinksList'\n\nimport {\n  TProps,\n  TComposeInner,\n  TWithHandlers,\n  TPrevProps,\n} from './types'\n\nimport './StatsTabs.scss'\n\nexport const StatsTabsComponent = ({\n  handleClick,\n  isStats,\n  lexics: { page },\n  match,\n  tabs: {\n    active,\n    list,\n  },\n}: TComposeInner) => (\n  <ul className='stats-tabs'>\n    {isStats\n      ? <LinksList match={match} page={page} />\n      : list.map(tab => (\n        <li key={tab} className='stats-tabs__item'>\n          <a\n            href=''\n            className={cx({ active: active === tab })}\n            onClick={handleClick(tab)}\n          >\n            <T9n t={tab} />\n          </a>\n        </li>\n      ))}\n  </ul>\n)\n\nconst statsTabComposed = compose<TComposeInner, TProps>(\n  inject(\n    'lexics',\n    'tabs',\n    'markers',\n    'zones',\n    'filters',\n  ),\n  withHandlers<TWithHandlers, {}>({\n    handleClick: ({\n      filters: { clear },\n      markers: {\n        loaded,\n        selectToggle,\n      },\n      tabs,\n      zones: {\n        resetToDefaultDirections,\n        setChecked,\n      },\n    }) => (id: number) => (e: React.FormEvent<HTMLInputElement>) => {\n      e.preventDefault()\n      if (loaded) {\n        tabs.changeActive(id)\n        selectToggle(false)\n        resetToDefaultDirections()\n        setChecked('without_zone')\n        clear()\n      }\n    },\n  }),\n  lifecycle<TPrevProps, TPrevProps>({\n    componentDidMount() {\n      const {\n        markers: { setDefaultDirections },\n      } = this.props\n      setDefaultDirections()\n    },\n  }),\n  observer,\n)\n\nexport const StatsTabs = statsTabComposed(StatsTabsComponent)\n","import React from 'react'\n\nimport { StatsTabs } from 'features/components/common/stats-tabs/StatsTabs'\n\ntype TProps = {\n  match: {\n    url: string,\n  },\n}\n\nexport const Header = ({ match }: TProps) => (\n  <div className='main-page__content-header'>\n    <StatsTabs isStats={false} match={match} />\n  </div>\n)\n","import React, { Fragment } from 'react'\nimport {\n  withHandlers,\n  compose,\n  withProps,\n} from 'recompose'\n\nimport get from 'lodash/get'\nimport isEmpty from 'lodash/isEmpty'\nimport cx from 'classnames'\n\n// TODO переписать получение координат для маркеров, чтобы разобраться в типах\ntype TProps = {\n  positionsInfo: {\n    from: {\n      //@ts-ignore\n      pos_x?: number | boolean | null,\n      //@ts-ignore\n      pos_y?: number | boolean | null,\n    },\n    middle: {\n      //@ts-ignore\n      pos_x: number | null,\n      //@ts-ignore\n      pos_y: number | null,\n      //@ts-ignore\n    } | string | null,\n  },\n  pointers: {\n    pointer1?: {\n      width: number,\n      rotate: number,\n    },\n    pointer2?: {\n      width: number,\n      rotate: number,\n    },\n  },\n  getPointerClass: () => string,\n  getTransform: (value: number) => string,\n}\n\nconst PointerComponent = ({\n  getPointerClass,\n  getTransform,\n  pointers,\n  pointers: {\n    pointer1,\n    pointer2,\n  },\n  positionsInfo: {\n    from,\n    middle,\n  },\n}: TProps) => {\n  if (isEmpty(pointers)) return null\n\n  return (\n    <Fragment>\n      <div\n        className={getPointerClass()}\n        style={{\n          //@ts-ignore\n          width: `calc(${pointer1.width}%)`,\n          left: `${from.pos_x}%`,\n          top: `${from.pos_y}%`,\n          //@ts-ignore\n          transform: getTransform(pointer1.rotate),\n        }}\n      />\n      {(get(middle, 'pos_x') && get(middle, 'pos_y')) && (\n        <div\n          className={getPointerClass()}\n          style={{\n            //@ts-ignore\n            width: `calc(${pointer2.width}%)`,\n            //@ts-ignore\n            left: `${middle.pos_x}%`,\n            //@ts-ignore\n            top: `${middle.pos_y}%`,\n            //@ts-ignore\n            transform: getTransform(pointer2.rotate),\n          }}\n        />\n      )}\n    </Fragment>\n  )\n}\n\nconst pointerComposed = compose(\n  withHandlers({\n    getDirections: () => ({\n      beginning: {\n        //@ts-ignore\n        pos_x: firstX,\n        //@ts-ignore\n        pos_y: firstY,\n      },\n      ending: {\n        //@ts-ignore\n        pos_x: lastX,\n        //@ts-ignore\n        pos_y: lastY,\n      },\n    }) => {\n      // Т.к. длина вектора выражается в %,\n      // а % (в координатах точек) берутся от разных длин (длина поля в 2 раза длиннее ширины)\n      // То для математических действий надо привести их к одной системе координат\n      // Y надо умножить на 2 (Y - ширина поля)\n      const cat1 = Math.abs(firstY - lastY) * 2 //Первый катет\n      const cat2 = Math.abs(firstX - lastX) // Второй катет\n      const width = Math.sqrt((cat2 ** 2) + (cat1 ** 2)) // гипотенуза\n\n      let angle = Math.asin(cat1 / width) * 180 / Math.PI // вычисляем угол поворота вектора\n\n      // Учитываем нахожение точек начала и конца\n      if (lastX >= firstX && lastY < firstY) {\n        angle = 360 - angle\n      }\n\n      if (lastX < firstX && lastY >= firstY) {\n        angle = 180 - angle\n      }\n\n      if (lastX < firstX && lastY < firstY) {\n        angle += 180\n      }\n\n      return {\n        width,\n        rotate: angle,\n      }\n    },\n  }),\n  //@ts-ignore\n  withHandlers({\n    getPointers: (({\n      getDirections,\n      positionsInfo: {\n        from,\n        middle,\n        to,\n      },\n    }) => () => {\n      if (!get(from, 'pos_x', false)\n        || !get(from, 'pos_y', false)\n        || !get(to, 'pos_x', false)\n        || !get(to, 'pos_y', false)) {\n        return {}\n      }\n\n      if ((get(middle, 'pos_x') && get(middle, 'pos_y'))) {\n        const pointer1 = getDirections({\n          beginning: from,\n          ending: middle,\n        })\n        const pointer2 = getDirections({\n          beginning: middle,\n          ending: to,\n        })\n        return {\n          pointer1,\n          pointer2,\n        }\n      }\n\n      const pointer1 = getDirections({\n        beginning: from,\n        ending: to,\n      })\n      return { pointer1 }\n    }),\n    getPointerClass: ({\n      positionsInfo: {\n        from,\n        middle,\n        to,\n      },\n    }) => () => {\n      const pointClass = get(from, 'type') || get(to, 'type')\n\n      return cx(\n        'pointer',\n        {\n          middle: (get(middle, 'pos_x') && get(middle, 'pos_y')),\n          [`vector_${pointClass}`]: pointClass,\n        },\n      )\n    },\n  }),\n  withHandlers({\n    //@ts-ignore\n    getTransform: () => angle => `rotate(${angle}deg)`,\n  }),\n  //@ts-ignore\n  withProps(({ getPointers }) => ({\n    pointers: getPointers(),\n  })),\n)\n\n//@ts-ignore\nexport const Pointer = pointerComposed(PointerComponent)\n","import React from 'react'\nimport { withProps, compose } from 'recompose'\nimport map from 'lodash/map'\n\ntype TProps = {\n  tooltipNames: Array<string>,\n};\n\nexport const PlayerName = ({ tooltipNames }: TProps) =>\n  map(tooltipNames, name => (\n    <span key={name} className='shot__player-name'>\n      {name}\n    </span>\n  ))\n\n// TODO Пока этот функционал не готов. Но пока не удаляем\n\n// if (playerName) {\n//   return <span className='shot__player-name'>{playerName}</span>\n// }\n// if (thirdPlayerName) {\n//   return (\n//     <Fragment>\n//       <span className='shot__player-name'>{firstPlayerName}</span>\n//       <span className='shot__player-name'>{secondPlayerName}</span>\n//       <span className='shot__player-name'>{thirdPlayerName}</span>\n//     </Fragment>\n//   )\n// } if (secondPlayerName) {\n//   return (\n//     <Fragment>\n//       <span className='shot__player-name'>{firstPlayerName}</span>\n//       <span className='shot__player-name'>{secondPlayerName}</span>\n//     </Fragment>\n//   )\n// }\n\nconst PlayerNameComposed = compose(\n  //@ts-ignore\n  withProps(({ point: { firstPlayerName, playerName } }) => {\n    // TODO Пока не готово пробрасывание второго и третьего имени\n    // secondPlayerName,\n    // thirdPlayerName,\n    const names = playerName || firstPlayerName\n    // TODO Пока не готово пробрасывание второго и третьего имени\n    // || secondPlayerName\n    // || thirdPlayerName\n    return {\n      tooltipNames: names && names.split('/'),\n    }\n  }),\n  //@ts-ignore\n)(PlayerName)\n\nexport default PlayerNameComposed\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { withHandlers, compose } from 'recompose'\nimport cx from 'classnames'\nimport toString from 'lodash/toString'\n\nimport { T9n } from 'react-sport'\n\nimport PlayerName from 'features/components/common/map/PlayerName'\n\nimport {\n  TComposeInner,\n  TPropsOuter,\n  TWithHandlersOuterEventToEpisode,\n  TWithHandlersInnerEventToEpisode,\n  TWithHandlersOuterHandleShootClick,\n  TWithHandlersInnerHandleShootClick,\n} from './types'\n\nconst GAME_PART_LEXIC = 8684\n\nconst ToolTipComponent = ({\n  handleShootClick,\n  left,\n  point,\n  point: {\n    half,\n    opponentTeam,\n    result_lexic,\n    score1,\n    score2,\n  },\n  type,\n  x,\n  y,\n}: TComposeInner) => (\n  <div\n    className={cx('shot', {\n      [`shot_${type}`]: type,\n      left,\n    })}\n    style={{ left: `${x}%`, top: `${y}%` }}\n    onClick={() => handleShootClick(point)}\n  >\n    <div className='shot__tooltip'>\n      <span className='shot__result'>\n        <T9n t={toString(result_lexic)} />\n      </span>\n      {/*\n        //@ts-ignore */}\n      <PlayerName point={point} />\n      <span className='shot__opponent-team'>@ {opponentTeam}</span>\n      <span className='shot__period-info'>\n        <span className='shot__period-num'>\n          {half} <T9n t={toString(GAME_PART_LEXIC)} />\n        </span>\n        <span className='shot__period-score'>{` ${score1} - ${score2}`}</span>\n      </span>\n    </div>\n  </div>\n)\n\nconst toolTipComposed = compose<TComposeInner, TPropsOuter>(\n  inject(\n    'videoPlayer',\n    'lexics',\n    'shootsRange',\n  ),\n  withHandlers<TWithHandlersOuterEventToEpisode, TWithHandlersInnerEventToEpisode>({\n    eventToEpisode: ({\n      lexics: {\n        getLexics,\n      },\n    }) => ({\n      f_match,\n      half,\n      id,\n      result_lexic,\n      second,\n    }) => ({\n      action: {\n        name: getLexics(result_lexic),\n        set: `${half} ${getLexics(GAME_PART_LEXIC)}`,\n      },\n      eventId: Number(id),\n      half,\n      matchId: f_match,\n      second: Math.round(second / 1000),\n    }),\n  }),\n  withHandlers<TWithHandlersOuterHandleShootClick, TWithHandlersInnerHandleShootClick>({\n    handleShootClick: ({\n      eventToEpisode,\n      videoPlayer,\n    }) => (event) => {\n      const data = [eventToEpisode(event)]\n      videoPlayer.fetchVideo(data)\n      videoPlayer.isOpened = true\n    },\n  }),\n  observer,\n)\n\nexport const ToolTip = toolTipComposed(ToolTipComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withProps } from 'recompose'\nimport map from 'lodash/map'\nimport values from 'lodash/values'\nimport pickBy from 'lodash/pickBy'\nimport get from 'lodash/get'\nimport filter from 'lodash/filter'\nimport includes from 'lodash/includes'\n\nimport { Pointer } from './Pointer'\nimport { ToolTip } from './ToolTip'\n\ntype TProps = {\n  //@ts-ignore\n  marker?: {\n    //@ts-ignore\n    point?: {},\n  },\n  toolTips: Array<{}>,\n}\n\nconst MarkerComponent = ({\n  marker: positionsInfo,\n  toolTips,\n}: TProps) => (\n  <div className='marker__wrapper'>\n    {/*\n      //@ts-ignore */}\n    <Pointer positionsInfo={positionsInfo} />\n    {map(toolTips, ({\n      //@ts-ignore\n      pos_x,\n      //@ts-ignore\n      pos_y,\n      //@ts-ignore\n      type,\n    }) => (\n      <ToolTip\n        key={`${pos_x}_${pos_y}`}\n            //@ts-ignore\n        point={positionsInfo.point}\n        type={type}\n        y={pos_y}\n        x={pos_x}\n      />\n    ))}\n  </div>\n)\n\nconst markerComposed = compose(\n  inject('markers'),\n  observer,\n  //@ts-ignore\n  withProps(({\n    marker,\n    markers: {\n      directions: {\n        from,\n        to,\n      },\n    },\n  }) => {\n    const toolTips = values(\n      pickBy(marker, value => get(value, 'pos_x') && get(value, 'pos_y')),\n    )\n    let toolTipsWithVectors = null\n    if (from && to) {\n      toolTipsWithVectors = filter(\n        toolTips, ({ type }) => includes(['out', 'point'], type),\n      )\n    }\n    // Если у нас показываюся векторы (когда есть точки куда и откуда),\n    // то используем отфильтрованные точки\n    return {\n      toolTips: toolTipsWithVectors || toolTips,\n    }\n  }),\n  observer,\n)\n//@ts-ignore\nexport const Marker = markerComposed(MarkerComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  withHandlers,\n  compose,\n} from 'recompose'\nimport isArray from 'lodash/isArray'\nimport get from 'lodash/get'\nimport { toJS } from 'mobx'\n\nimport Loader from 'features/components/common/loader/Loader'\nimport { Marker } from './MarkerItem'\n\ntype TProps = {\n  getMarkers: () => Array<{}>,\n  preparePoint: (marker: {}) => {},\n}\n\n//@ts-ignore\ntype TMarkerType = boolean | { pos_y: number | null }\n\n/**\n * Компонент Markers - является контейнером маркеров\n *\n * @property {function} getMarkers - функция получения списка маркеров\n * @property {function} preparePoint - в функцию передается маркер и она возврощает\n * позицию маркера и делает некую фильтрацию\n *\n */\n\nconst MarkersComponent = ({\n  getMarkers,\n  preparePoint,\n}: TProps) => (\n  isArray(toJS(getMarkers()))\n    ? getMarkers().map((marker, idx) => (\n      //@ts-ignore\n      <Marker\n        key={idx}\n        marker={preparePoint(marker)}\n      />\n    ))\n    : getMarkers()\n)\n\nconst markersComposed = compose(\n  inject('markers', 'tabs', 'zones'),\n  withHandlers({\n    //функция получения типа удара\n    //@ts-ignore\n    getActionTypes: () => ({ action_type }, to, from) => {\n      const type = { fromType: '', toType: '' }\n      switch (action_type) {\n        case 'Positive':\n          if (to) {\n            type.toType = 'point'\n          }\n          break\n        case 'Negative':\n          if (from && to) {\n            type.fromType = 'miss'\n            type.toType = 'out'\n          } else if (from) {\n            type.fromType = 'miss'\n          } else {\n            type.toType = 'out'\n          }\n          break\n        default: break\n      }\n      return type\n    },\n\n    /*\n    * функция получения счета, счет первой и второй команды достаются\n    * в маркерах по специальным ключам\n    */\n    //@ts-ignore\n    getScore: () => ({ prop }, key) => prop.find(property => property[0] === key),\n    //@ts-ignore\n    getList: () => (list, data) => (\n      //@ts-ignore\n      list.filter(({ prop }) => prop.find(([property, value]) => (\n        Object.entries(data).some(([key, values]) => {\n          //@ts-ignore\n          if (key === 'any') return values.includes(property)\n          //@ts-ignore\n          return parseInt(key, 10) === property && values.includes(value)\n        })\n      )))\n    ),\n  }),\n  //@ts-ignore\n  withHandlers({\n    /*\n    * в функцию передается маркер и она возврощает\n    * позицию маркера и делает некую фильтрацию\n    */\n    preparePoint: ({\n      getActionTypes,\n      getScore,\n      markers: {\n        directions,\n      },\n      tabs: { active },\n      zones: {\n        checked,\n      },\n      //@ts-ignore\n    }) => (point) => {\n      //получаем позиции маркера\n      let { from, middle, to } = point\n\n      //условия для показа точки по середине\n      const middleCondition = directions.from\n        && directions.to\n        && !point.dontShowOpponentSide\n        && middle\n\n      //устанавливаем координаты для точек откуда, куда и блок, если есть точка по середине\n      from = directions.from && from\n      middle = middleCondition && middle\n      to = (directions.to && !point.dontShowOpponentSide)\n        && to\n\n      //получаем тип удара, для точек откуда и куда\n      const { fromType, toType } = getActionTypes(point, to, from)\n\n      //получаем счет игры из маркера\n      const score1 = getScore(point, 136)\n      const score2 = getScore(point, 137)\n      //функция которая скрывает маркер, если он находится под разметкой зоны\n      // для вкладки 'подачи' скрываем маркеры под зонами противника\n      // для остальных - под своими зонами\n      //@ts-ignore\n      const hideMarker = (marker) => {\n        const tabCheck = active === 'serve'\n          ? (get(marker, 'pos_y') > 50)\n          : (get(marker, 'pos_y') < 50)\n        return tabCheck && marker.pos_y\n      }\n      //@ts-ignore\n      const checkPosition = (markerType: TMarkerType) => {\n        if (!markerType) return null\n        //@ts-ignore\n        if (checked === 'without_zone') return markerType.pos_y\n        return hideMarker(markerType)\n      }\n\n      const checkZone = (\n        markerType: TMarkerType,\n        directionType: string,\n      ) => ({\n        //@ts-ignore\n        ...markerType,\n        type: directionType,\n        pos_y: checkPosition(markerType),\n      })\n\n      return {\n        point: {\n          ...point,\n          score1: get(score1, 2, 0),\n          score2: get(score2, 2, 0),\n        },\n        from: checkZone(from, fromType),\n        to: checkZone(to, toType),\n        middle,\n      }\n    },\n    //получение маркеров\n    getMarkers: ({\n      markers: {\n        list,\n        loaded,\n      },\n    }) => () => {\n      if (!loaded) return <Loader />\n      return list\n    },\n  }),\n  observer,\n)\n\n//@ts-ignore\nexport const Markers = markersComposed(MarkersComponent)\n","\nimport React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers } from 'recompose'\nimport get from 'lodash/get'\n\nimport { takeScreenshot, utils } from 'react-sport'\n\nimport {\n  TProps,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n} from './types'\n\nconst {\n  helpers: { getLongSuffix, getSuffix },\n} = utils\n\nconst SaveScreenShotComponent = ({ handleDownload }: TProps) => (\n  <button className='map-block__controls-button'>\n    <i className='icon-download' onClick={handleDownload} />\n  </button>\n)\n\nexport const saveScreenShotComposed = compose<TProps, any>(\n  inject(\n    'zones',\n    'lexics',\n    'tabs',\n    'matches',\n    'markers',\n    'matchProfile',\n    'playerProfile',\n    'teamProfile',\n  ),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    handleDownload: ({\n      lexics: { getLexics, lang, page },\n      markers: { selectToggle },\n      matches: { active: currentTeam },\n      matchProfile: { data },\n      playerProfile,\n      tabs: { active },\n      teamProfile,\n    }) => (e) => {\n      // Снимаем выделение зоны.\n      // TODO подумать, как реализовать когда у нас два элемента SVG сохраняются в одной картинке\n      selectToggle(false)\n      const field = document.getElementsByClassName(\n        'map-block__map-field-outer',\n      )[0]\n      const elementBackgroundSVG = document.getElementsByClassName(\n        'map-block__zone-map',\n      )[0]\n\n      const suffix = getSuffix(lang)\n      const longSuffix = getLongSuffix(lang)\n      const pages = {\n        match: {\n          body: get(data, `${currentTeam}_name_${suffix}`, ''),\n          extra: `${get(data, 'match_date', '')}.png`,\n        },\n        player: {\n          body:\n            `${get(playerProfile, `profile.firstname_${longSuffix}`, '')}`\n            + ` ${get(playerProfile, `profile.lastname_${longSuffix}`, '')}`,\n        },\n        team: {\n          body: get(teamProfile, `profile.name_${longSuffix}`, ''),\n        },\n      }\n      const pageInfo = get(pages, page, {})\n      const picName = `${getLexics(active)}`\n        + ` ${get(pageInfo, 'body', '')}`\n        + ` ${get(pageInfo, 'extra', '')}`\n\n      takeScreenshot({\n        callback: () => {},\n        e,\n        elementBackgroundSVG,\n        elementToChangeBackground: 'map',\n        field,\n        picName,\n      })\n    },\n  }),\n  observer,\n)\n\nexport const SaveScreenShot = saveScreenShotComposed(SaveScreenShotComponent)\n","\nimport React, { Fragment } from 'react'\nimport { compose, withHandlers } from 'recompose'\nimport { inject, observer } from 'mobx-react'\nimport cx from 'classnames'\n\nimport { RangeSettings } from 'features/components/common/map/RangeSettings'\n\ntype TProps = {\n  handleShowPopup: () => void,\n  shootsRange: { isOpened: boolean },\n};\n\nexport const RangeSettingsPopup = ({\n  handleShowPopup,\n  shootsRange: { isOpened },\n}: TProps) => (\n  <Fragment>\n    <button className='map-block__controls-button'>\n      <i className='icon-settings' onClick={handleShowPopup} />\n    </button>\n    <div\n      className={cx('main-page__range-popup-settings', { hidden: !isOpened })}\n    >\n      {isOpened && <RangeSettings />}\n    </div>\n  </Fragment>\n)\n\nconst RangeSettingsPopupComposed = compose(\n  inject('shootsRange'),\n  //@ts-ignore\n  withHandlers({\n    handleShowPopup: ({ shootsRange: { rangePopup } }) => () => rangePopup(),\n  }),\n  observer,\n  //@ts-ignore\n)(RangeSettingsPopup)\n\nexport default RangeSettingsPopupComposed\n","import React from 'react'\nimport map from 'lodash/map'\nimport orderBy from 'lodash/orderBy'\nimport uniqBy from 'lodash/uniqBy'\n\nimport { inject, observer } from 'mobx-react'\nimport { withHandlers, compose } from 'recompose'\nimport { VideoLink } from 'react-sport'\nimport cx from 'classnames'\n\ntype TProps = {\n  videoLink: {\n    isFetching: boolean,\n  },\n  handleVideoExternal: () => void,\n  getShoots: () => {},\n  getRange: () => number,\n  getClassName: () => string,\n}\n\nconst PlayVideoBtn = ({\n  getClassName,\n  getRange,\n  getShoots,\n  handleVideoExternal,\n  videoLink: { isFetching },\n}: TProps) => (\n  <div className={getClassName()}>\n    {/*\n    //@ts-ignore */}\n    <VideoLink\n      shootsRange={getRange()}\n      handleVideoExternal={handleVideoExternal}\n      externalFetching={isFetching}\n      shoots={getShoots()}\n      store='shoots'\n    />\n  </div>\n)\n\nconst PlayVideoBtnComposed = compose(\n  inject('videoLink', 'lexics', 'shootsRange', 'markers', 'selectedMatches'),\n  //@ts-ignore\n  withHandlers({\n    getRange: ({ shootsRange: { after, allPossession, before } }) => () =>\n      (allPossession === 0 ? +allPossession : +(before + after)),\n    getShoots: ({ markers: { list, loaded } }) => () => ({\n      activeData: uniqBy(list, 'id'),\n      isFetching: !loaded,\n    }),\n    getClassName: ({ markers: { loaded } }) => () =>\n      cx('video__btn-container', { loading: !loaded }),\n    handleVideoExternal: ({\n      lexics: { lang },\n      shootsRange,\n      tab,\n      videoLink,\n      //@ts-ignore\n    }) => (shoots) => {\n      const shots = map(orderBy(shoots, 'match_date', 'asc'), 'id')\n      videoLink.request({\n        events: shots,\n        range: shootsRange,\n        lang,\n        tab,\n        type: 'mapShoots',\n      })\n    },\n  }),\n  observer,\n  //@ts-ignore\n)(PlayVideoBtn)\n\nexport default PlayVideoBtnComposed\n","\nimport React, { Children } from 'react'\nimport { observer } from 'mobx-react'\n\nimport {\n  withHandlers,\n  withState,\n  withProps,\n  compose,\n} from 'recompose'\nimport cx from 'classnames'\nimport includes from 'lodash/includes'\n\nimport { OutsideClick } from 'react-sport'\n\nimport {\n  TPropsInner,\n  TPropsOuter,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n  TWithPropsInner,\n  TWithPropsOuter,\n} from './types'\n\nexport const ControlDropDownComponent = ({\n  children,\n  className,\n  isVisible,\n  menuType,\n  title,\n  toggleOpenMenu,\n  withTitle,\n}: TPropsInner) => (\n  <div className={className} onClick={toggleOpenMenu}>\n    <button className='map-block__controls-button'>\n      {withTitle ? (\n        <span className='map-block__controls-button__title'>{title}</span>\n      ) : (\n        <i className={`icon-select-${menuType}`} />\n      )}\n    </button>\n    {isVisible && (\n      <ul className='map-block__select-list'>\n        {Children.map(children, (child, i) => (\n          <li key={i} className='map-block__select-item'>\n            <a>{child}</a>\n          </li>\n        ))}\n      </ul>\n    )}\n  </div>\n)\n\nconst controlDropDownComposed = compose<TPropsInner, TPropsOuter>(\n  withState('isVisible', 'toggleIsVisible', false),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    clickOutside: ({ toggleIsVisible }) => () => toggleIsVisible(false),\n    toggleOpenMenu: ({ isVisible, toggleIsVisible }) => () => toggleIsVisible(!isVisible),\n  }),\n  withProps<TWithPropsInner, TWithPropsOuter>(({ isVisible, menuType }) => ({\n    className: cx('map-block__select', {\n      'map-block__select_open': isVisible,\n    }),\n    withTitle: includes(['teamSelect'], menuType),\n  })),\n  OutsideClick,\n  observer,\n)\n\nexport const ControlDropDown = controlDropDownComposed(ControlDropDownComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport get from 'lodash/get'\nimport {\n  compose,\n  withHandlers,\n  withProps,\n  withState,\n} from 'recompose'\nimport { OutsideClick, T9n } from 'react-sport'\n\nimport { getSuffix, getAbbr } from 'module/utils/helpers'\n\nimport { ControlDropDown } from '../ControlsDropDown'\n\nimport {\n  TPropsInner,\n  TWithState,\n  TWithPropsInner,\n  TWithHandlersInner,\n  TWithPropsOuter,\n  TWithHandlersOuter,\n  TWithHandlersCheckOuter,\n  TWithHandlersCheckInner,\n} from './types'\n\nexport const TeamsPopupComponent = ({\n  activeTeamShortName,\n  checkTeam,\n  teams,\n}: TPropsInner) => (\n  <ControlDropDown\n    menuType='teamSelect'\n    title={activeTeamShortName}\n  >\n    {teams.map(({ id, teamName }) => (\n      <div\n        onClick={checkTeam(id)}\n        className='custom-select__option'\n        key={id}\n      >\n        <T9n t={teamName} />\n      </div>\n    ))}\n  </ControlDropDown>\n)\n\nconst teamsPopupComposed = compose<TPropsInner, {}>(\n  inject(\n    'lexics',\n    'matchProfile',\n    'markers',\n    'matches',\n  ),\n  withState<TWithState, {}>('isOpened', 'setIsOpened', false),\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(({\n    lexics: { lang },\n    matches: { active },\n    matchProfile: { data },\n  }) => {\n    const suffix = getSuffix(lang)\n    const team1Name = get(data, `team1_name_${suffix}`)\n    const team2Name = get(data, `team2_name_${suffix}`)\n    return {\n      activeTeamShortName: getAbbr(get(data, `${active}_name_${suffix}`)),\n      teams: [\n        {\n          id: 'team1',\n          teamName: team1Name,\n        },\n        {\n          id: 'team2',\n          teamName: team2Name,\n        },\n      ],\n    }\n  }),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    clickOutside: ({ setIsOpened }) => () => setIsOpened(false),\n    handleActive: ({\n      matches: {\n        changeActive,\n      },\n    }) => (active) => {\n      changeActive(active)\n    },\n    setIsOpenedHandler: ({ isOpened, setIsOpened }) => () => () => setIsOpened(!isOpened),\n  }),\n  withHandlers<TWithHandlersCheckOuter, TWithHandlersCheckInner>({\n    checkTeam: ({\n      handleActive,\n      markers: { fetch },\n      matches: { active },\n      matchProfile,\n      setIsOpenedHandler,\n    }) => id => () => {\n      if (active !== id) {\n        handleActive(id)\n        const teamId = get(matchProfile, `data.${id}_id`, '')\n        const matches = [get(matchProfile, 'matchId')]\n        fetch(teamId, matches)\n      }\n      return setIsOpenedHandler()\n    },\n  }),\n  OutsideClick,\n  observer,\n)\n\nexport const TeamsPopup = teamsPopupComposed(TeamsPopupComponent)\n","// массив с кнопками для выпадающего списка на карте ударов направлений маркеров\n// tabs - вкладки, в которых есть данная кнопка\n\nconst directionsDropDownButtons = [\n  {\n    tabs: ['attack', 'block', 'serve', 'pass'],\n    endPoint: { to: true, from: true },\n    name: 'full_trajectory',\n  },\n  {\n    tabs: [\n      'attack',\n      'block',\n      'serve',\n      'pass',\n      'attack_reception',\n      'serve_reception',\n    ],\n    endPoint: { to: false, from: true },\n    name: 'markers_from',\n  },\n  {\n    tabs: ['attack', 'block', 'serve', 'pass'],\n    endPoint: { to: true, from: false },\n    name: 'markers_to',\n  },\n]\n\nexport default directionsDropDownButtons\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport forIn from 'lodash/forIn'\nimport filter from 'lodash/filter'\nimport includes from 'lodash/includes'\nimport {\n  withHandlers,\n  withProps,\n  compose,\n} from 'recompose'\n\nimport { T9n } from 'react-sport'\n\nimport directionsDropDownButtons from '../config/directionsDropdown'\n\nimport { ControlDropDown } from '../ControlsDropDown'\n\nimport {\n  TProps,\n  TWithPropsInner,\n  TWithPropsOuter,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n} from './types'\n\nexport const DirectionsComponent = ({\n  chooseDirection,\n  directionsBtns,\n}: TProps) => (\n  <ControlDropDown menuType='action'>\n    {directionsBtns.map(({ endPoint, name }) => (\n      <div\n        className='custom-select__option'\n        onClick={chooseDirection(endPoint)}\n        key={name}\n      >\n        <T9n t={name} />\n      </div>\n    ))}\n  </ControlDropDown>\n)\n\nconst directionsComposed = compose<TProps, {}>(\n  inject(\n    'tabs',\n    'markers',\n    'zones',\n  ),\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(({ tabs: { active } }) => ({\n    directionsBtns: filter(directionsDropDownButtons, ({ tabs }) =>\n      includes(tabs, active)),\n  })),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    chooseDirection: ({\n      markers: { handleDirection, selectToggle },\n      zones: { resetToDefaultDirections },\n    }) => (endPoint: {}) => () => {\n      // При смене режима отображения точек, сбрасываем показ зон и выделение\n      resetToDefaultDirections()\n      forIn(endPoint, (value, key) => handleDirection(key, value))\n      selectToggle(false)\n    },\n  }),\n  observer,\n)\n\nexport const Directions = directionsComposed(DirectionsComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  withHandlers,\n  withProps,\n  compose,\n} from 'recompose'\n\nimport { T9n } from 'react-sport'\n\nimport { ControlDropDown } from '../ControlsDropDown'\n\nimport {\n  TProps,\n  TWithHandlersOuter,\n  TComposeInner,\n  TWithHandlersInner,\n} from './types'\n\nexport const ZonesComponent = ({ checkZone, zoneTitles }: TProps) => (\n  <ControlDropDown menuType='zone'>\n    {zoneTitles.map(zone => (\n      <div\n        className='custom-select__option'\n        onClick={checkZone(zone)}\n        key={zone}\n      >\n        <T9n t={zone} />\n      </div>\n    ))}\n  </ControlDropDown>\n)\n\nconst zonesComposed = compose<TComposeInner, {}>(\n  inject(\n    'tabs',\n    'markers',\n    'zones',\n  ),\n  observer,\n  withProps(() => {\n    // зоны поля\n    const zoneTitles = [\n      'without_zone',\n      'basic_zones',\n      'advanced_zones',\n    ]\n    return { zoneTitles }\n  }),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    checkZone: ({\n      markers: { selectToggle },\n      zones: { resetToDefaultDirections, setChecked },\n    }) => (checkedZone: string) => () => {\n      if (checkedZone === 'without_zone') {\n        resetToDefaultDirections()\n      }\n      setChecked(checkedZone)\n      selectToggle(false)\n    },\n  }),\n  observer,\n)\n\nexport const Zones = zonesComposed(ZonesComponent)\n","\nimport React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers } from 'recompose'\nimport isEqual from 'lodash/isEqual'\n\nimport { SaveScreenShot } from 'features/components/common/map/SaveScreenShot'\nimport RangeSettingsPopup from 'features/components/common/map/RangeSettingsPopup'\nimport PlayVideoBtn from 'features/components/common/video-player/PlayVideoBtn'\n\nimport { TeamsPopup } from './TeamsPopup'\nimport { Directions } from './Directions'\nimport { Zones } from './Zones'\n\nimport {\n  TProps,\n  TWithHandlersOuter,\n} from './types'\n\nexport const MapFieldControlsComponent = ({\n  lexics: { page },\n  selectArea,\n  tabs: { active },\n}: TProps) => (\n  <div className='map-block__controls'>\n    <div className='map-block__controls-col'>\n      <Directions />\n      <Zones />\n      {page === 'match' && <TeamsPopup />}\n      <button className='map-block__controls-button' onClick={selectArea}>\n        <i className='icon-area' />\n      </button>\n    </div>\n    {/*\n      //@ts-ignore */}\n    <PlayVideoBtn tab={active} />\n    <div className='map-block__controls-col'>\n      <SaveScreenShot />\n      {/* TODO MapShare пока не делаем */}\n      {/* <MapShare /> */}\n      <RangeSettingsPopup />\n    </div>\n  </div>\n)\n\nconst mapFieldControlsComposed = compose<TProps, {}>(\n  inject(\n    'tabs',\n    'lexics',\n    'markers',\n    'zones',\n  ),\n  withHandlers<TWithHandlersOuter, {}>({\n    selectArea: ({\n      markers: {\n        directions,\n        select,\n        selectToggle,\n        setAllVisible,\n      },\n      zones: {\n        resetToDefaultDirections,\n        setZone,\n      },\n    }) => () => {\n      if (!select) {\n        setAllVisible()\n      }\n      if (isEqual(directions, { from: true, to: true })) {\n        resetToDefaultDirections()\n      }\n      setZone('without_zone')\n      selectToggle(!select)\n    },\n  }),\n  observer,\n)\nexport const MapFieldControls = mapFieldControlsComposed(MapFieldControlsComponent)\n","// Данные по каждой зоне\n\ntype TZones = {\n  [key: string]: {},\n}\nexport const zones: TZones = {\n  bottom: {\n    advanced_zones: [7, 8, 9, 6, 5, 4, 3, 2, 1],\n    basic_zones: [4, 5, 3, 6, 2, 1],\n  },\n  top: {\n    advanced_zones: [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    basic_zones: [1, 2, 6, 3, 5, 4],\n  },\n}\n\n// Координаты границ зон поля в завимости от выбранного типа\nexport const zoneBorderConfig = {\n  x: {\n    basic: {\n      top: [\n        {\n          zonesList: [1, 2],\n          coords: [-15, 33],\n        },\n        {\n          zonesList: [3, 6],\n          coords: [33, 67],\n        },\n        {\n          zonesList: [5, 4],\n          coords: [67, 120],\n        },\n      ],\n      bottom: [\n        {\n          zonesList: [4, 5],\n          coords: [-15, 33],\n        },\n        {\n          zonesList: [3, 6],\n          coords: [33, 67],\n        },\n        {\n          zonesList: [1, 2],\n          coords: [67, 120],\n        },\n      ],\n    },\n    advanced: {\n      top: [\n        {\n          zonesList: [1, 2, 3],\n          coords: [-15, 33],\n        },\n        {\n          zonesList: [4, 5, 6],\n          coords: [33, 67],\n        },\n        {\n          zonesList: [7, 8, 9],\n          coords: [67, 120],\n        },\n      ],\n      bottom: [\n        {\n          zonesList: [7, 8, 9],\n          coords: [-15, 33],\n        },\n        {\n          zonesList: [4, 5, 6],\n          coords: [33, 67],\n        },\n        {\n          zonesList: [1, 2, 3],\n          coords: [67, 120],\n        },\n      ],\n    },\n  },\n  y: {\n    basic: {\n      top: [\n        {\n          zonesList: [1, 6, 5],\n          coords: [-15, 33],\n        },\n        {\n          zonesList: [2, 3, 4],\n          coords: [33, 50],\n        },\n      ],\n      bottom: [\n        {\n          zonesList: [4, 3, 2],\n          coords: [50, 66],\n        },\n        {\n          zonesList: [5, 6, 1],\n          coords: [66, 120],\n        },\n      ],\n    },\n    advanced: {\n      top: [\n        {\n          zonesList: [1, 4, 9],\n          coords: [-15, 17],\n        },\n        {\n          zonesList: [2, 5, 8],\n          coords: [17, 33],\n        },\n        {\n          zonesList: [3, 6, 7],\n          coords: [33, 50],\n        },\n      ],\n      bottom: [\n        {\n          zonesList: [3, 6, 7],\n          coords: [50, 67],\n        },\n        {\n          zonesList: [2, 5, 8],\n          coords: [67, 83],\n        },\n        {\n          zonesList: [1, 4, 9],\n          coords: [83, 120],\n        },\n      ],\n    },\n  },\n}\n\n// Положительный маркер, ключ - активный таб\nexport const zoneAction = {\n  attack: [24, [93, 97, 168]],\n  block: [27, [116]],\n  pass: [21, [68]],\n  serve: [15, [35, 36, 37]],\n  attack_reception: [18, [50]],\n  serve_reception: [18, [50]],\n}\n","\nimport React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withHandlers,\n  withProps,\n} from 'recompose'\nimport map from 'lodash/map'\nimport some from 'lodash/some'\nimport get from 'lodash/get'\nimport find from 'lodash/find'\nimport includes from 'lodash/includes'\nimport filter from 'lodash/filter'\nimport inRange from 'lodash/inRange'\nimport size from 'lodash/size'\nimport isEmpty from 'lodash/isEmpty'\n\nimport {\n  zoneAction,\n  zoneBorderConfig,\n} from 'config/zones'\nimport {\n  TEventToEpisodeOuter,\n  TEvent,\n  THandleShootClickOuter,\n  TProps,\n  TPropsInner,\n  TPropsOuter,\n  TGetParamsOuter,\n  TGetParamsInner,\n  TWithPropsInner,\n  TWithPropsOuter,\n} from './types'\n\nconst GAME_PART_LEXIC = 8684\n\nconst ZonesStatisticComponent = ({\n  handleShootClick,\n  percentage,\n  succesZoneMarkers,\n  totalZoneMarkers,\n  zone,\n  zoneEvents,\n  zones: { total },\n}: TProps) => (\n  <a\n    className={`map-block__zones-episode zone_${zone}`}\n    onClick={handleShootClick(zoneEvents)}\n  >\n    <p>{percentage}%</p>\n    <span>{!total && `${succesZoneMarkers} — ${totalZoneMarkers}`}</span>\n  </a>\n)\n\nconst zonesStatisticComposed = compose<TPropsInner, TPropsOuter>(\n  inject(\n    'tabs',\n    'markers',\n    'zones',\n    'videoPlayer',\n    'shootsRange',\n    'lexics',\n  ),\n  withHandlers<TGetParamsOuter, TGetParamsInner>({\n    /*\n     * фильтрация параметров.\n     * data - список маркеров\n     * key - ключ, по которому получаем нужный нам список\n     * zone - текущая зона\n     */\n    getParams: ({\n      tabs: { active },\n      zones: { checked },\n    }) => ({\n      data,\n      key,\n      zone,\n    }) => {\n      // Фильтруем \"Уcпешные\" действия (маркеры)\n      if (key === 'successActions') {\n        const firstConditionId = get(zoneAction, `${active}.[0]`)\n        const secondConditionId = get(zoneAction, `${active}.[1]`)\n        data = filter(data, ({ prop }) =>\n          some(\n            prop,\n            propItem =>\n              includes(propItem, firstConditionId)\n              && some(propItem, propItemValue =>\n                includes(secondConditionId, propItemValue)),\n          ))\n      }\n      // Получаем границы зоны из конфига в зависимости от выбранного типа поля\n      const side = active === 'serve' ? 'top' : 'bottom' //наша часть поля или соперника\n      const fieldType = checked === 'basic_zones' ? 'basic' : 'advanced'\n      // достаем из конфига границы для выбранного типа и стороны поля\n      const zoneTypeX = get(zoneBorderConfig, `x.${fieldType}.${side}`)\n      const zoneTypeY = get(zoneBorderConfig, `y.${fieldType}.${side}`)\n      // получаем координаты границы по Х и по Y\n      const xCoords = get(\n        find(zoneTypeX, ({ zonesList }) => includes(zonesList, zone)),\n        'coords',\n      )\n      const yCoords = get(\n        find(zoneTypeY, ({ zonesList }) => includes(zonesList, zone)),\n        'coords',\n      )\n      // Для подачи (serve) или передачи (pass) нам нужны зоны соперника,\n      // т.е. куда мяч улетел ('to')\n      const coordsType = includes(['serve', 'pass'], active) ? 'to' : 'from'\n\n      // Возвращаем отфильтрованные маркеры по текущей зоне\n      return filter(\n        data,\n        marker =>\n          inRange(get(marker, `${coordsType}.pos_x`), xCoords[0], xCoords[1])\n          && inRange(get(marker, `${coordsType}.pos_y`), yCoords[0], yCoords[1]),\n      )\n    },\n  }),\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>((\n    {\n      getParams,\n      markers: { list },\n      zone,\n    } : TWithPropsOuter,\n  ) => {\n    const getMarkers = (key: string) =>\n      getParams({\n        data: list,\n        key,\n        zone,\n      })\n    // количество всех маркеров в данной зоне\n    const allMarkers = getMarkers('totalActions')\n    const totalZoneMarkers = size(allMarkers)\n    // количество \"успешных\" маркеров в данной зоне\n    const succesZoneMarkers = size(getMarkers('successActions'))\n    const percentage = Math.round((succesZoneMarkers / totalZoneMarkers) * 100) || 0\n    return {\n      percentage,\n      succesZoneMarkers,\n      totalZoneMarkers,\n      zoneEvents: allMarkers,\n    }\n  }),\n  withHandlers<TEventToEpisodeOuter, {}>({\n    eventToEpisode: ({\n      lexics: { getLexics },\n    }) => (event: TEvent) => {\n      const {\n        f_match,\n        half,\n        id,\n        result_lexic,\n        second,\n      } = event\n      return {\n        action: {\n          name: getLexics(result_lexic),\n          set: `${half} ${getLexics(GAME_PART_LEXIC)}`,\n        },\n        eventId: Number(id),\n        half,\n        matchId: f_match,\n        second: Math.round(second / 1000),\n      }\n    },\n  }),\n  withHandlers<THandleShootClickOuter, {}>({\n    handleShootClick: ({\n      eventToEpisode,\n      videoPlayer: {\n        fetchVideo,\n        setModalOpen,\n      },\n    }) => (events: Array<number>) => () => {\n      if (!isEmpty(events)) {\n        const data = map(events, event => eventToEpisode(event))\n        fetchVideo(data)\n        setModalOpen(true)\n      }\n    },\n  }),\n)\n\nexport const ZonesStatistic = zonesStatisticComposed(ZonesStatisticComponent)\n","export const zoneSideDimension = 106.9\nexport const longSideDimension = 214.8\n\n// Данные для отрисовки SVG с зонами поверх поля\nexport const fieldSVGDimensions = {\n  top: {\n    basic_zones: [\n      {\n        x: 238.8,\n        y: 8.5,\n      },\n      {\n        x: 131.7,\n        y: 8.5,\n      },\n      {\n        x: 24.5,\n        y: 8.5,\n      },\n      {\n        x: 24.5,\n        y: 223.8,\n      },\n      {\n        x: 238.8,\n        y: 223.8,\n      },\n      {\n        x: 131.7,\n        y: 223.8,\n      },\n    ],\n    advanced_zones: [\n      {\n        x: 24.5,\n        y: 8.5,\n      },\n      {\n        x: 238.8,\n        y: 8.5,\n      },\n      {\n        x: 131.7,\n        y: 8.5,\n      },\n      {\n        x: 238.8,\n        y: 223.6,\n      },\n      {\n        x: 238.8,\n        y: 115.9,\n      },\n      {\n        x: 131.7,\n        y: 115.9,\n      },\n      {\n        x: 131.7,\n        y: 223.6,\n      },\n      {\n        x: 24.5,\n        y: 115.9,\n      },\n      {\n        x: 24.5,\n        y: 223.6,\n      },\n    ],\n  },\n  bottom: {\n    basic_zones: [\n      {\n        x: 238.8,\n        y: 438.7,\n      },\n      {\n        x: 131.7,\n        y: 438.7,\n      },\n      {\n        x: 24.5,\n        y: 438.7,\n      },\n      {\n        x: 24.5,\n        y: 331.2,\n      },\n      {\n        x: 238.8,\n        y: 331.2,\n      },\n      {\n        x: 131.7,\n        y: 331.2,\n      },\n    ],\n    advanced_zones: [\n      {\n        x: 24.5,\n        y: 331.2,\n      },\n      {\n        x: 238.8,\n        y: 331.2,\n      },\n      {\n        x: 131.7,\n        y: 331.2,\n      },\n      {\n        x: 238.8,\n        y: 546.3,\n      },\n      {\n        x: 238.8,\n        y: 438.7,\n      },\n      {\n        x: 131.7,\n        y: 438.7,\n      },\n      {\n        x: 131.7,\n        y: 546.3,\n      },\n      {\n        x: 24.5,\n        y: 438.7,\n      },\n      {\n        x: 24.5,\n        y: 546.3,\n      },\n    ],\n  },\n}\n","import React from 'react'\n\nimport get from 'lodash/get'\n\nimport {\n  fieldSVGDimensions,\n  zoneSideDimension,\n  longSideDimension,\n} from '../config'\n\ntype TProps = {\n  side: string,\n  checked: string,\n}\n\nexport const MapFieldSVG = ({ checked, side }: TProps) => (\n  //@ts-ignore\n  <svg\n    version='1.1'\n    id='Layer_1'\n    xmlns='http://www.w3.org/2000/svg'\n    xlink='http://www.w3.org/1999/xlink'\n    x='0px'\n    y='0px'\n    viewBox='0 0 369 662'\n    xmlSpace='preserve'\n    className='map-block__zone-map'\n  >\n    <g>\n      <g>\n        <rect\n          x='24.2'\n          y='8.8'\n          className='st0'\n          width='321.5'\n          height='644.5'\n          fill='#FEF1EB'\n        />\n        <path\n          className='st1'\n          d='M345.5,9v644h-321V9H345.5 M346,8.5H24v645h322V8.5L346,8.5z'\n          fill='#A1A4A3'\n        />\n      </g>\n      <g>\n        <rect\n          x='24'\n          y='223.3'\n          className='st1'\n          width='322'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n      </g>\n      <g>\n        <rect\n          x='24'\n          y='438.2'\n          className='st1'\n          width='322'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n      </g>\n      <g>\n        <g>\n          <rect x='14' y='330.8' width='342' height='0.5' />\n        </g>\n        <circle cx='354.5' cy='331' r='1.5' />\n        <circle cx='15.5' cy='331' r='1.5' />\n      </g>\n      <g>\n        <rect\n          x='16'\n          y='223.3'\n          className='st1'\n          width='5'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n        <rect\n          x='8'\n          y='223.3'\n          className='st1'\n          width='5'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n        <rect y='223.3' className='st1' width='5' height='0.5' fill='#A1A4A3' />\n      </g>\n      <g>\n        <rect\n          x='16'\n          y='438.2'\n          className='st1'\n          width='5'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n        <rect\n          x='8'\n          y='438.2'\n          className='st1'\n          width='5'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n        <rect y='438.2' className='st1' width='5' height='0.5' fill='#A1A4A3' />\n      </g>\n      <g>\n        <rect\n          x='364'\n          y='223.3'\n          className='st1'\n          width='5'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n        <rect\n          x='356'\n          y='223.3'\n          className='st1'\n          width='5'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n        <rect\n          x='348'\n          y='223.3'\n          className='st1'\n          width='5'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n      </g>\n      <g>\n        <rect\n          x='364'\n          y='438.2'\n          className='st1'\n          width='5'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n        <rect\n          x='356'\n          y='438.2'\n          className='st1'\n          width='5'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n        <rect\n          x='348'\n          y='438.2'\n          className='st1'\n          width='5'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n      </g>\n      <g>\n        <rect x='24' className='st1' width='0.5' height='5' fill='#A1A4A3' />\n        <rect x='345.5' className='st1' width='0.5' height='5' fill='#A1A4A3' />\n      </g>\n      <g>\n        <rect\n          x='24'\n          y='657'\n          className='st1'\n          width='0.5'\n          height='5'\n          fill='#A1A4A3'\n        />\n        <rect\n          x='345.5'\n          y='657'\n          className='st1'\n          width='0.5'\n          height='5'\n          fill='#A1A4A3'\n        />\n      </g>\n    </g>\n    {checked !== 'without_zone'\n      //@ts-ignore\n      && get(fieldSVGDimensions, [side, checked], []).map(({ x, y }, i) => (\n        <rect\n          className='map-block__hover-zone'\n          key={`${x}_${y}`}\n          x={x}\n          y={y}\n          width={zoneSideDimension}\n          //В случае, если у нас выбраны базовые зоны, то длина задних зон - увеличенная\n          height={\n            checked === 'basic_zones' && i < 3\n              ? longSideDimension\n              : zoneSideDimension\n          }\n        />\n      ))}\n  </svg>\n)\n","import React, { Fragment } from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport cx from 'classnames'\nimport get from 'lodash/get'\nimport map from 'lodash/map'\n\nimport { withHandlers, withProps, compose } from 'recompose'\n\nimport { ZonesStatistic } from 'features/components/common/map/ZoneStatistic'\n\nimport { zones } from 'config/zones'\nimport {\n  TProps,\n  TComposeInner,\n  TPRopsInner,\n  TPropsOuter,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n} from './types/fieldZonesTypes'\nimport { MapFieldSVG } from './MapFieldSVG'\n\nconst FieldZonesComponent = ({\n  getZonesClassName,\n  side,\n  zones: { checked },\n  zonesList,\n}: TProps) => (\n  <Fragment>\n    <div className={getZonesClassName()}>\n      {checked !== 'without_zone'\n        && map(zonesList, (zone: string) => (\n          <ZonesStatistic key={zone} zone={zone} />\n        ))}\n    </div>\n    <MapFieldSVG side={side} checked={checked} />\n  </Fragment>\n)\n\nconst fieldZonesComposed = compose<TComposeInner, {}>(\n  inject('zones', 'tabs'),\n  observer,\n  withProps<TPRopsInner, TPropsOuter>(({\n    tabs: { active },\n    zones: { checked },\n  }) => {\n    const side = active === 'serve' ? 'top' : 'bottom'\n\n    return {\n      side,\n      zonesList: get(zones, [side, checked], []),\n    }\n  }),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    getZonesClassName: ({ side, zones: { checked } }) => () =>\n      cx(\n        'map-block__zones',\n        `map-block__zones_${checked.split('_')[0]}-${side}`,\n      ),\n  }),\n)\n\nexport const FieldZones = fieldZonesComposed(FieldZonesComponent)\n","\nimport React from 'react'\nimport { observer, inject } from 'mobx-react'\n\nimport { compose, lifecycle } from 'recompose'\nimport get from 'lodash/get'\nimport isString from 'lodash/isString'\nimport isEmpty from 'lodash/isEmpty'\n\nimport { PlayingField } from 'react-sport'\n\nimport { Markers } from 'features/components/common/map/Markers'\nimport { MapFieldControls } from 'features/MapControls/components'\n\nimport { FieldZones } from './FieldZones'\n\nimport {\n  TProps,\n  TPrevProps,\n  TComposeInner,\n  TComposeOuter,\n} from './types/mapFieldTypes'\n\nexport const MapFieldComponent = ({ markers: { select, setRect } }: TProps) => (\n  <div className='main-page__map-wrapper'>\n    <MapFieldControls />\n    <div className='map-block__map-field-outer'>\n      <div className='map-block__map-field-inner'>\n        <div id='map' className='map-block__map-field-zones' />\n        <FieldZones />\n        <div className='main-page__map-shots'>\n          {select && (\n            <PlayingField.SelectionField\n              wrapperClass='selection_field'\n              width={360}\n              height={700}\n              onSelect={rect => setRect(rect || {}, 360, 700, 313, 631)}\n            />\n          )}\n          <Markers />\n        </div>\n      </div>\n    </div>\n  </div>\n)\n\nconst mapFieldComposed = compose<TComposeOuter, TComposeInner>(\n  inject(\n    'markers',\n    'matches',\n    'selectedMatches',\n    'lexics',\n    'zones',\n  ),\n  lifecycle<TPrevProps, {}>({\n    componentDidUpdate(prevProps) {\n      const {\n        lexics: { page },\n        markers: { fetch },\n        matchId,\n        pageId,\n        selectedMatches,\n        tab,\n        zones,\n      } = this.props\n      const currentMatches = page === 'match'\n        ? [matchId]\n        : get(selectedMatches, [page, pageId])\n\n      if (prevProps.tab === tab || isEmpty(currentMatches)) return null\n\n      if (!isString(currentMatches)) {\n        fetch(pageId, currentMatches)\n        zones.fetch(pageId, currentMatches)\n      }\n    },\n  }),\n  observer,\n)\n\nexport const MapField = mapFieldComposed(MapFieldComponent)\n","// Список фильтров для каждой вкладки на карте ударов\n\ntype TFiltersConfig = {\n  [key: string]: Array<{\n    data?: Array<{\n      columnTitleId?: number | false,\n      ids?: Array<number>,\n      zoneId?: number,\n      zoneNumber?: number,\n    } | number>,\n    style? : string,\n    title: number,\n    type: string,\n  }>,\n}\n\nexport const filterPopupByTab: TFiltersConfig = {\n  attack: [\n    {\n      type: 'popupWithColumns',\n      title: 10584, // результат\n      data: [\n        {\n          columnTitleId: 1, // выигранное очко\n          ids: [2, 3, 4],\n        },\n        {\n          columnTitleId: 5, // проигранное очко\n          ids: [6, 7, 276, 274, 8, 9],\n        },\n        {\n          columnTitleId: 49, // нулевая атака\n          ids: [298, 299],\n        },\n      ],\n    },\n    {\n      type: 'popupWithHomePlayers',\n      title: 10655, // атакующий\n    },\n    {\n      type: 'popupSimple',\n      title: 10656, // амплуа атакующего\n      data: [264, 263, 265, 266],\n    },\n    {\n      type: 'popupSimple',\n      title: 8556, // комбинация\n      data: [16, 17, 10, 22, 14, 13, 12, 18, 19, 21, 20],\n    },\n    {\n      type: 'popupSimple',\n      title: 10657, // атаки с первого мяча\n      data: [307, 308, 309, 310, 311, 312],\n    },\n    {\n      type: 'popupSimple',\n      title: 8341, // разновидность атаки\n      data: [24, 25, 26, 28],\n    },\n    {\n      type: 'popupWithZones',\n      title: 10658, // направление атаки\n      data: [\n        {\n          zoneId: 41,\n          zoneNumber: 1,\n        },\n        {\n          zoneId: 46,\n          zoneNumber: 6,\n        },\n        {\n          zoneId: 45,\n          zoneNumber: 5,\n        },\n        {\n          zoneId: 42,\n          zoneNumber: 2,\n        },\n        {\n          zoneId: 43,\n          zoneNumber: 3,\n        },\n        {\n          zoneId: 44,\n          zoneNumber: 4,\n        },\n      ],\n    },\n    {\n      type: 'popupSimple',\n      title: 10668, // тип блока\n      data: [29, 30, 31, 32],\n    },\n  ],\n  attack_reception: [\n    {\n      type: 'popupSimple',\n      title: 10669, // результат приема\n      data: [304, 305, 166],\n    },\n    {\n      type: 'popupWithHomePlayers',\n      title: 10642, // принимающий\n    },\n    {\n      type: 'popupSimple',\n      title: 10643, // амплуа принимающего\n      data: [267, 270, 268, 269],\n    },\n    {\n      type: 'popupSimple',\n      title: 8366, // тип приема\n      data: [199, 198, 200],\n    },\n  ],\n  block: [\n    {\n      type: 'popupWithColumns',\n      title: 10584, // Результат\n      data: [\n        {\n          columnTitleId: false,\n          ids: [275],\n        },\n        {\n          columnTitleId: 50, // выигранное очко\n          ids: [51, 53],\n        },\n        {\n          columnTitleId: 232, // проигранное очко\n          ids: [58, 55, 54, 56, 57],\n        },\n        {\n          columnTitleId: 10664, // нулевой блок\n          ids: [59, 60],\n        },\n      ],\n    },\n    {\n      type: 'popupWithHomePlayers',\n      title: 10665, // блокирующий\n    },\n    {\n      type: 'popupSimple',\n      title: 10666, // амплуа блокирующего\n      data: [300, 301, 302, 303],\n    },\n    {\n      type: 'popupSimple',\n      title: 10668, // тип блока\n      data: [71, 72, 73],\n    },\n    {\n      type: 'popupSimple',\n      title: 8343, // характеристика блока\n      data: [74, 75],\n    },\n  ],\n  pass: [\n    {\n      type: 'popupWithColumns',\n      title: 10584, // Результат\n      data: [\n        {\n          columnTitleId: 105, // ассист\n          ids: [289, 290],\n        },\n        {\n          columnTitleId: 104, // ошибка\n          ids: [103, 102],\n        },\n        {\n          columnTitleId: 306, // нулевая атака\n          ids: [291, 292],\n        },\n      ],\n    },\n    {\n      type: 'popupWithHomePlayers',\n      title: 10645, // пасующий\n    },\n    {\n      type: 'popupSimple',\n      title: 10646, // амплуа пасующего\n      data: [293, 294, 295, 296, 297],\n    },\n    {\n      type: 'popupSimple',\n      title: 10647, // тип передачи\n      data: [106, 107],\n    },\n    {\n      style: 'home', // home - сторона поля своей команды\n      type: 'popupWithZones',\n      title: 10648, // направление передачи\n      data: [\n        {\n          zoneId: 131,\n          zoneNumber: 4,\n        },\n        {\n          zoneId: 130,\n          zoneNumber: 3,\n        },\n        {\n          zoneId: 129,\n          zoneNumber: 2,\n        },\n        {\n          zoneId: 132,\n          zoneNumber: 5,\n        },\n        {\n          zoneId: 133,\n          zoneNumber: 6,\n        },\n        {\n          zoneId: 128,\n          zoneNumber: 1,\n        },\n      ],\n    },\n    {\n      style: 'home',\n      type: 'popupWithZones',\n      title: 10649, // зона передачи\n      data: [\n        {\n          zoneId: 137,\n          zoneNumber: 4,\n        },\n        {\n          zoneId: 136,\n          zoneNumber: 3,\n        },\n        {\n          zoneId: 135,\n          zoneNumber: 2,\n        },\n        {\n          zoneId: 138,\n          zoneNumber: 5,\n        },\n        {\n          zoneId: 139,\n          zoneNumber: 6,\n        },\n        {\n          zoneId: 134,\n          zoneNumber: 1,\n        },\n      ],\n    },\n  ],\n  serve: [\n    {\n      type: 'popupWithColumns',\n      title: 10584, // результат\n      data: [\n        {\n          columnTitleId: 10585, // Эйс\n          ids: [145, 146, 147],\n        },\n        {\n          columnTitleId: 278, // Ошибка\n          ids: [149, 148, 150, 151],\n        },\n        {\n          columnTitleId: 279, // Нулевая подача\n          ids: [143, 142],\n        },\n      ],\n    },\n    {\n      type: 'popupWithHomePlayers',\n      title: 10518, // подающий\n    },\n    {\n      type: 'popupSimple',\n      title: 8367, // тип подачи\n      data: [162, 163],\n    },\n    {\n      type: 'popupSimple',\n      title: 10596, // характеристика\n      data: [154, 153, 152],\n    },\n    {\n      type: 'popupWithZones',\n      title: 8882,\n      data: [\n        {\n          zoneId: 156,\n          zoneNumber: 1,\n        },\n        {\n          zoneId: 161,\n          zoneNumber: 6,\n        },\n        {\n          zoneId: 160,\n          zoneNumber: 5,\n        },\n        {\n          zoneId: 157,\n          zoneNumber: 2,\n        },\n        {\n          zoneId: 158,\n          zoneNumber: 3,\n        },\n        {\n          zoneId: 159,\n          zoneNumber: 4,\n        },\n      ],\n    },\n    {\n      type: 'popupSimple',\n      title: 10602, // направление\n      data: [280, 281, 282, 283, 284, 285],\n    },\n  ],\n  serve_reception: [\n    {\n      type: 'popupSimple',\n      title: 10584, // Результат\n      data: [208, 209, 210],\n    },\n    {\n      type: 'popupWithHomePlayers',\n      title: 10642, // Принимающий (список команд с игроками)\n    },\n    {\n      type: 'popupSimple',\n      title: 10643, // амплуа принимающего\n      data: [271, 272, 286, 287, 288],\n    },\n    {\n      type: 'popupSimple',\n      title: 8375, // тип приема\n      data: [218, 217, 219],\n    },\n    {\n      type: 'popupWithPlayers',\n      title: 8833, // Кто подает\n    },\n    {\n      type: 'popupSimple',\n      title: 10591, // расстановка\n      data: [313, 314, 315, 316, 317, 318],\n    },\n  ],\n}\n\nexport const filterPopupByTabForPlayer: TFiltersConfig = {\n  attack: [\n    {\n      type: 'popupWithColumns',\n      title: 10584, // результат\n      data: [\n        {\n          columnTitleId: 1, // выигранное очко\n          ids: [2, 3, 4],\n        },\n        {\n          columnTitleId: 5, // проигранное очко\n          ids: [6, 7, 276, 274, 8, 9],\n        },\n        {\n          columnTitleId: 49, // нулевая атака\n          ids: [298, 299],\n        },\n      ],\n    },\n    {\n      type: 'popupSimple',\n      title: 8556, // комбинация\n      data: [16, 17, 10, 22, 14, 13, 12, 18, 19, 21, 20],\n    },\n    {\n      type: 'popupSimple',\n      title: 10657, // атаки с первого мяча\n      data: [307, 308, 309, 310, 311, 312],\n    },\n    {\n      type: 'popupSimple',\n      title: 8341, // разновидность атаки\n      data: [24, 25, 26, 28],\n    },\n    {\n      type: 'popupWithZones',\n      title: 10658, // направление атаки\n      data: [\n        {\n          zoneId: 41,\n          zoneNumber: 1,\n        },\n        {\n          zoneId: 46,\n          zoneNumber: 6,\n        },\n        {\n          zoneId: 45,\n          zoneNumber: 5,\n        },\n        {\n          zoneId: 42,\n          zoneNumber: 2,\n        },\n        {\n          zoneId: 43,\n          zoneNumber: 3,\n        },\n        {\n          zoneId: 44,\n          zoneNumber: 4,\n        },\n      ],\n    },\n    {\n      type: 'popupSimple',\n      title: 10668, // тип блока\n      data: [29, 30, 31, 32],\n    },\n  ],\n  attack_reception: [\n    {\n      type: 'popupSimple',\n      title: 10669, // результат приема\n      data: [304, 305, 166],\n    },\n    {\n      type: 'popupSimple',\n      title: 8366, // тип приема\n      data: [199, 198, 200],\n    },\n    {\n      type: 'popupWithZones',\n      style: 'home', // home - сторона поля своей команды\n      title: 8363, // Приемы атак в зоне\n      data: [\n        {\n          zoneId: 195,\n          zoneNumber: 4,\n        },\n        {\n          zoneId: 194,\n          zoneNumber: 3,\n        },\n        {\n          zoneId: 193,\n          zoneNumber: 2,\n        },\n        {\n          zoneId: 196,\n          zoneNumber: 5,\n        },\n        {\n          zoneId: 197,\n          zoneNumber: 6,\n        },\n        {\n          zoneId: 192,\n          zoneNumber: 1,\n        },\n      ],\n    },\n    {\n      type: 'popupSimple',\n      title: 8342, // Число блокирующих\n      data: [202, 203, 204, 205],\n    },\n  ],\n  block: [\n    {\n      type: 'popupWithColumns',\n      title: 10584, // Результат\n      data: [\n        {\n          columnTitleId: false,\n          ids: [275],\n        },\n        {\n          columnTitleId: 50, // выигранное очко\n          ids: [51, 53],\n        },\n        {\n          columnTitleId: 232, // проигранное очко\n          ids: [58, 55, 54, 56, 57],\n        },\n        {\n          columnTitleId: 10664, // нулевой блок\n          ids: [59, 60],\n        },\n      ],\n    },\n    {\n      type: 'popupWithHomePlayers',\n      title: 10665, // блокирующий\n    },\n    {\n      type: 'popupSimple',\n      title: 10666, // амплуа блокирующего\n      data: [300, 301, 302, 303],\n    },\n    {\n      type: 'popupSimple',\n      title: 10668, // тип блока\n      data: [71, 72, 73],\n    },\n    {\n      type: 'popupSimple',\n      title: 8343, // характеристика блока\n      data: [74, 75],\n    },\n  ],\n  pass: [\n    {\n      type: 'popupWithColumns',\n      title: 10584, // Результат\n      data: [\n        {\n          columnTitleId: 105, // ассист\n          ids: [289, 290],\n        },\n        {\n          columnTitleId: 104, // ошибка\n          ids: [103, 102],\n        },\n        {\n          columnTitleId: 306, // нулевая атака\n          ids: [291, 292],\n        },\n      ],\n    },\n    {\n      type: 'popupWithHomePlayers',\n      title: 10645, // пасующий\n    },\n    {\n      type: 'popupSimple',\n      title: 10646, // амплуа пасующего\n      data: [293, 294, 295, 296, 297],\n    },\n    {\n      type: 'popupSimple',\n      title: 10647, // тип передачи\n      data: [106, 107],\n    },\n    {\n      style: 'home', // home - сторона поля своей команды\n      type: 'popupWithZones',\n      title: 10648, // направление передачи\n      data: [\n        {\n          zoneId: 131,\n          zoneNumber: 4,\n        },\n        {\n          zoneId: 130,\n          zoneNumber: 3,\n        },\n        {\n          zoneId: 129,\n          zoneNumber: 2,\n        },\n        {\n          zoneId: 132,\n          zoneNumber: 5,\n        },\n        {\n          zoneId: 133,\n          zoneNumber: 6,\n        },\n        {\n          zoneId: 128,\n          zoneNumber: 1,\n        },\n      ],\n    },\n    {\n      style: 'home',\n      type: 'popupWithZones',\n      title: 10649, // зона передачи\n      data: [\n        {\n          zoneId: 137,\n          zoneNumber: 4,\n        },\n        {\n          zoneId: 136,\n          zoneNumber: 3,\n        },\n        {\n          zoneId: 135,\n          zoneNumber: 2,\n        },\n        {\n          zoneId: 138,\n          zoneNumber: 5,\n        },\n        {\n          zoneId: 139,\n          zoneNumber: 6,\n        },\n        {\n          zoneId: 134,\n          zoneNumber: 1,\n        },\n      ],\n    },\n  ],\n  serve: [\n    {\n      type: 'popupWithColumns',\n      title: 10584, // результат\n      data: [\n        {\n          columnTitleId: 10585, // Эйс\n          ids: [145, 146, 147],\n        },\n        {\n          columnTitleId: 278, // Ошибка\n          ids: [149, 148, 150, 151],\n        },\n        {\n          columnTitleId: 279, // Нулевая подача\n          ids: [143, 142],\n        },\n      ],\n    },\n    {\n      type: 'popupSimple',\n      title: 8367, // тип подачи\n      data: [162, 163],\n    },\n    {\n      type: 'popupSimple',\n      title: 10596, // характеристика\n      data: [154, 153, 152],\n    },\n    {\n      type: 'popupWithZones',\n      title: 8882,\n      data: [\n        {\n          zoneId: 156,\n          zoneNumber: 1,\n        },\n        {\n          zoneId: 161,\n          zoneNumber: 6,\n        },\n        {\n          zoneId: 160,\n          zoneNumber: 5,\n        },\n        {\n          zoneId: 157,\n          zoneNumber: 2,\n        },\n        {\n          zoneId: 158,\n          zoneNumber: 3,\n        },\n        {\n          zoneId: 159,\n          zoneNumber: 4,\n        },\n      ],\n    },\n    {\n      type: 'popupSimple',\n      title: 10602, // направление\n      data: [280, 281, 282, 283, 284, 285],\n    },\n  ],\n  serve_reception: [\n    {\n      type: 'popupSimple',\n      title: 10584, // Результат\n      data: [208, 209, 210],\n    },\n    {\n      type: 'popupSimple',\n      title: 8375, // тип приема\n      data: [218, 217, 219],\n    },\n    {\n      type: 'popupWithPlayers',\n      title: 8833, // Кто подает\n    },\n    {\n      type: 'popupSimple',\n      title: 10591, // расстановка\n      data: [313, 314, 315, 316, 317, 318],\n    },\n  ],\n}\n","export const lexic: {[key: number]: string} = {\n  1: '7726',\n  2: '7727',\n  3: '10650',\n  4: '10651',\n  5: '7730',\n  6: '7731',\n  7: '8710',\n  8: '10654',\n  9: '8711',\n  10: '7736',\n  12: '966',\n  13: '7738',\n  14: '7739',\n  16: '7741',\n  17: '7742',\n  18: '7743',\n  19: '7744',\n  20: '7745',\n  21: '7746',\n  22: '9884',\n  24: '7747',\n  25: '7748',\n  26: '7749',\n  28: '7751',\n  29: '7752',\n  30: '7753',\n  31: '7754',\n  32: '7755',\n  41: '7758',\n  42: '7759',\n  43: '7760',\n  44: '7761',\n  45: '7762',\n  46: '7763',\n  49: '10644',\n  50: '7726',\n  51: '8656',\n  53: '7737',\n  54: '10654',\n  55: '8711',\n  56: '10663',\n  57: '7773',\n  58: '8659',\n  59: '9880',\n  60: '8577',\n  70: '7752',\n  71: '7753',\n  72: '7754',\n  73: '7755',\n  74: '7756',\n  75: '7757',\n  102: '7780',\n  103: '7781',\n  104: '737',\n  105: '7783',\n  106: '7784',\n  107: '7785',\n  128: '7758',\n  129: '7759',\n  130: '7760',\n  131: '7761',\n  132: '7762',\n  133: '7763',\n  134: '7758',\n  135: '7759',\n  136: '7760',\n  137: '7761',\n  138: '7762',\n  139: '7763',\n  142: '7786',\n  143: '7787',\n  144: '10585',\n  145: '7789',\n  146: '7790',\n  147: '7791',\n  148: '8709',\n  149: '8710',\n  150: '8711',\n  151: '8650',\n  152: '8371',\n  153: '8372',\n  154: '8373',\n  156: '7758',\n  157: '7759',\n  158: '7760',\n  159: '7761',\n  160: '7762',\n  161: '7763',\n  162: '8368',\n  163: '8369',\n  166: '737',\n  186: '7758',\n  187: '7759',\n  188: '7760',\n  189: '7761',\n  190: '7762',\n  191: '7763',\n  192: '7758',\n  193: '7759',\n  194: '7760',\n  195: '7761',\n  196: '7762',\n  197: '7763',\n  198: '7784',\n  199: '7785',\n  200: '7802',\n  202: '7752',\n  203: '7753',\n  204: '7754',\n  205: '7755',\n  208: '7786',\n  209: '7787',\n  210: '737',\n  217: '7784',\n  218: '7785',\n  219: '7802',\n  232: '7730',\n  263: '7776',\n  264: '7778',\n  265: '7777',\n  266: '7779',\n  267: '7776',\n  268: '7778',\n  269: '7779',\n  270: '7887',\n  271: '7776',\n  272: '7887',\n  274: '10653',\n  275: '10659',\n  276: '8709',\n  278: '737',\n  279: '10785',\n  280: '9862',\n  281: '9863',\n  282: '9864',\n  283: '9865',\n  284: '9866',\n  285: '9867',\n  286: '7778',\n  287: '7777',\n  288: '7779',\n  289: '7781',\n  290: '7780',\n  291: '7781',\n  292: '7780',\n  293: '7779',\n  294: '7887',\n  295: '7776',\n  296: '7778',\n  297: '7777',\n  298: '8653',\n  299: '8577',\n  300: '7777',\n  301: '7778',\n  302: '7776',\n  303: '7779',\n  304: '10670',\n  305: '10671',\n  306: '10644',\n  307: '9862',\n  308: '9863',\n  309: '9864',\n  310: '9865',\n  311: '9866',\n  312: '9867',\n  313: '9862',\n  314: '9863',\n  315: '9864',\n  316: '9865',\n  317: '9866',\n  318: '9867',\n}\n","import { inject, observer } from 'mobx-react'\nimport { compose, withHandlers } from 'recompose'\nimport some from 'lodash/some'\nimport cx from 'classnames'\nimport { lexic } from 'config/lexics/filtersById'\n\ntype TPopupHoc = {\n  filters: {\n    tempSelectedFilters: {[key: number]: {}},\n  },\n}\n// Для попапа с основной общей логикой для попап окон в блоке фильтров\nexport const PopupHOC = (wrappedComponent: any) =>\n  compose(\n    inject('filters'),\n    withHandlers<TPopupHoc, {}>({\n      getFilterLexics: () => (id: number) => lexic[id] || id,\n      getItemClassName: ({\n        filters: { tempSelectedFilters },\n      }) => (id: number) =>\n        cx('popup-column__item', {\n          'popup-column__item_checked': tempSelectedFilters[id],\n        }),\n      getTitleClassName: ({ filters: { tempSelectedFilters } }) => (\n        (ids: Array<number>) => (\n          cx('popup-column__title', {\n            'popup-column__title_checked': some(\n              ids,\n              id => tempSelectedFilters[id],\n            ),\n          })\n        )\n      ),\n    }),\n    observer,\n  )(wrappedComponent)\n","import React, { Fragment } from 'react'\n\nimport map from 'lodash/map'\n\nimport { T9n } from 'react-sport'\n\nimport { PopupHOC } from '../PopupHOC'\n\nimport { TPropsCommon } from '../types'\n\ntype TProps = TPropsCommon & {\n  data: Array<{\n    columnTitleId: number | false,\n    ids: Array<number>,\n    zoneId: number,\n    zoneNumber: number,\n  }>,\n}\n\n// Попап с фильтрами, которые разбиты по группам (в колонку) с заголовком у каждой группы\n// Если нет заголовка, то отображаем просто список фильтров\nconst ColumnsPopupComponent = ({\n  data,\n  filters: { handleAllTempCheck, handleTempCheck },\n  getFilterLexics,\n  getItemClassName,\n  getTitleClassName,\n  toggleOpenClose,\n}: TProps) => (\n  <Fragment>\n    <div className='popup-column__wrapper'>\n      {map(data, ({ columnTitleId, ids }, idx) => (\n        <div className='popup-column__container' key={columnTitleId || idx}>\n          {columnTitleId && (\n            <div\n              className={getTitleClassName(ids)}\n              onClick={() => handleAllTempCheck(ids)}\n            >\n              <T9n t={getFilterLexics(columnTitleId)} />\n            </div>\n          )}\n          <ul className='popup-column__list'>\n            {map(ids, id => (\n              <li\n                className={getItemClassName(id)}\n                key={id}\n                onClick={() => handleTempCheck(id)}\n              >\n                <T9n t={getFilterLexics(id)} />\n              </li>\n            ))}\n          </ul>\n        </div>\n      ))}\n    </div>\n    <button className='map-block__popup-button' onClick={toggleOpenClose}>\n        OK\n    </button>\n  </Fragment>\n)\n\nexport const ColumnsPopup = PopupHOC(ColumnsPopupComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withHandlers,\n  withProps,\n} from 'recompose'\nimport cx from 'classnames'\nimport map from 'lodash/map'\n\nimport { PopupHOC } from '../PopupHOC'\n\nimport {\n  TProps,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n  TComposeInner,\n  TWithPropsInner,\n  TWithPropsOuter,\n} from './types'\n\n// Попап с зонами поля\nconst ZonesPopupComponent = ({\n  data,\n  fieldClassName,\n  filters: { handleTempCheck },\n  getZoneClassName,\n  toggleOpenClose,\n}: TProps) => (\n  <div className='map-block__popup'>\n    <ul className={fieldClassName}>\n      {map(data, ({ zoneId, zoneNumber }) => (\n        <li\n          className={getZoneClassName(zoneId)}\n          key={zoneId}\n          onClick={() => handleTempCheck(zoneId)}\n        >\n          {zoneNumber}\n        </li>\n      ))}\n    </ul>\n    <button className='map-block__popup-button' onClick={toggleOpenClose}>\n        OK\n    </button>\n  </div>\n)\n\nconst zonesPopupComposed = compose<TComposeInner, {}>(\n  inject('filters'),\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(({\n    style,\n  }) => ({\n    fieldClassName: cx('map-block__popup-zone-list', {\n      'map-block__popup-zone-list_home': style === 'home',\n    }),\n  })),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    getZoneClassName: ({ filters: { tempSelectedFilters } }) => id =>\n      cx('map-block__popup-zone', {\n        'map-block__popup-zone_active': tempSelectedFilters[id],\n      }),\n  }),\n  PopupHOC,\n)\n\nexport const ZonesPopup = zonesPopupComposed(ZonesPopupComponent)\n","import React, { Fragment } from 'react'\nimport map from 'lodash/map'\nimport { T9n } from 'react-sport'\nimport { PopupHOC } from '../PopupHOC'\nimport { TPropsCommon } from '../types'\n\ntype TProps = TPropsCommon & {\n  data: Array<number>,\n}\n\n// Обычный попап с фильтрами в столбик\nconst PopupSimpleComponent = ({\n  data,\n  filters: { handleTempCheck },\n  getFilterLexics,\n  getItemClassName,\n  toggleOpenClose,\n}: TProps) => (\n  <Fragment>\n    <div className='popup-column__wrapper'>\n      <div className='popup-column__container'>\n        <ul className='popup-column__list'>\n          {map(data, id => (\n            <li\n              className={getItemClassName(id)}\n              key={id}\n              onClick={() => handleTempCheck(id)}\n            >\n              <T9n t={getFilterLexics(id)} />\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n    <button className='map-block__popup-button' onClick={toggleOpenClose}>\n      OK\n    </button>\n  </Fragment>\n)\n\nexport const PopupSimple = PopupHOC(PopupSimpleComponent)\n","import React, { Fragment } from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withProps,\n  withHandlers,\n} from 'recompose'\nimport cx from 'classnames'\nimport map from 'lodash/map'\nimport size from 'lodash/size'\n\nimport { getLongSuffix } from 'module/utils/helpers'\nimport {\n  TProps,\n  TWithPropsOuter,\n  TWithPropsInner,\n  TPlayer,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n  TPropsOuter,\n} from './types'\n\nimport { PopupHOC } from '../PopupHOC'\n\n// Попап со списком игроков разбитым по командам\nconst PopupWithPlayersComponent = ({\n  filters: { handleAllTempCheck, handleTempCheck },\n  getFullName,\n  getItemClassName,\n  getPlayersId,\n  getTitleClassName,\n  mapShoot: { data },\n  suffix,\n  toggleOpenClose,\n  type,\n}: TProps) => (\n  <Fragment>\n    <div\n      className={cx(\n        'popup-column__wrapper',\n        { 'popup-column__wrapper_wide': size(data) >= 3 },\n        { 'popup-column__wrapper_narrow': size(data) < 2 },\n      )}\n    >\n      {map(data, ({\n        f_team: teamId,\n        prop_player: playersList,\n        ...team\n      }) => (\n        <div className='popup-column__container' key={teamId}>\n          <div\n            className={getTitleClassName(getPlayersId(playersList))}\n            onClick={() =>\n              handleAllTempCheck(getPlayersId(playersList), type)\n            }\n          >\n            <span>{team[`name_${suffix}`]}</span>\n          </div>\n          <ul className='popup-column__list'>\n            {map(playersList, ({ player_id: playerId, ...player }) => (\n              <li\n                className={getItemClassName(`${playerId}_player`)}\n                key={playerId}\n                onClick={() => handleTempCheck(`${playerId}_player`, type)}\n              >\n                <span>{getFullName(player)}</span>\n              </li>\n            ))}\n          </ul>\n        </div>\n      ))\n      }\n    </div>\n    <button className='map-block__popup-button' onClick={toggleOpenClose}>\n      OK\n    </button>\n  </Fragment>\n)\n\nconst popupWithPlayersComposed = compose<TProps, TPropsOuter>(\n  inject('mapShoot', 'lexics'),\n  withProps<TWithPropsInner, TWithPropsOuter>(({ lexics: { lang } }) => ({\n    suffix: getLongSuffix(lang),\n  })),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    getFullName: ({ suffix }) => (player: TPlayer) =>\n      `${player[`firstname_${suffix}`]} ${player[`lastname_${suffix}`]}`,\n\n    getPlayersId: () => (players: Array<{player_id: number}>) =>\n      map(players, ({ player_id }) => `${player_id}_player`),\n  }),\n  PopupHOC,\n  observer,\n)\n\nexport const PopupWithPlayers = popupWithPlayersComposed(PopupWithPlayersComponent)\n","import React, { Fragment } from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withProps,\n  withHandlers,\n} from 'recompose'\nimport map from 'lodash/map'\nimport filter from 'lodash/filter'\n\nimport { getLongSuffix } from 'module/utils/helpers'\nimport { PopupHOC } from '../PopupHOC'\n\nimport {\n  TProps,\n  TWithPropsInner,\n  TWithHandlersOuter,\n  TWithPropsOuter,\n  TPlayer,\n  TComposeOuter,\n} from './types'\n\n// Попап со списком игроков разбитым по командам\nconst PopupWithHomePlayersComponent = ({\n  filters: { handleTempCheck },\n  getFullName,\n  getItemClassName,\n  playersList,\n  toggleOpenClose,\n  type,\n}: TProps) => (\n  <Fragment>\n    <div className='popup-column__wrapper'>\n      <ul className='popup-column__list'>\n        {map(playersList, ({ f_player: playerId, prop_player: player }) => (\n          <li\n            className={getItemClassName(`${playerId}_player`)}\n            key={playerId}\n            onClick={() => handleTempCheck(`${playerId}_player`, type)}\n          >\n            <span>{getFullName(player[0])}</span>\n          </li>\n        ))}\n      </ul>\n    </div>\n    <button className='map-block__popup-button' onClick={toggleOpenClose}>\n      OK\n    </button>\n  </Fragment>\n)\n\nconst popupWitHomePlayersComposed = compose<TComposeOuter, TProps>(\n  inject(\n    'playerInfo',\n    'lexics',\n    'playerProfile',\n  ),\n  observer,\n  withProps<TWithPropsOuter, TWithPropsInner>(\n    ({\n      lexics: { lang },\n      playerInfo: { basicData },\n      playerProfile: { profile },\n    }) => ({\n      playersList: profile\n        ? filter(\n          basicData, ({ f_player }: {f_player: number}) => f_player !== profile.id,\n        )\n        : basicData,\n      suffix: getLongSuffix(lang),\n    }),\n  ),\n  withHandlers<TWithPropsOuter, TWithHandlersOuter>({\n    getFullName: ({ suffix }) => (player: TPlayer) =>\n      `${player[`firstname_${suffix}`]} ${player[`lastname_${suffix}`]}`,\n  }),\n  PopupHOC,\n  observer,\n)\n\nexport const PopupWithHomePlayers = popupWitHomePlayersComposed(PopupWithHomePlayersComponent)\n","import React from 'react'\nimport { compose } from 'recompose'\n\nimport { OutsideClick } from 'react-sport'\nimport { ColumnsPopup } from './FilterPopup/ColumnsPopup'\nimport { ZonesPopup } from './FilterPopup/ZonesPopup'\nimport { PopupSimple } from './FilterPopup/PopupSimple'\nimport { PopupWithPlayers } from './FilterPopup/PopupWithPlayers'\nimport { PopupWithHomePlayers } from './FilterPopup/PopupWithHomePlayers'\nimport './FilterPopup/filterPopup.scss'\n\nconst FilterMenuComponent = ({ type, ...props }: {type: string}) => (\n  <div className='map-block__menu'>\n    {type === 'popupWithColumns' && <ColumnsPopup {...props} />}\n    {type === 'popupWithZones' && <ZonesPopup {...props} />}\n    {type === 'popupSimple' && <PopupSimple {...props} />}\n    {type === 'popupWithPlayers' && (\n      <PopupWithPlayers type={type} {...props} />\n    )}\n    {type === 'popupWithHomePlayers' && (\n      //@ts-ignore\n      <PopupWithHomePlayers type={type} {...props} />\n    )}\n  </div>\n)\n\nconst filterMenuComposed = compose<{type: string}, {}>(\n  OutsideClick,\n)\n\nexport const FilterMenu = filterMenuComposed(FilterMenuComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers } from 'recompose'\nimport find from 'lodash/find'\nimport map from 'lodash/map'\n\nimport { T9n } from 'react-sport'\n\nimport { getLongSuffix } from 'module/utils/helpers'\n\nimport { lexic } from 'config/lexics/filtersById'\n\nimport {\n  TProps,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n  TPlayer,\n  TComposeOuter,\n  TComposeInner,\n} from './types'\n\nconst FilterSubMenuComponent = ({\n  checkedInGroup,\n  getFullName,\n  handleUncheck,\n}: TProps) => (\n  <ul className='checked-list'>\n    {map(checkedInGroup, ({ id, player_id }) => (\n      <li className='checked-list__item' key={id || player_id}>\n        {player_id ? (\n          <span className='checked-list__item-name'>\n            {getFullName(player_id)}\n          </span>\n        ) : (\n          <T9n className='checked-list__item-name' t={lexic[Number(id)]} />\n        )}\n        <i\n          className='checked-list__item-remove'\n          onClick={() => handleUncheck(id || `${player_id}_player`)}\n        />\n      </li>\n    ))}\n  </ul>\n)\n\nconst filterSubMenuComposed = compose<TComposeInner, TComposeOuter>(\n  inject('lexics'),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    getFullName: ({\n      checkedInGroup,\n      lexics: { lang },\n    }) => (playerId) => {\n      const suffix = getLongSuffix(lang)\n      const player: TPlayer = find(checkedInGroup, { player_id: playerId }) || {}\n      const fullName = `${player[`firstname_${suffix}`]} ${\n        player[`lastname_${suffix}`]\n      }`\n      return fullName\n    },\n  }),\n  observer,\n)\n\nexport const FilterSubMenu = filterSubMenuComposed(FilterSubMenuComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withProps,\n  withState,\n  withHandlers,\n} from 'recompose'\nimport includes from 'lodash/includes'\nimport filter from 'lodash/filter'\nimport cx from 'classnames'\n\nimport { T9n } from 'react-sport'\n\nimport { getCheckedFiltersSubMenu } from 'module/utils/helpers'\nimport { FilterMenu } from './FilterMenu'\nimport { FilterSubMenu } from './FilterSubMenu'\n\nimport {\n  TProps,\n  TWithHandlersOuter,\n  TWithPropsOuter,\n  TComposeInner,\n  TWithHandlersInner,\n  TWithPropsInner,\n} from './types'\n\nconst FilterItemComponent = ({\n  checkedInGroup,\n  clickOutside,\n  data,\n  filters: {\n    handleUncheck,\n  },\n  getMenuClassName,\n  menuOpened,\n  style,\n  title,\n  toggleOpenClose,\n  type,\n}: TProps) => (\n  <div className='map-block__filters-row'>\n    <span className={getMenuClassName()} onClick={toggleOpenClose}>\n      <T9n t={title} />\n    </span>\n    {menuOpened\n        && (\n          //@ts-ignore\n          <FilterMenu\n            type={type}\n            data={data}\n            style={style}\n            clickOutside={clickOutside}\n            toggleOpenClose={toggleOpenClose}\n          />\n        )\n    }\n    <FilterSubMenu\n      checkedInGroup={checkedInGroup}\n      handleUncheck={handleUncheck}\n    />\n  </div>\n)\n\nconst filterItemComposed = compose<TComposeInner, TProps>(\n  inject(\n    'filters',\n    'mapShoot',\n    'playerInfo',\n  ),\n  withState('menuOpened', 'menuToggle', false),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    clickOutside: ({\n      filters: { toggleOpenMenu },\n      menuOpened,\n      menuToggle,\n    }) => () => {\n      menuToggle(!menuOpened)\n      toggleOpenMenu('reset')\n    },\n    getMenuClassName: ({ menuOpened }) => () => cx(\n      'map-block__title',\n      { 'map-block__title_active': menuOpened },\n    ),\n    toggleOpenClose: ({\n      filters: { toggleOpenMenu },\n      menuOpened,\n      menuToggle,\n    }) => () => {\n      menuToggle(!menuOpened)\n      toggleOpenMenu()\n    },\n  }),\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(({\n    data: idsFromConfig,\n    filters: { checked },\n    mapShoot,\n    playerInfo,\n    type,\n  }) => {\n    const getIds = () => {\n      switch (type) {\n        case 'popupWithPlayers':\n          return mapShoot.playersIds\n        case 'popupWithHomePlayers':\n          return playerInfo.playersIds\n        default:\n          return idsFromConfig\n      }\n    }\n    const ids = getIds()\n    const filtered = getCheckedFiltersSubMenu(ids, type)\n    const keyNormalized = (key: string) => (\n      includes(['popupWithPlayers', 'popupWithHomePlayers'], type)\n        ? key\n        : Number(key)\n    )\n    const checkedInGroup = filter(checked, (value, key) => (\n      includes(filtered, keyNormalized(key))))\n\n    return { checkedInGroup }\n  }),\n  observer,\n)\n\nexport const FilterItem = filterItemComposed(FilterItemComponent)\n","import React, { Fragment } from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  lifecycle,\n  withProps,\n} from 'recompose'\nimport map from 'lodash/map'\n\nimport {\n  TWithPropsInner,\n  TComposeInner,\n  TWithPropsOuter,\n  TLifeCycle,\n} from './types'\nimport { filterPopupByTab, filterPopupByTabForPlayer } from './config'\n\nimport { FilterItem } from './FilterItem'\n\n\nconst MapFiltersComponent = ({ filtersList }: TWithPropsInner) => (\n  <Fragment>\n    {map(\n      filtersList,\n      ({\n        data,\n        style,\n        title,\n        type,\n      }) => (\n      //@ts-ignore\n        <FilterItem\n          key={title}\n          type={type}\n          title={title}\n          data={data}\n          style={style}\n        />\n      ),\n    )}\n  </Fragment>\n)\n\nconst mapFiltersComposed = compose<TComposeInner, {}>(\n  inject(\n    'tabs',\n    'filters',\n    'lexics',\n  ),\n  withProps<TWithPropsInner, TWithPropsOuter>(({\n    lexics: { page },\n    tabs: { active },\n  }) => ({\n    filtersList: page === 'player'\n      ? filterPopupByTabForPlayer[active]\n      : filterPopupByTab[active],\n  })),\n  lifecycle<TLifeCycle, {}>({\n    componentDidMount() {\n      const { fetch, loaded } = this.props.filters\n      if (!loaded) {\n        fetch()\n      }\n    },\n  }),\n  observer,\n)\n\nexport const MapFilters = mapFiltersComposed(MapFiltersComponent)\n","import get from 'lodash/get'\n\n// @ts-ignore\nimport { getLongSuffix, getSuffix } from 'module/utils/helpers'\n\n/** Получение полного имени игрока (англ/русский)\n * @param {object} player - объект игрока\n * @param {string} lang - язык (ru, rus, en, eng)\n * @param {bool} long - форма языка (прим. ru или rus)\n */\nexport function getPlayerFullName({\n  lang,\n  long,\n  player,\n}: {\n  player: {},\n  lang: string,\n  //@ts-ignore\n  long: bool,\n}): string {\n  const suffix = long ? getLongSuffix(lang) : getSuffix(lang)\n  const firstName = get(player, `firstname_${suffix}`, '')\n  const lastName = get(player, `lastname_${suffix}`, '')\n\n  return `${firstName} ${lastName}`\n}\n","\nimport React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose } from 'recompose'\n\n// @ts-ignore\nimport { getPlayerFullName } from 'module/utils/helpers/getPlayerFullName'\n\ntype TProps = {\n  player: {},\n  lexics: { lang: string },\n};\n\nconst PlayerNameComponent = ({ lexics: { lang }, player }: TProps) => (\n  <span>{getPlayerFullName({ player, lang, long: true })}</span>\n)\n\nconst playerNameComposed = compose(\n  inject('lexics'),\n  observer,\n)\n\n// @ts-ignore\nexport const PlayerName = playerNameComposed(PlayerNameComponent)\n","import React from 'react'\nimport { observer, inject } from 'mobx-react'\n\nimport { withHandlers, compose, withProps } from 'recompose'\nimport map from 'lodash/map'\nimport flatten from 'lodash/flatten'\nimport values from 'lodash/values'\nimport get from 'lodash/get'\nimport find from 'lodash/find'\nimport head from 'lodash/head'\nimport includes from 'lodash/includes'\nimport pipe from 'lodash/fp/pipe'\n\nimport { SimpleDropdown } from 'react-sport'\n\n// @ts-ignore\nimport { getPlayerFullName } from 'module/utils/helpers/getPlayerFullName'\n\nimport { PlayerName } from './PlayerName'\n\ntype TProps = {\n  matchTable: {\n    playerList: {},\n  },\n  team1: number,\n  team2: number,\n  playersCompareWidget: {\n    selectedPlayers: {},\n  },\n  getPlayerNumber: (playerId: number) => number,\n  selectPlayer: (player: {}) => void,\n  getPlaceholder: (arg: Array<{ f_player: number }>) => string,\n  getTeamPlayers: (value: number) => Array<{ f_player: number }>,\n}\n\n// Компонент с двумя выпадающими меню, игроки команд в профиле матча\nconst PlayersSelectComponent = ({\n  getPlaceholder,\n  getPlayerNumber,\n  getTeamPlayers,\n  selectPlayer,\n  team1,\n  team2,\n}: TProps) => (\n  <div className='t-compare__teams'>\n    {map([team1, team2], team => (\n      <div key={team} className='t-compare__player'>\n        {/*\n        //@ts-ignore */}\n        <SimpleDropdown placeholder={getPlaceholder(getTeamPlayers(team))}>\n          {map(getTeamPlayers(team), player => (\n            //@ts-ignore\n            <div key={player.f_player} onClick={selectPlayer(player)}>\n              <span className='t-compare__player-num'>\n                {getPlayerNumber(player.f_player)}\n              </span>\n              <span className='t-compare__player-name'>\n                {/*\n                //@ts-ignore */}\n                <PlayerName player={player} />\n              </span>\n            </div>\n          ))}\n        </SimpleDropdown>\n      </div>\n    ))}\n  </div>\n)\n\nconst playersSelectComposed = compose(\n  inject('lexics', 'playersCompareWidget', 'matchTable', 'matchProfile'),\n  observer,\n  //@ts-ignore\n  withProps(({ lexics: { lang } }) => ({ lang })),\n  //@ts-ignore\n  withHandlers({\n    getPlayerNumber: ({\n      matchTable: { playerList },\n      //@ts-ignore\n    }) => (playerId) => {\n      const players = pipe(\n        values,\n        flatten,\n      )(playerList)\n\n      //@ts-ignore\n      return get(find(players, { f_player: playerId }, {}), 'num', '')\n    },\n    selectPlayer: ({\n      lexics: { lang },\n      matchProfile: { matchId },\n      playersCompareWidget: { selectedPlayers, updateSelectedPlayers },\n      //@ts-ignore\n    }) => player => () => {\n      if (!includes(values(selectedPlayers), player.f_player)) {\n        updateSelectedPlayers({\n          lang,\n          matchId,\n          players: [player],\n        })\n      }\n    },\n  }),\n  //@ts-ignore\n  withHandlers({\n    getTeamPlayers: ({ matchTable: { playerList } }) =>\n      //@ts-ignore\n      team => get(playerList, `${team}`, []),\n    getPlaceholder: ({\n      getPlayerNumber,\n      lexics: { lang },\n      //@ts-ignore\n    }) => (players) => {\n      const defaultPlayer = head(players) || {}\n      const fullName = getPlayerFullName({\n        //@ts-ignore\n        player: defaultPlayer,\n        lang,\n        long: true,\n      })\n      const number = getPlayerNumber(get(defaultPlayer, 'f_player'))\n      return (\n        <div key={number}>\n          <span className='t-compare__player-num'>{number}</span>\n          <span className='t-compare__player-name'>{fullName}</span>\n        </div>\n      )\n    },\n  }),\n  observer,\n)\n\n// @ts-ignore\nexport const PlayersSelect = playersSelectComposed(PlayersSelectComponent)\n","import React from 'react'\n\ntype TProps = {\n  stats: Array<{\n    param: number,\n    //@ts-ignore\n    param_name: string | null,\n    //@ts-ignore\n    param_name_short: string | null,\n  }>,\n  selectedPlayers: {},\n  team1: number,\n  team2: number,\n  getStatValue: (param: number, playerId: number) => number | string,\n  getClassName: (param: number, playerId: number) => string,\n  getExtLink: (\n    param: number,\n    param_name: string,\n    playerId: number\n  ) => void,\n}\n\nexport const PlayersStats = ({\n  getClassName,\n  getExtLink,\n  getStatValue,\n  selectedPlayers,\n  stats,\n  team1,\n  team2,\n}: TProps) => (\n  <div className='t-compare__stats-container'>\n    {stats.map(({\n      param,\n      param_name,\n      param_name_short,\n    }, index) => (\n      <div\n        key={`${param}_${param_name_short}_${index}`}\n        className='t-compare__stats-row'\n      >\n        <span\n          //@ts-ignore\n          className={getClassName(param, selectedPlayers[team1])}\n              //@ts-ignore\n          onClick={() => getExtLink(param, param_name, selectedPlayers[team1])}\n        >\n          {/*\n          //@ts-ignore */}\n          {getStatValue(param, selectedPlayers[team1])}\n        </span>\n        <span className='t-compare__stats-name'>{param_name}</span>\n        <span\n          //@ts-ignore\n          className={getClassName(param, selectedPlayers[team2])}\n              //@ts-ignore\n          onClick={() => getExtLink(param, param_name, selectedPlayers[team2])}\n        >\n          {/*\n          //@ts-ignore */}\n          {getStatValue(param, selectedPlayers[team2])}\n        </span>\n      </div>\n    ))}\n  </div>\n)\n\nexport default PlayersStats\n","import { inject, observer } from 'mobx-react'\n\nimport {\n  withHandlers,\n  compose,\n\n} from 'recompose'\nimport cx from 'classnames'\nimport find from 'lodash/find'\nimport get from 'lodash/get'\n\nimport { getLongSuffix } from 'module/utils/helpers'\n\nimport { TOuterProps, TInnerProps } from './types'\n\nexport const playersInfoComposed = compose<TOuterProps, TInnerProps>(\n  inject(\n    'lexics',\n    'videoLink',\n    'shootsRange',\n    'matchTable',\n    'playersCompareWidget',\n  ),\n  //@ts-ignore\n  withHandlers({\n    getPlayerParams: ({\n      playersCompareWidget: { playersInfo },\n      //@ts-ignore\n    }) => playerId => get(playersInfo, [playerId, 'params'], []),\n  }),\n  //@ts-ignore\n  withHandlers({\n    getImage: ({\n      playersCompareWidget: { playersInfo },\n      //@ts-ignore\n    }) => playerId => key => get(playersInfo, [playerId, key], ''),\n    //@ts-ignore\n    getStatValue: ({ getPlayerParams }) => (param, playerId) => {\n      const value = get(\n        find(getPlayerParams(playerId), { param }), 'value',\n      )\n      return value ? value.toFixed() : '-'\n    },\n    //@ts-ignore\n    getClassName: ({ getPlayerParams }) => (param, playerId) => {\n      const hasVideo = get(\n        find(getPlayerParams(playerId), { param }),\n        'f_match_event_ids',\n      )\n\n      return cx(\n        't-compare__stats-num',\n        { 't-compare__clickable-cell': hasVideo },\n      )\n    },\n\n    getExtLink: ({\n      getPlayerParams,\n      lexics: { lang },\n      playersCompareWidget: { playerList },\n      shootsRange,\n      videoLink: { request },\n    }) => (\n      //@ts-ignore\n      param,\n      //@ts-ignore\n      param_name,\n      //@ts-ignore\n      playerId,\n    ) => {\n      //@ts-ignore\n      const events: Array<any> = get(\n        find(getPlayerParams(playerId), { param }),\n        'f_match_event_ids',\n      )\n      const player = get(\n        find(playerList, { f_player: playerId }),\n        'prop_player[0]',\n        {},\n      )\n      const suffix = getLongSuffix(lang)\n\n      if (events) {\n        request({\n          events,\n          range: shootsRange,\n          lang,\n          playerInfo: `${player[`firstname_${suffix}`]} ${player[`lastname_${suffix}`]}`,\n          lexical_formula: param_name,\n          type: 'widgets',\n          widgetType: 'playersCompare',\n        })\n      }\n    },\n  }),\n  observer,\n)\n","import React, { Fragment } from 'react'\n\nimport { T9n, utils } from 'react-sport'\n\nimport { TOuterProps } from './types'\nimport PlayersStats from '../PlayersStats'\nimport { playersInfoComposed } from './composed'\n\nconst {\n  helpers: { onProfileImageError },\n} = utils\n\nconst PlayersInfoComponent = ({\n  getClassName,\n  getExtLink,\n  getImage,\n  getStatValue,\n  playersCompareWidget: { sortedStats },\n  selectedPlayers,\n  team1,\n  team2,\n}: TOuterProps) => (\n  <Fragment>\n    <div className='t-compare__control-row'>\n      <div className='t-compare__logo-container t-compare__logo-container_player'>\n        <img\n          className='t-compare__logo t-compare__logo_player'\n          //@ts-ignore\n          src={getImage(selectedPlayers[team1])('photo_team')}\n          alt='logoTeam'\n          onError={e => onProfileImageError(e, 'team')}\n        />\n        <img\n          className='t-compare__logo'\n          //@ts-ignore\n          src={getImage(selectedPlayers[team1])('photo_player')}\n          alt='logoPlayer'\n          onError={onProfileImageError}\n        />\n      </div>\n\n      <div className='t-compare__controls t-compare__controls_player'>\n        <T9n className='t-compare__toggler' t='match' />\n      </div>\n\n      <div className='t-compare__logo-container t-compare__logo-container_player'>\n        <img\n          className='t-compare__logo t-compare__logo_player t-compare__logo_player-right'\n          //@ts-ignore\n          src={getImage(selectedPlayers[team2])('photo_team')}\n          alt='logoTeam'\n          onError={e => onProfileImageError(e, 'team')}\n        />\n        <img\n          className='t-compare__logo'\n          //@ts-ignore\n          src={getImage(selectedPlayers[team2])('photo_player')}\n          alt='logoPlayer'\n          onError={onProfileImageError}\n        />\n      </div>\n    </div>\n\n    <PlayersStats\n      //@ts-ignore\n      stats={sortedStats}\n      team1={team1}\n      team2={team2}\n      getStatValue={getStatValue}\n      getClassName={getClassName}\n      getExtLink={getExtLink}\n      selectedPlayers={selectedPlayers}\n    />\n  </Fragment>\n)\n\nexport const PlayersInfo = playersInfoComposed(PlayersInfoComponent)\n","import React from 'react'\nimport { T9n } from 'react-sport'\n\nimport { DndParams, GearTable } from 'features/GearPopup/'\n\nimport { PlayersComparePupupComposed } from './PlayersComparePopupComposed'\n\ntype TProps = {\n  //@ts-ignore\n  lexics: { getLexics: (string) => string },\n  onApply: () => void,\n  //@ts-ignore\n  onClose: (value: string | null) => void,\n  playersCompareWidget: {},\n}\n\n// Попап окно с параметрами (шестеренка)\nexport const PlayersComparePopupComponent = ({\n  lexics: { getLexics },\n  onApply,\n  onClose,\n  playersCompareWidget,\n}: TProps) => (\n  <div className='popup popup-modern popup-modern_position-left popup-modern_active'>\n    <div className='popup-inner'>\n      <div className='popup-row-header'>\n        <h3 className='popup-title'>\n          <T9n t='main_statisctic' />\n        </h3>\n        {/*\n          //@ts-ignore */}\n        <span className='popup-close' onClick={onClose} />\n\n      </div>\n      <div className='popup-row-container'>\n        <GearTable\n          currentStore={playersCompareWidget}\n          ampluaId={0}\n        />\n      </div>\n      <div className='popup-column-aside'>\n        <DndParams />\n      </div>\n      <div className='popup-row-footer'>\n        <div className='popup-buttons'>\n          <input\n            //@ts-ignore\n            onClick={onClose}\n            type='button'\n            value={getLexics('cancel')}\n            className='popup-cancel'\n          />\n          <input\n            onClick={onApply}\n            type='button'\n            value={getLexics('ok')}\n            className='popup-submit'\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n)\n\n//@ts-ignore\nexport const PlayersComparePopup = PlayersComparePupupComposed(PlayersComparePopupComponent)\n","\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers, lifecycle } from 'recompose'\n\ntype TInnerProps = {\n  handlePopupAction: () => void,\n};\n\ntype TOuterProps = {\n  matchProfile: {},\n  teamProfile: {},\n  matchTable: {},\n  lexics: {},\n  playersCompareWidget: {},\n  gearPopupStore: {},\n  onApply: () => void,\n  onClose: () => void,\n};\n\nexport const PlayersComparePupupComposed = compose<\nTOuterProps & TInnerProps,\nTInnerProps\n>(\n  inject(\n    'matchProfile',\n    'teamProfile',\n    'matchTable',\n    'lexics',\n    'playersCompareWidget',\n    'gearPopupStore',\n  ),\n  //@ts-ignore\n  withHandlers({\n    /**\n     * Запись в стор выбранных параметров в попапе шестеренки\n     * @param {func} saveTempParams - функция сохранения параметров\n     * @param {func} handlePopupAction - функция закрытия попапа\n     * @param {string} lang - выбранный язык\n     * @param {string} matchId - id матча\n     */\n    onApply: ({\n      gearPopupStore: { tempSelected },\n      handlePopupAction,\n      lexics: { lang },\n      matchProfile: { matchId },\n      playersCompareWidget: { saveTempParams },\n    }) => () => {\n      saveTempParams({\n        lang,\n        matchId,\n        params: tempSelected,\n      })\n      handlePopupAction()\n    },\n    /**\n     * Закрытие попапа шестеренки\n     * @param {func} editTempSelected - функция очищения выбранных параметров\n     * @param {func} handlePopupAction - функция закрытия попапа\n     *\n     */\n    onClose: ({\n      gearPopupStore: { eraseTempSelected },\n      handlePopupAction,\n    }) => () => {\n      eraseTempSelected()\n      handlePopupAction()\n    },\n  }),\n  lifecycle({\n    componentDidMount() {\n      const {\n        //@ts-ignore\n        gearPopupStore: { fillTempSelected },\n        //@ts-ignore\n        playersCompareWidget: { selectedParams },\n      } = this.props\n      fillTempSelected(selectedParams)\n    },\n  }),\n  observer,\n)\n","\nimport React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers, withState } from 'recompose'\n\nimport { T9n } from 'react-sport'\n\nimport { PlayersComparePopup } from './PlayersComparePopup'\n\ntype TProps = {\n  handlePopupAction: () => void,\n  popupOpened: boolean,\n};\n\nconst PlayerCompareHeader = ({ handlePopupAction, popupOpened }: TProps) => (\n  <div className='t-compare__header'>\n    <T9n className='t-compare__title' t='players_table' />\n    <a className='t-compare__gear-options' onClick={handlePopupAction}>\n      <i className='icon-settings' />\n    </a>\n    {popupOpened && (\n      <PlayersComparePopup handlePopupAction={handlePopupAction} />\n    )}\n  </div>\n)\n\nconst PlayerCompareHeaderComposed = compose(\n  inject('lexics', 'videoLink', 'shootsRange', 'matchTable'),\n  withState('popupOpened', 'openPopup', false),\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    handlePopupAction: ({ openPopup }) => () => openPopup(n => !n),\n  }),\n  observer,\n  //@ts-ignore\n)(PlayerCompareHeader)\n\nexport default PlayerCompareHeaderComposed\n","export const defaultParams = [\n  239,\n  219,\n  102,\n  101,\n  103,\n  175,\n  124,\n  137,\n  158,\n  142,\n  235,\n  236,\n]\n","import React from 'react'\nimport { observer, inject } from 'mobx-react'\n\nimport { compose, lifecycle, withProps } from 'recompose'\n\nimport { PlayersSelect } from './PlayersSelect'\nimport { PlayersInfo } from './PlayersInfo'\nimport PlayerCompareHeader from './PlayerCompareHeader'\n\nimport { defaultParams } from './config'\n\ntype TProps = {\n  playersCompareWidget: {\n    isLoaded: boolean,\n    selectedPlayers: {},\n  },\n  matchProfile: {\n    data: {\n      team1_id: number,\n      team2_id: number,\n    },\n  },\n}\n\nexport const PlayersCompareComponent = ({\n  matchProfile: {\n    data: { team1_id, team2_id },\n  },\n  playersCompareWidget: { isLoaded, selectedPlayers },\n}: TProps) => (\n  <div className='t-compare'>\n    <PlayerCompareHeader />\n    <div className='t-compare__container'>\n      {/*\n      //@ts-ignore */}\n      <PlayersSelect team1={team1_id} team2={team2_id} />\n      {isLoaded ? (\n        <PlayersInfo\n          team1={team1_id}\n          team2={team2_id}\n          selectedPlayers={selectedPlayers}\n        />\n      ) : (\n        <div className='loading' />\n      )}\n    </div>\n  </div>\n)\n\nconst PlayersCompareComposed = compose<TProps, {}>(\n  inject('lexics', 'playersCompareWidget', 'matchProfile'),\n  observer,\n  //@ts-ignore\n  withProps(({ lexics: { lang } }) => ({\n    lang,\n  })),\n  lifecycle({\n    componentDidMount() {\n      const {\n        //@ts-ignore\n        lang,\n        //@ts-ignore\n        matchProfile: { matchId },\n        //@ts-ignore\n        playersCompareWidget: { basicFetch },\n      } = this.props\n\n      basicFetch({\n        lang,\n        matchId,\n        params: defaultParams,\n      })\n    },\n    componentDidUpdate(prevProps) {\n      const {\n        //@ts-ignore\n        lang,\n        //@ts-ignore\n        matchProfile: { matchId },\n        //@ts-ignore\n        playersCompareWidget: { fetch, getParamsIds },\n      } = this.props\n\n      //@ts-ignore\n      if (prevProps.lang !== lang) {\n        fetch({\n          lang,\n          matchId,\n          params: getParamsIds,\n        })\n      }\n    },\n  }),\n  observer,\n)\n\nexport const PlayersCompare = PlayersCompareComposed(PlayersCompareComponent)\n","\nimport React, { Fragment } from 'react'\n\n// @ts-ignore\nimport { TeamsCompare } from 'features/TeamsCompareWidget/components/TeamsCompare'\nimport { PlayersCompare } from '../PlayersCompare'\n\nexport const MatchWidgets = () => (\n  <Fragment>\n    <TeamsCompare />\n    <PlayersCompare />\n  </Fragment>\n)\n","import React from 'react'\n\nimport { MatchWidgets } from './MatchWidgets'\n\ntype TProps = {\n  //@ts-ignore\n  page: string | null,\n}\n\nexport const Widgets = ({ page }: TProps) => (\n  <div className='main-page__widgets'>\n    {page === 'match' && <MatchWidgets />}\n  </div>\n)\n","import React from 'react'\nimport { observer, inject } from 'mobx-react'\n\nimport { lifecycle, compose } from 'recompose'\nimport get from 'lodash/get'\n\nimport { Header } from 'features/components/common/player/Header'\nimport { MapField } from 'features/MapField/components/MapField'\nimport { MapFilters } from 'features/MapFilters/components'\nimport { Widgets } from 'features/components/common/widgets/Widgets'\n\nimport './PlayerField.scss'\n\ntype TProps = {\n  selectedMatches: {},\n  lexics: { page: string },\n  tabs: { active: string },\n};\n\nconst PlayerFieldComponent = ({\n  lexics: { page },\n  tabs: { active },\n  ...props\n}: TProps) => (\n  <div className='main-page__left'>\n    <div className='main-page__content'>\n      {/*\n      //@ts-ignore */}\n      <Header {...props} />\n      <div className='main-page__side'>\n        <div className='main-page__filters-wrapper'>\n          <MapFilters />\n        </div>\n        {/*\n        //@ts-ignore */}\n        <MapField tab={active} {...props} />\n      </div>\n    </div>\n    <Widgets page={page} />\n  </div>\n)\n\nconst playerFieldComposed = compose(\n  inject('lexics', 'markers', 'selectedMatches', 'tabs', 'tooltips', 'zones'),\n  lifecycle({\n    componentDidMount() {\n      const {\n        //@ts-ignore\n        lexics: { page },\n        //@ts-ignore\n        markers,\n        //@ts-ignore\n        matchId,\n        //@ts-ignore\n        pageId,\n        //@ts-ignore\n        selectedMatches,\n        //@ts-ignore\n        tooltips,\n        //@ts-ignore\n        zones,\n      } = this.props\n      const matchesList = matchId\n        ? [matchId]\n        : get(selectedMatches, [page, pageId])\n      markers.fetch(pageId, matchesList)\n      zones.fetch(pageId, matchesList)\n      tooltips.fetch()\n    },\n  }),\n  observer,\n)\n\n// @ts-ignore\nexport const PlayerField = playerFieldComposed(PlayerFieldComponent)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n// @ts-ignore\nimport { noImages } from 'module/utils/helpers'\n\n// @ts-ignore\n// @ts-ignore\nconst Avatar = ({ image, name }) => {\n  //@ts-ignore\n  const noImage = name ? noImages[name] : noImages.player\n  return (\n    <img\n      src={image}\n      onError={(e) => {\n        //@ts-ignore\n        e.target.src = noImage\n      }}\n      alt={name}\n    />\n  )\n}\n\nAvatar.propTypes = {\n  name: PropTypes.string,\n  image: PropTypes.string,\n}\n\nexport default Avatar\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { observer, inject } from 'mobx-react'\nimport { T9n } from 'react-sport'\n\n// @ts-ignore\nconst InfoItem = (props) => {\n  const { infoItem, t, tooltips, variants } = props\n  const { clickCnt, clickHandle } = infoItem\n  return (\n    <span\n      onClick={e => clickHandle(e, tooltips)}\n      className='player-label tooltip-trigger'\n    >\n      {variants[clickCnt]} <T9n t={t[clickCnt]} />\n      <div className='hover-tooltip'>\n        <T9n t={tooltips[clickCnt]} />\n      </div>\n    </span>\n  )\n}\n\nInfoItem.propTypes = {\n  variants: PropTypes.array,\n  tooltips: PropTypes.array,\n  t: PropTypes.array,\n  infoItem: PropTypes.object,\n}\n\nexport default inject('infoItem')(observer(InfoItem))\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { inject, observer } from 'mobx-react'\n\nimport cx from 'classnames'\n\nimport { compose, withProps } from 'recompose'\nimport {\n  cmToFt,\n  getLongSuffix,\n  kgToPounds,\n} from 'module/utils/helpers'\n\nimport Avatar from 'features/components/common/Avatar'\nimport InfoItem from 'features/components/common/InfoItem'\n\nimport {\n  TProps,\n  TWithPropsOuter,\n  TWithPropsInner,\n} from './types'\n\nconst PlayerCardComponent = ({\n  playerProfile: {\n    isFetching,\n    profile,\n  },\n  suffix,\n}: TProps) => (\n  <div\n    className={cx(\n      'player-card-left',\n      { 'player-card-left_loader': isFetching },\n    )}\n  >\n    <div className='player-column player-column-avatar'>\n      <div className='player-card-avatar'>\n        {/*\n          //@ts-ignore */}\n        {profile && <Avatar image={profile.photo} />}\n      </div>\n    </div>\n    {profile && (\n      <div className='player-column player-column-name'>\n        <h1 className='player-card-title'>\n          <span>{profile[`short_name_${suffix}`]}</span>\n        </h1>\n        <div className='player-card-team'>\n          {profile.team.id && (\n            <Link target='_blank' to={`/teams/${profile.team.id}`}>\n              {profile.team[`name_${suffix}`]}\n            </Link>\n          )}\n          {profile.team.id && profile.national_team.id && ', '}\n          {profile.national_team.id && (\n            <Link target='_blank' to={`/teams/${profile.national_team.id}`}>\n              {profile.national_team[`name_${suffix}`]}\n            </Link>\n          )}\n        </div>\n        <div className='player-card-labels'>\n          {profile.citizenship.short && (\n            <span className='player-label tooltip-trigger'>\n              <i\n                className={`flag-icon flag-icon-24x16 flag-icon-${profile.citizenship.short.toLowerCase()}`}\n              />\n              <div className='hover-tooltip'>\n                <span>{profile.citizenship[`name_${suffix}`]}</span>\n              </div>\n            </span>\n          )}\n          {profile.age && (\n            <InfoItem\n              variants={[profile.age, profile.birthday]}\n              tooltips={['header_card_age', 'header_card_birth_data']}\n              t={['stat_year', '']}\n            />\n          )}\n          {profile.height && (\n            <InfoItem\n              variants={[profile.height, cmToFt(profile.height)]}\n              tooltips={['tp_stat_height_sm', 'tp_stat_height_foot']}\n              t={['stat_sm', '']}\n            />\n          )}\n          {profile.weight && (\n            <InfoItem\n              variants={[profile.weight, kgToPounds(profile.weight)]}\n              tooltips={['tp_stat_weght_kg', 'tp_stat_weght_lbs']}\n              t={['stat_kg', 'stat_pound']}\n            />\n          )}\n          {profile.active_hand && (\n            <span className='player-label'>{profile.active_hand} </span>\n          )}\n          {profile.amplua.id && (\n            <span className='player-label'>\n              {profile.amplua[`name_${suffix}`]}\n            </span>\n          )}\n        </div>\n      </div>\n    )}\n  </div>\n)\n\nconst playerCardComposed = compose<TProps, {}>(\n  inject('playerProfile', 'lexics'),\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(\n    ({ lexics: { lang } }) => ({ suffix: getLongSuffix(lang) }),\n  ),\n  observer,\n)\n\nexport const PlayerCard = playerCardComposed(PlayerCardComponent)\n","import React from 'react'\nimport { T9n } from 'react-sport'\n// @ts-ignore\nimport { indexLexic } from 'config/lexics'\n\nconst ToolTip = () => (\n  <div className='header-stats-item__tooltip'>\n    <T9n t={indexLexic.boxscore_play_video} />\n  </div>\n)\n\nexport default ToolTip\n","\nimport React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withHandlers,\n  withState,\n  withProps,\n} from 'recompose'\nimport cx from 'classnames'\nimport isEmpty from 'lodash/isEmpty'\n\nimport { T9n } from 'react-sport'\n\nimport ToolTip from './ToolTip'\n\nimport {\n  TProps,\n  TPropsOuter,\n  TWithHandlersInner,\n  TWithHandlersOuter,\n  TWithPropsInner,\n  TWithPropsOuter,\n} from './types'\nimport './styles.scss'\n\nexport const HeaderStatsItemComponent = ({\n  events,\n  getExtLink,\n  itemClassName,\n  lexicId,\n  statsIsFetching,\n  statValue,\n  toggleTooltip,\n  toolTipIsVisible,\n  valueBlockClassName,\n}: TProps) => (\n  <div className='header-stats-item-wrapper'>\n    <div\n      onClick={getExtLink(events, lexicId)}\n      onMouseEnter={toggleTooltip}\n      onMouseLeave={toggleTooltip}\n      className={itemClassName}\n    >\n      <div className='header-stats-item__label'>\n        <T9n t={lexicId} />\n      </div>\n      <div className={valueBlockClassName}>\n        <span>{statValue}</span>\n      </div>\n      {statsIsFetching && <div className='header-stats-item__loader' />}\n      {toolTipIsVisible && !statsIsFetching && <ToolTip />}\n    </div>\n  </div>\n)\n\nconst headerStatsItemComposed = compose<TProps, TPropsOuter>(\n  inject('lexics', 'videoLink', 'shootsRange'),\n  withState('toolTipIsVisible', 'toggleVisible', false),\n  withState('statsIsFetching', 'setLoader', false),\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(({\n    percent,\n    statsIsFetching,\n    toolTipIsVisible,\n  }) => ({\n    itemClassName: cx('header-stats-item', {\n      'header-stats-item_clickable': toolTipIsVisible && !statsIsFetching,\n      'header-stats-item_loading': statsIsFetching,\n    }),\n    valueBlockClassName: cx('header-stats-item__value', {\n      'header-stats-item__value_percentage': percent,\n    }),\n  })),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    getExtLink: ({\n      lexics: { lang },\n      setLoader,\n      shootsRange,\n      videoLink: { request },\n    }) => (events, lexicId) => () => {\n      if (!isEmpty(events)) {\n        setLoader(true)\n        request({\n          events,\n          lang,\n          lexical_formula: lexicId,\n          range: shootsRange,\n          type: 'headerStats',\n        }).then(() => setLoader(false))\n      }\n    },\n    toggleTooltip: ({\n      events,\n      toggleVisible,\n      toolTipIsVisible,\n    }) => () => {\n      if (events.length) toggleVisible(!toolTipIsVisible)\n    },\n  }),\n)\n\nexport const HeaderStatsItem = headerStatsItemComposed(HeaderStatsItemComponent)\n","import React, { Fragment } from 'react'\nimport { observer } from 'mobx-react'\n\nimport {\n  compose,\n  withHandlers,\n} from 'recompose'\nimport map from 'lodash/map'\nimport reduce from 'lodash/reduce'\nimport concat from 'lodash/concat'\n\nimport { getSummaryStatValue } from 'module/utils/helpers/getSummaryStatValue'\n\nimport { HeaderStatsItem } from 'features/HeaderStatsItem'\n\nimport {\n  TComposeInner,\n  TPropsOuter,\n  TWithHandlersInner,\n  TStat,\n} from './types'\n\n/**\n * Отображение блока со статистикой в шапке профиля\n */\nconst HeaderStatsListComponent = ({\n  getEvents,\n  params,\n  stats,\n}: TComposeInner) => (\n  <Fragment>\n    {map(\n      params,\n      ({\n        lexic_id,\n        param_id,\n        percent,\n      }) => (\n        <HeaderStatsItem\n          key={param_id}\n          paramId={param_id}\n          lexicId={lexic_id}\n          percent={percent}\n          events={getEvents(param_id)}\n          statValue={getSummaryStatValue(param_id, stats, 'average_for_match')}\n        />\n      ),\n    )}\n  </Fragment>\n)\n\nconst headerStatsListComposed = compose<TComposeInner, TPropsOuter>(\n  withHandlers<TPropsOuter, TWithHandlersInner>({\n    getEvents: ({ stats }) => param_id => (\n      reduce(\n        stats,\n        (acc: Array<number>, curr: TStat) => {\n          if (curr.f_param === param_id && curr.f_match_event_ids_json) {\n            return concat(acc, curr.f_match_event_ids_json)\n          }\n          return acc\n        }, [],\n      )\n    ),\n  }),\n  observer,\n)\n\nexport const HeaderStatsList = headerStatsListComposed(HeaderStatsListComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  lifecycle,\n} from 'recompose'\nimport get from 'lodash/get'\n\nimport { headerPlayerParams } from 'config/params'\n\nimport Loader from 'features/components/common/loader/Loader'\nimport { HeaderStatsList } from 'features/HeaderStatsList'\n\nimport {\n  TPropsOuter,\n  TPropsInner,\n} from './types'\n/**\n * Отображение блока со статистикой в шапке профиля\n */\nexport const PlayerStatsWrapperComponent = ({\n  playerProfile: {\n    profile,\n  },\n  playerStats: {\n    isFetching,\n    stats,\n  },\n}: TPropsInner) => (\n  <div className='player-card-stats-list'>\n    {isFetching ? (\n      <Loader />\n    ) : (\n      <HeaderStatsList\n        params={headerPlayerParams[profile.amplua.id]}\n        stats={stats}\n      />\n    )}\n  </div>\n)\n\nconst playerStatsComposed = compose<TPropsInner, TPropsOuter>(\n  inject(\n    'playerProfile',\n    'playerStats',\n    'selectedMatches',\n  ),\n  lifecycle<TPropsInner>({\n    componentDidMount() {\n      const {\n        page,\n        pageId,\n        playerProfile: {\n          profile: {\n            amplua: { id },\n          },\n        },\n        playerStats: { fetch },\n        selectedMatches,\n      } = this.props\n      fetch(\n        pageId,\n        get(selectedMatches, [page, pageId], []),\n        id,\n      )\n    },\n  }),\n  observer,\n)\n\nexport const PlayerStatsWrapper = playerStatsComposed(PlayerStatsWrapperComponent)\n","import m from 'moment'\n\n/**\n * Функция получения текущего года или любого, для теста\n * @param {any} test - флаг, если нужен год, отличный от текущего в бОльшую сторону\n * @param {number} changeYear - число, прибавляемое к текущему году\n */\nfunction getYear(test: any, changeYear: number): number {\n  return test ? m().year() + changeYear : m().year()\n}\n\n/**\n * Функция получения текущей даты\n * @param {string} format - формат выводимой даты, если требуется\n */\nexport function getNow(format?: string): string {\n  return m().format(format)\n}\n\n/**\n * Функция получения начала года\n * @param {string} format - формат выводимой даты, если требуется\n */\nexport function getStartYear(format?: string): string {\n  return m([m().year(), 0, 1]).format(format)\n}\n\n/**\n * Функция получения начала сезона\n * @param {string} format - формат выводимой даты, если требуется\n */\nexport function getStartSeason(format?: string): string {\n  /** Сезон начинается с 1 июля **/\n  return m([getYear(m().month() < 6, -1), 6, 1]).format(format)\n}\n\n/**\n * Функция получения конца сезона\n * @param {string} format - формат выводимой даты, если требуется\n */\nexport function getEndOfSeason(format?: string): string {\n  /** Сезон кончается 30 июня **/\n  return m([getYear(m().month() > 6, 1), 5, 30]).format(format)\n}\n\n/**\n * Функция форматирования любой даты (прим. 5:15 или 5:03) с секундами и минутами\n * @param {number} minutes - минуты\n * @param {number} seconds - секунды\n */\nexport function formatTime({\n  minutes,\n  seconds,\n}: {\n  minutes: number,\n  seconds: number,\n}): string {\n  return `${minutes}:${seconds > 10 ? seconds : `0${seconds}`}`\n}\n","const selectConfig = {\n  3: 'match_select_3',\n  5: 'match_select_5',\n  10: 'match_select_10',\n  season: 'match_select_all_season',\n  year: 'match_select_this_year',\n}\n\nexport default selectConfig\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport isArray from 'lodash/isArray'\nimport { T9n } from 'react-sport'\nimport names from 'config/matchesSelection'\n\nconst SelectLabel = ({ selected = names[3] }) =>\n  (isArray(selected) ? (\n    <span>\n      <T9n t='match_selected' />: {selected.length}\n    </span>\n  ) : (\n  //@ts-ignore\n    <T9n t={names[selected]} />\n  ))\n\nSelectLabel.propTypes = {\n  selected: PropTypes.any,\n}\n\nexport default SelectLabel\n","import React, { Fragment } from 'react'\n\nimport cx from 'classnames'\nimport { getSuffix } from 'module/utils/helpers'\n\ntype TProps = {\n  lang: string,\n  match: {\n    [key: string]: string | number,\n    home_match: string,\n    opponent_score: number,\n    score: number,\n  },\n}\n\nexport const MatchCheckBox = ({ lang, match }:TProps) => (\n  <Fragment>\n    <span className='title'>\n      {match.home_match} {match[`name_opponent_${getSuffix(lang)}`]}\n    </span>\n    <span className={cx(\n      'title__score',\n      { title__score_lose: match.opponent_score > match.score },\n      { title__score_win: match.opponent_score < match.score },\n    )}\n    >{match.score}{' '} - {match.opponent_score}\n    </span>\n  </Fragment>\n)\n","import React from 'react'\n\nexport const InfinityLoad = () => (\n  <div className='loading-block'>\n    <div className='loading' />\n  </div>\n)\n","import React from 'react'\nimport { observer, inject } from 'mobx-react'\n\nimport { compose, withProps } from 'recompose'\nimport get from 'lodash/get'\nimport isArray from 'lodash/isArray'\nimport cx from 'classnames'\n\nimport { MatchCheckBox } from 'features/components/common/MatchCheckBox'\n\nimport { InfinityLoad } from 'module/utils/InfinityLoad'\nimport { dateWithYear } from 'module/utils/helpers'\n\nimport { TLexics } from 'react-sport'\n\nexport const MatchSelectListComponent = ({\n  lexics: { lang },\n  matches: { isFetching },\n  matchesList,\n  selected,\n  selectItem,\n}: TComposeInner) => (\n  <ul\n    className={cx(\n      'player-card-stats-dropdown-list',\n      'player-card-stats-dropdown_dates',\n      'player-card-stats-dropdown_checkboxes',\n    )}\n  >\n    {matchesList.map(m => (\n      <li\n        key={m.f_match}\n        className={cx('', {\n          active: isArray(selected) && selected.includes(m.f_match),\n        })}\n        onClick={e => selectItem(e, m.f_match)}\n      >\n        <MatchCheckBox lang={lang} match={m} />\n        <span className='date'>{dateWithYear(m.match_date)}</span>\n      </li>\n    ))}\n    {isFetching && <InfinityLoad />}\n  </ul>\n)\n\ntype TComposeInner = TPropsOuter & TWithPropsInner & {\n  lexics: TLexics,\n  matches: {\n    isFetching: boolean,\n    list: {\n      [key: string]: {},\n    },\n  },\n}\n\ntype TPropsOuter = {\n  pageId: string,\n  selectItem: (e: React.SyntheticEvent<EventTarget>, matchId: number) => void,\n  selected: string | Array<number>,\n}\n\ntype TWithPropsOuter = {\n  matches: {\n    list: {\n      [key: string]: {},\n    },\n  },\n  pageId: string,\n}\n\ntype TWithPropsInner = {\n  matchesList: Array<{\n    [key: string]: string | number,\n    f_match: number,\n    home_match: string,\n    match_date: string,\n    opponent_score: number,\n    score: number,\n  }>,\n}\n\nconst matchSelectListComposed = compose<TComposeInner, TPropsOuter>(\n  inject('matches', 'lexics'),\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(({\n    matches: { list },\n    pageId,\n  }) => ({\n    matchesList: get(list[pageId], 'matches', []),\n  })),\n)\n\nexport const MatchSelectList = matchSelectListComposed(MatchSelectListComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { withHandlers, compose } from 'recompose'\nimport map from 'lodash/map'\nimport get from 'lodash/get'\n\nimport cx from 'classnames'\n\nimport { T9n, OutsideClick } from 'react-sport'\n\nimport SelectLabel from 'features/components/common/SelectLabel'\nimport { MatchSelectList } from 'features/components/common/MatchSelectList'\n\nimport names from 'config/matchesSelection'\n\nimport {\n  TComposeInner,\n  TPropsOuter,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n} from './types'\n\nconst MatchSelectContainerComponent = ({\n  dropDownClick,\n  extendedSelectItem,\n  getSelected,\n  matches: { isFetching },\n  pageId,\n  scrollHandle,\n  selectedMatches,\n  selectItem,\n}: TComposeInner) => (\n  <div className='player-card-stats-dropdown'>\n    <div className='player-card-dropdown'>\n      <a\n        className='selectBox selectBox-dropdown'\n        //@ts-ignore\n        tabIndex='0'\n        title=''\n        onClick={dropDownClick}\n      >\n        <span className='selectBox-label'>\n          {/*\n            //@ts-ignore */}\n          <SelectLabel selected={getSelected()} />\n        </span>\n        <span className='selectBox-arrow' />\n      </a>\n      {selectedMatches.opened && (\n        <div\n          onScroll={scrollHandle}\n          className={cx('player-card-stats-dropdown-inner', 'loading-active', {\n            'loading-active_global': isFetching,\n          })}\n        >\n          <ul\n            className={cx(\n              'player-card-stats-dropdown-list',\n              'player-card-stats-dropdown_dates',\n              'player-card-stats-dropdown_checkboxes',\n            )}\n          >\n            {map(names, (name, key) => (\n              <li key={key} onClick={e => extendedSelectItem(e, key)}>\n                {/*\n                  //@ts-ignore */}\n                <T9n t={names[key]} />\n              </li>\n            ))}\n          </ul>\n          <hr className='player-card-stats-dropdown-list-hr' />\n          <MatchSelectList\n            pageId={pageId}\n            selectItem={selectItem}\n            selected={getSelected()}\n          />\n        </div>\n      )}\n    </div>\n  </div>\n)\n\nconst matchSelectContainerComposed = compose<TComposeInner, TPropsOuter>(\n  inject(\n    'lexics',\n    'matches',\n    'selectedMatches',\n  ),\n  OutsideClick,\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    getSelected: ({\n      lexics: { page },\n      pageId,\n      selectedMatches,\n    }) => () => {\n      const selected = selectedMatches.opened\n        ? selectedMatches.tempSelected\n        : selectedMatches.selectedPeriod\n        || get(selectedMatches[page], `${pageId}`, [])\n\n      return selected ? selected.slice() : []\n    },\n  }),\n  observer,\n)\n\nexport const MatchSelectContainer = matchSelectContainerComposed(MatchSelectContainerComponent)\n","\nimport React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  lifecycle,\n  withHandlers,\n  compose,\n} from 'recompose'\nimport map from 'lodash/map'\nimport get from 'lodash/get'\nimport includes from 'lodash/includes'\nimport filter from 'lodash/filter'\nimport slice from 'lodash/slice'\n\nimport {\n  getStartYear,\n  getNow,\n  getStartSeason,\n  getEndOfSeason,\n} from 'module/utils/dateHelpers'\n\nimport { MatchSelectContainer } from 'features/components/common/MatchSelectContainer'\n\ntype TProps = {\n  pageId: string,\n  clickOutside: () => void,\n  dropDownClick: (e: {}) => void,\n  selectItem: (e: {}, id: number | string) => void,\n  extendedSelectItem: (e: {}, period: string | number) => void,\n  scrollHandle: (e: {}) => void,\n};\n\nconst MatchSelect = ({\n  clickOutside,\n  dropDownClick,\n  extendedSelectItem,\n  pageId,\n  scrollHandle,\n  selectItem,\n}: TProps) => (\n  <MatchSelectContainer\n    pageId={pageId}\n    clickOutside={clickOutside}\n    dropDownClick={dropDownClick}\n    selectItem={selectItem}\n    extendedSelectItem={extendedSelectItem}\n    scrollHandle={scrollHandle}\n  />\n)\n\nconst MatchSelectComposed = compose<any, TProps>(\n  inject('lexics', 'matches', 'selectedMatches'),\n  lifecycle({\n    componentDidMount() {\n      //@ts-ignore\n      const {\n      //@ts-ignore\n        matches: { list },\n        //@ts-ignore\n        pageId,\n        //@ts-ignore\n        selectedMatches,\n      } = this.props\n      const matches = get(list, [pageId, 'matches'], [])\n      const matchesIds = map(matches, 'f_match')\n      selectedMatches.setSelected(slice(matchesIds, 0, 3), pageId)\n    },\n  }),\n  //@ts-ignore\n  withHandlers({\n    handleInfiniteLoad: ({ matches, pageId }) => () => matches.addOffset(pageId),\n  }),\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    scrollHandle: ({ handleInfiniteLoad }) => (e) => {\n      const { offsetHeight, scrollHeight, scrollTop } = e.target\n      if (scrollTop - scrollHeight + offsetHeight === 1) {\n        handleInfiniteLoad()\n      }\n    },\n    //@ts-ignore\n    dropDownClick: ({ pageId, selectedMatches }) => (e) => {\n      e.preventDefault()\n      selectedMatches.setOpened(pageId)\n    },\n    clickOutside: ({ pageId, selectedMatches }) => () => {\n      if (selectedMatches.opened) {\n        selectedMatches.setOpened(pageId)\n      }\n    },\n    //@ts-ignore\n    //@ts-ignore\n    selectItem: ({ lexics, pageId, selectedMatches }) => (e, id) => {\n      e.preventDefault()\n      selectedMatches.setPeriod(null)\n      let ids: Array<number> = selectedMatches.opened\n        ? selectedMatches.tempSelected\n        : get(selectedMatches[lexics.page], `${pageId}`, [])\n      //@ts-ignore\n      ids = includes(['year', 'season'], ids) ? [] : ids\n      ids = ids ? ids.slice() : []\n\n      if (!includes(ids, id)) {\n        ids.push(id)\n      } else {\n        ids = filter(ids, item => item !== id)\n      }\n      selectedMatches.setTempSelected(ids, pageId)\n    },\n    extendedSelectItem: ({\n      lexics: { page },\n      matches: { fetch, list },\n      pageId,\n      selectedMatches: { setOpened, setPeriod, setTempSelected },\n      //@ts-ignore\n      //@ts-ignore\n    }) => (e, period) => {\n      e.preventDefault()\n      const matches: Array<{ f_match: number }> = get(list[pageId], 'matches')\n      if (includes(['year', 'season'], period)) {\n        const isYear: boolean = period === 'year'\n        const dateFrom: string = isYear ? getStartYear() : getStartSeason()\n        const dateTo: string = isYear ? getNow() : getEndOfSeason()\n        setPeriod(period)\n        fetch(\n          page,\n          pageId,\n          0,\n          null,\n          dateFrom,\n          dateTo,\n          setTempSelected,\n          setOpened,\n        )\n      } else {\n        const ids = matches.reduce((result, { f_match }, idx) => {\n          if (idx < period) {\n            //@ts-ignore\n            result.push(f_match)\n          }\n          return result\n        }, [])\n        setPeriod()\n        setTempSelected(ids, pageId)\n        setOpened(pageId)\n      }\n    },\n  }),\n  observer,\n)(MatchSelect)\n\nexport default MatchSelectComposed\n","import React from 'react'\nimport { observer, inject } from 'mobx-react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport { T9n } from 'react-sport'\nimport toString from 'lodash/toString'\nimport { compose, withProps, withHandlers, withState } from 'recompose'\n\nconst FilterCheckbox = ({\n  //@ts-ignore\n  clickHandler,\n  //@ts-ignore\n  filter: {\n    //@ts-ignore\n    checked,\n    //@ts-ignore\n    lexical_formula,\n  },\n  //@ts-ignore\n  getClassName,\n}) => (\n  <li onClick={clickHandler} className={getClassName(checked)}>\n    <T9n t={toString(lexical_formula)} />\n  </li>\n)\n\nconst FilterCheckboxComposed = compose(\n  inject('playersVS', 'teamsVS'),\n  withState('isOpened', 'onOutsideClick', false),\n  //@ts-ignore\n  withProps(({ pageType, ...props }) => ({\n    videoSummaries: props[`${pageType}VS`],\n  })),\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    getClassName: () => checked => cx({ active: checked }),\n    clickHandler: ({ filter, setActive }) => () => setActive(filter),\n  }),\n  observer,\n  //@ts-ignore\n)(FilterCheckbox)\n\nFilterCheckbox.propTypes = {\n  filter: PropTypes.shape({\n    checked: PropTypes.bool,\n    lexical_formula: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  }),\n  getClassName: PropTypes.func.isRequired,\n  clickHandler: PropTypes.func.isRequired,\n}\n\nexport default FilterCheckboxComposed\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { OutsideClick } from 'react-sport'\nimport { compose } from 'recompose'\n\nimport FilterCheckbox from './FilterCheckbox'\n\nconst FilterPopup = ({\n  button: {\n    //@ts-ignore\n    setActive,\n  },\n  //@ts-ignore\n  button,\n  //@ts-ignore\n  pageType,\n}) => (\n  <div className='episodes-table-button-popup'>\n    <ul>\n        //@ts-ignore\n      {button.popupItems.map((filter, idx) => (\n        //@ts-ignore\n        <FilterCheckbox\n          key={idx}\n          setActive={setActive}\n          filter={filter}\n          pageType={pageType}\n        />\n      ))}\n    </ul>\n  </div>\n)\n\nconst FilterPopupComposed = compose(\n  OutsideClick,\n  observer,\n  //@ts-ignore\n)(FilterPopup)\n\nexport default FilterPopupComposed\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { observer } from 'mobx-react'\nimport { T9n } from 'react-sport'\nimport isEmpty from 'lodash/isEmpty'\nimport toString from 'lodash/toString'\n\nconst Checked = ({\n  button: {\n    //@ts-ignore\n    checkedFilters,\n  },\n}) => (\n  <span className='text'>\n    {!isEmpty(checkedFilters) ? (\n      checkedFilters.length < 3 ? (\n      //@ts-ignore\n        checkedFilters.map((filter, idx) => (\n          <T9n key={idx} t={toString(filter.lexicalFormula)} />\n        ))\n      ) : (\n        <span>{checkedFilters.length} items</span>\n      )\n    ) : (\n      <span className='text' />\n    )}\n  </span>\n)\n\nChecked.propTypes = {\n  button: PropTypes.shape({\n    checkedFilters: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),\n  }),\n}\n\nexport default observer(Checked)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport toString from 'lodash/toString'\nimport isEmpty from 'lodash/isEmpty'\n\nimport cx from 'classnames'\nimport { observer, inject } from 'mobx-react'\nimport { T9n } from 'react-sport'\nimport { compose, withHandlers, withState } from 'recompose'\n\nimport FilterPopup from './FilterPopup'\nimport Checked from './Checked'\n\n// @ts-ignore\nconst FilterElement = (props) => {\n  const {\n    button: { lexical_formula },\n    button,\n    getClassName,\n    handleClick,\n    isOpened,\n    onOutsideClick,\n  } = props\n  return (\n    <li className={getClassName()}>\n      <T9n\n        t={toString(lexical_formula)}\n        className='title'\n        onClick={() => handleClick()}\n      />\n      <Checked button={button} />\n      {isOpened && (\n        <FilterPopup\n          clickOutside={() => onOutsideClick(!isOpened)}\n          {...props}\n        />\n      )}\n    </li>\n  )\n}\n\nconst FilterElementComposed = compose(\n  inject('playersVS', 'teamsVS'),\n  withState('isOpened', 'onOutsideClick', false),\n  //@ts-ignore\n  withHandlers({\n    getClassName: ({ button: { checkedFilters } }) => () =>\n      cx('episodes-table-button', { active: !isEmpty(checkedFilters) }),\n    handleClick: ({ isOpened, onOutsideClick }) => () =>\n      onOutsideClick(!isOpened),\n  }),\n  observer,\n)(FilterElement)\n\nFilterElement.propTypes = {\n  isOpened: PropTypes.bool,\n  onOutsideClick: PropTypes.func.isRequired,\n  getClassName: PropTypes.func.isRequired,\n  handleClick: PropTypes.func.isRequired,\n  button: PropTypes.shape({\n    lexical_formula: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    checkedFilters: PropTypes.array,\n    checked: PropTypes.bool,\n  }),\n}\n\nexport default FilterElementComposed\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { observer } from 'mobx-react'\nimport { T9n } from 'react-sport'\nimport orderByLodash from 'lodash/orderBy'\n\nimport FilterElement from './FilterElement'\n\n/** Компонент для таблицы с кнопками\n * @param {String} playerId id игрока\n * @param {String} className часть строки css класса\n * @param {Array} orderBy массив из кнопок\n * @param {String} title заголовок таблицы\n * @param {Array} checked массив чекнутых кнопок\n * @param {Function} uncheckAllPlayers сброс выбранных игроков\n */\n\nconst TableButtons = ({\n  //@ts-ignore\n  checked,\n  //@ts-ignore\n  className,\n  //@ts-ignore\n  orderBy,\n  //@ts-ignore\n  pageType,\n  //@ts-ignore\n  playerId,\n  //@ts-ignore\n  title,\n  //@ts-ignore\n  uncheckAllPlayers,\n}) => (\n  <div className={`episodes-table-column ${className}`}>\n    <div className='episodes-table-column-title'>\n      <T9n t={title} />\n    </div>\n    <ul>\n      {orderByLodash(orderBy, ['sort_order'], ['asc']).map((btn, idx) => (\n        //@ts-ignore\n        <FilterElement\n          key={idx}\n          button={btn}\n          playerId={playerId}\n          checked={checked}\n          uncheckAllPlayers={uncheckAllPlayers}\n          pageType={pageType}\n        />\n      ))}\n    </ul>\n  </div>\n)\n\nTableButtons.propTypes = {\n  pageType: PropTypes.oneOf(['players', 'teams']).isRequired,\n  playerId: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n    .isRequired,\n  className: PropTypes.string.isRequired,\n  orderBy: PropTypes.array.isRequired,\n  title: PropTypes.string.isRequired,\n  checked: PropTypes.array.isRequired,\n  uncheckAllPlayers: PropTypes.func.isRequired,\n}\n\nexport default observer(TableButtons)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport get from 'lodash/get'\nimport toString from 'lodash/toString'\nimport isEmpty from 'lodash/isEmpty'\nimport filter from 'lodash/filter'\nimport map from 'lodash/map'\n\n\nimport { T9n, Range, VideoCutPlayers } from 'react-sport'\nimport { observer, inject } from 'mobx-react'\nimport { compose, lifecycle, withProps, withHandlers } from 'recompose'\n\nimport TableButtons from './TableButtons'\n\n/** Компонент для создания видеонарезок\n * @param {Object} selected Выбранные матчи\n * @param {String} pageType Типа страницы\n * @param {Object} playersVS стор для видеонарезок игроков\n * @param {Object} videoSummaries стор для видеонарезок по выбору либо команды, либо игроки\n * @param {Function} getCheckedBtn получает список чекнутых кнопок\n * @param {Function} handleVideoExternal отправляет запрос\n * @param {Array} partners список игроков\n * @param {Array} opponents список игроков\n * @param {Object} duration длительность общего количества нарезок\n * @param {Number} seconds количество секунд\n */\n// @ts-ignore\nconst VideoCuts = (props) => {\n  const {\n    getCheckedBtn,\n    getGroupedBtns,\n    handleVideoExternal,\n    selected,\n    totalTime,\n    videoSummaries: {\n      isFetching,\n      players: { playersChecked },\n      range,\n      reloadCount,\n      resetFilters,\n    },\n    videoSummaries,\n  } = props\n  return (\n    <div className='block-content clearfix'>\n      <div className='episodes-table'>\n        <div className='episodes-table-header'>\n          <div className='episodes-table-header-title'>\n            <a\n              onClick={() => reloadCount(selected)}\n              className='episodes-table__reload'\n            >\n              <i className='icon-reload' />\n              <T9n className='episodes-table__text' t='video_reload' />\n            </a>\n            <div className='episodes-table-header-count'>\n              <div className='episodes-table-header-count__row'>\n                <div\n                  style={{ cursor: 'pointer' }}\n                  className={cx('episodes-table-header-title-play', {\n                    'episodes-table-header-title-play_loader': isFetching,\n                  })}\n                  onClick={handleVideoExternal}\n                >\n                  <span className='icon' />\n                  <span className='episodes-table-header-count__num'>\n                    {get(videoSummaries, ['events', 'length'], 0)}\n                  </span>\n                </div>\n                <span className='episodes-table-header-count__num episodes-table-header-count__num_light'>\n                  {totalTime}\n                </span>\n              </div>\n            </div>\n            <div className='episodes-table-header-buttons'>\n              <a onClick={resetFilters} className='episodes-table__reset'>\n                <i className='icon-reset' />\n                <T9n className='episodes-table__text' t='video_reset_filters' />\n              </a>\n              <Range range={range} />\n            </div>\n          </div>\n        </div>\n        <div className='episodes-table__container'>\n          <div className='episodes-table-content clearfix'>\n            <div className='episodes-table-column__title'>\n              <h3 className='episodes-table-column__heading'>\n                <T9n t='video_actions' />\n              </h3>\n              <T9n\n                className='episodes-table-column__subheading'\n                t='video_select_all_actions'\n              />\n            </div>\n            {getGroupedBtns()\n              //@ts-ignore\n              && map(getGroupedBtns(), ({ buttons, lexic_id }, idx) => (\n                <TableButtons\n                  key={idx}\n                  orderBy={buttons}\n                  className='episodes-table-column_group'\n                  title={toString(lexic_id)}\n                  checked={getCheckedBtn()}\n                  {...props}\n                />\n              ))}\n          </div>\n          <div className='episodes-table__summary'>\n            <VideoCutPlayers\n              name='partner'\n              playersCount={get(playersChecked, ['partners', 'length'])}\n              checked={getCheckedBtn()}\n              {...props}\n            />\n            <VideoCutPlayers\n              name='opponent'\n              playersCount={get(playersChecked, ['opponents', 'length'])}\n              checked={getCheckedBtn()}\n              {...props}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst VideoCutsCompose = compose(\n  inject('playersVS', 'teamsVS', 'shootsRange', 'lexics', 'markers'),\n  //@ts-ignore\n  withProps(({ pageType, playerId, ...props }) => {\n    const videoSummaries = props[`${pageType}VS`]\n    const minutes = get(videoSummaries, ['duration', 'minutes'])\n    const seconds = get(videoSummaries, ['duration', 'seconds'])\n    const totalTime = !isEmpty(videoSummaries.events)\n      && `${minutes()}:${seconds() > 9 ? seconds() : `0${seconds()}`}`\n    return {\n      playersChecked: get(videoSummaries, ['players', 'playersChecked']),\n      players: videoSummaries.players,\n      pageId: playerId,\n      uncheckAllPlayers: () => videoSummaries.players.uncheckAll(),\n      videoSummaries,\n      totalTime,\n    }\n  }),\n  //@ts-ignore\n  withHandlers({\n    /** Проходим по блокам атаки и защиты, и собираем чекнутые **/\n    getCheckedBtn: ({ videoSummaries }) => () => {\n      const { buttons } = videoSummaries\n      //@ts-ignore\n      return filter(buttons, ({ checkedFilters }) => !isEmpty(checkedFilters))\n    },\n  }),\n  //@ts-ignore\n  withHandlers({\n    /** Группируем кнопки **/\n    getGroupedBtns: ({ videoSummaries }) => () => {\n      const { buttons, groups } = videoSummaries\n      //@ts-ignore\n      return map(Object.values(groups), ({ group, group_lexical_formula }) => ({\n        lexic_id: group_lexical_formula,\n        buttons: filter(buttons, ['group', group]),\n      }))\n    },\n\n    handleVideoExternal: ({\n      lexics: { lang },\n      shootsRange,\n      videoSummaries,\n    }) => () => {\n      const events = map(videoSummaries.events, 'id')\n      if (isEmpty(events)) return null\n\n      videoSummaries.request({\n        range: shootsRange,\n        events,\n        lang,\n      })\n    },\n  }),\n  lifecycle({\n    componentWillUnmount() {\n      //@ts-ignore\n      const { videoSummaries } = this.props\n      videoSummaries.resetFilters()\n      videoSummaries.changeCount(0)\n    },\n\n    componentDidMount() {\n      //@ts-ignore\n      const { videoSummaries } = this.props\n      videoSummaries.fetchButtons()\n    },\n  }),\n  observer,\n)(VideoCuts)\n\nVideoCuts.propTypes = {\n  pageType: PropTypes.oneOf(['players', 'teams']).isRequired,\n  selected: PropTypes.array,\n  playersVS: PropTypes.object.isRequired,\n  teamsVS: PropTypes.object.isRequired,\n  playerId: PropTypes.string.isRequired,\n  videoSummaries: PropTypes.object.isRequired,\n  getCheckedBtn: PropTypes.func.isRequired,\n  getGroupedBtns: PropTypes.func,\n  handleVideoExternal: PropTypes.func.isRequired,\n  duration: PropTypes.object.isRequired,\n  partners: PropTypes.array,\n  opponents: PropTypes.array,\n  totalTime: PropTypes.string,\n  seconds: PropTypes.number.isRequired,\n}\n\nexport default VideoCutsCompose\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport get from 'lodash/get'\nimport { toJS } from 'mobx'\nimport { inject, observer } from 'mobx-react'\nimport { compose, withHandlers } from 'recompose'\n\n// @ts-ignore\nimport Loader from 'features/components/common/loader/Loader'\nimport VideoCuts from './VideoCutsContainer'\nimport './VideoCuts.scss'\n\n// @ts-ignore\nconst VideoCutsContainer = (props) => {\n  const {\n    getSelectedMatches,\n    matches: { isFetching },\n    page,\n  } = props\n  if (page !== 'match' && isFetching) return <Loader />\n  return <VideoCuts selected={getSelectedMatches()} {...props} />\n}\n\nVideoCutsContainer.propTypes = {\n  matches: PropTypes.shape({\n    isFetching: PropTypes.bool,\n  }),\n  getSelectedMatches: PropTypes.func,\n}\n\nconst VideoCutsComposed = compose(\n  inject('lexics', 'selectedMatches', 'matches'),\n  //@ts-ignore\n  withHandlers({\n    getSelectedMatches: ({\n      matchId,\n      page,\n      playerId,\n      selectedMatches,\n    }) => () => {\n      if (page === 'match') return [matchId]\n      //@ts-ignore\n      return toJS(get(selectedMatches, [page, playerId]))\n    },\n  }),\n  observer,\n)(VideoCutsContainer)\n\nexport default VideoCutsComposed\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, lifecycle } from 'recompose'\nimport get from 'lodash/get'\n\nimport { tableTypes } from 'config/tables'\n\nimport { Tables } from 'features/Table'\nimport Loader from 'features/components/common/loader/Loader'\n\ntype TProps = {\n  pageId: string,\n}\n\ntype TPropsInner = TProps & {\n  playerTable: {\n    isLoaded: boolean,\n    tables: {},\n  },\n}\n\ntype TLifecycle = TProps & {\n  playerProfile: {},\n  playerTable: {\n    fetchPlayerMatches : (param: {\n      ampluaId: number,\n      matches: Array<number>,\n      playerId: string,\n    }) => void,\n  },\n  selectedMatches: {},\n}\n\nconst PlayerPageMatchesComponent = ({\n  pageId,\n  playerTable: {\n    isLoaded,\n    tables,\n  },\n}: TPropsInner) => (\n  <div>\n    {isLoaded\n      ? (\n        <Tables\n          tableType={tableTypes.playerMatches}\n          tables={tables}\n          pageId={pageId}\n        />\n      )\n      : <Loader />}\n  </div>\n)\n\nconst playerPageMatchesComposed = compose<TPropsInner, TProps>(\n  inject(\n    'playerTable',\n    'selectedMatches',\n    'playerProfile',\n  ),\n  lifecycle<TLifecycle, TProps>({\n    componentDidUpdate() {\n      const {\n        pageId,\n        playerProfile,\n        playerTable: { fetchPlayerMatches },\n        selectedMatches,\n      } = this.props\n      const matches = get(selectedMatches, ['player', pageId])\n      const ampluaId = get(playerProfile, ['profile', 'amplua', 'id'])\n\n      fetchPlayerMatches({\n        ampluaId,\n        matches,\n        playerId: pageId,\n      })\n    },\n  }),\n  observer,\n)\n\nexport const PlayerPageMatches = playerPageMatchesComposed(PlayerPageMatchesComponent)\n","import { observer, inject } from 'mobx-react'\nimport {\n  compose,\n  withHandlers,\n  lifecycle,\n} from 'recompose'\n\nimport {\n  indexLexic,\n  playerLexic,\n  filtersLexic,\n  markersLexic,\n  tableParamsLexic,\n  tableParamsLexicShort,\n  tableParamsNumLexic,\n  videoCutsLexic,\n} from 'config/lexics'\n\nexport const playerPageComposed = compose(\n  inject(\n    'lexics',\n    'matches',\n    'playerProfile',\n    'selectedMatches',\n    'playerTable',\n  ),\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    getPlayerProfile: ({ playerProfile }) => (id) => {\n      playerProfile.fetch(id)\n    },\n    //@ts-ignore\n    getGearParams: ({ playerTable }) => (id) => {\n      playerTable.fetchParams(id)\n    },\n  }),\n  lifecycle(\n    {\n      componentDidMount() {\n        const {\n          getPlayerProfile,\n          lexics,\n          match: {\n            params: { playerId },\n          },\n          matches: { fetch },\n        } = this.props\n        lexics.appPage = {\n          page: 'player',\n          phrases: {\n            ...indexLexic,\n            ...playerLexic,\n            ...filtersLexic,\n            ...markersLexic,\n            ...tableParamsLexic,\n            ...tableParamsLexicShort,\n            ...tableParamsNumLexic,\n            ...videoCutsLexic,\n          },\n        }\n        getPlayerProfile(playerId)\n        fetch('player', playerId, 0, 20)\n      },\n    },\n    //@ts-ignore\n    {\n      //@ts-ignore\n      componentDidUpdate(prevProps) {\n        const {\n          getPlayerProfile,\n          match: {\n            params: { playerId },\n          },\n        } = this.props\n        if (prevProps.playerId !== playerId) {\n          getPlayerProfile(playerId)\n        }\n      },\n    },\n  ),\n  observer,\n)\n","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\n\nimport isEmpty from 'lodash/isEmpty'\n\nimport { EventPlayer as VideoPlayer, Popup } from 'react-sport'\n\nimport { StatsTabs } from 'features/components/common/stats-tabs/StatsTabs'\nimport { PlayerField } from 'features/components/common/player/PlayerField'\nimport { PlayerCard } from 'features/components/PlayerPage/PlayerCard'\nimport { PlayerStatsWrapper } from 'features/components/PlayerPage/PlayerStatsWrapper'\nimport MatchSelect from 'features/components/common/MatchSelect'\nimport VideoCuts from 'features/components/common/video-cuts/VideoCuts'\nimport Loader from 'features/components/common/loader/Loader'\n\nimport { PlayerPageMatches } from 'features/PlayerPageMatches/components'\n\nimport { playerPageComposed } from './PlayerPageComposed'\n\nimport 'features/components/common/MainPage.scss'\nimport 'features/components/common/PageCard.scss'\nimport 'features/components/common/Shot.scss'\nimport 'features/components/common/Zones.scss'\n\nimport 'features/components/App/magnific-popup.css'\nimport 'features/components/App/video-player.scss'\nimport 'features/components/common/player-card/player.scss'\nimport 'features/components/common/player-card/PlayerCard.scss'\nimport 'features/components/common/player-stats/PlayerStats.scss'\nimport 'features/components/common/player-stats/PlayerStatsDropdown.scss'\n\nexport type TProps = {\n  getGearParams: (id: number | string) => void,\n  match: {\n    params: { playerId: string },\n    url: string,\n  },\n  matches: {\n    firstLoad: boolean,\n  },\n  playerProfile: { profile: {} | null },\n  selectedMatches: {},\n}\n\nconst PlayerPageComponent = ({\n  match: {\n    params: { playerId },\n  },\n  match,\n  matches: { firstLoad },\n  playerProfile: { profile },\n  selectedMatches,\n}: TProps) => (\n  <article className='player for-player'>\n    {/*\n      //@ts-ignore */}\n    <Popup>\n      {/*\n        //@ts-ignore */}\n      <VideoPlayer appName='volleyball' />\n    </Popup>\n    <section className='player-card'>\n      <div className='container-fluid'>\n        <div className='player-card-wrapper'>\n          {profile && <PlayerCard />}\n          <div className='player-card-responsive'>\n            {!firstLoad ? (\n              //@ts-ignore\n              <MatchSelect\n                page='player'\n                pageId={playerId}\n                selectedMatches={selectedMatches}\n              />\n            ) : (\n              <Loader />\n            )}\n          </div>\n          <div className='player-card-right'>\n            {!isEmpty(profile) && !firstLoad ? (\n              <PlayerStatsWrapper page='player' pageId={playerId} />\n            ) : (\n              <Loader />\n            )}\n          </div>\n        </div>\n      </div>\n    </section>\n    <section className='main-page__details'>\n      {/*\n        //@ts-ignore */}\n      {!firstLoad ? <PlayerField pageId={playerId} /> : <Loader />}\n      <div className='main-page__responsive'>\n        <div className='main-page__content'>\n          <div className='main-page__content-header'>\n            <StatsTabs match={match} isStats />\n          </div>\n          {/*\n          //@ts-ignore */}\n          <Switch>\n            <Route\n              path='/players/:playerId/'\n              exact\n              render={() => <PlayerPageMatches pageId={playerId} />\n              }\n            />\n            <Route\n              path='/players/:playerId/video'\n              render={() => (\n                //@ts-ignore\n                <VideoCuts\n                  page='player'\n                  pageType='players'\n                  playerId={playerId}\n                />\n              )}\n            />\n          </Switch>\n        </div>\n      </div>\n    </section>\n  </article>\n)\n\n//@ts-ignore\nexport const PlayerPage = playerPageComposed(PlayerPageComponent)\n","import { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withHandlers,\n  withProps,\n} from 'recompose'\n\nimport get from 'lodash/get'\nimport find from 'lodash/find'\n\nimport { utils } from 'react-sport'\n\nimport { clickableClassNameHOC } from 'hocs/getClickableTdClassNameHoc'\n\nconst PlayerTrComposed = compose(\n  inject(\n    'videoLink',\n    'lexics',\n    'shootsRange',\n    'matchLinks',\n    'teamPlayers',\n    'teamProfile',\n    'selectedMatches',\n    'shootsRange',\n  ),\n  clickableClassNameHOC,\n  //@ts-ignore\n  withProps(({ player: { f_player } }) => {\n    const {\n      helpers: { getLogo },\n    } = utils\n    const avatarUrl = getLogo({\n      type: 'players_volleyball',\n      id: f_player,\n    })\n    return { avatarUrl }\n  }),\n  //@ts-ignore\n  withHandlers({\n    handleClick: ({\n      lexics: { lang, page },\n      selectedMatches,\n      shootsRange,\n      teamPlayers: { fetchEvents },\n      teamProfile: {\n        profile: { id },\n      },\n      videoLink: { request },\n    }) => (\n      //@ts-ignore\n      paramId,\n      //@ts-ignore\n      lexical_formula,\n      //@ts-ignore\n      playerId,\n    ) => fetchEvents(\n      lang,\n      lexical_formula,\n      playerId,\n      paramId,\n      request,\n      selectedMatches[page][id],\n      shootsRange,\n    ),\n    getParamValue: ({\n      player: { params },\n      teamPlayers: { tables },\n      //@ts-ignore\n    }) => ({ param_id }, position) => {\n      const playerParam = find(params, { param: param_id })\n      const value = get(tables, `${position}.summaryType`) === 'average_for_match'\n        ? get(playerParam, 'averageValue')\n        : get(playerParam, 'value')\n\n      if (value) return value.toFixed()\n      return '—'\n    },\n  }),\n  observer,\n)\n\nexport default PlayerTrComposed\n","import {\n  compose,\n  withState,\n  withHandlers,\n} from 'recompose'\n\nimport { TdComponent } from 'features/Table/components/Td'\nimport {\n  TPropsInner,\n  TPropsOuter,\n  TWIthHandlersOuter,\n  TWithHandlersInner,\n} from './types'\n\nconst tdComposed = compose<TPropsInner, TPropsOuter>(\n  withState('linkIsFetching', 'toggleLinkIsFetching', false),\n  withHandlers<TWIthHandlersOuter, TWithHandlersInner>({\n    handleClick: ({\n      handleClick,\n      param,\n      player,\n      toggleLinkIsFetching,\n    }) => () => {\n      toggleLinkIsFetching(true)\n      handleClick(\n        param.param_id,\n        param.lexical_formula,\n        player.f_player,\n      )\n        .then(() => toggleLinkIsFetching(false))\n    },\n  }),\n)\n\nexport const Td = tdComposed(TdComponent)\n","import React from 'react'\n\nimport get from 'lodash/get'\nimport map from 'lodash/map'\n\nimport { utils } from 'react-sport'\n\nimport { getLongSuffix } from 'module/utils/helpers'\n\nimport PlayerTrComposed from './PlayerTrComposed'\nimport { Td } from './TdWrapper'\n\ntype TProps = {\n  avatarIsVisible: boolean,\n  avatarUrl: string,\n  player: {\n    shirt_num: string,\n    f_player: number,\n  },\n  activeId: string,\n  getClassName: (param: {}, activeId: string) => string,\n  lexics: {\n    lang: string,\n  },\n  selectedParams: Array<{\n    param_id: number,\n    gear_group_id: number,\n    lexical_formula: string,\n  }>,\n  getParamValue: (param: {}, position: number) => string,\n  handleClick: (\n    paramId: number,\n    lexical_formula: string,\n    playerId: number\n  ) => void,\n  position: number,\n};\n\n/** Компонент строки в траблице со списком игроков в команде\n * @param {object} player - объект текущего игрока\n * @param {string} activeId - активный параметр, по которому идет сортировка внутри таблицы\n * @param {func} getClassName - функция получения класса (разные классы для параметров % и обычных)\n * @param {string} lang - выбранный язык пользователя\n * @param {array} selectedParams - выбранные параметры, которые отображаем в таблице\n * @param {func} getParamValue - функция получения значения для конкретного параметра в ячейке\n */\n\nconst {\n  helpers: { onProfileImageError },\n} = utils\n\nexport const PlayerTr = ({\n  activeId,\n  avatarIsVisible,\n  avatarUrl,\n  getClassName,\n  getParamValue,\n  handleClick,\n  lexics: { lang },\n  player,\n  position,\n  selectedParams,\n}: TProps) => (\n  <tr className='stats-table__table-row'>\n    <td>\n      <div className='stats-cell'>\n        <div className='stats-cell__player'>\n          {avatarIsVisible && (\n            <div className='results__avatar'>\n              <img\n                alt='logo'\n                className='results__avatar-pic'\n                src={avatarUrl}\n                onError={onProfileImageError}\n              />\n            </div>\n          )}\n          <div className='match-table__player-number'>{player.shirt_num}</div>\n          <div className='match-table__player-name'>\n            <a\n              target='_blank'\n              rel='noopener noreferrer'\n              href={`/players/${get(player, 'f_player', '')}`}\n            >\n              {get(player, `short_name_${getLongSuffix(lang)}`, '')}\n            </a>\n          </div>\n        </div>\n      </div>\n    </td>\n    {map(selectedParams, param => (\n      <td\n        key={`${param.param_id}_${param.gear_group_id}`}\n        className={getClassName(param, activeId)}\n      >\n        <table>\n          <tbody>\n            <tr>\n              <Td\n                param={param}\n                value={getParamValue(param, position)}\n                handleClick={handleClick}\n                player={player}\n              />\n            </tr>\n          </tbody>\n        </table>\n      </td>\n    ))}\n  </tr>\n)\n\n// @ts-ignore\nexport default PlayerTrComposed(PlayerTr)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\nimport { compose, withHandlers } from 'recompose'\n\nimport get from 'lodash/get'\nimport find from 'lodash/find'\nimport orderBy from 'lodash/orderBy'\n\nimport PlayerTr from './PlayerTr'\n\ntype TProps = {\n  avatarIsVisible: boolean,\n  selectedParams: Array<{}>,\n  activeId: string,\n  getPlayersList: (\n    sortInc: boolean,\n    activeId: string,\n    position: number\n  ) => Array<{ f_player: number }>,\n  sortInc: boolean,\n  position: number,\n};\n\nconst PlayersList = ({\n  activeId,\n  avatarIsVisible,\n  getPlayersList,\n  position,\n  selectedParams,\n  sortInc,\n}: TProps) => (\n  <tbody>\n    {getPlayersList(sortInc, activeId, position).map(player => (\n      <PlayerTr\n        key={player.f_player}\n        player={player}\n        activeId={activeId}\n        selectedParams={selectedParams}\n        avatarIsVisible={avatarIsVisible}\n        position={position}\n      />\n    ))}\n  </tbody>\n)\n\nconst PlayersListComposed = compose<any, TProps>(\n  inject('teamPlayers'),\n  //@ts-ignore\n  withHandlers({\n    /**\n     * Получение списка игроков, отсортированного по значению выбранного параметра\n     * @param {boolean} sortInc - флаг для сортировки (по убыванию или по возрастанию)\n     */\n    getPlayersList: ({ teamPlayers: { players, tables } }) => (\n      sortInc: boolean,\n      activeId: string,\n      position: number,\n    ) => {\n      if (!activeId) return players\n      const field: string = get(tables, `${position}.summaryType`) === 'average_for_match'\n        ? 'averageValue'\n        : 'value'\n      const id: string = activeId.split('_')[0]\n      //@ts-ignore\n      const value = player =>\n        get(find(player.params, { param: Number(id) }), field, 0)\n      const sortType = sortInc ? 'asc' : 'desc'\n      return orderBy(players, value, sortType)\n    },\n  }),\n  observer,\n)(PlayersList)\n\nexport default PlayersListComposed\n","import { compose, withHandlers, withState, withProps } from 'recompose'\nimport { inject, observer } from 'mobx-react'\n\n// @ts-ignore\nimport { setSortedIdHOC } from 'hocs/setSortedIdHOC'\n\ntype TProps = {\n  activeId: string | void,\n  deleteTable: () => void,\n  handlePopupAction: () => void,\n  handleNewPopupAction: () => void,\n  links: Array<any>,\n  moveTableUp: () => void,\n  moveTableDown: () => void,\n  newPopupOpened: () => boolean,\n  popupOpened: () => boolean,\n  resetTable: () => void,\n  setSortedId: () => void,\n  setType: (value: string) => string,\n  teamPlayers: {\n    isFetching: boolean,\n    gearParams: Array<{}>,\n    editTempSelected: () => void,\n    tempSelected: Array<{}>,\n  },\n};\n\nexport const playersTableComposed = compose<any, TProps>(\n  inject('lexics', 'teamPlayers', 'tableReportsMST'),\n  withState('popupOpened', 'openPopup', false),\n  withState('newPopupOpened', 'openNewPopup', false),\n  // Хок хендлера сортировки\n  setSortedIdHOC,\n  observer,\n  //@ts-ignore\n  withProps(\n    //@ts-ignore\n    ({\n      param: { gear_group_id, param_id },\n      tableReportsMST: { pdfIsFetching, xlsIsFetching },\n    }) => ({\n      // Пока действий на клик нет, то не нужен и loader, ставим false.\n      links: [{ xls: xlsIsFetching }, { pdf: pdfIsFetching }],\n      activeId: `${param_id}_${gear_group_id}`,\n    }),\n  ),\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    handlePopupAction: ({ openPopup }) => () => openPopup(n => !n),\n    //@ts-ignore\n    handleNewPopupAction: ({ openNewPopup }) => () => openNewPopup(n => !n),\n    // Дополняем метод записью в сторе для таблицы\n    // Устанавливаем активный параметр - по нему идет сортировка в таблице\n    handleSetActiveParam: ({\n      setSortedId,\n      table,\n      teamPlayers: { setActiveParam },\n      //@ts-ignore\n    }) => (param) => {\n      setSortedId(param)\n      setActiveParam(table, param)\n    },\n  }),\n  observer,\n)\n","import React from 'react'\n\nimport {\n  TableHeaderSettingsButton,\n  T9n,\n  DownloadLinksComponent,\n  SimpleDropdown,\n} from 'react-sport'\n\n// @ts-ignore\nimport { EditTableName } from 'features/TableName/components/EditTableName'\n// @ts-ignore\nimport { tableHeaderButtons } from 'module/utils/helpers'\n// @ts-ignore\nimport { tableTypes } from 'config/tables'\nimport { playersTableHeaderComposed } from './composed'\n\ntype TProps = {\n  deleteTable: () => void,\n  getClassName: (avatarIsVisible: boolean) => string,\n  handlePopupAction: () => void,\n  handleNewPopupAction: () => void,\n  links: Array<any>,\n  moveTableUp: () => void,\n  moveTableDown: () => void,\n  resetTable: () => void,\n  setType: (value: string, position: number) => string,\n  table: {\n    position: number,\n    avatarIsVisible: boolean,\n    summaryType: string,\n  },\n  showAvatarToggle: (position: number) => void,\n  teamPlayers: {\n    tables: any,\n  },\n  saveReport: () => void,\n  getDropdownBtns: (\n    valueType: string,\n    setType: (value: string, position: number) => string,\n    position: number,\n  ) => Array<any>,\n}\n\nconst PlayersTableHeaderComponent = ({\n  deleteTable,\n  getClassName,\n  getDropdownBtns,\n  handleNewPopupAction,\n  handlePopupAction,\n  links,\n  moveTableDown,\n  moveTableUp,\n  resetTable,\n  saveReport,\n  setType,\n  showAvatarToggle,\n  table,\n  table: { avatarIsVisible, position, summaryType },\n  teamPlayers,\n}: TProps) => (\n  <div className='stats-table__header'>\n    <div className='stats-table__header-left'>\n      {/*\n      //@ts-ignore */}\n      <SimpleDropdown placeholder={<T9n t='average_for_match' />}>\n        {/*\n          //@ts-ignore */}\n        {getDropdownBtns({\n          summaryType,\n          position,\n          onClick: setType,\n        })}\n      </SimpleDropdown>\n      <a\n        className={getClassName(avatarIsVisible)}\n        onClick={() => showAvatarToggle(position)}\n      >\n        <T9n t='show_photo' />\n      </a>\n    </div>\n    <div className='stats-table__name'>\n      <EditTableName\n        table={table}\n        tableType={tableTypes.teamPlayers}\n        currentStore={teamPlayers}\n      />\n    </div>\n    <div className='stats-table__actions'>\n      {/*\n      //@ts-ignore */}\n      <DownloadLinksComponent links={links} reportHandle={saveReport} />\n      {tableHeaderButtons(\n        handleNewPopupAction,\n        deleteTable,\n        moveTableUp,\n        moveTableDown,\n        resetTable,\n        teamPlayers.tables,\n      ).map(({ action, buttonType, t }) => (\n        <TableHeaderSettingsButton\n          onClick={action}\n          buttonType={buttonType}\n          key={t}\n        >\n          <T9n t={t} />\n        </TableHeaderSettingsButton>\n      ))}\n      <a className='stats-table__action-link' onClick={handlePopupAction}>\n        <i className='icon-settings' />\n      </a>\n    </div>\n  </div>\n)\n\nexport const PlayersTableHeader = playersTableHeaderComposed(\n  PlayersTableHeaderComponent,\n)\n","import { inject, observer } from 'mobx-react'\nimport { compose, withHandlers } from 'recompose'\n\nimport map from 'lodash/map'\nimport values from 'lodash/values'\nimport reduce from 'lodash/reduce'\n\nimport m from 'moment'\nimport cx from 'classnames'\n\n// @ts-ignore\nimport { getDropdownBtnsHoc } from 'hocs/getDropdownBtnsHoc'\n\n// TODO убрать тип any при рефакторинге стора игроков на профиле команды\nexport const playersTableHeaderComposed = compose<any, any>(\n  inject(\n    'lexics',\n    'teamPlayers',\n    'selectedMatches',\n    'tableReportsMST',\n    'teamProfile',\n  ),\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    getClassName: () => checked => cx('team-stats-show-avatar', { checked }),\n    deleteTable: ({\n      table: { position },\n      teamPlayers: { deleteTable },\n    }) => () => deleteTable(position),\n    /**\n     * Поднятие таблицы в списке\n     */\n    moveTableUp: ({\n      table: { position },\n      teamPlayers: { moveTable },\n    }) => () => {\n      if (position === 1) return null\n      return moveTable(position, 'up')\n    },\n    /**\n     * Спуск таблицы вниз по списку\n     */\n    moveTableDown: ({\n      table: { position },\n      teamPlayers: { moveTable },\n    }) => () => moveTable(position, 'down'),\n    /**\n     * Функция возврата таблице значений по-умолчанию\n     */\n    resetTable: ({ table: { position }, teamPlayers: { resetTable } }) => () =>\n      resetTable(position),\n    showAvatarToggle: ({ teamPlayers: { showAvatarToggle } }) =>\n      //@ts-ignore\n      position => showAvatarToggle(position),\n    setType: ({ teamPlayers: { changeValueType } }) => (\n      type: string,\n      position: number,\n    ) => () => {\n      changeValueType(type, position)\n    },\n    saveReport: ({\n      lexics: { getLexics, lang },\n      selectedMatches: { team },\n      tableReportsMST: { fetchData },\n      teamPlayers,\n      teamProfile: { profile },\n      //@ts-ignore\n      //@ts-ignore\n    }) => (e, key) => {\n      const { id, name_eng } = profile\n      const tables = reduce(\n        values(teamPlayers.tables),\n        (\n          acc,\n          {\n            activeId,\n            avatarIsVisible,\n            selectedParams,\n            sortInc,\n            summaryType,\n            tableName,\n            //@ts-ignore\n          },\n        ) =>\n          //@ts-ignore\n          [\n            ...acc,\n            {\n              name: getLexics(tableName) || tableName,\n              params: map(selectedParams, 'param_id'),\n              is_total: Number(summaryType === 'total'),\n              is_avatar: Number(avatarIsVisible && key === 'pdf'),\n              sortby: {\n                param: activeId,\n                flag: sortInc ? 'ASC' : 'DESC',\n              },\n            },\n          ],\n        [],\n      )\n      const options = {\n        lang_id: lang,\n        team: id,\n        matches: team[id],\n        tables,\n      }\n      fetchData(e, key, options)\n        //@ts-ignore\n        .then((response) => {\n          if (response) {\n            const link: any = document.getElementById('download-link')\n            link.href = URL.createObjectURL(response)\n            link.download = `${m().format(\n              'DD-MM-YY',\n            )}_${name_eng}_players.${key}`\n            link.click()\n          }\n        })\n    },\n  }),\n  // Получаем список кнопок для выпадащего меню\n  getDropdownBtnsHoc,\n  observer,\n)\n","import React from 'react'\n\nimport { TableUI } from 'react-sport'\n\nimport { GearPopup } from 'features/GearPopup'\nimport { THead } from 'features/Table'\n\nimport PlayersList from '../PlayersList'\nimport { playersTableComposed } from './composed'\nimport { PlayersTableHeader } from './PlayersTableHeader'\n\ntype TProps = {\n  activeId: string | void,\n  handleNewPopupAction: () => void,\n  handlePopupAction: () => void,\n  handleSetActiveParam: () => void,\n  lexics: {\n    page: string,\n  },\n  links: Array<any>,\n  newPopupOpened: boolean,\n  popupOpened: boolean,\n  sortInc: boolean,\n  table: {\n    avatarIsVisible: boolean,\n    position: number,\n    selectedParams: Array<{}>,\n    summaryType: string,\n  },\n  teamPlayers: {\n    editTempSelected: () => void,\n    gearParams: Array<{}>,\n    isFetching: boolean,\n    tables: any,\n    tempSelected: Array<{}>,\n  },\n}\n\n/** Компонент Таблица со списком игроков в команде\n* @param {string} activeId - выбранный айди параметра по которому сортируем\n* @param {func} handlePopupAction - функция для отображение попап шестеренки\n* @param {func} handleNewPopupAction - функция для отображение попап шестеренки для новой таблицы\n* @param {func} newPopupOpened - открыт попап с новой таблицей\n* @param {func} popupOpened - открыт попап с редактированием параметров для таблицы\n* @param {array} links - ссылки для использования для скачивания отчета\n* @param {func} setSortedId - при клике на шапку в таблице указываем\nайди по которому будем сортировать игроков\n* @param {object} table - объект таблицы со свойствами\n* @param {bool} sortInc - сортируем по убыванию или по возрастанию значения\n* @param {bool} isFetching - флаг для отображения лоадера\n*/\nconst PlayersTableComponent = ({\n  activeId,\n  handleNewPopupAction,\n  handlePopupAction,\n  handleSetActiveParam,\n  links,\n  newPopupOpened,\n  popupOpened,\n  sortInc,\n  table: { avatarIsVisible, position, selectedParams },\n  table,\n  teamPlayers,\n  teamPlayers: { isFetching },\n}: TProps) => (\n  <div className='stats-table'>\n    <PlayersTableHeader\n      table={table}\n      links={links}\n      handlePopupAction={handlePopupAction}\n      handleNewPopupAction={handleNewPopupAction}\n    />\n    {(popupOpened || newPopupOpened) && (\n      <GearPopup\n        table={table}\n        handlePopupAction={handlePopupAction}\n        handleNewPopupAction={handleNewPopupAction}\n        popupOpened={popupOpened}\n        newPopupOpened={newPopupOpened}\n        currentStore={teamPlayers}\n        newPopup={newPopupOpened}\n      />\n    )}\n    <div className='stats-table__wrapper'>\n      <table className='stats-table__table'>\n        <TableUI.Thead>\n          {/*\n              //@ts-ignore */}\n          <THead table={table} setSortedId={handleSetActiveParam} />\n        </TableUI.Thead>\n        {isFetching\n          ? <tbody className='loading' />\n          : (\n            <PlayersList\n              selectedParams={selectedParams}\n                //@ts-ignore\n              activeId={activeId}\n              sortInc={sortInc}\n              avatarIsVisible={avatarIsVisible}\n              position={position}\n            />\n          )\n        }\n      </table>\n    </div>\n  </div>\n)\n\nexport const PlayersTable = playersTableComposed(PlayersTableComponent)\n","\nimport React, { Fragment } from 'react'\nimport { inject, observer } from 'mobx-react'\nimport { compose, lifecycle } from 'recompose'\nimport { PlayersTable } from './PlayersTable'\n\ntype TProps = {\n  teamPlayers: {\n    tables: {},\n  },\n};\n\nconst TeamPlayers = ({ teamPlayers: { tables } }: TProps) => (\n  <Fragment>\n    {Object.values(tables)\n      .sort((a: any, b: any) => a.position - b.position)\n      .map((table: any) => (\n        // @ts-ignore\n        <PlayersTable key={table.position} table={table} />\n      ))}\n  </Fragment>\n)\n\nconst TeamPlayersComposed = compose<any, TProps>(\n  inject('teamPlayers', 'teamProfile', 'selectedMatches'),\n  lifecycle({\n    componentDidMount() {\n      const {\n        // @ts-ignore\n        selectedMatches,\n        // @ts-ignore\n        teamPlayers: { fetchParams },\n        // @ts-ignore\n        teamProfile: {\n          profile: { id },\n        },\n      } = this.props\n      fetchParams(id, selectedMatches)\n    },\n  }),\n  observer,\n)(TeamPlayers)\n\nexport default TeamPlayersComposed\n","import { inject, observer } from 'mobx-react'\nimport { compose, withHandlers, lifecycle } from 'recompose'\nimport {\n  indexLexic,\n  teamLexic,\n  filtersLexic,\n  markersLexic,\n  tableParamsLexic,\n  tableParamsLexicShort,\n  tableParamsNumLexic,\n  videoCutsLexic,\n  //@ts-ignore\n} from 'config/lexics'\n\nexport const teamPageComposed = compose(\n  inject(\n    'lexics',\n    'matches',\n    'teamProfile',\n    'teamTable',\n    'selectedMatches',\n  ),\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    getTeamProfile: ({ teamProfile: { fetch } }) => (id) => {\n      fetch(id)\n    },\n  }),\n  lifecycle(\n    {\n      componentDidMount() {\n        const {\n          getTeamProfile,\n          lexics,\n          match: {\n            params: { teamId },\n          },\n          matches,\n        } = this.props\n        lexics.appPage = {\n          page: 'team',\n          phrases: {\n            ...indexLexic,\n            ...teamLexic,\n            ...filtersLexic,\n            ...markersLexic,\n            ...tableParamsLexic,\n            ...tableParamsLexicShort,\n            ...tableParamsNumLexic,\n            ...videoCutsLexic,\n          },\n        }\n        getTeamProfile(teamId)\n        matches.fetch('team', teamId, 0, 20)\n      },\n      //@ts-ignore\n    },\n    //@ts-ignore\n    {\n      //@ts-ignore\n      componentDidUpdate(prevProps) {\n        const {\n          getTeamProfile,\n          match: {\n            params: { teamId },\n          },\n        } = this.props\n        if (prevProps.teamId !== teamId) {\n          getTeamProfile(teamId)\n        }\n      },\n    },\n  ),\n  observer,\n)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\nimport { compose, withProps } from 'recompose'\n// @ts-ignore\nimport { getLongSuffix, isNationalTeam } from 'module/utils/helpers'\nimport cx from 'classnames'\n\n// @ts-ignore\nimport Avatar from 'features/components/common/Avatar'\n\ntype TProps = {\n  teamProfile: {\n    profile: {\n      country_id: number,\n      team_type: number,\n      photo: string,\n    },\n    isLoaded: boolean,\n  },\n  suffix: string,\n}\n\nexport const TeamCard = ({\n  suffix,\n  teamProfile: { isLoaded, profile },\n}: TProps) => {\n  const { country_id, photo, team_type } = profile\n  return (\n    <div\n      className={cx({\n        'player-card-left': isLoaded,\n        'player-card-left player-card-left_loader': !isLoaded,\n      })}\n    >\n      <div className='player-column player-column-avatar'>\n        <div\n          className={cx('player-card-avatar', {\n            'player-card-avatar_national': isNationalTeam(team_type),\n          })}\n        >\n          <Avatar image={photo} name='team' />\n        </div>\n      </div>\n      <div className='player-column player-column-name'>\n        <h1 className='player-card-title'>\n          <span>\n            {/*\n            //@ts-ignore */}\n            {profile[`short_name_${suffix}`] || profile[`name_${suffix}`]}\n          </span>\n        </h1>\n        <div className='player-card-team'>\n          {/*\n          //@ts-ignore */}\n          {country_id && <a>{profile[`country_name_${suffix}`]}</a>}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst TeamCardComposed = compose(\n  inject('teamProfile', 'lexics'),\n  observer,\n  //@ts-ignore\n  withProps(({ lexics: { lang } }) => ({\n    suffix: getLongSuffix(lang),\n  })),\n  //@ts-ignore\n)(TeamCard)\n\nexport default TeamCardComposed\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  lifecycle,\n} from 'recompose'\nimport get from 'lodash/get'\n\nimport { team_params } from 'config/params'\n\nimport Loader from 'features/components/common/loader/Loader'\nimport { HeaderStatsList } from 'features/HeaderStatsList'\n\nimport {\n  TComposeInner,\n  TPropsOuter,\n  TLifecycle,\n} from './types'\n/**\n * Отображение блока со статистикой в шапке профиля\n */\nexport const TeamStatsWrapperComponent = ({\n  teamStats: {\n    isFetching,\n    stats,\n  },\n}: TComposeInner) => (\n  <div className='player-card-stats-list'>\n    {isFetching ? (\n      <Loader />\n    ) : (\n      <HeaderStatsList\n        params={team_params}\n        stats={stats}\n      />\n    )}\n  </div>\n)\n\nconst teamStatsComposed = compose<TComposeInner, TPropsOuter>(\n  inject('teamStats', 'selectedMatches'),\n  lifecycle<TLifecycle, {}>({\n    componentDidMount() {\n      const {\n        page,\n        pageId,\n        selectedMatches,\n        teamStats: { fetch },\n      } = this.props\n      /**\n       * Получение данных по выбранным матчам.\n       * @param {number} pageId - id профиля команды\n       * @param {array} selectedMatches[page][pageId] - id матчей для запроса\n       */\n      fetch(pageId, get(selectedMatches, [page, pageId], []))\n    },\n  }),\n  observer,\n)\n\nexport const TeamStatsWrapper = teamStatsComposed(TeamStatsWrapperComponent)\n","import React from 'react'\nimport TeamCard from 'features/TeamPage/components/TeamCard'\nimport MatchSelect from 'features/components/common/MatchSelect'\nimport Loader from 'features/components/common/loader/Loader'\nimport { TeamStatsWrapper } from './TeamStatsWrapper'\n\ntype TProps = {\n  firstLoad: boolean,\n  profile: {},\n  teamId: string,\n}\n\nexport const TeamPageHeader = ({\n  firstLoad,\n  profile,\n  teamId,\n}: TProps) => (\n  <section className='player-card'>\n    <div className='container-fluid'>\n      <div className='player-card-wrapper'>\n        {profile && <TeamCard />}\n        <div className='player-card-responsive'>\n          {!firstLoad\n            ? (\n          //@ts-ignore\n              <MatchSelect\n                page='team'\n                pageId={teamId}\n              />\n            )\n            : <Loader />}\n        </div>\n        <div className='player-card-right'>\n          {profile && !firstLoad\n            ? (\n              <TeamStatsWrapper\n                page='team'\n                pageId={teamId}\n              />\n            )\n            : <Loader />\n          }\n        </div>\n      </div>\n    </div>\n  </section>\n)\n","import React, { Fragment } from 'react'\nimport { Switch, Route } from 'react-router-dom'\n\nimport { EventPlayer as VideoPlayer, Popup } from 'react-sport'\n\nimport { StatsTabs } from 'features/components/common/stats-tabs/StatsTabs'\nimport TeamPlayers from 'features/TeamPage/components/TeamPlayers'\nimport VideoCuts from 'features/components/common/video-cuts/VideoCuts'\nimport Loader from 'features/components/common/loader/Loader'\nimport { PlayerField } from 'features/components/common/player/PlayerField'\nimport { TeamPageMatches } from 'features/TeamPageMatches'\n\nimport { teamPageComposed } from './teamPageComposed'\nimport { TeamPageHeader } from './TeamPageHeader'\n\nimport 'features/components/common/MainPage.scss'\nimport 'features/components/common/PageCard.scss'\nimport 'features/components/common/Shot.scss'\nimport 'features/components/common/Zones.scss'\n\nimport 'features/components/App/magnific-popup.css'\nimport 'features/components/App/video-player.scss'\nimport 'features/components/common/player-card/player.scss'\nimport 'features/components/common/player-card/PlayerCard.scss'\nimport 'features/components/common/player-stats/PlayerStats.scss'\nimport 'features/components/common/player-stats/PlayerStatsDropdown.scss'\n\ntype TProps = {\n  lexics: { page: string | null },\n  match: {\n    params: {\n      teamId: string,\n    },\n    url: string,\n  },\n  matches: {\n    firstLoad: boolean,\n  },\n  selectedMatches: {},\n  teamProfile: { profile: {} },\n  teamTable: {\n    gearParams: {},\n    tables: {},\n  },\n}\n\nexport const TeamPageComponent = ({\n  match: {\n    params: {\n      teamId,\n    },\n  },\n  match,\n  matches: { firstLoad },\n  selectedMatches,\n  teamProfile: { profile },\n}: TProps) => (\n  <article className='player for-player'>\n    {/*\n      //@ts-ignore */}\n    <Popup>\n      {/*\n        //@ts-ignore */}\n      <VideoPlayer\n        appName='volleyball'\n      />\n    </Popup>\n    <TeamPageHeader\n      profile={profile}\n      firstLoad={firstLoad}\n      teamId={teamId}\n    />\n    <section className='main-page__details'>\n      {!firstLoad\n      //@ts-ignore\n        ? <PlayerField pageId={teamId} />\n        : <Loader />\n      }\n      <div className='main-page__responsive'>\n        <div className='main-page__content'>\n          <div className='main-page__content-header'>\n            <StatsTabs\n              match={match}\n              isStats\n            />\n          </div>\n          <Switch>\n            <Route\n              path='/teams/:teamId/'\n              exact\n              render={() => <TeamPageMatches pageId={teamId} />}\n            />\n            <Route\n              path='/teams/:teamId/video'\n              render={props => (\n                //@ts-ignore\n                <VideoCuts\n                  page='team'\n                  pageType='teams'\n                  playerId={teamId}\n                  {...props}\n                />\n              )}\n            />\n            <Route\n              path='/teams/:teamId/players'\n              exact\n              render={() => (\n                <Fragment>\n                  {/*\n                    //@ts-ignore */}\n                  {profile && selectedMatches && <TeamPlayers />}\n                </Fragment>\n              )}\n            />\n          </Switch>\n        </div>\n      </div>\n    </section>\n  </article>\n)\n\n//@ts-ignore\nexport const TeamPage = teamPageComposed(TeamPageComponent)\n","\nimport React, { Fragment } from 'react'\nimport { T9n } from 'react-sport'\nimport map from 'lodash/map'\n\ntype TProps = {\n  headerVideoButtons: Array<{\n    link: string,\n    id: string,\n    t: string,\n  }>,\n};\n\nconst VideoLinks = ({ headerVideoButtons }: TProps) => (\n  <Fragment>\n    {map(headerVideoButtons, ({ id, link, t }) => (\n      <a key={id} href={link} className='match-header__play-button'>\n        <T9n t={t} />\n      </a>\n    ))}\n  </Fragment>\n)\n\nexport default VideoLinks\n","\nimport React from 'react'\nimport get from 'lodash/get'\nimport find from 'lodash/find'\n\nimport { compose, withHandlers } from 'recompose'\n\ntype TProps = {\n  periods: Array<any>,\n  getScoreByPeriods: (period: {}, team1_id: number, team2_id: number) => string,\n  team1_id: number,\n  team2_id: number,\n};\n\nexport const MatchScore = ({\n  getScoreByPeriods,\n  periods,\n  team1_id,\n  team2_id,\n}: TProps) => (\n  <div className='match-header__periods-wrapper'>\n    {periods.map(period => (\n      <span key={period[0].period} className='match-header__periods'>\n        {getScoreByPeriods(period, team1_id, team2_id)}\n      </span>\n    ))}\n  </div>\n)\n\nconst MatchScoreComposed = compose(\n  withHandlers({\n    //@ts-ignore\n    //@ts-ignore\n    //@ts-ignore\n    getScoreByPeriods: () => (period, team1_id, team2_id) => {\n      const scoreTeam = get(find(period, { team: team1_id }), 'value')\n      const scoreOppTeam = get(find(period, { team: team2_id }), 'value')\n      return `${scoreTeam} : ${scoreOppTeam}`\n    },\n  }),\n)\n\n// @ts-ignore\nexport default MatchScoreComposed(MatchScore)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport MatchScore from './MatchScore/MatchScore'\n\ntype TProps = {\n  matchProfile: {\n    periods: Array<{}>,\n    //@ts-ignore\n    data: {},\n    //@ts-ignore\n    //@ts-ignore\n    data: {\n      match_date: string,\n      score_team1: number,\n      score_team2: number,\n      team1_id: number,\n      team2_id: number,\n    },\n  },\n  suffix: string,\n}\n\nconst MatchInfo = ({\n  matchProfile: {\n    data,\n    data: {\n      //@ts-ignore\n      match_date,\n      //@ts-ignore\n      score_team1,\n      //@ts-ignore\n      score_team2,\n      //@ts-ignore\n      team1_id,\n      //@ts-ignore\n      team2_id,\n    },\n    periods,\n  },\n  suffix,\n}: TProps) => (\n  <div className='match-header__main'>\n    <div className='match-header__event'>\n      <span className='match-header__date'>{match_date}</span>\n    </div>\n    <h1 className='match-header__teams'>\n      <span className='match-header__home'>\n        <Link target='_blank' to={`/teams/${team1_id}`}>\n          {/*\n            //@ts-ignore */}\n          {data[`team1_name_${suffix}`]}\n        </Link>\n      </span>\n      <span className='match-header__score'>\n        {score_team1}:{score_team2}\n      </span>\n      <span className='match-header__away'>\n        <Link target='_blank' to={`/teams/${team2_id}`}>\n          {/*\n          //@ts-ignore */}\n          {data[`team2_name_${suffix}`]}\n        </Link>\n      </span>\n    </h1>\n    <div className='match-header__event'>\n      <span className='match-header__place'>\n        {/*\n        //@ts-ignore */}\n        {data[`tournament_name_${suffix}`]}\n      </span>\n    </div>\n    <MatchScore periods={periods} team1_id={team1_id} team2_id={team2_id} />\n  </div>\n)\n\nexport default MatchInfo\n","\nimport React from 'react'\nimport { inject, observer } from 'mobx-react'\nimport { compose, withProps } from 'recompose'\nimport get from 'lodash/get'\n\n// @ts-ignore\nimport { getSuffix } from 'module/utils/helpers'\nimport VideoLinks from './VideoLinks/VideoLinks'\nimport MatchInfo from './MatchInfo/MatchInfo'\n\ntype TProps = {\n  headerVideoButtons: Array<{\n    link: string,\n    id: string,\n    t: string,\n  }>,\n  suffix: string,\n  lexics: { lang: string },\n  matchProfile: {\n    periods: Array<{}>,\n    //@ts-ignore\n    data: {},\n    //@ts-ignore\n    //@ts-ignore\n    data: {\n      match_date: string,\n      score_team1: number,\n      score_team2: number,\n      team1_id: number,\n      team2_id: number,\n    },\n  },\n};\n\nexport const HeaderComponent = ({\n  headerVideoButtons,\n  matchProfile,\n  suffix,\n}: TProps) => (\n  <div className='match-header'>\n    <div className='match-header__container'>\n      <MatchInfo matchProfile={matchProfile} suffix={suffix} />\n      <div className='match-header__info'>\n        <div className='match-header__play'>\n          <VideoLinks headerVideoButtons={headerVideoButtons} />\n        </div>\n      </div>\n    </div>\n  </div>\n)\n\nconst HeaderComposed = compose(\n  inject('lexics', 'matchProfile'),\n  observer,\n  //@ts-ignore\n  withProps(({ lexics: { lang }, matchProfile: { videoLinks } }) => ({\n    suffix: getSuffix(lang),\n    headerVideoButtons: [\n      {\n        id: 'full_game',\n        link: get(videoLinks, 'full_game.link', ''),\n        t: 'match_popup_full_game',\n      },\n      {\n        id: 'ball_in_play',\n        link: get(videoLinks, 'ball_in_play.link', ''),\n        t: 'match_popup_ball_in_play',\n      },\n    ],\n  })),\n)\n\n// @ts-ignore\nexport const Header = HeaderComposed(HeaderComponent)\n","\nimport { compose, withHandlers, withProps, lifecycle } from 'recompose'\nimport get from 'lodash/get'\nimport { inject, observer } from 'mobx-react'\nimport {\n  indexLexic,\n  matchLexic,\n  filtersLexic,\n  markersLexic,\n  tableParamsLexic,\n  tableParamsLexicShort,\n  tableParamsNumLexic,\n  videoCutsLexic,\n  //@ts-ignore\n} from 'config/lexics'\n\nconst MatchPageComposed = compose(\n  inject('lexics', 'matchProfile'),\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    getMatchProfile: ({ matchProfile: { fetch } }) => (matchId) => {\n      fetch(matchId)\n    },\n\n    //@ts-ignore\n    //@ts-ignore\n    editTempSelected: ({ matchTable: { editTempSelected } }) => (\n      //@ts-ignore\n      action,\n      //@ts-ignore\n      param,\n    ) => {\n      editTempSelected(action, param)\n    },\n  }),\n  //@ts-ignore\n  withProps(({ match }) => {\n    const matchId = get(match, 'params.matchId')\n    return {\n      matchId,\n    }\n  }),\n  lifecycle({\n    componentDidMount() {\n      const {\n        //@ts-ignore\n        getMatchProfile,\n        //@ts-ignore\n        lexics,\n        //@ts-ignore\n        matchId,\n      } = this.props\n      lexics.appPage = {\n        page: 'match',\n        phrases: {\n          ...indexLexic,\n          ...matchLexic,\n          ...filtersLexic,\n          ...markersLexic,\n          ...tableParamsLexic,\n          ...tableParamsLexicShort,\n          ...tableParamsNumLexic,\n          ...videoCutsLexic,\n        },\n      }\n      getMatchProfile(matchId)\n    },\n  }),\n  observer,\n)\n\nexport default MatchPageComposed\n","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\n\nimport { tableTypes } from 'config/tables'\n\nimport { Tables } from 'features/Table'\nimport { StatsTabs } from 'features/components/common/stats-tabs/StatsTabs'\nimport VideoCuts from 'features/components/common/video-cuts/VideoCuts'\nimport { PlayerField } from 'features/components/common/player/PlayerField'\n\nimport { mainContentComposed } from './composed'\n\n\nexport const MainContentComponent = ({\n  //@ts-ignore\n  lexics: { page },\n  //@ts-ignore\n  match,\n  //@ts-ignore\n  matchId,\n  matchTable: {\n    //@ts-ignore\n    isLoaded,\n    //@ts-ignore\n    tables,\n  },\n  //@ts-ignore\n  pageId,\n}) => (\n  <section className='main-page__details'>\n    {/*\n      //@ts-ignore */}\n    <PlayerField pageId={pageId} matchId={matchId} />\n    <div className='main-page__responsive'>\n      <div className='main-page__content'>\n        <div className='main-page__content-header'>\n          <StatsTabs match={match} isStats />\n        </div>\n        <Switch>\n          <Route\n            path='/matches/:matchId/'\n            exact\n            render={() =>\n              (isLoaded ? (\n                <Tables\n                  tableType={tableTypes.matchPlayersTable}\n                  tables={tables}\n                  pageId={matchId}\n                />\n              ) : (\n                <div className='loading' />\n              ))\n            }\n          />\n          <Route\n            path='/matches/:matchId/video'\n            render={props => (\n              //@ts-ignore\n              <VideoCuts\n                page='match'\n                pageType='teams'\n                playerId={pageId}\n                {...props}\n              />\n            )}\n          />\n        </Switch>\n      </div>\n    </div>\n  </section>\n)\n\n// @ts-ignore\nexport const MainContent = mainContentComposed(MainContentComponent)\n","\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withProps, lifecycle } from 'recompose'\n\nimport get from 'lodash/get'\n\nexport const mainContentComposed = compose(\n  inject('lexics', 'matchProfile', 'matches', 'matchTable'),\n  observer,\n  //@ts-ignore\n  withProps(({ matches: { active }, matchProfile }) => {\n    const pageId = get(matchProfile, `data.${active}_id`)\n    return {\n      pageId,\n    }\n  }),\n  lifecycle({\n    componentDidMount() {\n      const {\n        //@ts-ignore\n        matchProfile: { matchId },\n        //@ts-ignore\n        matchTable: { fetchMatchesInfo },\n      } = this.props\n      fetchMatchesInfo(+matchId)\n    },\n  }),\n  observer,\n)\n","import React, { Fragment } from 'react'\nimport { EventPlayer as VideoPlayer, Popup } from 'react-sport'\n\n// @ts-ignore\nimport Loader from 'features/components/common/loader/Loader'\nimport { Header } from './Header'\nimport MatchPageComposed from './MatchPageComposed'\nimport { MainContent } from './MainContent'\n\nimport 'features/components/common/MainPage.scss'\nimport 'features/components/common/PageCard.scss'\nimport 'features/components/common/MatchCard.scss'\nimport 'features/components/common/Shot.scss'\nimport 'features/components/common/Zones.scss'\n\nimport 'features/components/common/player-card/player.scss'\nimport 'features/components/common/player-card/PlayerCard.scss'\nimport 'features/components/common/player-stats/PlayerStats.scss'\nimport 'features/components/common/player-stats/PlayerStatsDropdown.scss'\n\ntype TProps = {\n  match: {},\n  matchId: string,\n  matchProfile: { isFetching: boolean },\n}\n\nexport const MainPage = ({\n  match,\n  matchId,\n  matchProfile: { isFetching },\n}: TProps) => (\n  <div className='match-container'>\n    {/*\n      //@ts-ignore */}\n    <Popup>\n      {/*\n        //@ts-ignore */}\n      <VideoPlayer appName='volleyball' />\n    </Popup>\n    {isFetching ? (\n      <Loader />\n    ) : (\n      <Fragment>\n        <Header />\n        {/*\n            //@ts-ignore */}\n        <MainContent match={match} matchId={matchId} />\n      </Fragment>\n    )}\n  </div>\n)\n\n// @ts-ignore\nexport default MatchPageComposed(MainPage)\n","\nimport React from 'react'\nimport { compose, withHandlers, withProps, withState } from 'recompose'\n\ntype TProps = {\n  child: any,\n  listItemStyle: {},\n  handleMouseHover: () => void,\n};\n\nconst DropDownItem = ({ child, handleMouseHover, listItemStyle }: TProps) => (\n  <div\n    onMouseEnter={handleMouseHover}\n    onMouseLeave={handleMouseHover}\n    style={listItemStyle}\n  >\n    {child}\n  </div>\n)\n\nconst DropDownItemComposed = compose(\n  withState('isHovered', 'toggleHover', false),\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    handleMouseHover: ({ toggleHover }) => () => toggleHover(n => !n),\n  }),\n  //@ts-ignore\n  withProps(({ isHovered, primaryColor }) => ({\n    listItemStyle: {\n      backgroundColor: isHovered ? primaryColor : '#fff',\n      padding: '5px 10px',\n    },\n  })),\n  //@ts-ignore\n)(DropDownItem)\n\nexport default DropDownItemComposed\n","import * as React from 'react'\nimport { compose, withHandlers, withProps, withState } from 'recompose'\nimport cx from 'classnames'\nimport { OutsideClick } from 'react-sport'\nimport './index.scss'\nimport DropDownItem from './DropDownItem'\n\n/**\n * Компонент Dropdown - простой выпадающий список с возможностью кастомизации\n *\n * Работает так\n *  <Dropdown onClick={() => onClick()}>\n *    <ChildFirst/>\n *    <ChildSecond/>\n *  </Dropdown>\n *\n * @property {React, Component, Array} children - компоненты которые являются пунктами выпадашки\n * @property {function} onClick - действие при клике на пункт выпадашки\n * @property {function} handleClick - открытие/закрытие списка\n * @property {React, Component, string} placeholder - выбранный пункт выпадашки\n * @property {function} changePlaceholder - изменение заголовка\n * @property {object} settings - кастомизированные настройки выпадающего меню\n  (основной цвет, отступы, шрифт и тд) не обязательно\n  Прим. settings = {\n    [key]: string\n  }\n */\n\ntype TProps = {\n  children: any,\n  handleClick: () => void,\n  //@ts-ignore\n  placeholder: React.Node,\n  //@ts-ignore\n  statePlaceholder: React.Node,\n  isOpened: boolean,\n  inlineStyles: {\n    placeHolder: {},\n    listItem: {},\n  },\n  primaryColor: string,\n  //@ts-ignore\n  itemClick: (arg: React.Node) => () => void,\n}\n\nconst DropDownSimple = ({\n  children,\n  handleClick,\n  inlineStyles,\n  isOpened,\n  itemClick,\n  placeholder,\n  primaryColor,\n  statePlaceholder,\n}: TProps) => (\n  <div\n    className={cx('dropdown-container', {\n      'dropdown-container__opened': isOpened,\n    })}\n  >\n    {children && (\n      <div className='dropdown-control' onClick={handleClick}>\n        <span style={inlineStyles.placeHolder}>\n          {statePlaceholder || placeholder}\n        </span>\n        <ul\n          className={cx('dropdown-list', {\n            'dropdown-list__hidden': !isOpened,\n          })}\n        >\n          {React.Children.map(children, (child, i) => (\n            <li\n              key={i}\n              className='dropdown-list__item'\n              style={inlineStyles.listItem}\n              onClick={itemClick(child)}\n            >\n              {/*\n              //@ts-ignore */}\n              <DropDownItem primaryColor={primaryColor} child={child} />\n            </li>\n          ))}\n        </ul>\n      </div>\n    )}\n  </div>\n)\n\nconst DropDownSimpleComposed = compose(\n  withState('isOpened', 'handleOpen', false),\n  withState('statePlaceholder', 'changePlaceholder', ''),\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    handleClick: ({ handleOpen }) => () => handleOpen(n => !n),\n    clickOutside: ({ handleOpen }) => () => handleOpen(false),\n    //@ts-ignore\n    itemClick: ({ changePlaceholder, onClick }) => child => () => {\n      changePlaceholder(React.cloneElement(child, { onClick: null }))\n      if (child.props.onClick) child.props.onClick()\n      if (onClick) onClick()\n    },\n  }),\n  //@ts-ignore\n  withProps(({ settings = {} }) => ({\n    //@ts-ignore\n    primaryColor: settings.primaryColor || '#e6e6e6',\n    inlineStyles: {\n      listItem: {\n        //@ts-ignore\n        minWidth: settings.minWidth || '150px',\n        //@ts-ignore\n        fontSize: settings.fontSize || '10px',\n      },\n      placeHolder: {\n        //@ts-ignore\n        paddingLeft: settings.padding || '10px',\n      },\n    },\n  })),\n  OutsideClick,\n  //@ts-ignore\n)(DropDownSimple)\n\nexport default DropDownSimpleComposed\n","import React, { Fragment } from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  lifecycle,\n  compose,\n  withProps,\n  withHandlers,\n} from 'recompose'\n\nimport map from 'lodash/map'\nimport head from 'lodash/head'\n\nimport { DropDownSimple } from 'features/DropDownSimple'\nimport { primarySportColor } from 'config/common'\nimport Loader from 'features/components/common/loader/Loader'\n\nimport './tournamentSeasonsSelect.scss'\n\ntype TProps = {\n  tournamentSeasonSelect: {\n    isLoaded: boolean,\n    //@ts-ignore\n    seasonsList: Array<{}>,\n    selectedSeason?: {\n      //@ts-ignore\n      season_name?: string | null,\n    },\n  },\n  settings: any,\n  tournamentId: number,\n  onSeasonSelect: (tournamentId: number, season_id: number) => () => void,\n}\n\nexport const SeasonSelect = ({\n  onSeasonSelect,\n  settings,\n  tournamentId,\n  tournamentSeasonSelect: {\n    isLoaded,\n    seasonsList,\n  },\n}: TProps) => (\n  <Fragment>\n    <div className='season-select-container'>\n      {isLoaded\n        ? (\n      //@ts-ignore\n          <DropDownSimple\n            //@ts-ignore\n            placeholder={head(seasonsList).season_name}\n            settings={settings}\n          >\n            {map(\n              seasonsList,\n              //@ts-ignore\n              ({ season_id, season_name }) => (\n                <div\n                  key={season_id}\n                  onClick={onSeasonSelect(tournamentId, season_id)}\n                >\n                  {season_name}\n                </div>\n              ),\n            )}\n          </DropDownSimple>\n        )\n        : <Loader />\n      }\n    </div>\n  </Fragment>\n)\n\nconst SeasonSelectComposed = compose(\n  inject('lexics', 'tournamentSeasonSelect', 'tournamentHeaderStats'),\n  //@ts-ignore\n  withHandlers({\n    onSeasonSelect: ({ tournamentSeasonSelect: { changeActiveSeason } }) =>\n      //@ts-ignore\n      (tournamentId, season_id) => () => changeActiveSeason(tournamentId, season_id),\n  }),\n  withProps(() => ({\n    settings: {\n      primaryColor: primarySportColor,\n    },\n  })),\n  lifecycle({\n    componentDidMount() {\n      const {\n        //@ts-ignore\n        tournamentId,\n        //@ts-ignore\n        tournamentSeasonSelect: { fetchSeasons },\n      } = this.props\n      fetchSeasons(tournamentId)\n    },\n  }),\n  observer,\n  //@ts-ignore\n)(SeasonSelect)\n\nexport default SeasonSelectComposed\n","import React, { Fragment } from 'react'\nimport {\n  lifecycle,\n  compose,\n  withHandlers,\n} from 'recompose'\nimport { inject, observer } from 'mobx-react'\n\nimport get from 'lodash/get'\nimport map from 'lodash/map'\n\nimport Loader from 'features/components/common/loader/Loader'\nimport { HeaderStatsItem } from 'features/HeaderStatsItem'\n\nimport { team_params } from 'config/params'\nimport './index.scss'\n\ntype TProps = {\n  getEvents: (param_id: number) => Array<number>,\n  getStat: (param_id: number) => number | string,\n  tournamentHeaderStats: { loaded: boolean },\n};\n\nconst TournamentHeaderStats = ({\n  getEvents,\n  getStat,\n  tournamentHeaderStats: { loaded },\n}: TProps) => (\n  <Fragment>\n    {loaded ? (\n      <div className='header-stats-container'>\n        {map(team_params, ({ lexic_id, param_id, percent }) => (\n          <HeaderStatsItem\n            key={param_id}\n            paramId={param_id}\n            lexicId={lexic_id}\n            percent={percent}\n            events={getEvents(param_id)}\n            statValue={getStat(param_id)}\n          />\n        ))}\n      </div>\n    ) : (\n      <Loader />\n    )}\n  </Fragment>\n)\n\nconst TournamentHeaderStatsComposed = compose(\n  inject('tournamentHeaderStats', 'tournamentSeasonSelect'),\n  observer,\n  //@ts-ignore\n  withHandlers({\n    getStat: ({ tournamentHeaderStats: { countAverageStatValue } }) =>\n      //@ts-ignore\n      param_id => get(countAverageStatValue, param_id, 0).toFixed(1),\n\n    getEvents: ({ tournamentHeaderStats: { stats } }) =>\n      //@ts-ignore\n      param_id => get(stats[param_id], 'events', []),\n  }),\n  lifecycle({\n    componentDidMount() {\n      const {\n        //@ts-ignore\n        tournamentHeaderStats: { fetchHeaderParams },\n      } = this.props\n      fetchHeaderParams()\n    },\n  }),\n  observer,\n  //@ts-ignore\n)(TournamentHeaderStats)\n\nexport default TournamentHeaderStatsComposed\n","import TournamentSeasonSelectStore from './TournamentSeasonSelectStore'\n\nexport default TournamentSeasonSelectStore.create({\n  error: null,\n  isLoaded: false,\n})\n","import React, { Fragment } from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport get from 'lodash/get'\nimport { compose, withProps } from 'recompose'\nimport { getLongSuffix } from 'module/utils/helpers'\n\nimport Avatar from 'features/components/common/Avatar'\n\ntype TProps = {\n  suffix: string,\n  //@ts-ignore\n  countryName: string | null,\n  profile: {\n    photo?: string,\n  },\n}\nconst TournamentPageInfo = ({\n  countryName,\n  profile: {\n    photo,\n    ...profile\n  },\n  suffix,\n}: TProps) => (\n  <Fragment>\n    <div className='tournament-header-left'>\n      <div className='tournament-avatar'>\n        <Avatar image={photo} name='tournament' />\n      </div>\n      <div className='tournament-name'>\n        <h1 className='tournament-header-title'>\n          <span>\n            {/*\n              //@ts-ignore */}\n            {profile[`name_${suffix}`]}\n          </span>\n        </h1>\n        <div className='tournament-header-team'>\n          <a>{countryName}</a>\n        </div>\n      </div>\n    </div>\n  </Fragment>\n)\n\nconst TournamentPageInfoComposed = compose(\n  inject('lexics'),\n  observer,\n  //@ts-ignore\n  withProps(({ lexics: { lang }, profile }) => {\n    const suffix = getLongSuffix(lang)\n    return {\n      suffix,\n      countryName: get(profile, `country.name_${suffix}`),\n    }\n  }),\n  //@ts-ignore\n)(TournamentPageInfo)\n\nexport default TournamentPageInfoComposed\n","import TournamentHeaderStatsStore from './TournamentHeaderStatsStore'\n\nexport default TournamentHeaderStatsStore.create({\n  loaded: false,\n  error: null,\n})\n","import React from 'react'\n// @ts-ignore\nimport { SeasonSelect } from 'features/TournamentSeasonSelect'\n// @ts-ignore\nimport { TournamentHeaderStats } from 'features/TournamentHeaderStats'\n// @ts-ignore\nimport Loader from 'features/components/common/loader/Loader'\nimport TournamentPageInfo from './TournamentPageInfo'\n\ntype TProps = {\n  tournamentId: number,\n  profile: {},\n  isLoaded: boolean,\n}\n\nconst TournamentPageHeader = ({ isLoaded, profile, tournamentId }: TProps) => (\n  <section className='tournament-header'>\n    <div className='tournament-header-wrapper'>\n      <div className='tournament-header__profile-info'>\n        {/*\n        //@ts-ignore */}\n        <TournamentPageInfo profile={profile} />\n      </div>\n      <div className='tournament-header__season-select'>\n        {/*\n        //@ts-ignore */}\n        {profile && <SeasonSelect tournamentId={tournamentId} />}\n      </div>\n      <div className='tournament-header__stats'>\n        {isLoaded ? <TournamentHeaderStats /> : <Loader />}\n      </div>\n    </div>\n  </section>\n)\n\nexport default TournamentPageHeader\n","import {\n  indexLexic,\n  teamLexic,\n  filtersLexic,\n  markersLexic,\n  tableParamsLexic,\n  tableParamsLexicShort,\n  tableParamsNumLexic,\n  videoCutsLexic,\n  //@ts-ignore\n} from 'config/lexics'\n\nexport default {\n  ...indexLexic,\n  ...teamLexic,\n  ...filtersLexic,\n  ...markersLexic,\n  ...tableParamsLexic,\n  ...tableParamsLexicShort,\n  ...tableParamsNumLexic,\n  ...videoCutsLexic,\n}\n","import { compose, lifecycle } from 'recompose'\nimport { inject, observer } from 'mobx-react'\n// @ts-ignore\nimport tournamentLexic from 'config/lexics/tournamentPage'\n\nexport const tournamentPageComposed = compose(\n  inject(\n    'lexics',\n    'tournamentsProfile',\n    'tournamentSeasonSelect',\n    'tournamentMatches',\n  ),\n  lifecycle({\n    componentDidMount() {\n      const {\n        //@ts-ignore\n        lexics,\n        //@ts-ignore\n        match: { params },\n        //@ts-ignore\n        tournamentsProfile: { fetchTournamentProfile },\n      } = this.props\n      lexics.appPage = {\n        page: 'tournaments',\n        phrases: tournamentLexic,\n      }\n      fetchTournamentProfile(Number(params.tournamentId))\n    },\n  }),\n  observer,\n)\n","import React, { Fragment } from 'react'\nimport { Switch, Route, Redirect } from 'react-router-dom'\n\nimport Loader from 'features/components/common/loader/Loader'\nimport { TournamentMatchesTable } from 'features/TournamentPageMatchesTable'\nimport { TournamentPlayersTable } from 'features/TournamentPagePlayersTable'\nimport { StatsTabs } from 'features/components/common/stats-tabs/StatsTabs'\n\nimport TournamentPageHeader from './TournamentPageHeader'\nimport { tournamentPageComposed } from './composed'\n\nimport './tournamentPage.scss'\n\ntype TProps = {\n  match: {\n    url: string,\n    params: {\n      tournamentId: string,\n    },\n  },\n  tournamentMatches: {\n    isLoaded: boolean,\n  },\n  tournamentsProfile: {\n    isLoaded: boolean,\n    profile: {},\n  },\n};\n\nconst TournamentPageComponent = ({\n  match: { params, ...match },\n  tournamentMatches: { isLoaded },\n  tournamentsProfile: { isLoaded: profileLoaded, profile },\n}: TProps) => (\n  <Fragment>\n    {profileLoaded ? (\n      <TournamentPageHeader\n        tournamentId={Number(params.tournamentId)}\n        profile={profile}\n        isLoaded={isLoaded}\n      />\n    ) : (\n      <Loader />\n    )}\n    <section className='main-page__details'>\n      <div className='main-page__responsive'>\n        <div className='main-page__content'>\n          <div className='main-page__content-header'>\n            <StatsTabs match={match} isStats />\n          </div>\n          <Switch>\n            <Route\n              path='/tournaments/:tournamentId/'\n              exact\n              render={() => (\n                <Redirect to={`/tournaments/${params.tournamentId}/matches`} />\n              )}\n            />\n            <Route\n              path='/tournaments/:tournamentId/matches'\n              exact\n              render={() =>\n                (isLoaded ? (\n                //@ts-ignore\n                  <TournamentMatchesTable\n                    tournamentId={Number(params.tournamentId)}\n                  />\n                ) : (\n                  <Loader />\n                ))\n              }\n            />\n            <Route\n              path='/tournaments/:tournamentId/players'\n              exact\n              render={() =>\n                (isLoaded ? (\n                //@ts-ignore\n                  <TournamentPlayersTable\n                    tournamentId={Number(params.tournamentId)}\n                  />\n                ) : (\n                  <Loader />\n                ))\n              }\n            />\n          </Switch>\n        </div>\n      </div>\n    </section>\n  </Fragment>\n)\n\n// @ts-ignore\nexport const TournamentPage = tournamentPageComposed(TournamentPageComponent)\n","import React from 'react'\nimport { Route } from 'react-router-dom'\nimport { inject, observer } from 'mobx-react'\nimport { DragDropContext } from 'react-dnd'\n\nimport HTML5Backend from 'react-dnd-html5-backend'\nimport { compose } from 'recompose'\n\nimport { Login } from 'react-sport'\n\n// @ts-ignore\nimport { loginLexic } from 'config/lexics'\n\nimport { Home } from 'features/components/Home/Home'\n// @ts-ignore\nimport { Header } from 'features/components/Header/Header'\n\nimport { PlayerPage } from 'features/components/PlayerPage/PlayerPage'\n// @ts-ignore\nimport { TeamPage } from 'features/TeamPage/components/TeamPage'\n// @ts-ignore\nimport MatchPage from 'features/components/MatchPage/MatchPage'\n// @ts-ignore\nimport { TournamentPage } from 'features/TournamentPage'\n\nimport './App.scss'\n\ntype TProps = {\n  auth: {\n    isAuth: boolean,\n  },\n  location: {\n    pathname: string,\n  },\n}\n\nconst App = ({ auth: { isAuth }, location: { pathname } }: TProps) => (\n  <div className='App'>\n    {isAuth && pathname !== '/' && <Header />}\n    <Route exact path='/' component={Home} />\n    {/*\n    //@ts-ignore */}\n    <Route path='/login' render={() => <Login loginLexics={loginLexic} />} />\n    <Route path='/players/:playerId' component={PlayerPage} />\n    <Route path='/teams/:teamId' component={TeamPage} />\n    <Route path='/matches/:matchId' component={MatchPage} />\n    <Route path='/tournaments/:tournamentId' component={TournamentPage} />\n    <a className='download-link download-link_hidden' id='download-link'>\n      <span />\n    </a>\n  </div>\n)\n\nconst AppComposed = compose(\n  inject('auth'),\n  DragDropContext(HTML5Backend),\n  observer,\n  //@ts-ignore\n)(App)\n\nexport default AppComposed\n","import TournamentPageStore from './TournamentPageStore'\n\nexport default TournamentPageStore.create({\n  profile: {},\n  isLoaded: false,\n  error: null,\n})\n","import React from 'react'\nimport { Router, Route, Redirect } from 'react-router-dom'\nimport PropTypes from 'prop-types'\nimport { Provider } from 'mobx-react'\n\nimport stores from 'features/stores'\nimport history from 'features/history'\n\nimport App from 'features/components/App/App'\n\n// @ts-ignore\nconst onEnter = (props) => {\n  if (\n    window.localStorage.getItem('AuthUser') === null\n    && props.location.pathname !== '/login'\n  ) {\n    localStorage.setItem('backLocation', props.location.pathname)\n    return <Redirect to='/login' />\n  }\n  return <App {...props} />\n}\n\nonEnter.propTypes = {\n  location: PropTypes.object,\n}\n\nconst Features = () => (\n  <Router history={history}>\n    <Provider {...stores}>\n      <div>\n        <Route path='/' render={props => onEnter(props)} />\n      </div>\n    </Provider>\n  </Router>\n)\n\nexport default Features\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from 'features'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}