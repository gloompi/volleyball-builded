{"version":3,"sources":["../node_modules/react-sport/dist sync","config/routes.tsx","config/common.tsx","features/history.tsx","features/stores/BasicStore.tsx","config/tabsConfig.tsx","features/stores/Tabs.tsx","features/stores/Matches/MatchesApiStore.tsx","features/stores/Matches/MatchesStore.tsx","config/amplua.tsx","features/stores/PlayerProfile/PlayerProfileStore.tsx","features/stores/PlayerProfile/PlayerProfileApiStore.tsx","config/params.tsx","config/markers.tsx","config/FieldZones.tsx","config/matchSetsConfig.tsx","module/utils/helpers.tsx","features/stores/PlayerStatsHeader/PlayerStatsHeaderApiStore.tsx","features/stores/PlayerStatsHeader/PlayerStatsHeaderStore.tsx","features/stores/TeamStatsHeader/TeamStatsHeaderApiStore.tsx","features/stores/TeamStatsHeader/TeamStatsHeaderStore.tsx","features/stores/InfoItem.tsx","features/stores/Markers/MarkersStore.tsx","features/stores/Markers/MarkersFiltration/MarkersFiltration.tsx","features/stores/Markers/MarkersFiltration/KeysFiltration.tsx","features/stores/Markers/Marker.tsx","features/stores/ToolTips/ToolTipActions.tsx","features/stores/PlayerInfo/FetchPlayerInfo.tsx","features/stores/MapShoot/FetchMapShoot.tsx","features/stores/Markers/FetchMarkerActions.tsx","features/stores/Markers/Actions.tsx","features/stores/Markers/ComposeMarkers.tsx","features/stores/Zones/ZoneActionsMixin.tsx","features/stores/Zones/ZonesStore.tsx","features/stores/ShotType/ShotTypeStore.tsx","features/stores/ShotType/FetchShotType.tsx","features/stores/MapShoot/MapShootStore.tsx","features/stores/PlayerInfo/PlayerInfoStore.tsx","features/stores/ToolTips/ToolTipsStore.tsx","features/stores/ShootsRange/ShootsRange.tsx","features/stores/ShootsRange/RangeActions.tsx","features/stores/VideoCuts/VideoCuts.tsx","features/stores/VideoCuts/PopupItem.tsx","features/stores/VideoCuts/Button.tsx","features/stores/VideoCuts/VideoCutsMixin.tsx","features/stores/VideoCuts/ComposeVideoCuts.tsx","features/stores/MatchLinks/MatchLinksStore.tsx","features/stores/MatchLinks/MatchLinksApiStore.tsx","features/stores/TableReports/filterParams.tsx","features/stores/TableReports/TableReportsStore.tsx","features/stores/TableReports/TableReportsApiStore.tsx","features/Table/components/MatchPopup.tsx","features/Table/components/TBody/index.tsx","features/Table/components/TBody/composed.tsx","config/teamPopupParams.tsx","module/utils/helpers/getDigits/index.tsx","module/utils/helpers/getFilteredStatsByParamId/index.tsx","module/utils/helpers/getSummaryStatValue/index.tsx","features/Table/components/TFoot.tsx","features/Table/components/THead.tsx","features/components/common/loader/Loader.tsx","features/TdLoader/index.tsx","module/utils/helpers/getStatValue/index.tsx","hocs/getExtLinkHOC/index.tsx","config/playListTypes.tsx","features/Table/components/Td/index.tsx","features/Table/components/Td/composed.tsx","features/Table/helpers/getStatsFilterOptions.tsx","features/TableName/components/EditableInput/index.tsx","features/TableName/components/EditTableName.tsx","features/components/common/map/RangeSettings/index.tsx","hocs/rangeSettingsHoc/index.tsx","features/GearPopup/components/RangeSelector/index.tsx","features/GearPopup/components/GearTable/index.tsx","features/GearPopup/components/GearTable/composed.tsx","module/utils/update.js","features/GearPopup/components/DndItem/index.tsx","features/GearPopup/components/DndParams/index.tsx","config/lexics/filters.tsx","config/lexics/login.tsx","config/lexics/player.tsx","config/lexics/team.tsx","config/lexics/match.tsx","config/lexics/markers.tsx","config/lexics/tableParams.tsx","config/lexics/tableParamsShort.tsx","config/lexics/tableParamsNum.tsx","config/lexics/videoCuts.tsx","config/lexics/index.tsx","features/GearPopup/components/composed.tsx","features/GearPopup/components/index.tsx","features/GearPopup/components/PopupItem/index.tsx","features/GearPopup/models/gearPopupViews.tsx","features/GearPopup/models/gearPopupActions.tsx","features/GearPopup/models/GearPopupStore.tsx","config/tables.tsx","features/TableHeader/components/HeaderWithOpp.tsx","hocs/getDropdownBtnsHoc.tsx","features/TableHeader/components/HeaderWithAvatar.tsx","features/TableHeader/components/HeaderWithTeams/TeamCheckbox/index.tsx","features/TableHeader/components/HeaderWithTeams/index.tsx","features/TableHeader/components/index.tsx","hocs/withSpinnerWhileLoading.tsx","hocs/setSortedIdHOC.tsx","hocs/withMatchLinksGetter.tsx","features/Table/components/Table/composed.tsx","features/Table/models/tableActions/addTable.tsx","features/Table/models/tableActions/changeValueType.tsx","features/Table/models/tableActions/deleteTable.tsx","features/Table/models/tableActions/editTable.tsx","features/Table/models/tableActions/editTempTableName.tsx","features/Table/models/tableActions/moveTable.tsx","features/Table/models/tableActions/resetTable.tsx","features/Table/models/tableActions/saveTempParams.tsx","features/Table/models/tableActions/setActiveParam.tsx","features/Table/models/tableActions/index.tsx","features/Table/models/tableApiActions.tsx","features/Table/models/tableModel.tsx","features/TournamentPageMatchesTable/models/TournamentMatchesTableApiActions.tsx","features/TournamentPageMatchesTable/config/index.tsx","features/TournamentPageMatchesTable/models/TournamentMatchesTableActions.tsx","features/TournamentPageMatchesTable/models/TournamentMatchesTableViews.tsx","features/TournamentPageMatchesTable/models/TournamentMatchesTableStore.tsx","features/TournamentPageMatchesTable/components/index.tsx","module/utils/helpers/emptyStatToZero/index.tsx","features/ShowMoreBtn/index.tsx","hocs/getClickableTdClassNameHoc.tsx","features/TournamentPageMatchesTable/components/HOCs/TFootHOC.tsx","features/TournamentPageMatchesTable/components/LeftSideTr/composed.tsx","features/TournamentPageMatchesTable/components/LeftSideTr/index.tsx","features/TournamentPageMatchesTable/components/Tr/composed.tsx","features/TournamentPageMatchesTable/components/Tr/index.tsx","features/TournamentPageMatchesTable/components/TournamentTable.tsx","features/TournamentPagePlayersTable/models/apiActions.tsx","features/TournamentPagePlayersTable/models/actions.tsx","features/TournamentPagePlayersTable/models/views.tsx","features/TournamentPagePlayersTable/models/playersStore.tsx","features/TournamentPagePlayersTable/components/index.tsx","features/TournamentPagePlayersTable/components/LeftSideTr/composed.tsx","features/TournamentPagePlayersTable/components/LeftSideTr/index.tsx","features/TournamentPagePlayersTable/components/Tr/composed.tsx","features/TournamentPagePlayersTable/components/Tr/index.tsx","features/TournamentPagePlayersTable/components/TournamentPlayers.tsx","features/MatchProfileTable/components/Tr/composed.tsx","features/MatchProfileTable/components/Tr/index.tsx","features/MatchProfileTable/components/TableMatchWrapper/Table.tsx","features/MatchProfileTable/components/TableMatchWrapper/tableComposed.tsx","features/MatchProfileTable/components/TableMatchWrapper/index.tsx","features/CommonTable/HOCs/TFootHOC.tsx","features/CommonTable/Tr/composed.tsx","features/CommonTable/LeftSideTr/composed.tsx","features/CommonTable/LeftSideTr/index.tsx","features/CommonTable/Tr/index.tsx","features/CommonTable/index.tsx","features/Table/components/TableContent/index.tsx","features/Table/components/TableActions.tsx","features/Table/components/Table/index.tsx","features/Table/components/index.tsx","models/Widgets/PlayersCompare/apiActions.tsx","models/Widgets/PlayersCompare/actions.tsx","models/Widgets/PlayersCompare/views.tsx","models/Widgets/PlayersCompare/PlayersCompareStore.tsx","models/Widgets/PlayersCompare/index.tsx","models/StatsTable/TeamTable/TeamPlayers/TeamPlayersApiActions.tsx","models/StatsTable/TeamTable/TeamPlayers/TeamPlayersActions.tsx","models/StatsTable/TeamTable/TeamPlayers/TeamPlayersStore.tsx","models/StatsTable/TeamTable/TeamPlayers/index.tsx","models/SelectedMatches/SelectedMatchesActions.tsx","models/SelectedMatches/SelectedMatchesStore.tsx","models/SelectedMatches/index.tsx","models/TableReports/TableReportsApiActions.tsx","models/TableReports/TableReportsStore.tsx","models/TableReports/index.tsx","models/MatchProfile/MatchProfileApiActions.tsx","models/MatchProfile/MatchProfileStore.tsx","models/MatchProfile/index.tsx","models/ExternalVideoLinks/titles/getHeaderStatsTitle.tsx","models/ExternalVideoLinks/titles/getMapShootsTitle.tsx","models/ExternalVideoLinks/titles/getTableMatchesTitle.tsx","models/ExternalVideoLinks/titles/getTablesFooterTitle.tsx","models/ExternalVideoLinks/titles/getTeamPlayersTitle.tsx","models/ExternalVideoLinks/titles/getWidgetsTitle.tsx","models/ExternalVideoLinks/setTitle.tsx","models/ExternalVideoLinks/ExternalVideoLinksActions.tsx","models/ExternalVideoLinks/ExternalVideoLinksStore.tsx","models/ExternalVideoLinks/index.tsx","features/MapFilters/models/FiltersApiActions.tsx","features/MapFilters/models/FilterActions.tsx","features/MapFilters/models/FiltersStore.tsx","features/MapFilters/models/index.tsx","features/TeamsCompareWidget/models/TeamsCompareActions.tsx","features/TeamsCompareWidget/models/TeamsCompareApiActions.tsx","features/TeamsCompareWidget/models/TeamsCompareStore.tsx","features/TeamsCompareWidget/components/TeamsCompareStats.tsx","features/TeamsCompareWidget/components/TeamsCompareLogos.tsx","features/TeamsCompareWidget/components/TeamsCompareInfo/index.tsx","features/TeamsCompareWidget/components/TeamsCompareInfo/composed.tsx","features/TeamsCompareWidget/components/TeamsComparePopup/index.tsx","features/TeamsCompareWidget/components/TeamsComparePopup/TeamsComparePopupComposed.tsx","features/TeamsCompareWidget/components/TeamsCompareHeader.tsx","features/TeamsCompareWidget/config/index.tsx","features/TeamsCompareWidget/components/TeamsCompare/index.tsx","features/TeamPage/models/TeamProfileApiActions.tsx","features/TeamPage/models/TeamProfileStore.tsx","features/TeamPage/models/index.tsx","features/TournamentSeasonSelect/models/TournamentSeasonSelectApiActions.tsx","features/TournamentSeasonSelect/models/TournamentSeasonSelectActions.tsx","features/TournamentSeasonSelect/models/TournamentSeasonSelectStore.tsx","features/TournamentPage/models/TournamentPageApiActions.tsx","features/TournamentPage/models/TournamentPageStore.tsx","features/ErrorModel/index.tsx","features/FetchModel/index.tsx","features/MatchPagePlayers/models/matchPlayersStore.tsx","features/MatchPagePlayers/models/index.tsx","features/MatchPagePlayers/models/views.tsx","features/MatchPagePlayers/models/actions.tsx","features/MatchPagePlayers/models/api/fetchPlayersInfo.tsx","features/MatchPagePlayers/models/api/fetchPlayers.tsx","features/MatchPagePlayers/models/api/fetchTableStats.tsx","features/MatchPagePlayers/models/api/index.tsx","features/TournamentPageMatches/models/TournamentMatchesStore.tsx","features/TournamentPageMatches/models/TournamentMatchesApiActions.tsx","features/TournamentPageMatches/models/TournamentMatchesViews.tsx","features/TournamentPageMatches/models/index.tsx","features/TournamentHeaderStats/models/TournamentHeaderStatsApiActions.tsx","features/TournamentHeaderStats/models/TournamentHeaderStatsActions.tsx","features/TournamentHeaderStats/models/TournamentHeaderStatsStore.tsx","features/PlayerPageMatches/models/PlayerPageMatchesStore.tsx","features/PlayerPageMatches/models/baseActions.tsx","features/PlayerPageMatches/models/actions.tsx","features/PlayerPageMatches/models/apiActions.tsx","features/PlayerPageMatches/models/index.tsx","features/TeamPageMatches/store/model.tsx","features/TeamPageMatches/store/index.tsx","features/TeamPageMatches/store/actions.tsx","features/TeamPageMatches/store/apiActions.tsx","features/TeamPageMatches/components/index.tsx","features/stores/index.tsx","features/ProfilePopup/index.tsx","features/UploadVideoBtn/index.tsx","features/components/Home/Home.tsx","features/components/Header/Header.tsx","features/components/common/stats-tabs/LinksList/index.tsx","features/components/common/stats-tabs/StatsTabs.tsx","features/components/common/player/Header.tsx","features/components/common/map/Pointer.tsx","features/components/common/map/PlayerName/index.tsx","features/components/common/map/ToolTip/index.tsx","features/components/common/map/MarkerItem.tsx","features/components/common/map/Markers.tsx","features/components/common/map/SaveScreenShot/index.tsx","features/components/common/map/RangeSettingsPopup/index.tsx","features/components/common/video-player/PlayVideoBtn.tsx","features/MapControls/components/ControlsDropDown/index.tsx","features/MapControls/components/TeamsPopup/index.tsx","features/MapControls/components/config/directionsDropdown.tsx","features/MapControls/components/Directions/index.tsx","features/MapControls/components/Zones/index.tsx","features/MapControls/components/index.tsx","config/zones.tsx","features/components/common/map/ZoneStatistic/index.tsx","features/MapField/config/index.tsx","features/MapField/components/MapFieldSVG.tsx","features/MapField/components/FieldZones.tsx","features/MapField/components/MapField.tsx","features/MapFilters/components/config/index.tsx","config/lexics/filtersById.tsx","features/MapFilters/components/FilterItem/FilterMenu/FilterPopup/PopupHOC/index.tsx","features/MapFilters/components/FilterItem/FilterMenu/FilterPopup/ColumnsPopup/index.tsx","features/MapFilters/components/FilterItem/FilterMenu/FilterPopup/ZonesPopup/index.tsx","features/MapFilters/components/FilterItem/FilterMenu/FilterPopup/PopupSimple/index.tsx","features/MapFilters/components/FilterItem/FilterMenu/FilterPopup/PopupWithPlayers/index.tsx","features/MapFilters/components/FilterItem/FilterMenu/FilterPopup/PopupWithHomePlayers/index.tsx","features/MapFilters/components/FilterItem/FilterMenu/index.tsx","features/MapFilters/components/FilterItem/FilterSubMenu/index.tsx","features/MapFilters/components/FilterItem/index.tsx","features/MapFilters/components/index.tsx","module/utils/helpers/getPlayerFullName/index.tsx","features/components/common/widgets/PlayersCompare/PlayerName.tsx","features/components/common/widgets/PlayersCompare/PlayersSelect.tsx","features/components/common/widgets/PlayersCompare/PlayersStats.tsx","features/components/common/widgets/PlayersCompare/PlayersInfo/composed.tsx","features/components/common/widgets/PlayersCompare/PlayersInfo/index.tsx","features/components/common/widgets/PlayersCompare/PlayersComparePopup/index.tsx","features/components/common/widgets/PlayersCompare/PlayersComparePopup/PlayersComparePopupComposed.tsx","features/components/common/widgets/PlayersCompare/PlayerCompareHeader.tsx","features/components/common/widgets/PlayersCompare/config/index.tsx","features/components/common/widgets/PlayersCompare/index.tsx","features/components/common/widgets/Widgets/MatchWidgets.tsx","features/components/common/widgets/Widgets/index.tsx","features/components/common/player/PlayerField.tsx","features/components/common/Avatar.tsx","features/components/common/InfoItem.tsx","features/components/PlayerPage/PlayerCard/index.tsx","features/HeaderStatsItem/components/ToolTip.tsx","features/HeaderStatsItem/components/index.tsx","features/HeaderStatsList/index.tsx","features/components/PlayerPage/PlayerStatsWrapper/index.tsx","module/utils/dateHelpers.tsx","config/matchesSelection.tsx","features/components/common/SelectLabel.tsx","features/components/common/MatchCheckBox.tsx","module/utils/InfinityLoad.tsx","features/components/common/MatchSelectList.tsx","features/components/common/MatchSelectContainer/index.tsx","features/components/common/MatchSelect.tsx","features/components/common/video-cuts/FilterCheckbox.tsx","features/components/common/video-cuts/FilterPopup.tsx","features/components/common/video-cuts/Checked.tsx","features/components/common/video-cuts/FilterElement.tsx","features/components/common/video-cuts/TableButtons.tsx","features/components/common/video-cuts/VideoCutsContainer.tsx","features/components/common/video-cuts/VideoCuts.tsx","features/PlayerPageMatches/components/index.tsx","features/components/PlayerPage/PlayerPageComposed.tsx","features/components/PlayerPage/PlayerPage.tsx","features/TeamPage/components/TeamPlayers/PlayerTrComposed.tsx","features/TeamPage/components/TeamPlayers/TdWrapper/index.tsx","features/TeamPage/components/TeamPlayers/PlayerTr.tsx","features/TeamPage/components/TeamPlayers/PlayersList.tsx","features/TeamPage/components/TeamPlayers/PlayersTable/composed.tsx","features/TeamPage/components/TeamPlayers/PlayersTable/PlayersTableHeader/index.tsx","features/TeamPage/components/TeamPlayers/PlayersTable/PlayersTableHeader/composed.tsx","features/TeamPage/components/TeamPlayers/PlayersTable/index.tsx","features/TeamPage/components/TeamPlayers/index.tsx","features/TeamPage/components/teamPageComposed.tsx","features/TeamPage/components/TeamCard.tsx","features/TeamPage/components/TeamStatsWrapper/index.tsx","features/TeamPage/components/TeamPageHeader.tsx","features/TeamPage/components/TeamPage.tsx","features/components/MatchPage/Header/VideoLinks/VideoLinks.tsx","features/components/MatchPage/Header/MatchInfo/MatchScore/MatchScore.tsx","features/components/MatchPage/Header/MatchInfo/MatchInfo.tsx","features/components/MatchPage/Header/index.tsx","features/components/MatchPage/MatchPageComposed.tsx","features/components/MatchPage/MainContent/index.tsx","features/components/MatchPage/MainContent/composed.tsx","features/components/MatchPage/MatchPage.tsx","features/DropDownSimple/components/DropDownItem.tsx","features/DropDownSimple/components/index.tsx","features/TournamentSeasonSelect/components/index.tsx","features/TournamentHeaderStats/components/index.tsx","features/TournamentSeasonSelect/models/index.tsx","features/TournamentPage/components/TournamentPageInfo.tsx","features/TournamentHeaderStats/models/index.tsx","features/TournamentPage/components/TournamentPageHeader.tsx","config/lexics/tournamentPage.tsx","features/TournamentPage/components/composed.tsx","features/TournamentPage/components/index.tsx","features/components/App/App.tsx","features/TournamentPage/models/index.tsx","features/index.tsx","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","API_ROOT","dataURL","concat","beta","routes","profilePaths","header_upload_video","fieldSize","STANDART","width","length","area","markersWithoutOpponentSide","key","props","checkTab","_ref4","c_action","ownSideMarkers","createHistory","BasicStore","stores","Object","classCallCheck","this","allStores","storeName","tabs","tabsForAmplua5","tabsForAmplua6","tabsForAmplua7","tabsForAmplua8","actions","attack","attack_reception","block","pass","serve","serve_reception","defaultDirections","from","to","mainPageTabs","exact","lexics","link","pages","Tabs","page","getStore","_this$getStore2","isFetching","profile","amplua","observable","computed","action","tab","_this2","active","filters","clear","procedures","player","team","fields","MatchesStore","_onSuccess","json","pageId","setTempSelected","setOpened","data","map","pageProfile","get","assertThisInitialized","_this","matches","offset","list","uniqBy","next","error","firstLoad","_onError","limit","_params","dateFrom","arguments","undefined","dateTo","filteredMatches","filter","_ref","matchDate","match_date","m","isBetween","url","config","method","body","JSON","stringify","proc","params","defineProperty","utils","callApi","onRequest","onSuccess","onError","_this3","fetch","_this4","opposite","wingSpiker","middleBlocker","setter","libero","PlayerProfileStore","changeActive","setDefaultDirections","playerId","player_id","headerPlayerParams","4","lexic_id","param_id","percent","8","6","5","7","additional_params","team_params","zone_params","middleOptions","positions","from_x","from_y","to_x","to_y","attack_with_middle_point","middle_x","middle_y","fetchProps","mapShoot","playerInfo","commonExtraCheckMarkers","157","group","values","158","159","playerExtraCheckMarkers","objectSpread","231","51","teamExtraCheckMarkers","attackZone","attackZoneSpecial","frontLineParams","backLineParams","allBlocks","fieldLines","ALL_LINES","BACK_LINE","FRONT_LINE","zones","ATTACK_ZONE","ATTACK_ZONE_SPECIAL","SERVE_ZONE","blockTypes","ALL_BLOCKS","sets","ALL_SETS","FIRST_SET","SECOND_SET","THIRD_SET","dateWithYear","date","year","format","getSuffix","lang","getLongSuffix","cmToFt","cm","resArr","toFixed","toString","split","noImages","tournament","setCoord","pos_x","pos_y","opponentSide","field","_fieldSize$field","x","y","clamp","convertArrToObj","arr","obj","forEach","item","shifted","slice","applyMarkersState","markers","types","marker","actionTypes","_ref8","convertedProps","prop","_ref9","action_type","c_match_event_prop","c_match_event_prop_value","currentProp","includes","ownSide","some","dontShowOpponentSide","isPlainObject","getPlayers","propList","players","_ref10","convertedProp","push","getAbbr","string","strArr","word","charAt","join","toUpperCase","substring","filterDBStats","_ref15","f_option_0","f_option_3","f_option_5","f_param","f_variant_zone","fieldLine","zone","saveTablesToLocalStorage","_ref16","name","tables","table","parse","window","localStorage","getItem","setItem","getDeleteBtn","deleteTable","size","position","t","buttonType","tableHeaderButtons","handleNewPopupAction","moveTableUp","moveTableDown","resetTable","compact","PlayerStatsApiStore","stats","selectedMatches","playerTypeId","playerParams","_v_match_id","_v_player_id","_v_param_id","PlayerStatsHeaderStore","PlayerStatsHeaderApiStore","TeamStatsApiStore","teamId","teamParams","_v_team_id","TeamStatsHeaderStore","InfoItem","tooltips","preventDefault","clickCnt","Markers","superclass","_class","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_superclass","_getPrototypeOf2","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","initializerDefineProperty","inherits","createClass","checked","store","bind","select","visible","isEmpty","getMarkers","checkedFilters","applyDecoratedDescriptor","prototype","configurable","enumerable","writable","initializer","getOwnPropertyDescriptor","checkMarker","c_match_event_prop_value2","c_match_event_prop2","f_player","filterId","property1IsTrue","find","_ref2","_ref3","slicedToArray","propGroup","propValue","property2IsTrue","_ref5","_ref6","doubleKeyFiltration","additionalCheck","extraCheckMarkers","_extraCheckMarkers$fi","every","groupItem","_ref11","_ref12","valueCheck","_ref13","value","_ref17","singleKeyFiltration","mapForCheck","property","groupedFilters","groups","groupName","groupFilters","markersFilteredByGroup","entries","markersToArray","result","_ref7","markersGroup","neededFilters","pickBy","parseInt","linkedMarkers","toConsumableArray","uniq","MarkersFiltration","Marker","Marker_descriptor","Marker_descriptor2","assign","withMiddlePoint","_getPoints","point","middle","points","coord","p","getPoints","pos_from_x","pos_from_y","pos_middle_x","pos_middle_y","pos_to_x","pos_to_y","getToolTipResult","resultList","markersWithResult","prop_id","prop_value_id","result_lexic","lexical_formula","ToolTipActions","loaded","_p_action_result","remoteUtils","_onRequest","setMarkerPlayer","isBlock","markersWithName","playerSource","currentPlayerName","prop_player","playerName","getToolTipName","playerIdList","FetchPlayerInfo","basicLoaded","basicData","reject","Promise","getPlayersIdList","getFilteredMarkers","_p_player_id","_basicRequest","_basicError","_basicSuccess","propsList","excludePlayer","remove","getToolTipOpponentTeam","teams","markersWithOpponentTeam","f_team_opponent","opponentTeam","FetchMapShoot","objectWithoutProperties","_p_team_id","_p_match_id","getBody","_p_match_arr","_p_date_from","_p_date_to","_p_c_action_arr","FetchMarkers","setMarkers","_onSuccess2","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","basicFetch","stop","_x","_x2","Actions","defaultDirectionsActive","forIn","handleDirection","setRect","rectWidth","rectLength","fieldWidth","fieldLength","x1","x2","y1","y2","setAllVisible","xStart","min","xEnd","max","yStart","yEnd","xStartAbs","xEndInAbs","yStartInAbs","yEndInAbs","markersType","toPairs","directions","direction","_get","xCoordAbs","yCoordAbs","inRange","setVisible","_this5","ComposeMarkers","compose","MarkersStore","setParam","Zones","zoneStats","successActions","totalActions","total","_this6","ZoneActions","left","right","FetchShotType","MapShootStore","reduce","acc","PlayerInfoStore","ToolTipStore","ShootsRangeStore","after","before","setBefore","setAfter","isOpened","allPossession","range","setVideoStart","setVideoEnd","RangeActions","VideoCuts","buttons","event_prop","event_value","moment","duration","events","sumRange","PopupItem","PopupItem_descriptor","PopupItem_descriptor2","PopupItem_descriptor3","lexicalFormula","Button","Button_descriptor","Button_descriptor2","Button_descriptor3","Button_descriptor4","popup","popup_lexic","popupItems","oldActive","currentBtn","setChecked","activeItems","activeItem","popupItem","VideoCutsMixin","_onSuccessButtons","newButtons","lexicIds","_value$","button","button_lexic","buttonInfo","phrases","lexicFetch","rootUrl","uncheckAll","ComposeVideoCuts","MatchLinksStore","links","match_id","type","TableReportsStore","getReportInfo","tableType","commonTable","commonMatches","commonShowOpponentStats","tableReportOptions","matchPlayersTable","playerMatches","showOpponentStats","teamMatches","tournamentMatches","tournamentPlayers","tournamentTeams","_this2$getStore","getLexics","currentProfile","_this2$getReportInfo","setSortBy","sortAsc","activeId","flag","param","prepareConfig","default","lang_id","selectedParams","summaryType","tableName","is_show_opponent","Number","is_total","Boolean","paramId","getParamObj","sortby","team1_id","team2_id","preparedTables","teamsSelection","showHomeTeam","showOppTeam","getConfig","uri","then","response","blob","catch","MatchPopup","withHandlers","clickOutside","toggleClose","OutsideClick","MatchPopupComposed","f_match","react_default","createElement","className","cx","popup-container__loading","k","target","rel","href","dist","Link","TBody","observer","withProps","rows","sortType","rowsList","orderBy","row","sortBy","tBodyComposed","tableStats","Tr","trItem","rowInfo","lastElemsInGear","rest","percentageParams","gearColumnsList","0","num","getDigits","getFilteredStatsByParamId","getSummaryStatValue","filteredStats","filteredStatsCount","curr","average_for_match","TFoot","setSummaryType","setType","tFootComposed","getActualMatchesList","getClassName","getExtLink","_ref$table","placeholder","onClick","gear_group_id","forOpps","THead","setSortedId","THeadComposed","react","full_lexical_formula","short_lexical_formula","Loader","TdLoader","_ref$className","common_loader_Loader","getStatValue","getExtLinkHOC","inject","withState","shootsRange","toggleLinkIsFetching","request","videoLink","match","playListType","f_match_event_ids_json","event","matchInfo","playListTypes","TdComponent","handleClick","linkIsFetching","TdLoader_TdLoader","Td","_ref$type","preparedStats","matchId","f_team","tournamentMatchesTotal","getStatsFilterOptions","defaultOptions","suffix","firstName","lastName","prepareExtLinkArgs","tdComposed","EditableInput","withStateHandlers","newName","changeTableName","handleFixName","editTableName","editTempTableName","gearPopupStore","handleShowInput","newPopup","enterPress","editableInputComposed","handleFocus","onFocus","onKeyPress","tabIndex","onChange","EditTableName","getTableName","tempTableName","_ref3$currentStore","currentStore","editTable","setShowInput","n","handleTranslateName","EditTableNameComposed","showInput","RangeSettings","onBlurHandler","onChangeHandler","rangeAfter","rangeBefore","onBlur","rangeSettingsHoc","setRangeState","setRangeAfter","setRangeBefore","_ref4$shootsRange","_e$target","newValue","RangeSelector","rangeSelectorEnhanced","RangeSettings_RangeSettings","GearTable","ampluaId","getCurrentGroupInfo","gearParams","getGroupTempSelected","tempSelected","groupParams","isActive","massCheck","_ref6$gearPopupStore","addToTempSelected","removeFromTempSelected","gearTableComposed","checkbox-label_active","components_PopupItem_PopupItem","last","hasOwnProperty","COMMAND_PUSH","COMMAND_UNSHIFT","COMMAND_SPLICE","COMMAND_SET","COMMAND_MERGE","COMMAND_APPLY","ALL_COMMANDS_LIST","ALL_COMMANDS_SET","invariantArrayCase","spec","command","invariant","isArray","specValue","update","nextValue","_assign","constructor","mergeObj","unshift","_nextValue","splice","cardTarget","hover","monitor","component","dragIndex","index","hoverIndex","hoverBoundingRect","findDOMNode","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","moveCard","dndItemComposed","removeParam","pure","DropTarget","connect","connectDropTarget","dropTarget","DragSource","beginDrag","connectDragSource","dragSource","isDragging","DndItem","style","opacity","DndParamsComposed","getId","moveHandler","_ref3$gearPopupStore","fillTempSelected","updatedTempParamsList","$splice","DndParams","_ref$gearPopupStore","lexics_filters","ace","ace_1","ace_for_lose","ace_from_grid","ace_with_touch","advanced_zones","alignment_mistake","all_assistance","all_attack_receptions","all_attacks","all_blocks","all_passes","all_serve_receptions","all_serves","amplua_who_blocked","amplua_who_is_attacking","amplua_who_passed","amplua_who_served","assist","attack_direction","attack_receive_in_zone","attack_reception_result","attack_type","attack_which_receipt","attacks_from_zone","attacks_on_amplua","attacks_to_zone","bad","bad_pass","ball_on_own_side","basic_zones","binding_player","binding_player_attack","block_assists","block_attempt","block_earned_points","block_out","block_out_or_in_your_own_area","block_played_by_striker","block_property","block_type","blocked_players","blocked_second_pass","blocked_shot","bottom_side","bounced_back_from_the_block","center_player","center_player_amplua","central_player_attack","characteristic","coasting","combination","cover","cross","deceptive_shot","deep","deep_serve","defender_out","dense","diagonal_player","diagonal_player_attack","difference","difference_of_attacks","differences","dig","double_back","double_front","finishing_player_attack","first_ball_attackers_home","first_ball_attackers_opp","foot_fault","for_1_block","for_2_blocks","for_3_blocks","four_hits","free_shot","from_zone","good","good_pass","grid_touch","half_power_shot","line_overstep","lose_point","mistake","mistake_while_pass","mistake_while_serve","negative_reception","net_touching","no_value_attacks","on_clean_grid","on_court","opponent","opponent_court","opponent_finished","opponent_side_play","opponents_count","opponents_out_shots","organized","other_body_side","other_players","outside_player","part","pass_direction","pass_from","pass_to","pass_type","pass_types","pass_zone","pipe","pipe_5","planned_attack","planning","position_1","position_2","position_3","position_4","position_5","position_6","positioning","positive_reception","power","power_attack","power_attack_1","power_shot","receive_type","receiver_mistake","reverse_cross","rise","rise_over_head","roll_forward","run_forward","serve_receive_zone","serve_type","serving","short","short_serve","shot_out","simple","soften","softening","splited","step_over","technique_difference","temp","temp1","temp2","to_grid","to_out","to_whom","to_zone","top_side","touched_grid_by_blocker","tough","unforced_opponent_mistakes","wave","which_pass","which_receipt","while_falling","who_attacked","who_attacking","who_blocked","who_blocking","who_else_on_court","who_gave_pass","who_is_attacking","who_is_blocking","who_is_passing","who_is_serving","who_received","who_received_amplua","who_served","who_served_list","with_block_touching","with_blocker_touching","with_step_out","without_zone","won_point","zero_attack","zero_block","zero_block_1","zero_serve","zone_1","zone_2","zone_3","zone_4","zone_5","zone_6","login","contact_us","enter_email","enter_pass","force_aware","force_submit","force_text","log_in","problems_with_sign_in","server_error","sign_in","sign_in_pro","terms_and_conditions","terms_must_be_accepted","try_instat","wrong_sign_in","lexics_player","tabs_matches","header_my_video","header_my_profile","header_quit","header_team","header_nationality","header_league","header_team_level","header_age","header_contract","header_bodyPart","header_position","header_goals","header_skills","header_instat_index","header_statistics","header_playlists","header_shared_episodes","f_goals","match_show_opponent","average_for_match_opp","home","visitors","total_attack_eff","attack_points","positive_def_receiption","positive_serve_receiptions","setting_assist","setting_assist_percents","good_bad_sets","block_touch_for_own_rally","positive_receiption","params_matches_points","params_matches_rebounds","params_matches_assist","params_matches_steals","params_matches_turnover","average_for_90","group_param_picking_up","group_param_boxscore","group_param_combinations_and_iso","group_param_shots_types","group_param_add_data","amplua_center_short","amplua_pforward_short","amplua_lforward_short","amplua_sguard_short","amplua_pguard_short","header_field_goals_percent","header_3pt_shots_percent","header_free_throws_percent","header_card_age","header_card_birth_data","stat_year","stat_sm","stat_foot","stat_pound","stat_kg","tp_stat_height_sm","tp_stat_height_foot","tp_stat_weght_lbs","tp_stat_weght_kg","match_select_3","match_select_5","match_select_10","match_select_all_season","match_select_this_year","match_selected","match_select_this_season","boxscore_selected_params","boxscore_sec_before","boxscore_sec_after","boxscore_all_range","boxscore_setting_all_ep","boxscore_protocol","boxscore_efficiency","boxscore_combinations","boxscore_with_fouls","boxscore_deff_combine","boxscore_date","boxscore_main_statistics","boxscore_pass","boxscore_challenges","boxscore_lost","boxscore_press","shoots_goals_opponent","shoots_goals","shoots_without_zones","shoots_basic_zones","shoots_extend_zones","shoots_2x_goals","shoots_3x_goals","shoots_opened","shoots_closed","table_popup_dnd_info","match_popup_full_game","match_popup_ball_in_play","match_popup_all_time_player","match_popup_rifling_attack","match_popup_rifling_defense","lexics_team","show_photo","matches_table","players_table","match_show_all_teams","team_leaders","439","441","3178","1327","92","594","755","653","total_attack_points","boxscore_on_average","boxscore_attack","boxscore_flangs","boxscore_type_attack","average_assists","shoots","shoots_opponent","shoots_gate","shoots_field","tabs_players","tabs_lineups","lexics_match","teams_statistic","lexics_markers","tooltip_fault","tooltip_opponent_side_receive","tooltip_positive_receive","tooltip_handled_by_attacker","tooltip_ace","tooltip_ace_player","tooltip_ace_from_grid","tooltip_arrangement_mistake_receive","tooltip_arrangement_mistake","tooltip_good_pass","tooltip_bad_pass","tooltip_point_area","tooltip_lost_point","tooltip_lost_point_out","tooltip_lost_point_block","tooltip_point_block","tooltip_useless_opponent_attack","tooltip_lost_point_overstep","tooltip_point_deffender","tooltip_own_useless_attack","tooltip_lost_point_grid","tooltip_lost_point_grid_touch","tooltip_block_area","tooltip_useless_block_softed","tooltip_lost_point_second_pass","tooltip_lost_point_attack","tooltip_useless_opponent_block","tooltip_out_lost_point","tooltip_overstep_lost_point","tooltip_grid_lost_point","tooltip_serve_fault","tooltip_serve_another_fault","tableParams","main_statisctic","total_points_won","attack_realisation","block_points","aces","back_row_attack_eff","positive_attack_receiption","positive_defence_receiption","all_mistakes","attack_mistakes","block_mistakes","serve_mistakes","attack_receiption_mistakes","defence_receiption_mistakes","receive_mistakes","pass_assist","pass_assist_percents","plus_minus_title","plus_minus","attack_play","attacks","attack_points_percents","attack_mistakes_percents","blocked_attacks","blocked_attacks_percents","first_serve_attacks","first_serve_attacks_points","first_serve_attacks_points_percents","first_serve_attacks_mistakes","first_serve_attacks_mistakes_percents","first_serve_attacks_blocked","first_serve_attacks_blocked_percents","positive_receiption_attacks","positive_receiption_attacks_points","positive_receiption_attacks_points_percents","positive_receiption_attacks_mistakes","positive_receiption_attacks_mistakes_percents","positive_receiption_attacks_blocked","positive_receiption_attacks_blocked_percents","first_line_attacks","first_line_attacks_points","first_line_attacks_points_percents","first_line_attacks_mistakes","first_line_attacks_mistakes_percents","first_line_attacks_blocked","first_line_attacks_blocked_percents","negative_receiption_attacks","negative_receiption_attacks_points","negative_receiption_attacks_points_percents","negative_receiption_attacks_mistakes","negative_receiption_attacks_mistakes_percents","negative_receiption_attacks_blocked","negative_receiption_attacks_blocked_percents","back_line_attacks","back_line_attacks_points","back_line_attacks_points_percents","back_line_attacks_mistakes","back_line_attacks_mistakes_percents","back_line_attacks_blocked","back_line_attacks_blocked_percents","serves","negative_receiption_serves","positive_receiption_serves","force_serves","force_serves_eff","planned_serves","planned_serves_eff","serve_play","serves_receiption","negative_serves_receiption","positive_serves_receiption","defence_serve","positive_defence_serve","negative_defence_serve","block_play","passes","assists","assists_mistakes","positive_passes","negative_passes","to_back_line_passes","to_first_line_passes","rallies_won","points_difference","tableParamsShort","8731","8140","8204","8732","7892","8128","8272","8733","8141","8208","7891","8123","8268","8281","8830","8246","8634","8734","8735","8736","8737","8738","8739","8740","8741","8742","8743","8744","8201","8745","8746","8730","8747","8751","8752","8753","8754","8755","8757","8758","8759","8760","8761","8762","8763","8764","8765","8766","8767","8768","8769","8770","8771","8772","8773","8774","8775","8776","8777","8778","8779","8780","8781","8782","8783","8784","8785","8787","8788","8789","8790","8791","8792","8793","8794","7896","7920","8117","7894","7912","8109","8120","8795","8796","8124","8135","8797","8136","8265","8273","8798","8799","8271","8209","8800","8801","8802","8803","8805","8239","8241","8240","8807","8809","8811","8820","8821","8813","8814","8822","8815","8816","8823","8817","8247","8826","8827","8251","8828","8829","9774","tableParamsNum","8724","8725","8617","8726","8727","8053","8806","8808","8810","8812","8818","8819","8952","9006","8954","9007","8487","8022","8496","8956","8957","8958","8959","8960","8961","8962","8963","8964","8965","8966","8967","8968","8969","8970","8971","8972","8973","8974","8975","8976","8977","8978","8979","8980","8981","8982","8983","8984","8985","7933","8543","8986","8987","8988","8989","7917","7911","7958","8992","8993","8096","8995","8994","8059","8058","8054","8662","8996","8997","8998","8999","9000","9001","9002","9003","9004","9005","9473","9470","8859","videoCuts","video_cuts","offensive","deffensive","cuts_favorite_play_list","cuts_positional_atack","cuts_free_throws","cuts_blocks","cuts_fouls","cuts_fouls_drawn","cuts_video_summary","cuts_off_actions","cuts_deff_actions","cuts_partner","cuts_opponent","indexLexic","video_actions","video_select_all_actions","video_select_partner","video_select_opponent","video_reload","video_reset_filters","enter_team_or_player","header_recently_visited","header_my_players","header_invite_players","header_comments","header_flag_search","header_online_translation","header_men","header_women","boxscore_play_video","episodes_duration","user_settings_duration","default_settings_duration","boxscore_popup_subtitle","Playtype","Isolations","Transition","Pick_n_rolls_handler","Post_up","Cuts","Catch_and_shoot","Put_back","Catch_and_drive","Pickn_Pop","Hand_offs","Screens","Miscellaneous","Pick_n_rolls_roller","reset_tables","new_table","main_statistics","passes_table","passes_table_gk","shots_table","shots_table_gk","challenges","add_table","remove_table","move_table_down","move_table_up","downloadXLS","downloadPDF","vertical_view","horizontal_view","markers_from","markers_to","full_trajectory","match_popup_highlights","match_popup_pure_time","match_popup_goals","match_popup_pdf","match_popup_details","cancel","ok","show_more","7341","gearPopupComposed","getTable","onApply","_ref$currentStore","addTable","saveTempParams","eraseTempSelected","handlePopupAction","playerProfile","localStorageName","onClose","lifecycle","componentDidMount","_this$props","GearPopup","popupItemComposed","checkActive","_ref2$gearPopupStore","isActiveParam","data-name","gearPopupViews","model","volatile","gearPopupActions","self","toJS","isEqual","erase","GearPopupStore","tableLexics","tableStatsTypes","tableTypes","HeaderWithOppComposed","setShowOppStat","toggleShowOpponent","HeaderWithOpp","getDropdownBtnsHoc","getDropdownBtns","reverse","HeaderWithAvatarComponent","avatarIsVisible","toggleShowAvatar","setTypeHandler","HeaderWithAvatarComposed","changeValueType","HeaderWithAvatar","teamCheckbox","status","ckeckboxClassName","TeamCheckbox","teamName","headerWithTeamsComposed","matchProfile","teamsInfo","opp","toggleCheckTeam","matchTable","updatedTeamsId","without","HeaderWithTeams","tableHeaderComposed","TableHeader","withSpinnerWhileLoading","isLoading","branch","renderComponent","setSortedIdHOC","_ref$param","_ref$sortAsc","changeActiveParam","newParam","storeAction","clickOnNewParam","sortIsNeedReset","clickCases","newParamClicked","simpleClick","withMatchLinksGetter","getPost","matchLinks","matchPopupOpened","tableComposed","playerTable","_ref$tableType","teamPlayers","teamTable","tournamentMatchesTableStore","tournamentPlayersTableStore","getLinks","_ref3$tableReports","tableReports","pdfIsFetching","xlsIsFetching","xls","pdf","openNewPopup","openPopup","saveReport","getReport","teamProfile","tournamentsProfile","tournaments","document","getElementById","Date","URL","createObjectURL","download","getDate","getMonth","getFullYear","click","setActiveParam","tablesList","omitedTables","omit","updatedTables","moveTable","_objectSpread2","_objectSpread3","tableCount","currentTable","prevTable","nextTable","removeItem","saveTables","tableActions","tableApiActions","getGearParamsList","_v_amplua_id","_onSuccessGearParams","totalParams","fetchGroups","_onSuccessGroups","current","group_id","String","group_lexical_formula","Param","clickable","number","gear_subgroup_id","is_default","maybeNull","param1_id","array","param2_id","identifierNumber","sort_order","GearParam","ParamGroup","group_name","TableCommon","frozen","paramGroups","union","TableStore","TournamentMatchesTableApiActions","fetchTableInfo","flow","fetchTableParams","paramsList","summarySelectedParamsFromTables","defaultParams","matchesToFetch","partFetching","_onSuccesTableParams","flatten","canFetch","isLoaded","TournamentMatchesTableActions","defaultTable","1","addOffset","TournamentMatchesTableViews","views","paramsSummary","currentTableSelectedParams","actualMatchesList","take","getParent","matchesTotal","matchesIds","chunk","ParamExtended","f_match_event_ids","f_option_1","f_option_2","f_option_4","f_option_6","param_name","TournamentMatchesTable","TournamentMatchesTableStore","TournamentMatchesComposed","tournamentId","_ref$tournamentMatche","components_Tables","emptyStatToZero","ShowMoreBtn","show-more-btn_loading","clickableClassNameHOC","cell","clickable-cell","percents","sorted-by","tfootComposed","teamTableStats","filteredEvents","TFootComponent","leftSideTrComposed","_ref$rowInfo","opponent_score","score","oppTeamName","rowspan","titleClassName","showOpponent","ownerTeamName","titleScore","shortName","shortNameOpponent","has_video","LeftSideTr","_ref$match","LeftSideTrWrapper","rowSpan","PlayButtonWrapper","MatchDate","MatchNameWrapper","MatchScoreWrapper","MatchScoreForOppWrapper","MatchAbbrName","side","TrComposed","_ref$matchLinks","team_id","opp_team_id","tournamentTableComposed","getMatchesList","_ref2$tournamentMatch","sortedValue","TournamentTable","Thead","TFootHOC_TFoot","ShowMoreBtn_ShowMoreBtn","TournamentPagePlayersApiActions","seasonId","_p_tournament_id","_p_season_id","_onSuccesPlayers","TournamentPagePlayersActions","TournamentPagePlayersViews","o","v","Player","shirt_num","name_rus","name_eng","pos1","TournamentPagePlayersTable","TournamentPlayersTableStore","TournamentPlayersTableComposed","tournamentSeasonSelect","selectedSeason","season_id","TournamentPlayersTable","_ref$tournamentPlayer","avatarUrl","helpers","getLogo","playerProfileLink","shirtNumber","LeftSideTrPlayersWrapper","ResultsAvatar","src","onProfileImageError","PlayerNumber","PlayerName","getStat","LeftSideTr_LeftSideTr","tournamentPlayersComposed","getPlayersList","TournamentPlayers","TrMatchComposed","TrMatch","Table","_ref$matchTable","playerList","playerListByTeams","activeTeams","teamsPlayersStats","filteredPlayerStats","TableMatchWrapper","_ref$matchProfile$dat","TfootComposed","_ref$lexics","forOpp","flat","selectedMatchesList","trComposed","selectedParamsIds","matchesList","tableStatsReduced","guest","home_match","tdClassName","MatchSide","CommonTable_LeftSideTr_LeftSideTr","CommonTable","tableStatsFiltered","CommonTableComposed","HOCs_TFootHOC_TFoot","TableContent","esm_extends","tableContentComposed","TableActions","_ref4$currentStore","_ref5$currentStore","_ref6$currentStore","TableActionsComposed","newPopupOpened","popupOpened","reportHandle","Tables","Table_Table","PlayersCompareApiActions","defaultPlayers","fetchPlayers","updateSelectedPlayers","setDefaultSelectedParams","t0","_p_player_arr","selectedPlayers","_p_param_arr","_p_lang_id","playersInfo","pick","_v_played","_onSuccessPlayers","PlayersCompareActions","newSelectedPlayers","getParamsIds","defaultIds","PlayersCompareViews","sortedStats","ids","findIndex","Stat","param_name_short","PlayersCompare","boolean","PlayersCompareStore","create","TeamPlayersApiActions","fetchParams","_onSuccessParams","_p_params_arr","matches_count","averageValue","paramGroupsError","serializedParams","fetchEvents","_p_matches","_p_param_id","_onSuccessEvents","TeamPlayersActions","editTempSelected","_ref3$localStorageNam","_objectSpread6","_objectSpread7","showAvatarToggle","PlayerParam","data_type","option","nickname_eng","nickname_rus","short_name_eng","short_name_rus","TeamPlayers","TeamPlayersStore","SelectedMatchesActions","setSelected","selected","setPeriod","period","selectedPeriod","toggleSelect","opened","onCloseActions","matchesListDidUpdate","_stores$selectedMatch","isPlayerPage","fetchMarkers","eraseAllData","fetchHeaderStats","playerStats","fetchTableStats","teamStats","teamIds","eraseHeaderStats","deleteMarkers","SelectedMatches","SelectedMatchesStore","TableReportsApiActions","fetchData","options","test","changeFetchingStatus","TableReports","MatchProfileApiActions","fetchPeriods","fetchVideoLinks","_onSuccessPeriods","periods","res","_onSuccessVideoLinks","videoLinks","MatchProfile","MatchProfileStore","getHeaderStatsTitle","matchesCount","matchName","paramName","simpleName","playlist_title","playlist_subtitle","getMapShootsTitle","activeTab","getMatchInfo","getTeamOrPlayerMapShootsTitle","_getMatchInfo","activeTeam","oppTeamScore","teamScore","getTableMatchesTitle","longSuffix","title","getTablesFooterTitle","getTeamPlayersTitle","getWidgetsTitle","widgetType","playersCompare","teamsCompare","_getMatchInfo2","setTitle","_ref$tab","_stores$lexics","textForms","dividedBy10","Math","abs","num2str","pop","score_team1","score_team2","tablesFooter","widgets","mapShoots","headerStats","titleTypes","ExternalVideoLinksActions","_ref$lexical_formula","_ref$matchesCount","_ref$matchId","_ref$widgetType","allRange","offset_start","offset_end","open","ExternalVideoLinks","ExternalVideoLinksStore","FiltersApiActions","FilterActions","tempSelectedFilters","toggleOpenMenu","handleTempCheck","popupType","tempClone","filterInfo","findFilterInfo","has","handleAllTempCheck","handleUncheck","checkedCloned","homePlayers","getIdFromString","newObj","FilterElem","filter_name","Filters","FiltersStore","tempChecked","TeamsCompareActions","teamsInfoLoaded","userConfirmedParams","paramsIdList","fetchStats","TeamsCompareApiActions","_p_team_arr","TeamsCompare","TeamsCompareStore","TeamsStats","team1","team2","TeamsCompareLogos","getImage","alt","TeamsCompareInfo","getTeamParams","teamsCompareWidget","hasVideo","t-compare__clickable-cell","getSortedStats","_ref5$teamsCompareWid","uniqStats","indexOf","teamsCompareInfoComposed","components_TeamsCompareLogos","TeamsCompareStats","TeamsComparePopupComposed","TeamsCompareHeaderComposed","components_TeamsComparePopup","currentLang","componentDidUpdate","prevProps","_this$props2","_this$props2$teamsCom","TeamsCompareComposed","_ref$teamsCompareWidg","TeamsCompareHeader","TeamProfileApiActions","scout_team_inf","TeamProfile","TeamProfileStore","TournamentPageApiActions","fetchSeasons","_onSuccessSeasons","season","seasons","set","defaultSeasonId","head","changeActiveSeason","TournamentSeasonSelectActions","getRoot","fetchMatchesInfo","seasonsList","Season","season_name","TournamentSeasons","TournamentSeasonsStore","TournamentSeasonSelectApiActions","fetchTournamentProfile","TournamentPage","TournamentPageStore","message","stack","maybe","ErrorModel","setError","getPlainError","FetchModel","setIsLoaded","PlayerData","firstname_eng","firstname_rus","lastname_eng","lastname_rus","PlayerSimpleModel","teamsId","setTables","filteredParams","updatePlayerProfile","currentTeamPlayers","updatedPlayers","_onSuccessPlayersInfo","fetchPlayersInfo","type_player","playersPlayedThisMatch","_onSuccessStats","Match","match_status","win_lose","name_ru","name_en","name_opponent_ru","name_opponent_en","params_opp","TournamentMatches","TournamentMatchesApiActions","_onSuccessMatchesInfo","TournamentMatchesViews","TournamentMatchesStore","TournamentHeaderStatsApiActions","fetchHeaderParams","_onSuccesHeaderParams","allEvents","currentEvents","count","TournamentHeaderStatsActions","countAverageStatValue","denominator","TournamentHeaderStats","TournamentHeaderStatsStore","PlayerPageMatchesBaseActions","saveToStorage","moveTypes","PlayerPageMatchesApiActions","keyNum","_objectSpread4","_objectSpread5","fetchPlayerMatches","playerMatchesStore","teamMatchesStore","setTableStats","fetchTeamMatches","TeamPageMatches","selectedMatchesIds","allMatches","opponentsIds","teamPageMatchesComposed","remoteStore","Lexics","locale","VideoSummaries","mstRootStore","optional","TournamentSeasonSelectStore","tournamentHeaderStats","playersCompareWidget","tableReportsMST","tutorials","Matches","liveSearch","LiveSearch","sport","infoItem","MatchLinks","PlayerProfile","PlayerStats","TeamStats","shotTypes","ShotTypes","MapShoot","PlayerInfo","ToolTips","ShootsRange","videoPlayer","VideoPlayer","header","Header","profilePopup","recent","Recent","searchString","SearchString","auth","Auth","history","playersVS","teamsVS","ProfilePopup","toggleOpened","logoutClick","logout","composed","path","UploadVideoBtn","externalLink","injectedUploadVideoBtn","Home","appPage","homeComposed","data-block","headerComposed","LinksList","linksListComposed","NavLink","activeClassName","StatsTabs","_ref2$markers","selectToggle","_ref2$zones","resetToDefaultDirections","statsTabComposed","isStats","_ref$tabs","StatsTabs_StatsTabs","Pointer","getDirections","_ref2$beginning","beginning","firstX","firstY","_ref2$ending","ending","lastX","lastY","cat1","cat2","sqrt","pow","angle","asin","PI","rotate","getPointers","_ref3$positionsInfo","positionsInfo","pointer1","pointer2","getPointerClass","_ref4$positionsInfo","pointClass","getTransform","pointers","pointerComposed","_ref$pointers","_ref$positionsInfo","transform","tooltipNames","fullName","playerNameComposed","ToolTip","eventToEpisode","half","second","eventId","round","handleShootClick","fetchVideo","toolTipComposed","_cx","_ref$point","score1","score2","_ref3$markers$directi","toolTips","toolTipsWithVectors","markerComposed","ToolTip_ToolTip","getActionTypes","fromType","toType","getScore","getList","preparePoint","middleCondition","_getActionTypes","checkPosition","markerType","checkZone","directionType","_ref10$markers","markersComposed","idx","MarkerItem_Marker","SaveScreenShot","handleDownload","_ref2$lexics","currentTeam","getElementsByClassName","elementBackgroundSVG","extra","pageInfo","picName","takeScreenshot","callback","elementToChangeBackground","saveScreenShotComposed","RangeSettingsPopup","handleShowPopup","rangePopup","rangeSettingsPopupComposed","hidden","PlayVideoBtn","loading","getRange","_ref3$shootsRange","getShoots","_ref4$markers","activeData","handleVideoExternal","toggleMapFieldFetching","shots","finally","playVideoBtnComposed","mapFieldFetching","externalFetching","ControlDropDown","toggleIsVisible","isVisible","menuType","map-block__select_open","withTitle","controlDropDownComposed","children","Children","child","i","TeamsPopup","team1Name","team2Name","activeTeamShortName","setIsOpened","handleActive","setIsOpenedHandler","checkTeam","teamsPopupComposed","directionsDropDownButtons","endPoint","Directions","directionsBtns","chooseDirection","_ref5$markers","directionsComposed","zoneTitles","checkedZone","zonesComposed","MapFieldControls","selectArea","setZone","mapFieldControlsComposed","_ref$shootsRange","Zones_Zones","zoneBorderConfig","basic","zonesList","coords","advanced","zoneAction","ZonesStatistic","getParams","firstConditionId","secondConditionId","propItem","propItemValue","fieldType","zoneTypeX","zoneTypeY","xCoords","yCoords","coordsType","allMarkers","totalZoneMarkers","succesZoneMarkers","percentage","zoneEvents","_ref9$videoPlayer","setModalOpen","zonesStatisticComposed","fieldSVGDimensions","MapFieldSVG","version","xmlns","xlink","viewBox","xmlSpace","height","fill","d","cy","r","FieldZones","getZonesClassName","fieldZonesComposed","MapFieldSVG_MapFieldSVG","MapField","currentMatches","isString","mapFieldComposed","_ref$markers","SelectionField","wrapperClass","onSelect","rect","Markers_Markers","filterPopupByTab","columnTitleId","zoneId","zoneNumber","filterPopupByTabForPlayer","lexic","2","3","9","10","12","13","14","16","17","18","19","20","21","22","24","25","26","28","29","30","31","32","41","42","43","44","45","46","49","50","53","54","55","56","57","58","59","60","70","71","72","73","74","75","102","103","104","105","106","107","128","129","130","131","132","133","134","135","136","137","138","139","142","143","144","145","146","147","148","149","150","151","152","153","154","156","160","161","162","163","166","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","202","203","204","205","208","209","210","217","218","219","232","263","264","265","266","267","268","269","270","271","272","274","275","276","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","PopupHOC","wrappedComponent","getFilterLexics","getItemClassName","popup-column__item_checked","getTitleClassName","popup-column__title_checked","ColumnsPopup","_ref$filters","toggleOpenClose","ZonesPopup","fieldClassName","map-block__popup-zone-list_home","getZoneClassName","map-block__popup-zone_active","zonesPopupComposed","PopupSimple","PopupWithPlayers","getFullName","getPlayersId","popupWithPlayersComposed","popup-column__wrapper_wide","popup-column__wrapper_narrow","playersList","PopupWithHomePlayers","popupWitHomePlayersComposed","FilterMenu","filterMenuComposed","FilterSubMenu","checkedInGroup","filterSubMenuComposed","FilterItem","menuOpened","menuToggle","getMenuClassName","map-block__title_active","idsFromConfig","filtered","getData","popupWithColumns","_ref22","popupWithZones","popupSimple","popupWithPlayers","popupWithHomePlayers","getCheckedFiltersSubMenu","playersIds","getIds","keyNormalized","filterItemComposed","MapFilters","filtersList","_this$props$filters","mapFiltersComposed","getPlayerFullName","long","PlayersSelect","getPlayerNumber","selectPlayer","_ref4$playersCompareW","getTeamPlayers","getPlaceholder","defaultPlayer","playersSelectComposed","PlayerName_PlayerName","PlayersStats","playersInfoComposed","getPlayerParams","PlayersInfo","PlayersCompare_PlayersStats","PlayersComparePopup","PlayersComparePupupComposed","PlayerCompareHeaderComposed","_this$props2$playersC","PlayersCompareComposed","_ref$playersCompareWi","PlayersCompare_PlayerCompareHeader","MatchWidgets","TeamsCompare_TeamsCompare","PlayersCompare_PlayersCompare","Widgets","MatchWidgets_MatchWidgets","PlayerField","playerFieldComposed","player_Header_Header","Widgets_Widgets","Avatar","image","noImage","variants","clickHandle","PlayerCard","playerCardComposed","weight","_ref$playerProfile","player-card-left_loader","common_Avatar","photo","national_team","citizenship","toLowerCase","age","common_InfoItem","birthday","active_hand","HeaderStatsItem","statsIsFetching","toolTipIsVisible","itemClassName","header-stats-item_clickable","header-stats-item_loading","valueBlockClassName","header-stats-item__value_percentage","setLoader","lexicId","toggleTooltip","toggleVisible","headerStatsItemComposed","statValue","onMouseEnter","onMouseLeave","components_ToolTip","HeaderStatsList","getEvents","headerStatsListComposed","PlayerStatsWrapper","playerStatsComposed","_ref$playerStats","getYear","changeYear","selectConfig","SelectLabel","_ref$selected","names","MatchCheckBox","title__score_lose","title__score_win","InfinityLoad","MatchSelectList","matchSelectListComposed","selectItem","MatchCheckBox_MatchCheckBox","InfinityLoad_InfinityLoad","MatchSelectContainer","getSelected","matchSelectContainerComposed","dropDownClick","extendedSelectItem","scrollHandle","common_SelectLabel","onScroll","loading-active_global","MatchSelectComposed","handleInfiniteLoad","offsetHeight","scrollHeight","scrollTop","_ref7$matches","_ref7$selectedMatches","isYear","month","getStartSeason","getNow","getEndOfSeason","FilterCheckboxComposed","pageType","videoSummaries","clickHandler","setActive","_ref$filter","FilterPopupComposed","video_cuts_FilterCheckbox","FilterElementComposed","onOutsideClick","video_cuts_Checked","video_cuts_FilterPopup","uncheckAllPlayers","orderByLodash","btn","video_cuts_FilterElement","VideoCutsCompose","minutes","seconds","totalTime","playersChecked","getCheckedBtn","getGroupedBtns","componentWillUnmount","resetFilters","changeCount","fetchButtons","_props$videoSummaries","reloadCount","cursor","episodes-table-header-title-play_loader","video_cuts_TableButtons","playersCount","VideoCutsComposed","getSelectedMatches","video_cuts_VideoCutsContainer","PlayerPageMatches","playerPageMatchesComposed","_ref$playerTable","playerPageComposed","getPlayerProfile","getGearParams","playerLexic","filtersLexic","markersLexic","tableParamsLexic","tableParamsLexicShort","tableParamsNumLexic","videoCutsLexic","PlayerPage","appName","common_MatchSelect","PlayerField_PlayerField","Switch","Route","render","common_video_cuts_VideoCuts","PlayerTrComposed","getParamValue","playerParam","TdWrapper_Td","PlayersListComposed","_ref2$teamPlayers","TeamPlayers_PlayerTr","playersTableComposed","_ref$tableReportsMST","handleSetActiveParam","PlayersTableHeader","_ref7$lexics","is_avatar","playersTableHeaderComposed","PlayersTable","TeamPlayers_PlayersList","TeamPlayersComposed","sort","b","teamPageComposed","getTeamProfile","teamLexic","TeamCardComposed","teamType","_ref$teamProfile","country_id","team_type","player-card-left","player-card-left player-card-left_loader","player-card-avatar_national","TeamStatsWrapper","teamStatsComposed","_ref$teamStats","TeamPageHeader","components_TeamCard","TeamPage","TeamPageHeader_TeamPageHeader","components_TeamPlayers","VideoLinks","headerVideoButtons","MatchScoreComposed","getScoreByPeriods","scoreTeam","scoreOppTeam","MatchInfo","_ref$matchProfile","MatchInfo_MatchScore_MatchScore","HeaderComposed","Header_MatchInfo_MatchInfo","Header_VideoLinks_VideoLinks","MatchPageComposed","getMatchProfile","matchLexic","MainContent","mainContentComposed","MatchPage_Header_Header","DropDownItemComposed","handleMouseHover","toggleHover","isHovered","primaryColor","listItemStyle","backgroundColor","padding","DropDownSimpleComposed","handleOpen","itemClick","changePlaceholder","React","_ref5$settings","settings","inlineStyles","listItem","minWidth","fontSize","placeHolder","paddingLeft","statePlaceholder","dropdown-container__opened","dropdown-list__hidden","components_DropDownItem","SeasonSelectComposed","onSeasonSelect","_ref$tournamentSeason","DropDownSimple_components","TournamentHeaderStatsComposed","TournamentPageInfoComposed","countryName","_ref$profile","TournamentPageHeader","components_TournamentPageInfo","TournamentSeasonSelect_components","features_TournamentHeaderStats_components","tournamentPage","tournamentPageComposed","tournamentLexic","_ref$tournamentsProfi","profileLoaded","components_TournamentPageHeader","Redirect","AppComposed","DragDropContext","HTML5Backend","isAuth","pathname","location","Header_Header","loginLexics","loginLexic","MatchPage","Features","Router","index_module","components_App_App","onEnter","ReactDOM","features"],"mappings":"6UAAA,SAAAA,EAAAC,GACA,IAAAC,EAAA,IAAAC,MAAA,uBAAAF,EAAA,KAEA,MADAC,EAAAE,KAAA,mBACAF,EAEAF,EAAAK,KAAA,WAAuC,UACvCL,EAAAM,QAAAN,EACAO,EAAAC,QAAAR,EACAA,EAAAS,GAAA,ohBCRMC,EAAW,yCAEJC,EAAO,GAAAC,OAAMF,EAAN,SACPG,EAAO,8BAELC,EAEbJ,ECLWK,EAAe,CAM1BC,oBAAqB,6BA+CVC,EAAY,CACvBC,SAAU,CACRC,MAAO,EACPC,OAAQ,GACRC,KAAM,IAeGC,EAAiD,CAC5D,IACA,IACA,IACA,IACA,IACA,CACEC,IAAK,GACLC,MAAO,CAAC,IAAK,KACbC,SAdK,SAAAC,GAAA,OAAyC,SAAzCA,EAAGC,YAkBCC,EAAgC,CAAC,IAAK,cCrFpCC,6BCFMC,aAEnB,SAAAA,EAAYC,GAASC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAEnBI,KAAKC,UAAYJ,uDAIVK,GAEP,OAAOF,KAAKC,UAAUC,0ECRbC,GAAO,CAClB,QACA,kBACA,OACA,SACA,QACA,oBAIWC,GAAiB,CAAC,QAAS,SAAU,QAAS,oBAE9CC,GAAiB,CAC5B,QACA,OACA,SACA,QACA,oBAIWC,GAAiB,CAAC,kBAAmB,oBAGrCC,GAAiB,CAC5B,QACA,kBACA,SACA,QACA,oBAGWC,GAAU,CACrBC,OAAQ,OACRC,iBAAkB,OAClBC,MAAO,OACPC,KAAM,OACNC,MAAO,OACPC,gBAAiB,QAeNC,GAAoB,CAC/BN,OAAQ,CAAEO,MAAM,EAAOC,IAAI,GAC3BP,iBAAkB,CAAEM,MAAM,EAAMC,IAAI,GACpCN,MAAO,CAAEK,MAAM,EAAMC,IAAI,GACzBL,KAAM,CAAEI,MAAM,EAAOC,IAAI,GACzBJ,MAAO,CAAEG,MAAM,EAAOC,IAAI,GAC1BH,gBAAiB,CAAEE,MAAM,EAAMC,IAAI,IAUxBC,GAAe,CAC1B,CAEEC,OAAO,EACPC,OAAQ,KACRC,KAAM,SACNC,MAAO,IAET,CACEH,OAAO,EACPC,OAAQ,IACRC,KAAM,GACNC,MAAO,CAAC,SAAU,SAEpB,CACEH,OAAO,EACPC,OAAQ,IACRC,KAAM,WACNC,MAAO,CAAC,gBAEV,CACEH,OAAO,EACPC,OAAQ,KACRC,KAAM,WACNC,MAAO,CAAC,OAAQ,gBAElB,CACEH,OAAO,EACPC,OAAQ,KACRC,KAAM,GACNC,MAAO,CAAC,WCxFSC,mZAKE,IACXC,EAASxB,KAAKyB,SAAS,UAAvBD,KADWE,EAEa1B,KAAKyB,SAAS,iBAAtCE,EAFWD,EAEXC,WAAYC,EAFDF,EAECE,QAEpB,GAAa,WAATJ,IACGG,GAAcC,EACjB,OAAQA,EAAQC,OAAOtD,IACrB,KAAK,EACL,KAAK,EACH,OAAO6B,GACT,KAAK,EACH,OAAOG,GACT,KAAK,EACH,OAAOF,GACT,KAAK,EACH,OAAOC,GACT,QACE,OAAON,KAAKG,KAKpB,OAAOH,KAAKG,YA3BkBP,uCAC/BkC,8EAAoB,6CAEpBA,+EAAkB3B,sCAElB4B,iHA0BAC,0FAAsB,SAACC,GACtBC,EAAKC,OAASF,EAGdpC,GAAOuC,QAAQC,8IClCbC,GAAa,CACjBC,OAAQ,4BACRC,KAAM,6BAGFC,GAAS,CACbF,OAAQ,eACRC,KAAM,cCjBaE,8tBDmHnBC,WAAa,SACXC,EAGApB,EACAqB,EAEAC,EAEAC,GAGA,IAAMC,EAAOJ,EAAKI,KAAK,GAAKJ,EAAKI,KAAK,GAAGV,GAAWd,IAAS,GAEzDsB,GAAmBC,IACrBD,EAAgBG,KAAID,EAAM,YAC1BD,EAAUF,IAGZ,IAAMK,EAAcC,KAAIrD,OAAAsD,EAAA,EAAAtD,CAAAuD,GAAM,CAAC,OAAQR,IACjCS,EAAUH,KAAID,EAAa,UAAW,IACtCK,EAASJ,KAAID,EAAa,SAAU,GAE1CG,EAAKG,KAAKX,GAAU,CAClBS,QAASN,EAAOS,KAAO/E,KAAO4E,EAASN,GAAO,WAAaM,EAC3DC,OAAQP,EACJO,EAAS,GACTA,EACJG,OAAQV,GAGVK,EAAKM,MAAQ,KAEbN,EAAK1B,YAAa,EAEd0B,EAAKO,YAEPP,EAAKO,WAAY,MAIrBC,SAAW,SAACF,GAEVN,EAAK1B,YAAa,EAElB0B,EAAKM,MAAQA,2HAxH4B/D,sCAG1CoC,0FAAe,SAEdR,EAEAqB,EAEAU,EAEAO,GAMG,IAAAC,EAJHC,EAIGC,UAAA/E,OAAA,QAAAgF,IAAAD,UAAA,GAAAA,UAAA,GAJQ,KACXE,EAGGF,UAAA/E,OAAA,QAAAgF,IAAAD,UAAA,GAAAA,UAAA,GAHM,KACTnB,EAEGmB,UAAA/E,OAAA,QAAAgF,IAAAD,UAAA,GAAAA,UAAA,GAFe,KAClBlB,EACGkB,UAAA/E,OAAA,QAAAgF,IAAAD,UAAA,GAAAA,UAAA,GADS,KAGZ,IAAuC,IAAnCd,KAAIjB,EAAKsB,KAAKX,GAAS,QAAmB,CAI5C,GAAImB,GAAYlB,GAAmBC,EAAW,CAE5C,IAEMqB,EAAkBnB,KAEtBoB,KAAOnC,EAAKsB,KAAKX,GAAQS,QAAS,SAAAgB,GAAA,IAJhBC,EAImBC,EAAHF,EAAGE,WAAH,OAJhBD,EAIgDC,EAJnCC,KAAEF,GAAWG,UAAUV,EAAUG,KAKhE,WAGFrB,EAAgBsB,GAEhBrB,EAAUF,GAEZ,OAAO,KAET,IAAM8B,EAAG,GAAAjG,OAAME,EAAN,SACHgG,EAAS,CACbC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAEnBC,KAAM3C,GAAWd,GACjB0D,QAAMnB,EAAA,GAAAjE,OAAAqF,GAAA,EAAArF,CAAAiE,EAEHtB,GAAOjB,GAAQqB,GAFZ/C,OAAAqF,GAAA,EAAArF,CAAAiE,EAAA,eAGUC,GAHVlE,OAAAqF,GAAA,EAAArF,CAAAiE,EAAA,aAIQI,GAJRrE,OAAAqF,GAAA,EAAArF,CAAAiE,EAAA,YAKOR,GALPzD,OAAAqF,GAAA,EAAArF,CAAAiE,EAAA,WAMMD,GANNC,MAUVqB,QAAMC,QAAQ,CACZV,MACAC,SACAU,UAAW,WAETpD,EAAKP,YAAa,GAEpB4D,UAAW,SAAA3C,GAAI,OAAIV,EAAKS,WACtBC,EACApB,EACAqB,EAEAC,EAEAC,IAEFyC,QAAStD,EAAK2B,sDAqDjB7B,0FAAmB,SAACa,GAAuB,IAAfiB,EAAeG,UAAA/E,OAAA,QAAAgF,IAAAD,UAAA,GAAAA,UAAA,GAAP,GAE7BV,EAASkC,EAAKjC,KAAKX,GAAU4C,EAAKjC,KAAKX,GAAQU,OAAS,EAC9DkC,EAAKC,MAAMD,EAAKhE,SAAS,UAAUD,KAAMqB,EAAQU,EAAQO,iDAI1D9B,0FAAsB,SAACG,GAEtBwD,EAAKxD,OAASA,4CC5KfL,8EAAkB,8CAElBA,+EAAwB,yCAExBA,+EAAoB,4CAEpBA,+EAAuB,wCAEvBA,+EAAmB,yCAEnBA,8EAAoB,cCfVD,GAAS,CACpBW,KAAM,EACNoD,SAAU,EACVC,WAAY,EACZC,cAAe,EACfC,OAAQ,EACRC,OAAQ,GCFWC,mmBCgCnBtD,WAAa,SAACC,GAEZS,EAAK1B,YAAa,EAElB0B,EAAKzB,QAAUuB,KAAIP,EAAM,OAAQ,MAChBO,KAAIrD,OAAAsD,EAAA,EAAAtD,CAAAuD,GAAM,uBACVxB,GAAOmE,SACtB3C,EAAK5B,SAAS,QAAQyE,aAAa,mBACnC7C,EAAK5B,SAAS,WAAW0E,wBAI3B9C,EAAKM,MAAQ,QAIfE,SAAW,SAACF,GAEVN,EAAK1B,YAAa,EAElB0B,EAAKM,MAAQA,gCA9CkC/D,sCAChDoC,0FAAe,SAACoE,GACf,IAAMzB,EAAG,GAAAjG,OAAME,EAAN,SACHgG,EAAS,CACbC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,KAAM,mBACNC,OAAQ,CACNmB,UAAWD,MAIjBhB,QAAMC,QAAQ,CACZV,MACAC,SACAU,UAAW,WAETpD,EAAKN,QAAU,KAEfM,EAAKP,YAAa,GAEpB4D,UAAW,SAAA3C,GAAI,OAAIV,EAAKS,WAAWC,IACnC4C,QAAStD,EAAK2B,wDD3BjB/B,+EAAqB,gDAErBA,+EAAwB,wCAExBA,+EAAmB,QEHTwE,GAET,CAEFC,EAAG,CACD,CAAEC,SAAU,OAAQC,SAAU,IAAKC,SAAS,GAC5C,CAAEF,SAAU,OAAQC,SAAU,IAAKC,SAAS,GAC5C,CAAEF,SAAU,OAAQC,SAAU,IAAKC,SAAS,GAC5C,CAAEF,SAAU,OAAQC,SAAU,IAAKC,SAAS,GAC5C,CAAEF,SAAU,OAAQC,SAAU,IAAKC,SAAS,GAC5C,CAAEF,SAAU,OAAQC,SAAU,IAAKC,SAAS,IAG9CC,EAAG,CACD,CAAEH,SAAU,OAAQC,SAAU,IAAKC,SAAS,GAC5C,CAAEF,SAAU,OAAQC,SAAU,IAAKC,SAAS,GAC5C,CAAEF,SAAU,OAAQC,SAAU,IAAKC,SAAS,GAC5C,CAAEF,SAAU,OAAQC,SAAU,IAAKC,SAAS,GAC5C,CAAEF,SAAU,OAAQC,SAAU,IAAKC,SAAS,GAC5C,CAAEF,SAAU,OAAQC,SAAU,IAAKC,SAAS,IAG9CE,EAAG,CACD,CAAEJ,SAAU,OAAQC,SAAU,IAAKC,SAAS,GAC5C,CAAEF,SAAU,OAAQC,SAAU,IAAKC,SAAS,GAC5C,CAAEF,SAAU,OAAQC,SAAU,IAAKC,SAAS,GAC5C,CAAEF,SAAU,OAAQC,SAAU,IAAKC,SAAS,GAC5C,CAAEF,SAAU,OAAQC,SAAU,IAAKC,SAAS,GAC5C,CAAEF,SAAU,OAAQC,SAAU,IAAKC,SAAS,GAC5C,CAAEF,SAAU,OAAQC,SAAU,IAAKC,SAAS,GAC5C,CAAEF,SAAU,OAAQC,SAAU,IAAKC,SAAS,IAG9CG,EAAG,CACD,CAAEL,SAAU,OAAQC,SAAU,IAAKC,SAAS,GAC5C,CAAEF,SAAU,OAAQC,SAAU,IAAKC,SAAS,GAC5C,CAAEF,SAAU,OAAQC,SAAU,IAAKC,SAAS,GAC5C,CAAEF,SAAU,OAAQC,SAAU,IAAKC,SAAS,GAC5C,CAAEF,SAAU,OAAQC,SAAU,IAAKC,SAAS,GAC5C,CAAEF,SAAU,OAAQC,SAAU,IAAKC,SAAS,GAC5C,CAAEF,SAAU,OAAQC,SAAU,IAAKC,SAAS,IAG9CI,EAAG,CACD,CAAEN,SAAU,OAAQC,SAAU,IAAKC,SAAS,GAC5C,CAAEF,SAAU,OAAQC,SAAU,IAAKC,SAAS,GAC5C,CAAEF,SAAU,OAAQC,SAAU,IAAKC,SAAS,KAInCK,GAAoB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAG9CC,GAAc,CACzB,CAAER,SAAU,OAAQC,SAAU,IAAKC,SAAS,GAC5C,CAAEF,SAAU,OAAQC,SAAU,IAAKC,SAAS,GAC5C,CAAEF,SAAU,OAAQC,SAAU,IAAKC,SAAS,GAC5C,CAAEF,SAAU,OAAQC,SAAU,IAAKC,SAAS,GAC5C,CAAEF,SAAU,OAAQC,SAAU,IAAKC,SAAS,GAC5C,CAAEF,SAAU,OAAQC,SAAU,IAAKC,SAAS,IAGjCO,GAAc,CACzBxG,OAAQ,CACN,CAAEgG,SAAU,IAAKC,SAAS,GAC1B,CAAED,SAAU,IAAKC,SAAS,GAC1B,CAAED,SAAU,IAAKC,SAAS,IAE5B/F,MAAO,CACL,CAAE8F,SAAU,IAAKC,SAAS,GAC1B,CAAED,SAAU,IAAKC,SAAS,GAC1B,CAAED,SAAU,IAAKC,SAAS,IAE5B9F,KAAM,CACJ,CAAE6F,SAAU,IAAKC,SAAS,GAC1B,CAAED,SAAU,IAAKC,SAAS,GAC1B,CAAED,SAAU,IAAKC,SAAS,IAE5B7F,MAAO,CACL,CAAE4F,SAAU,IAAKC,SAAS,GAC1B,CAAED,SAAU,IAAKC,SAAS,GAC1B,CAAED,SAAU,IAAKC,SAAS,IAE5BhG,iBAAkB,CAChB,CAAE+F,SAAU,IAAKC,SAAS,GAC1B,CAAED,SAAU,IAAKC,SAAS,GAC1B,CAAED,SAAU,IAAKC,SAAS,IAE5B5F,gBAAiB,CACf,CAAE2F,SAAU,IAAKC,SAAS,GAC1B,CAAED,SAAU,IAAKC,SAAS,GAC1B,CAAED,SAAU,IAAKC,SAAS,6MCrFjBQ,GAAgB,CAAC,GAAI,IAAK,IAE1BC,GAAY,CACvB1G,OAAQ,CACN2G,OAAQ,IACRC,OAAQ,IACRC,KATS,GAUTC,KATS,IAWX7G,iBAAkB,CAChB0G,OAfW,GAgBXC,OAfW,GAgBXC,KAfS,GAgBTC,KAfS,IAiBXC,yBAA0B,CACxBJ,OAAQ,IACRC,OAAQ,IACRI,SAAU,IACVC,SAAU,IACVJ,KAvBS,GAwBTC,KAvBS,IAyBX5G,MAAO,CACLyG,OA7BW,GA8BXC,OA7BW,GA8BXC,KA7BS,GA8BTC,KA7BS,IA+BX3G,KAAM,CACJwG,OAnCW,GAoCXC,OAnCW,GAoCXC,KAnCS,GAoCTC,KAnCS,IAqCX1G,MAAO,CACLuG,OAzCW,GA0CXC,OAzCW,GA0CXC,KAzCS,GA0CTC,KAzCS,IA2CXzG,gBAAiB,CACfsG,OA/CW,GAgDXC,OA/CW,GAgDXC,KA/CS,GAgDTC,KA/CS,KAmDAI,GAAa,CACxBlH,OAAQ,CACNmH,SAAU,CAAC,GAAI,IAAK,KACpBC,WAAY,CAAC,MAEfnH,iBAAkB,CAChBkH,SAAU,CAAC,KACXC,WAAY,CAAC,MAEflH,MAAO,CACLkH,WAAY,CAAC,GAAI,GAAI,KAEvBjH,KAAM,CACJiH,WAAY,CAAC,KAEfhH,MAAO,CACL+G,SAAU,CAAC,IACXC,WAAY,CAAC,KAEf/G,gBAAiB,CACf8G,SAAU,CAAC,KACXC,WAAY,CAAC,OAWXC,GAAmC,CAEvCC,IAAK,CACHC,MAAO,CAAC,IACRC,OAAQ,CAAC,GAAI,MAGfC,IAAK,CACHF,MAAO,CAAC,IACRC,OAAQ,CAAC,GAAI,MAGfE,IAAK,CACHH,MAAO,CAAC,IACRC,OAAQ,CAAC,GAAI,OAKJG,GAAgCtI,OAAAuI,EAAA,EAAAvI,CAAA,CAE3CwI,IAAK,CACHN,MAAO,CAAC,IAAK,KACbC,OAAQ,MAGVM,GAAI,CACFP,MAAO,CAAC,IACRC,OAAQ,OAEPH,IAIQU,GAAqB1I,OAAAuI,EAAA,EAAAvI,CAAA,GAC7BgI,IC9HQW,GAAa,CACxB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAKWC,GAAoB,CAC/B,IACA,IACA,IACA,KAIWC,GAAkB,CAC7B,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAIWC,GAAiB,CAC5B,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAIWC,GAAY,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAG1DC,GAAa,CACxBC,UAAW,GACXC,UAAW,GACXC,WAAY,IAIDC,GAAQ,CACnBC,YAAa,IACbC,oBAAqB,IACrBC,WAAY,KAIDC,GAAa,CACxBC,WAAY,IC9ECC,GAPF,CACXC,SAAU,EACVC,UAAW,EACXC,WAAY,EACZC,UAAW,GC+HN,SAASC,GAAaC,GAC3B,OAAIrF,KAAEqF,GAAMC,SAAWtF,OAAIsF,OAAetF,KAAEqF,GAAME,OAAO,YAClDvF,KAAEqF,GAAME,OAAO,SAQjB,SAASC,GAAUC,GACxB,MAAgB,OAATA,EAAgB,KAAO,KAOzB,SAASC,GAAcD,GAC5B,MAAgB,OAATA,EAAgB,MAAQ,MAO1B,SAASE,GAAOC,GACrB,IAAMC,GAAUD,EAAK,OAAOE,QAAQ,GAAGC,WAAWC,MAAM,KACxD,SAAA/L,OAAU4L,EAAO,GAAjB,MAAA5L,OAAwB4L,EAAO,GAA/B,OAMK,IAAMI,GAAW,CACtBnI,OAAQ,yDACRC,KAAM,8DACNmI,WAAY,+DAyCDC,GAAW,SAEtBC,EAEAC,GAGG,IAFHC,EAEG9G,UAAA/E,OAAA,QAAAgF,IAAAD,UAAA,IAAAA,UAAA,GADH+G,EACG/G,UAAA/E,OAAA,QAAAgF,IAAAD,UAAA,GAAAA,UAAA,GADa,WAEhB,IAAK4G,IAAUC,EACb,MAAO,CACLD,MAAO,KACPC,MAAO,MAJR,IAAAG,EAQuBlM,EAAUiM,GAA5B9L,EARL+L,EAQK/L,OAAQD,EARbgM,EAQahM,MAEViM,EAAuB,KAAjBjM,EAAQ4L,GAAgB5L,EAE9BkM,EAA+C,KAAzCJ,EAAeD,EAAQ5L,EAAS4L,GAAgB5L,EAC5D,MAAO,CACL2L,MAAOO,KAAMF,GAAI,EAAG,KACpBJ,MAAOM,KAAMD,GAAI,EAAG,OAiCXE,GAAkB,SAACC,GAC9B,IAAMC,EAAM,GAMZ,OALAD,EAAIE,QAAQ,SAACC,GACX,IAAMC,EAAUD,EAAKE,MAAM,GAEvBF,EAAK,KAAIF,EAAIE,EAAK,IAAMC,KAEvBH,GAQIK,GAAoB,SAC/BC,EAQAC,GA6CA,OArCAD,EAAQL,QAAQ,SAACO,GACf,IAAMC,EAAcF,EAAMzH,OAAO,SAAA4H,GAAA,OAAAA,EAAGxM,WAA4BsM,EAAOtM,WACjEyM,EAAiBb,GAAgBU,EAAOI,MAC9CH,EAAYR,QAAQ,SAAAY,GAId,IAHJC,EAGID,EAHJC,YACAC,EAEIF,EAFJE,mBACAC,EACIH,EADJG,yBAEA,GAAID,KAAsBJ,EAAgB,CAExC,IAAMM,EAAcN,EAAeI,GAE/BG,KAASF,EAA0BC,EAAY,MACjDT,EAAOM,YAAcA,GAKzBN,EAAOW,QAAUhN,EAAeiN,KAAK,SAAAtN,GAAG,OAAIA,KAAO6M,IAGnDH,EAAOa,qBAAuBxN,EAA2BuN,KAAK,SAAClB,GAAS,IAE9DlM,EAAyBkM,EAAzBlM,SAAUF,EAAeoM,EAAfpM,IAAKC,EAAUmM,EAAVnM,MACvB,OAAIuN,KAAcpB,GAEdpM,KAAO6M,GAEJ5M,EAAMmN,SAASP,EAAe7M,KAC9BE,EAASwM,EAAOtM,UAIhBgM,KAAQS,QAIdL,GAiBIiB,GAAa,SAAC9J,EAAmC+J,GAE5D,IAAMC,EAAU,GAahB,OAXAhK,EAAKwI,QAAQ,SAAAyB,GAAc,IAAXd,EAAWc,EAAXd,KACRe,EAAgB7B,GAAgBc,GACtCY,EAASvB,QAAQ,SAACjN,GAEZA,KAAM2O,IAAkBF,EAAQP,SAASS,EAAc3O,GAAI,KAE7DyO,EAAQG,KAAKD,EAAc3O,GAAI,QAK9ByO,GAqEF,SAASI,GAAQC,GACtB,IAAKA,EAAQ,MAAO,GACpB,IAAMC,EAASD,EAAO5C,MAAM,KAC5B,OAAI6C,EAAOpO,OAAS,EACXoO,EAAOrK,IAAI,SAAAsK,GAAI,OAAIA,EAAKC,OAAO,KAAIC,KAAK,IAAIC,cAE9CL,EAAOM,UAAU,EAAG,GAAGD,cAOzB,SAASE,GAAc1I,GAC5B,OAAOb,KAAOa,EAAQ,SAAA2I,GAMhB,IALJC,EAKID,EALJC,WACAC,EAIIF,EAJJE,WACAC,EAGIH,EAHJG,WACAC,EAEIJ,EAFJI,QACAC,EACIL,EADJK,eAGEnF,EAGED,GAHFC,UACAC,EAEEF,GAFFE,UACAC,EACEH,GADFG,WAEMQ,EAAaD,GAAbC,SAENN,EAGED,GAHFC,YACAC,EAEEF,GAFFE,oBACAC,EACEH,GADFG,WAEME,EAAeD,GAAfC,WAGR,GAAIkD,KAAS5D,GAAWoF,GACtB,OACEH,IAAerE,GACZyE,IAAmB7E,GACnB0E,IAAehF,GACfiF,IAAezE,EAKtB,IAAI4E,EAAoBpF,EACpBqF,EAAe/E,EAmBnB,OAjBIoD,KAAS9D,GAAiBsF,KAC5BE,EAAYlF,GAGVwD,KAAS7D,GAAgBqF,KAC3BE,EAAYnF,GAGVyD,KAAShE,GAAYwF,KACvBG,EAAOjF,GAILsD,KAAS/D,GAAmBuF,KAC9BG,EAAOhF,GAIP0E,IAAerE,GACZyE,IAAmBE,GACnBL,IAAeI,IASjB,SAASE,GAATC,GAUL,IARE/P,EAQF+P,EARE/P,GACAgQ,EAOFD,EAPEC,KACAC,EAMFF,EANEE,OASF,GAAIjQ,EAAI,CAEN,IAAMkQ,EAAQ1J,KAAK2J,MAAMC,OAAOC,aAAaC,QAAQN,KAAU,GAC/DE,EAAMlQ,GAAMiQ,EACZG,OAAOC,aAAaE,QAAQP,EAAMxJ,KAAKC,UAAUyJ,SAEjDE,OAAOC,aAAaE,QAAQP,EAAMxJ,KAAKC,UAAUwJ,IA6BrD,uPAAMO,GAAe,SACnBP,EACAQ,GAEA,OAAIC,KAAKT,GAAU,GACT,CAENxM,OAAQ,SAAAkN,GAAQ,OAAIF,EAAYE,IAChCC,EAAG,eACHC,WAAY,kBAkBLC,GAAqB,SAChCC,EACAN,EACAO,EACAC,EACAC,EACAjB,GANgC,OAO7BkB,KAAQ,CACX,CACE1N,OAAQ,kBAAMsN,KACdH,EAAG,YACHC,WAAY,cAEdL,GAAaP,EAAQQ,GACrB,CACEhN,OAAQ,SAAAkN,GAAQ,OAAIK,EAAYL,IAChCC,EAAG,gBACHC,WAAY,aAEd,CACEpN,OAAQ,SAAAkN,GAAQ,OAAIM,EAAcN,IAClCC,EAAG,kBACHC,WAAY,eAEd,CACEpN,OAAQ,SAAAkN,GAAQ,OAAIO,EAAWP,IAC/BC,EAAG,eACHC,WAAY,mBC1kBKO,4PAiCnBhN,WAAa,SAACC,GAEZS,EAAK1B,YAAa,EAElB0B,EAAKuM,MAAQhC,GAAchL,EAAKI,MAEhCK,EAAKM,MAAQ,QAIfE,SAAW,SAACF,GAEVN,EAAK1B,YAAa,EAElB0B,EAAKM,MAAQA,oFA/CgC/D,8CAE9CoC,0FAEO,SAACoE,EAAUyJ,EAAiBC,GAClC,IAAMnL,EAAW,GAAAjG,OAAME,EAAN,SACXmR,EAA8B9M,KAAIE,KAAImD,GAAoBwJ,GAAe,YACzElL,EAAkB,CACtBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,KAAM,wBACNC,OAAQ,CACN8K,YAAaH,EACbI,aAAc,CAAC7J,GACf8J,YAAaH,MAInB3K,QAAMC,QAAQ,CACZV,MACAC,SACAU,UAAW,WAETpD,EAAK0N,MAAQ,GAEb1N,EAAKP,YAAa,GAEpB4D,UAAW,SAAA3C,GAAI,OAAIV,EAAKS,WAAWC,IACnC4C,QAAS,SAAA7B,GAAK,OAAIzB,EAAK2B,SAASF,0DAsBnC3B,0FAA0B,WAEzByD,EAAKmK,MAAQ,WC3EIO,8WAA+BC,+CACjDtO,8EAAmB,gDAEnBA,+EAAwB,0CAExBA,+EAAmB,SCYDuO,4PAqCnB1N,WAAa,SAACC,GAEZS,EAAK1B,YAAa,EAIlB0B,EAAKuM,MAAQhC,GAAchL,EAAKI,MAEhCK,EAAKM,MAAQ,QAIfE,SAAW,SAACF,GAEVN,EAAK1B,YAAa,EAElB0B,EAAKM,MAAQA,oFArD8B/D,8CAE5CoC,0FAEO,SAACsO,EAAQT,GACf,IAAMlL,EAAW,GAAAjG,OAAME,EAAN,SACX2R,EAA4BtN,KAAI+D,GAAa,YAC7CpC,EAGF,CACFC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,KAAM,sBACNC,OAAQ,CACN8K,YAAaH,EACbW,WAAY,CAACF,GACbJ,YAAaxR,KAAO6R,EAAYxJ,QAItC3B,QAAMC,QAAQ,CACZV,MACAC,SACAU,UAAW,WAETpD,EAAK0N,MAAQ,GAEb1N,EAAKP,YAAa,GAGpB4D,UAAW,SAAC3C,GAAD,OAAgCV,EAAKS,WAAWC,EAAM0N,IACjE9K,QAAS,SAAC7B,GAAD,OAAgBzB,EAAK2B,SAASF,0DAwB1C3B,0FAA0B,WAEzByD,EAAKmK,MAAQ,WC3EIa,8WAA6BJ,+CAC/CvO,8EAAmB,gDAEnBA,+EAAwB,0CAExBA,+EAAmB,SCPD4O,oKAClB5O,+EAAsB,gDAItBE,0FAAqB,SAAChE,EAAG2S,GACxB3S,EAAE4S,iBACFvN,EAAKwN,SAAWxN,EAAKwN,SAAWF,EAASzR,OAAS,EAAImE,EAAKwN,SAAW,EAAI,sCCsC/DC,GAtCC,SAAAC,GAAU,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAL,EAAA,SAAAM,GAAA,SAAAN,IAAA,IAAAO,EAAAlO,EAAAvD,OAAAC,EAAA,EAAAD,CAAAE,KAAAgR,GAAA,QAAAQ,EAAAvN,UAAA/E,OAAAuS,EAAA,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAAF,EAAAE,GAAA1N,UAAA0N,GAAA,OAAAtO,EAAAvD,OAAA8R,EAAA,EAAA9R,CAAAE,MAAAuR,EAAAzR,OAAA+R,EAAA,EAAA/R,CAAAkR,IAAAc,KAAAC,MAAAR,EAAA,CAAAvR,MAAAtB,OAAA+S,KAAA3R,OAAAkS,EAAA,EAAAlS,CAAAuD,EAAA,SAAA4N,EAAAnR,OAAAsD,EAAA,EAAAtD,CAAAuD,IAAAvD,OAAAkS,EAAA,EAAAlS,CAAAuD,EAAA,QAAA6N,EAAApR,OAAAsD,EAAA,EAAAtD,CAAAuD,IAAAvD,OAAAkS,EAAA,EAAAlS,CAAAuD,EAAA,OAAA8N,EAAArR,OAAAsD,EAAA,EAAAtD,CAAAuD,IAAAvD,OAAAkS,EAAA,EAAAlS,CAAAuD,EAAA,SAAA+N,EAAAtR,OAAAsD,EAAA,EAAAtD,CAAAuD,IAAAvD,OAAAkS,EAAA,EAAAlS,CAAAuD,EAAA,aAAAgO,EAAAvR,OAAAsD,EAAA,EAAAtD,CAAAuD,MAAA,OAAAvD,OAAAmS,EAAA,EAAAnS,CAAAkR,EAAAM,GAAAxR,OAAAoS,EAAA,EAAApS,CAAAkR,EAAA,EAAA3R,IAAA,OAAA8D,IAAA,WAqBD,IAEXgP,EAAYtS,GAAOuC,QAAnB+P,QACFC,EAAQpS,KAAKyB,SAAS4Q,KAAKrS,MAC3B6L,EAAU7L,KAAKsS,OAEjBjO,KAAOrE,KAAKgD,KAAM,SAAA+I,GAAM,OAAIA,EAAOwG,UACnCvS,KAAKgD,KACT,OAAIwP,KAAQL,GAAiBtG,EACtB7L,KAAKyS,WAAW,CACrBC,eAAgBP,EAChBtG,UACAuG,cAjCkBpB,EAAA,CACVD,GADUE,EAAAnR,OAAA6S,EAAA,EAAA7S,CAAAkR,EAAA4B,UAAA,UAGrB9Q,MAHqB,CAAA+Q,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBAGD,KAHC9B,EAAApR,OAAA6S,EAAA,EAAA7S,CAAAkR,EAAA4B,UAAA,SAMrB9Q,MANqB,CAAA+Q,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBAMF,QANE7B,EAAArR,OAAA6S,EAAA,EAAA7S,CAAAkR,EAAA4B,UAAA,QASrB9Q,MATqB,CAAA+Q,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,iBASH,MATG5B,EAAAtR,OAAA6S,EAAA,EAAA7S,CAAAkR,EAAA4B,UAAA,UAYrB9Q,MAZqB,CAAA+Q,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBAYD,KAZC3B,EAAAvR,OAAA6S,EAAA,EAAA7S,CAAAkR,EAAA4B,UAAA,cAerB9Q,MAfqB,CAAA+Q,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,iBAeG,CACvB/R,IAAI,EACJD,MAAM,MAjBclB,OAAA6S,EAAA,EAAA7S,CAAAkR,EAAA4B,UAAA,QAqBrB7Q,MArBqBjC,OAAAmT,yBAAAjC,EAAA4B,UAAA,QAAA5B,EAAA4B,WAAA5B,qFC2BpBkC,GAAc,SAAA5O,GAWI,IAVtBgI,EAUsBhI,EAVtBgI,mBACAC,EASsBjI,EATtBiI,yBACA4G,EAQsB7O,EARtB6O,0BACAC,EAOsB9O,EAPtB8O,oBACAC,EAMsB/O,EANtB+O,SACAhP,EAKsBC,EALtBD,OACAiP,EAIsBhP,EAJtBgP,SACAjN,EAGsB/B,EAHtB+B,UACA8F,EAEsB7H,EAFtB6H,KACAiG,EACsB9N,EADtB8N,MAEA,IAAKvF,KAAcxI,GAAS,OAAO,KACnC,GAAIiI,GAAsB8G,EACxB,OC7B+B,SAAA9O,GAMb,IALpBgI,EAKoBhI,EALpBgI,mBACAC,EAIoBjI,EAJpBiI,yBACA4G,EAGoB7O,EAHpB6O,0BACAC,EAEoB9O,EAFpB8O,oBACAjH,EACoB7H,EADpB6H,KAUA,GAAII,GAA4B4G,EAA2B,CACzD,IAAMI,EAAkBC,KACtBrH,EACA,SAAAsH,GAAA,IAAAC,EAAA5T,OAAA6T,GAAA,EAAA7T,CAAA2T,EAAA,GAAEG,EAAFF,EAAA,GAAeG,EAAfH,EAAA,UACEjH,KAASH,EAAoBsH,IAC1BnH,KAASF,EAA0BsH,KAGpCC,EAAkBN,KACtBrH,EACA,SAAA3M,GAAA,IAAAuU,EAAAjU,OAAA6T,GAAA,EAAA7T,CAAAN,EAAA,GAAEoU,EAAFG,EAAA,GAAeF,EAAfE,EAAA,UACEtH,KAAS2G,EAAqBQ,IAC3BnH,KAAS0G,EAA2BU,KAE3C,OAAON,GAAmBO,EAG5B,IAAMP,EAAkBC,KAAKrH,EAAM,SAAA6H,GAAA,IAAEJ,EAAF9T,OAAA6T,GAAA,EAAA7T,CAAAkU,EAAA,aACjCvH,KAASH,EAAoBsH,KAEzBE,EAAkBN,KAAKrH,EAAM,SAAAF,GAAA,IAAE2H,EAAF9T,OAAA6T,GAAA,EAAA7T,CAAAmM,EAAA,aACjCQ,KAAS2G,EAAqBQ,KAChC,OAAOL,GAAmBO,EDRjBG,CAAoB,CACzB3H,qBACAC,2BACA4G,4BACAC,sBACAE,WACAnH,SAGJ,GAAIG,EACF,OCC+B,SAAAW,GAMb,IALpBX,EAKoBW,EALpBX,mBACAC,EAIoBU,EAJpBV,yBACA8G,EAGoBpG,EAHpBoG,SACAC,EAEoBrG,EAFpBqG,SACAnH,EACoBc,EADpBd,KAUM+H,EAAkB,WAEtB,IAAMC,EAAsC,IAAlBlF,KAAK9C,EAAK,IAChC3D,GACAJ,GACJ,IAAK+L,EAAkBb,GAAW,OAAO,EALb,IAAAc,EAMFD,EAAkBb,GAApCtL,EANoBoM,EAMpBpM,MAAOC,EANamM,EAMbnM,OACf,OAAQoM,KACNrM,EACA,SAAAsM,GAAS,OACPd,KACErH,EACA,SAAAoI,GAA8B,IAAAC,EAAA1U,OAAA6T,GAAA,EAAA7T,CAAAyU,EAAA,GAA5BX,EAA4BY,EAAA,GAAfX,EAAeW,EAAA,GAEtBC,EAAaxM,EACfwE,KAASxE,EAAQ4L,GACjBA,IAAcR,EAElB,OAAOiB,IAAcV,GAAaa,MAEhCjB,KAAKrH,EAAM,SAAAuI,GAAA,OAAA5U,OAAA6T,GAAA,EAAA7T,CAAA4U,EAAA,QAA+BJ,OAItD,OAAI/H,IAEEiH,KACArH,EACA,SAAA0B,GAAA,IAAAS,EAAAxO,OAAA6T,GAAA,EAAA7T,CAAA+N,EAAA,GAAE+F,EAAFtF,EAAA,GAAeuF,EAAfvF,EAAA,UACEhC,EAAmBG,SAASmH,IACzBrH,EAAyBE,SAASoH,MACpCK,IAUPvH,KAAKL,EAAoB,SAAAqI,GAAK,OAC5BnB,KAAKrH,EAAM,SAAAyI,GAAA,OAAA9U,OAAA6T,GAAA,EAAA7T,CAAA8U,EAAA,QAA+BD,OAAWT,ID1DhDW,CAAoB,CACzBvI,qBACAC,2BACA8G,WACAC,WACAnH,SAGJ,GAA0B,aAAtB9H,EAAOsD,WAA2B,CACpC,IAAMC,EAAWzE,KAAIwE,GAAY,CAACyK,EAAM,QAAQjQ,OAAQ,aAClD2S,EAAc3I,EAAK9H,OAAO,SAAA0Q,GAAQ,OAAInN,EAAS6E,SAASsI,EAAS,MACvE,OACED,GAAeA,EAAYnI,KAAK,SAAAoI,GAAQ,OAAIA,EAAS,KAAO1O,IAGhE,GAC2B,WAAzB+L,EAAM,UAAU5Q,MACY,UAAzB4Q,EAAM,QAAQjQ,QACY,WAAzBiQ,EAAM,QAAQjQ,QAA6C,eAAtBkC,EAAOsD,WAChD,CACA,IAAME,EAAa1E,KAAIwE,GAAY,CAACyK,EAAM,QAAQjQ,OAAQ,eACpD2S,EAAc3I,EAAK9H,OAAO,SAAA0Q,GAAQ,OACtClN,EAAW4E,SAASsI,EAAS,MAC/B,OACED,GAAeA,EAAYnI,KAAK,SAAAoI,GAAQ,OAAIA,EAAS,KAAO1O,IAGhE,OAAOA,IAAcgN,GAYjBZ,GAAa,SAAAgB,GAII,IAHrBf,EAGqBe,EAHrBf,eACA7G,EAEqB4H,EAFrB5H,QACAuG,EACqBqB,EADrBrB,MAEM4C,EP6SoB,SAAC5S,GAC3B,IAAM6S,EAAS,GAiBf,OAhBIpI,KAAczK,KAChBA,EAAUtC,OAAOmI,OAAO7F,IAG1BA,EAAQoJ,QAAQ,SAACnH,GACf,IAAMhF,EAAMgF,EAAO6Q,WACd7Q,EAAO+O,qBACP/O,EAAOiI,mBACRjN,KAAO4V,EAETA,EAAO5V,GAAK8N,KAAK9I,GAGjB4Q,EAAO5V,GAAO,CAACgF,KAGZ4Q,EO7THE,CAAazC,GACX0C,EAA8C,GAQpDtV,OAAOuV,QAAQL,GAAgBxJ,QAAQ,SAAAkI,GAA0B,IAAAlU,EAAAM,OAAA6T,GAAA,EAAA7T,CAAA4T,EAAA,GAAxBwB,EAAwB1V,EAAA,GAAb4C,EAAa5C,EAAA,GAC/D4V,EAAuBF,GAAa7Q,KAAOwH,EAAS,SAAAkI,GAAA,IAAGV,EAAHU,EAAGV,SAAUlH,EAAb4H,EAAa5H,KAAb,OAClDQ,KAAKvK,EAAS,SAACiC,GAAoB,IAE/BiI,EAMWjI,EANXiI,mBACAC,EAKWlI,EALXkI,yBACA4G,EAIW9O,EAJX8O,0BACAC,EAGW/O,EAHX+O,oBACIE,EAEOjP,EAFX9F,GACA8H,EACWhC,EADXgC,UAGF,OAAO6M,GAAY,CACjB5G,qBACAC,2BACA4G,4BACAC,sBACAC,WACAhP,SACAiP,WACAjN,YACA8F,OACAiG,gBAKR,IAAMkD,EAAiBxV,OAAOuV,QAAQD,GAMtC,GAAIE,EAAepW,OAAS,EAC1B,OAAQsT,KAAQ4C,GAAiD,GAAvBE,EAAe,GAAG,GAM9D,IAAIC,EAAwB,GA+C5B,OA9CAD,EAAe9J,QAAQ,SAAAwI,GAA6B,IAAAwB,EAAA1V,OAAA6T,GAAA,EAAA7T,CAAAkU,EAAA,GAA3ByB,EAA2BD,EAAA,GAAb3J,EAAa2J,EAAA,GAI5CE,EAAgBC,KACpBX,EACA,SAAChN,GAAD,MAAuB,uBAAwBA,EAAM,IAEhDA,EAAM,GAAGsE,mBAAmBG,SAASmJ,SAASH,EAAc,KAE7DzN,EAAM,GAAGkN,YAAcO,IAKvBI,EAAgBxR,KAAOwH,EAAS,SAAAI,GAAA,IAAGoH,EAAHpH,EAAGoH,SAAUlH,EAAbF,EAAaE,KAAb,OACpCrM,OAAOmI,OAAOyN,GAAerB,MAAM,SAAAjS,GAAO,OAExCuK,IADF,CACOvK,EAAS,SAACiC,GAAoB,IAE/BiI,EAMWjI,EANXiI,mBACAC,EAKWlI,EALXkI,yBACA4G,EAIW9O,EAJX8O,0BACAC,EAGW/O,EAHX+O,oBACIE,EAEOjP,EAFX9F,GACA8H,EACWhC,EADXgC,UAGF,OAAO6M,GAAY,CACjB5G,qBACAC,2BACA4G,4BACAC,sBACAC,WACAhP,SACAiP,WACAjN,YACA8F,OACAiG,gBAIRmD,EAAM,GAAA7W,OAAAoB,OAAAgW,GAAA,EAAAhW,CAAOyV,GAAPzV,OAAAgW,GAAA,EAAAhW,CAAkB+V,MAInBE,KAAKR,IASCS,GANW,SAACjF,GAAD,IAAAC,EAAAC,EAAA,OAAAD,EAAA,SAAAM,GAAA,SAAAN,IAAA,IAAAO,EAAAlO,EAAAvD,OAAAC,EAAA,EAAAD,CAAAE,KAAAgR,GAAA,QAAAQ,EAAAvN,UAAA/E,OAAAuS,EAAA,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAAF,EAAAE,GAAA1N,UAAA0N,GAAA,OAAAtO,EAAAvD,OAAA8R,EAAA,EAAA9R,CAAAE,MAAAuR,EAAAzR,OAAA+R,EAAA,EAAA/R,CAAAkR,IAAAc,KAAAC,MAAAR,EAAA,CAAAvR,MAAAtB,OAAA+S,KAAA3R,OAAAkS,EAAA,EAAAlS,CAAAuD,EAAA,aAAA4N,EAAAnR,OAAAsD,EAAA,EAAAtD,CAAAuD,MAAA,OAAAvD,OAAAmS,EAAA,EAAAnS,CAAAkR,EAAAM,GAAAN,EAAA,CACVD,GADUE,EAAAnR,OAAA6S,EAAA,EAAA7S,CAAAkR,EAAA4B,UAAA,cAGrB5Q,MAHqB,CAAA6Q,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBAGD,SAAC1T,GAAD,OAA4BmT,GAAWnT,OAHtC0R,iCE5LpBiF,OAKJ,SAAAA,EAAY3W,EAAO8S,GAAQtS,OAAAC,EAAA,EAAAD,CAAAE,KAAAiW,GAAAnW,OAAAkS,EAAA,EAAAlS,CAAAE,KAAA,UAAAkW,GAAAlW,MAAAF,OAAAkS,EAAA,EAAAlS,CAAAE,KAAA,aAAAmW,GAAAnW,MACzBF,OAAOsW,OAAOpW,KAAMV,GADI,IAEhB6C,EAAWiQ,EAAM,QAAjBjQ,OAEFkU,EAAiCrW,KAhBjBmM,KACnBqH,KAGH,SAAAC,GAAA,IAAAC,EAAA5T,OAAA6T,GAAA,EAAA7T,CAAA2T,EAAA,GAAEpU,EAAFqU,EAAA,GAAOqB,EAAPrB,EAAA,UAA6B,KAARrU,GAAc6H,GAAcuF,SAASsI,KAQlCuB,ET2NH,SACvBrU,EACAsU,GAEG,IADHC,EACGvS,UAAA/E,OAAA,QAAAgF,IAAAD,UAAA,IAAAA,UAAA,GAGGwS,EAAStP,GAAUqP,GAAkB,WAARvU,EAAV,GAAAvD,OAAgCuD,EAAhC,sBAA0DA,GAC7E8J,EAAS,GAOf,MAVsB,CAAC,SAAU,SAAU,OAAQ,OAAQ,WAAY,YAIzDP,QAAQ,SAACkL,GACrB,GAAIA,EAAMjK,SAAS,YAAc+J,EAAQ,OAAO,KAEhDzK,EAAM,OAAArN,OAAQgY,IAAWH,EAAMpK,KAAKqH,KAAK,SAAAmD,GAAC,OAAIA,EAAE,KAAOF,EAAOC,MAAW,KAGpE3K,EStND6K,CAAUzU,EAAQnC,KAAMqW,GAZ1BQ,EARsBP,EAQtBO,WAEAC,EAVsBR,EAUtBQ,WAEAC,EAZsBT,EAYtBS,aAEAC,EAdsBV,EActBU,aAEAC,EAhBsBX,EAgBtBW,SAEAC,EAlBsBZ,EAkBtBY,SAKFlX,KAAKgB,KAAO4J,GAASiM,EAAW,GAAIC,EAAW,IAE/C9W,KAAKwW,OAASH,GAAmBzL,GAASmM,EAAa,GAAIC,EAAa,IAExEhX,KAAKiB,GAAK2J,GAASqM,EAAS,GAAIC,EAAS,kDA/B1CpV,+EAAqB,+CAmCrBE,0FAAoB,SAAC2S,GACpBtR,EAAKkP,QAAUoC,UAIJsB,MChDFkB,GAAmB,SAACtL,EAASuL,GAExC,IAAMC,EAAoB,GA2B1B,OAzBAxL,EAAQL,QAAQ,SAACO,GAAW,IAClBI,EAASJ,EAATI,KACFoJ,EAAS6B,EAAW5D,KAAK,SAAAlP,GAAA,IAK3BgT,EAL2BhT,EAK3BgT,QAEAC,EAP2BjT,EAO3BiT,cAP2B,OAW7BpL,EAAKqH,KAEH,SAAAuB,GAAQ,OAAIA,EAAS,KAAOuC,GAAWvC,EAAS,KAAOwC,MAEvDhC,GACFxJ,EAAOyL,aAAejC,EAAOkC,gBAC7BJ,EAAkBlK,KAAKpB,IAEvBsL,EAAkBlK,KAAKpB,KAIpBsL,GAsDMK,GAlDQ,SAAA3G,GAAU,IAAAC,EAAAC,EAAA,OAAAD,EAAA,SAAAM,GAAA,SAAAN,IAAA,IAAAO,EAAAlO,EAAAvD,OAAAC,EAAA,EAAAD,CAAAE,KAAAgR,GAAA,QAAAQ,EAAAvN,UAAA/E,OAAAuS,EAAA,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAAF,EAAAE,GAAA1N,UAAA0N,GAAA,OAAAtO,EAAAvD,OAAA8R,EAAA,EAAA9R,CAAAE,MAAAuR,EAAAzR,OAAA+R,EAAA,EAAA/R,CAAAkR,IAAAc,KAAAC,MAAAR,EAAA,CAAAvR,MAAAtB,OAAA+S,KAAA3R,OAAAkS,EAAA,EAAAlS,CAAAuD,EAAA,QAAA4N,EAAAnR,OAAAsD,EAAA,EAAAtD,CAAAuD,MAAA,OAAAvD,OAAAmS,EAAA,EAAAnS,CAAAkR,EAAAM,GAAAxR,OAAAoS,EAAA,EAAApS,CAAAkR,EAAA,EAAA3R,IAAA,aAAAsV,MAAA,SAAAlB,GAyBR,IAARzQ,EAAQyQ,EAARzQ,KAEXhD,KAAK2X,QAAS,EAEd3X,KAAK2D,OAAQ,EAEb3D,KAAKgD,KAAOG,KAAIH,EAAM,qCAAsC,MA/BjC,CAAA3D,IAAA,aAAAsV,MAAA,WAoC3B3U,KAAK2X,QAAS,EAEd3X,KAAK2D,OAAQ,IAtCc,CAAAtE,IAAA,WAAAsV,MAAA,SA0CpBhR,GAEP3D,KAAK2D,MAAQA,EAEb3D,KAAK2X,QAAS,MA9Ca3G,EAAA,CACjBD,GADiBE,EAAAnR,OAAA6S,EAAA,EAAA7S,CAAAkR,EAAA4B,UAAA,SAG5B5Q,MAH4B,CAAA6Q,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAA9Q,EAAAlC,KAAA,OAGb,WACd,IAAM2E,EAAG,GAAAjG,OAAME,EAAN,SACHgG,EAAS,CACbC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,KAAM,iCACNC,OAAQ,CACN0S,kBAAkB,MAKxBC,QAAYxS,QAAQ,CAClBV,MACAC,SACAU,UAAWpD,EAAK4V,WAAWzF,KAAKnQ,GAChCqD,UAAWrD,EAAKS,WAAW0P,KAAKnQ,GAChCsD,QAAStD,EAAK2B,SAASwO,KAAKnQ,SApBH8O,wBC/B3B+G,GAAkB,SAAAzT,GAWlB,IATJ0T,EASI1T,EATJ0T,QAEAjM,EAOIzH,EAPJyH,OAEAkM,EAKI3T,EALJ2T,gBAEAjL,EAGI1I,EAHJ0I,QAEAkL,EACI5T,EADJ4T,aAGM3V,EAASyK,EAAQwG,KAErB,SAAAC,GAAA,OAAAA,EAAGJ,YAA6B2E,EAAUE,EAAa,GAAKA,KAE9D,IAAK3V,EACH,OAAO0V,EAAgB9K,KAAKpB,GAG9B,IAAMoM,EAAoB5V,EAAO6V,YAAY,GAO7C,OALIrM,EAAOsM,WACTtM,EAAOsM,WAAWlL,KAAKgL,GAEvBpM,EAAOsM,WAAa,CAACF,GAEhBF,EAAgB9K,KAAKpB,IAuBjBuM,GAAiB,SAACzM,EAASmB,EAAS/K,GAE/C,IAAMgW,EAAkB,GAClBM,EAAe,CAAC,GAAI,GAAI,IAsC9B,MApCY,UAARtW,EAEF4J,EAAQL,QAAQ,SAACO,GAAW,IAClBI,EAASJ,EAATI,KAERoM,EAAa/M,QAAQ,SAACjN,GAEpB,IAAMgE,EAAS4J,EAAKqH,KAAK,SAAAuB,GAAQ,OAAIA,EAAS,KAAOxW,IACjDgE,GACFwV,GAAgB,CACd/K,UACAkL,aAAc3V,EACdwJ,SAEAkM,kBACAD,SAAS,QAOjBnM,EAAQL,QAAQ,SAACO,GAAW,IAClBsH,EAAatH,EAAbsH,SAGR0E,GAAgB,CACd/K,UACAkL,aAAc7E,EACdtH,SAEAkM,sBAKCA,GA8HMO,GA1HS,SAAAzH,GAAU,IAAAC,EAAAC,EAAAC,EAAA,OAAAF,EAAA,SAAAM,GAAA,SAAAN,IAAA,IAAAO,EAAAlO,EAAAvD,OAAAC,EAAA,EAAAD,CAAAE,KAAAgR,GAAA,QAAAQ,EAAAvN,UAAA/E,OAAAuS,EAAA,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAAF,EAAAE,GAAA1N,UAAA0N,GAAA,OAAAtO,EAAAvD,OAAA8R,EAAA,EAAA9R,CAAAE,MAAAuR,EAAAzR,OAAA+R,EAAA,EAAA/R,CAAAkR,IAAAc,KAAAC,MAAAR,EAAA,CAAAvR,MAAAtB,OAAA+S,KAAA3R,OAAAkS,EAAA,EAAAlS,CAAAuD,EAAA,aAAA4N,EAAAnR,OAAAsD,EAAA,EAAAtD,CAAAuD,IAAAvD,OAAAkS,EAAA,EAAAlS,CAAAuD,EAAA,QAAA6N,EAAApR,OAAAsD,EAAA,EAAAtD,CAAAuD,MAAA,OAAAvD,OAAAmS,EAAA,EAAAnS,CAAAkR,EAAAM,GAAAxR,OAAAoS,EAAA,EAAApS,CAAAkR,EAAA,EAAA3R,IAAA,gBAAAsV,MAAA,WA2E5B3U,KAAKyY,aAAc,IA3ES,CAAApZ,IAAA,gBAAAsV,MAAA,SAAAnV,EAgFNpB,GAAS,IAAjB4E,EAAiBxD,EAAjBwD,KACd5E,EAAQ4E,GAERhD,KAAK0Y,UAAY1V,EAEjBhD,KAAKyY,aAAc,IArFS,CAAApZ,IAAA,cAAAsV,MAAA,SA0FlBhR,EAAOgV,GACjBA,EAAOhV,GAEP3D,KAAKyY,aAAc,IA7FS,CAAApZ,IAAA,aAAAsV,MAAA,SAAAZ,GAiGT,IAAR/Q,EAAQ+Q,EAAR/Q,KAEXhD,KAAKgD,KAAOA,EAEZhD,KAAK2X,QAAS,EAEd3X,KAAK2D,OAAQ,IAvGe,CAAAtE,IAAA,aAAAsV,MAAA,WA4G5B3U,KAAK2X,QAAS,EAEd3X,KAAK2D,OAAQ,IA9Ge,CAAAtE,IAAA,WAAAsV,MAAA,SAkHrBhR,GAEP3D,KAAK2D,MAAQA,EAEb3D,KAAK2X,QAAS,MAtHc3G,EAAA,CAClBD,GADkBE,EAAAnR,OAAA6S,EAAA,EAAA7S,CAAAkR,EAAA4B,UAAA,cAG7B5Q,MAH6B,CAAA6Q,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAA9Q,EAAAlC,KAAA,OAGT,WAuCnB,OAtCgB,IAAI4Y,QAAQ,SAACxa,EAASua,GACpC,IAAMhU,EAAG,GAAAjG,OAAME,EAAN,SACHoE,EAASd,EAAKT,SAAS,WAAvBuB,KAEAgK,EAAU,GACqB,UAAjC9K,EAAKT,SAAS,QAAQU,OAvET,SAACa,EAAMuV,EAAcvL,GAE5ChK,EAAKwI,QAAQ,SAAAkI,GAAA,IAAGvH,EAAHuH,EAAGvH,KAAH,OAGXoM,EAAa/M,QAAQ,SAACjN,GAEpB,IAAMgE,EAAS4J,EAAKqH,KAAK,SAAAuB,GAAQ,OAAIA,EAAS,KAAOxW,IACjDgE,GACFyK,EAAQG,KAAK5K,EAAO,QAiElBsW,CAAiB7V,EAFI,CAAC,GAAI,GAAI,IAEOgK,IAEA,oBAAjC9K,EAAKT,SAAS,QAAQU,OACxBa,EAAO8V,GAAmB9V,EAAM,GAAI,KACM,qBAAjCd,EAAKT,SAAS,QAAQU,SAC/Ba,EAAO8V,GAAmB9V,EAAM,GAAI,MAGtCA,EAAKwI,QAAQ,SAAAwI,GAAA,IAAGX,EAAHW,EAAGX,SAAH,OAAkBrG,EAAQG,KAAKkG,MAE9C,IAAMzO,EAAS,CACbC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,KAAM,qBACNC,OAAQ,CAEN6T,aAAc/L,MAKpB6K,QAAYxS,QAAQ,CAClBV,MACAC,SACAU,UAAWpD,EAAK8W,cAAc3G,KAAKnQ,GACnCsD,QAAS,SAAA7B,GAAK,OAAIzB,EAAK+W,YAAYtV,EAAOgV,IAC1CpT,UAAW,SAAA3C,GAAI,OAAIV,EAAKgX,cAActW,EAAMxE,YAtCpB8S,EAAApR,OAAA6S,EAAA,EAAA7S,CAAAkR,EAAA4B,UAAA,SAgD7B5Q,MAhD6B,CAAA6Q,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAAvN,EAAAzF,KAAA,OAgDd,SAAC6L,EAASsN,GAAqC,IAA1BC,EAA0BnV,UAAA/E,OAAA,QAAAgF,IAAAD,UAAA,IAAAA,UAAA,GACvDU,EAAG,GAAAjG,OAAME,EAAN,SACHoO,EAAUF,GAAWjB,EAASsN,GAChCC,GACFC,KAAOrM,EAAS,SAAAzK,GAAM,OAAIA,IAAW6W,IAEvC,IAAMxU,EAAS,CACbC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,KAAM,qBACNC,OAAQ,CACN6T,aAAc/L,MAKpB6K,QAAYxS,QAAQ,CAClBV,MACAC,SACAU,UAAWG,EAAKqS,WAAWzF,KAAK5M,GAChCF,UAAWE,EAAK9C,WAAW0P,KAAK5M,GAChCD,QAASC,EAAK5B,SAASwO,KAAK5M,SArEFuL,YCjGrBsI,GAAyB,SACpCzN,EAIA0N,GAKA,IAAMC,EAAqC,GAa3C,OAZA3N,EAAQL,QAAQ,SAACO,GAAW,IAClB0N,EAAoB1N,EAApB0N,gBACFjX,EAAO+W,EAAM/F,KAAK,SAAAlP,GAAA,OAAAA,EAAG+O,WAA4BoG,IACvD,GAAIjX,EAAM,CACR,IAAM+L,EAAO/L,EAAK4V,YAAY,GAC9BrM,EAAO2N,aAAenL,EACtBiL,EAAwBrM,KAAKpB,QAE7ByN,EAAwBrM,KAAKpB,KAI1ByN,GAoIMG,GAhIO,SAAA5I,GAAU,IAAAC,EAAAC,EAAAC,EAAA,OAAAF,EAAA,SAAAM,GAAA,SAAAN,IAAA,IAAAO,EAAAlO,EAAAvD,OAAAC,EAAA,EAAAD,CAAAE,KAAAgR,GAAA,QAAAQ,EAAAvN,UAAA/E,OAAAuS,EAAA,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAAF,EAAAE,GAAA1N,UAAA0N,GAAA,OAAAtO,EAAAvD,OAAA8R,EAAA,EAAA9R,CAAAE,MAAAuR,EAAAzR,OAAA+R,EAAA,EAAA/R,CAAAkR,IAAAc,KAAAC,MAAAR,EAAA,CAAAvR,MAAAtB,OAAA+S,KAAA3R,OAAAkS,EAAA,EAAAlS,CAAAuD,EAAA,aAAA4N,EAAAnR,OAAAsD,EAAA,EAAAtD,CAAAuD,IAAAvD,OAAAkS,EAAA,EAAAlS,CAAAuD,EAAA,QAAA6N,EAAApR,OAAAsD,EAAA,EAAAtD,CAAAuD,MAAA,OAAAvD,OAAAmS,EAAA,EAAAnS,CAAAkR,EAAAM,GAAAxR,OAAAoS,EAAA,EAAApS,CAAAkR,EAAA,EAAA3R,IAAA,gBAAAsV,MAAA,WAkE1B3U,KAAKyY,aAAc,IAlEO,CAAApZ,IAAA,gBAAAsV,MAAA,SAAAlB,EAuEJrV,GAAS,IAAjB4E,EAAiByQ,EAAjBzQ,KACd5E,EAAQ4E,GAERhD,KAAK0Y,UAAY1V,EAEjBhD,KAAKyY,aAAc,IA5EO,CAAApZ,IAAA,cAAAsV,MAAA,SAiFhBhR,EAAOgV,GACjBA,EAAOhV,GAEP3D,KAAKyY,aAAc,IApFO,CAAApZ,IAAA,aAAAsV,MAAA,SAAAjB,GAwFP,IAAR1Q,EAAQ0Q,EAAR1Q,KAGXhD,KAAKgD,KAAOC,KAAID,EAAM,SAAAxD,GAAA,IAAG4Y,EAAH5Y,EAAG4Y,YAAgB3M,EAAnB3L,OAAA8Z,GAAA,EAAA9Z,CAAAN,EAAA,wBAAAM,OAAAuI,EAAA,EAAAvI,CAAA,GACjB2L,EADiB,CAIpB2M,YAAa3U,KAEXR,KAAImV,EAAa,SAAA7V,GAAM,OAAAzC,OAAAuI,EAAA,EAAAvI,CAAA,GAClByC,EADkB,CAGrB2S,UAAW,aACXvN,WAAY,eAEd,iBAIJ3H,KAAK2X,QAAS,EAEd3X,KAAK2D,OAAQ,IA7Ga,CAAAtE,IAAA,aAAAsV,MAAA,WAkH1B3U,KAAK2X,QAAS,EAEd3X,KAAK2D,OAAQ,IApHa,CAAAtE,IAAA,WAAAsV,MAAA,SAwHnBhR,GAEP3D,KAAK2D,MAAQA,EAEb3D,KAAK2X,QAAS,MA5HY3G,EAAA,CAChBD,GADgBE,EAAAnR,OAAA6S,EAAA,EAAA7S,CAAAkR,EAAA4B,UAAA,cAG3B5Q,MAH2B,CAAA6Q,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAA9Q,EAAAlC,KAAA,OAGP,WA+BnB,OA9BgB,IAAI4Y,QAAQ,SAACxa,EAASua,GACpC,IAAMhU,EAAG,GAAAjG,OAAME,EAAN,SAEH2a,EAAQ,GAEdrX,EAAKT,SAAS,WAAWuB,KAAKwI,QAAQ,SAAAuI,GAAyB,IAAtB0F,EAAsB1F,EAAtB0F,gBAEvC,OAAIF,EAAM9M,SAASgN,GAAyB,KACrCF,EAAMpM,KAAKsM,KAEpB,IAAM7U,EAAS,CACbC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,KAAM,mBACNC,OAAQ,CAEN2U,WAAYN,MAKlB1B,QAAYxS,QAAQ,CAClBV,MACAC,SACAU,UAAWpD,EAAK8W,cAAc3G,KAAKnQ,GACnCsD,QAAS,SAAA7B,GAAK,OAAIzB,EAAK+W,YAAYtV,EAAOgV,IAC1CpT,UAAW,SAAA3C,GAAI,OAAIV,EAAKgX,cAActW,EAAMxE,YA9BtB8S,EAAApR,OAAA6S,EAAA,EAAA7S,CAAAkR,EAAA4B,UAAA,SAyC3B5Q,MAzC2B,CAAA6Q,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAAvN,EAAAzF,KAAA,OAyCZ,SAAC6L,EAASsN,EAAW7V,GACnC,IAAMqB,EAAG,GAAAjG,OAAME,EAAN,SACHoO,EAAUF,GAAWjB,EAASsN,GAC9BvU,EAAS,CACbC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,KAAM,2BACNC,OAAQ,CACN4U,YAAaxW,EACbyV,aAAc/L,MAKpB6K,QAAYxS,QAAQ,CAClBV,MACAC,SACAU,UAAWG,EAAKqS,WAAWzF,KAAK5M,GAChCF,UAAWE,EAAK9C,WAAW0P,KAAK5M,GAChCD,QAASC,EAAK5B,SAASwO,KAAK5M,SA5DJuL,GCX1B+I,GAAU,SAACtY,EAAU6B,EAAS/E,GAClC,IAAM0D,EAAMR,EAAS,QAAQU,OACrBX,EAASC,EAAS,UAAlBD,KAEFqB,EAAkB,WAATrB,EAAoB,eAAiB,aACpD,MAAO,CACLyD,KAHoB,WAATzD,EAAoB,yBAA2B,uBAI1D0D,OAAOpF,OAAAqF,GAAA,EAAArF,CAAA,CACLka,aAAc1W,EACd2W,aAAc,KACdC,WAAY,KAEZC,gBAAiB,CAAC3Z,GAAQyB,KACzBY,EAAStE,KAQHua,GAAqB,SAAC9V,EAAMzE,EAAIoW,GAAX,OAEhC3R,EAAKqB,OAAO,SAAAC,GAAA,IAAG6H,EAAH7H,EAAG6H,KAAH,OACVqH,KAAKrH,EAAM,SAAA4I,GAAQ,OAAIA,EAAS,KAAOxW,GAAMwW,EAAS,KAAOJ,OAoKlDyF,GAjKM,SAAArJ,GAAU,IAAAC,EAAAC,EAAA,OAAAD,EAAA,SAAAM,GAAA,SAAAN,IAAA,IAAAO,EAAAlO,EAAAvD,OAAAC,EAAA,EAAAD,CAAAE,KAAAgR,GAAA,QAAAQ,EAAAvN,UAAA/E,OAAAuS,EAAA,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAAF,EAAAE,GAAA1N,UAAA0N,GAAA,OAAAtO,EAAAvD,OAAA8R,EAAA,EAAA9R,CAAAE,MAAAuR,EAAAzR,OAAA+R,EAAA,EAAA/R,CAAAkR,IAAAc,KAAAC,MAAAR,EAAA,CAAAvR,MAAAtB,OAAA+S,KAAA3R,OAAAkS,EAAA,EAAAlS,CAAAuD,EAAA,QAAA4N,EAAAnR,OAAAsD,EAAA,EAAAtD,CAAAuD,MA0B3BgX,WAAa,SAACrX,EAAMM,GAClB,IAAMrB,EAAMoB,EAAK5B,SAAS,QAAQU,OAC9BwO,EAAWtN,EAAK5B,SAAS,YAAYuB,KACzC,OAAQf,GACN,IAAK,SACHoB,EAAK5B,SAAS,YAAYiE,MACxB1C,EAEA2E,GAAW1F,GAAK2F,SAChBtE,GAGFD,EAAK5B,SAAS,cAAciE,MAAM1C,EAAM2E,GAAW1F,GAAK4F,YAExD8I,EAAWA,EAAStM,OAAO,SAAAoP,GAAA,OAA6B,KAA7BA,EAAG6D,UAE9BjU,EAAKL,KAAOmU,GAAiBnU,EAAM2N,GACnC,MACF,IAAK,QACH,GAAqC,WAAjCtN,EAAK5B,SAAS,UAAUD,KAAmB,KACrCI,EAAYyB,EAAK5B,SAAS,iBAA1BG,QACRyB,EAAK5B,SAAS,cAAciE,MAC1B1C,EAEA2E,GAAW1F,GAAK4F,WAChBjG,EAAQrD,IAIZoS,EAAWA,EAAStM,OAAO,SAAAqP,GAAA,OAA6B,KAA7BA,EAAG4D,UAE9BjU,EAAKL,KAAOmU,GAAiBnU,EAAM2N,GACnC,MACF,IAAK,OAEHtN,EAAK5B,SAAS,cAAciE,MAAM1C,EAAM2E,GAAW1F,GAAK4F,YAExD8I,EAAWA,EAAStM,OAAO,SAAA7E,GAAA,OAA6B,KAA7BA,EAAG8X,UAE9BjU,EAAKL,KAAOmU,GAAiBnU,EAAM2N,GACnC,MACF,IAAK,QACHtN,EAAK5B,SAAS,YAAYiE,MACxB1C,EAEA2E,GAAW1F,GAAK2F,SAChBtE,GAGFD,EAAK5B,SAAS,cAAciE,MAAM1C,EAAM2E,GAAW1F,GAAK4F,YAExD8I,EAAWA,EAAStM,OAAO,SAAA0P,GAAA,OAA6B,KAA7BA,EAAGuD,UAE9BjU,EAAKL,KAAOmU,GAAiBnU,EAAM2N,GACnC,MACF,IAAK,mBACH3N,EAAO8V,GAAmB9V,EAAM,GAAI,KAEpCK,EAAK5B,SAAS,cAAciE,MAAM1C,EAAM2E,GAAW1F,GAAK4F,YACxDxE,EAAK5B,SAAS,YAAYiE,MACxB1C,EAEA2E,GAAW1F,GAAK2F,SAChBtE,GAGFqN,EAAWA,EAAStM,OAAO,SAAA2P,GAAA,OAA6B,KAA7BA,EAAGsD,UAE9BjU,EAAKL,KAAOmU,GAAiBnU,EAAM2N,GACnC,MACF,IAAK,kBACH3N,EAAO8V,GAAmB9V,EAAM,GAAI,KAEpCK,EAAK5B,SAAS,cAAciE,MAAM1C,EAAM2E,GAAW1F,GAAK4F,YACxDxE,EAAK5B,SAAS,YAAYiE,MACxB1C,EAEA2E,GAAW1F,GAAK2F,SAChBtE,GAGFqN,EAAWA,EAAStM,OAAO,SAAAmR,GAAA,OAA6B,KAA7BA,EAAG8B,UAE9BjU,EAAKL,KAAOmU,GAAiBnU,EAAM2N,GACnC,MACF,QAEEtN,EAAKL,KAAOA,IAjHSK,EAAA,OAAAvD,OAAAmS,EAAA,EAAAnS,CAAAkR,EAAAM,GAAAxR,OAAAoS,EAAA,EAAApS,CAAAkR,EAAA,EAAA3R,IAAA,aAAAsV,MAAA,eAAA2F,EAAAxa,OAAAya,GAAA,EAAAza,CAAA0a,GAAAC,EAAAC,KAAA,SAAAC,EAuHVrX,EAvHU2I,GAAA,IAAAjJ,EAAAoP,EAAAvG,EAAAC,EAAAkB,EAAAuM,EAAA,OAAAiB,GAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAnX,MAAA,cAuHCV,EAvHDiJ,EAuHCjJ,KACpBoP,EAAQpS,KAAKyB,SAAS4Q,KAAKrS,MAC3B6L,EAAU5I,KAAID,EAAM,SAAA+I,GAAM,OAAI,IAAIkK,GAAOlK,EAAQqG,KAEvDpS,KAAKgD,KAAO6I,EA3HagP,EAAAnX,KAAA,EA4HnB1D,KAAKyB,SAAS,cAAcsZ,aA5HT,cAAAF,EAAAnX,KAAA,EA6HnB1D,KAAKyB,SAAS,YAAYsZ,aA7HP,OA8HnBjP,EAAQ9L,KAAKyB,SAAS,aAAauB,KACnCgK,EAAUhN,KAAKyB,SAAS,cAAciX,UACtCa,EAAQvZ,KAAKyB,SAAS,YAAYiX,UAExC1V,EAAO4I,GAAkBC,EAASC,GAClC9I,EAAOsW,GAAuBtW,EAAMuW,GAElCvW,EADmC,UAAjChD,KAAKyB,SAAS,QAAQU,OACjBmW,GAAetV,EAAMgK,EAAS,SAG9BsL,GAAetV,EAAMgK,GAE9BhN,KAAKqa,WAAWtE,KAAK/S,GAAOM,GAE5BtD,KAAK2X,QAAS,EAEd3X,KAAK2D,OAAQ,EA9IY,yBAAAkX,EAAAG,SAAAL,EAAA3a,SAAA,gBAAAib,EAAAC,GAAA,OAAAZ,EAAAvI,MAAA/R,KAAAiE,YAAA,KAAA5E,IAAA,aAAAsV,MAAA,WAmJzB3U,KAAK2X,QAAS,EAEd3X,KAAK2D,OAAQ,IArJY,CAAAtE,IAAA,WAAAsV,MAAA,SAyJlBhR,GAEP3D,KAAK2D,MAAQA,EAEb3D,KAAK2X,QAAS,MA7JW3G,EAAA,CACfD,GADeE,EAAAnR,OAAA6S,EAAA,EAAA7S,CAAAkR,EAAA4B,UAAA,SAK1B5Q,MAL0B,CAAA6Q,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAA9Q,EAAAlC,KAAA,OAKX,SAACzB,EAAI+E,GACnB,IAAMqB,EAAG,GAAAjG,OAAME,EAAN,SACH6C,EAAWS,EAAKT,SAAS4Q,KAAKnQ,GACpCT,EAAS,aAAaiE,QAEtB,IAAMd,EAAS,CACbC,OAAQ,OACRC,KAAMC,KAAKC,UAAU+U,GAAQtY,EAAU6B,EAAS/E,KAGlDsZ,QAAYxS,QAAQ,CAClBV,MACAC,SACAU,UAAWpD,EAAK4V,WAAWzF,KAAKnQ,GAChCqD,UAAWrD,EAAKS,WAAW0P,KAAKnQ,EAAMoB,GACtCkC,QAAStD,EAAK2B,SAASwO,KAAKnQ,SApBL8O,0GCmDhBmK,GAjFC,SAACpK,GAAD,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAJ,EAAA,SAAAM,GAAA,SAAAN,IAAA,IAAAO,EAAAlO,EAAAvD,OAAAC,EAAA,EAAAD,CAAAE,KAAAgR,GAAA,QAAAQ,EAAAvN,UAAA/E,OAAAuS,EAAA,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAAF,EAAAE,GAAA1N,UAAA0N,GAAA,OAAAtO,EAAAvD,OAAA8R,EAAA,EAAA9R,CAAAE,MAAAuR,EAAAzR,OAAA+R,EAAA,EAAA/R,CAAAkR,IAAAc,KAAAC,MAAAR,EAAA,CAAAvR,MAAAtB,OAAA+S,KAAA3R,OAAAkS,EAAA,EAAAlS,CAAAuD,EAAA,kBAAA4N,EAAAnR,OAAAsD,EAAA,EAAAtD,CAAAuD,MAOZ8C,qBAAuB,WAAM,IACnBhE,EAA6BkB,EAAK5B,SAAS,QAA3CU,OACFiZ,EAAyDjY,KAC7DpC,GACAoB,GAGF,OAAOkZ,KAAMD,EAAyB,SAACzG,EAAOtV,GAAR,OACpCgE,EAAKiY,gBAAgBjc,EAAKsV,MAflB7U,OAAAkS,EAAA,EAAAlS,CAAAuD,EAAA,eAAA6N,EAAApR,OAAAsD,EAAA,EAAAtD,CAAAuD,IAAAvD,OAAAkS,EAAA,EAAAlS,CAAAuD,EAAA,gBAAA8N,EAAArR,OAAAsD,EAAA,EAAAtD,CAAAuD,MA6BZkY,QAAU,SAAAjX,EAORkX,EACAC,EACAC,EACAC,GACG,IATDC,EASCtX,EATDsX,GACAC,EAQCvX,EARDuX,GACAC,EAOCxX,EAPDwX,GACAC,EAMCzX,EANDyX,GAOF,GAAIH,IAAOC,GAAMC,IAAOC,EACtB,OAAO1Y,EAAK2Y,gBAEd,IAAMC,EAASC,KAAI,CAACN,EAAIC,KAAQ,EAC1BM,EAAOC,KAAI,CAACR,EAAIC,KAAQ,EACxBQ,EAASH,KAAI,CAACJ,EAAIC,KAAQ,EAC1BO,EAAOF,KAAI,CAACN,EAAIC,KAAQ,EAExBQ,EAAaN,EAAST,EAAa,IACnCgB,EAAaL,EAAOX,EAAa,IACjCiB,EAAeJ,EAASZ,EAAc,IACtCiB,EAAaJ,EAAOb,EAAc,IAElCkB,EAAcnJ,KAClBoJ,KAAQvZ,EAAKwZ,YACb,SAACC,GAAD,OAAyD,IAAjBA,EAAU,MAC/C,CAAC,MAAM,GAEZzZ,EAAKL,KAAKwI,QAAQ,SAACO,GAAoB,IAAAgR,EACZ5Z,KAAI4I,EAAQ5I,KAAIwZ,EAAa,QAA9C9R,EAD6BkS,EAC7BlS,MAAOC,EADsBiS,EACtBjS,MAGTkS,EAAanS,EAAQ6Q,EAAc,IAAM,GACzCuB,EAAanS,EAAQ6Q,EAAe,IAAM,GAE7CuB,KAAQF,EAAWT,EAAWC,IAC3BU,KAAQD,EAAWR,EAAaC,IAEpC3Q,EAAOoR,YAAW,MArEZrd,OAAAkS,EAAA,EAAAlS,CAAAuD,EAAA,gBAAA+N,EAAAtR,OAAAsD,EAAA,EAAAtD,CAAAuD,MAAA,OAAAvD,OAAAmS,EAAA,EAAAnS,CAAAkR,EAAAM,GAAAN,EAAA,CACAD,GADAE,EAAAnR,OAAA6S,EAAA,EAAA7S,CAAAkR,EAAA4B,UAAA,mBAGX5Q,MAHW,CAAA6Q,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAA9Q,EAAAlC,KAAA,OAGc,SAACuO,EAAMoG,GAC/BzS,EAAK2a,WAAWtO,GAAQoG,MAJdzD,EAAApR,OAAA6S,EAAA,EAAA7S,CAAAkR,EAAA4B,UAAA,gBAmBX5Q,MAnBW,CAAA6Q,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAAvN,EAAAzF,KAAA,OAmBW,SAAC2U,GAEtBlP,EAAK6M,OAASqC,MArBJxD,EAAArR,OAAA6S,EAAA,EAAA7S,CAAAkR,EAAA4B,UAAA,iBAyBX5Q,MAzBW,CAAA6Q,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAArN,EAAA3F,KAAA,OAyBY,WACtB2F,EAAK3C,KAAKwI,QAAQ,SAAAiI,GAAA,OAA6B0J,EAA7B1J,EAAG0J,aAAqC,SA1BhD/L,EAAAtR,OAAA6S,EAAA,EAAA7S,CAAAkR,EAAA4B,UAAA,iBA2EX5Q,MA3EW,CAAA6Q,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAAoK,EAAApd,KAAA,OA2EY,WAEtBod,EAAKpa,KAAO,OA7EFgO,GCJDqM,GARQ,SAAAtM,GAAU,OAC/BuM,aACEC,GACAvH,GACAoE,GACAe,GAJFmC,CAKEvM,ICAEzO,GAAgC,CACpCC,OAAQ,wBACRC,KAAM,uBAGFC,GAA4B,CAChCF,OAAQ,eACRC,KAAM,cCbFgb,GAAW,SAACxa,EAAMf,EAAK5C,GAAZ,OAEf2D,EAAKqB,OAAO,SAAAC,GAAA,OAAAA,EAAG2J,UAA0BhH,GAAYhF,GAAK5C,GAAKoH,YAwClDgX,ikBAhBe,IAElBtb,EAAWnC,KAAKyB,SAAS,QAAzBU,OACFub,EAA6B,mBAAjB1d,KAAKmS,QAEnBnS,KAAK4P,MAAMvL,OAAO,SAAAoP,GAAA,OAA2C,MAA3CA,EAAGvF,iBAErBlO,KAAK4P,MAAMvL,OAAO,SAAAqP,GAAA,OAA2C,MAA3CA,EAAGxF,iBACzB,MAAO,CACLxH,QAAS8W,GAASE,EAAWvb,EAAQ,GACrCwb,eAAgBH,GAASE,EAAWvb,EAAQ,GAC5Cyb,aAAcJ,GAASE,EAAWvb,EAAQ,WDpBvB,SAAA4O,GAAU,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAL,EAAA,SAAAM,GAAA,SAAAN,IAAA,IAAAO,EAAAlO,EAAAvD,OAAAC,EAAA,EAAAD,CAAAE,KAAAgR,GAAA,QAAAQ,EAAAvN,UAAA/E,OAAAuS,EAAA,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAAF,EAAAE,GAAA1N,UAAA0N,GAAA,OAAAtO,EAAAvD,OAAA8R,EAAA,EAAA9R,CAAAE,MAAAuR,EAAAzR,OAAA+R,EAAA,EAAA/R,CAAAkR,IAAAc,KAAAC,MAAAR,EAAA,CAAAvR,MAAAtB,OAAA+S,KAAA3R,OAAAkS,EAAA,EAAAlS,CAAAuD,EAAA,aAAA4N,EAAAnR,OAAAsD,EAAA,EAAAtD,CAAAuD,IAAAvD,OAAAkS,EAAA,EAAAlS,CAAAuD,EAAA,2BAAA6N,EAAApR,OAAAsD,EAAA,EAAAtD,CAAAuD,IAAAvD,OAAAkS,EAAA,EAAAlS,CAAAuD,EAAA,UAAA8N,EAAArR,OAAAsD,EAAA,EAAAtD,CAAAuD,IAAAvD,OAAAkS,EAAA,EAAAlS,CAAAuD,EAAA,WAAA+N,EAAAtR,OAAAsD,EAAA,EAAAtD,CAAAuD,IAAAvD,OAAAkS,EAAA,EAAAlS,CAAAuD,EAAA,QAAAgO,EAAAvR,OAAAsD,EAAA,EAAAtD,CAAAuD,MAyE/BV,WAAa,SAAA2B,GAAc,IAAXtB,EAAWsB,EAAXtB,KAEdK,EAAKsU,QAAS,EAGdtU,EAAKuM,MAAQvL,KAAOrB,EAAM,SAAAyQ,GAAA,OAAmC,IAAnCA,EAAG3F,cAAsC,KAGnEzK,EAAKM,MAAQ,MAjFgBN,EAqF/BQ,SAAW,SAACF,GAEVN,EAAKsU,QAAS,EAEdtU,EAAKM,MAAQA,GAzFgBN,EAAA,OAAAvD,OAAAmS,EAAA,EAAAnS,CAAAkR,EAAAM,GAAAN,EAAA,CACnBD,GADmBE,EAAAnR,OAAA6S,EAAA,EAAA7S,CAAAkR,EAAA4B,UAAA,cAI9B5Q,MAJ8B,CAAA6Q,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAA9Q,EAAAlC,KAAA,OAIV,SAACuO,GAEpBrM,EAAKiQ,QAAU5D,EAFc,IAGrBpM,EAAWD,EAAKT,SAAS,QAAzBU,OACAmZ,EAAoBpZ,EAAKT,SAAS,WAAlC6Z,gBAGR,OAAI7O,KAAS,CAAC,SAAU,QAAStK,GACxBkZ,KAAM,CAAEra,MAAM,EAAOC,IAAI,GAAQ,SAAC0T,EAAOtV,GAAR,OACtCic,EAAgBjc,EAAKsV,KAElB0G,KAAM,CAAEra,MAAM,EAAMC,IAAI,GAAS,SAAC0T,EAAOtV,GAAR,OACtCic,EAAgBjc,EAAKsV,SAhBMzD,EAAApR,OAAA6S,EAAA,EAAA7S,CAAAkR,EAAA4B,UAAA,4BAoB9B5Q,MApB8B,CAAA6Q,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAAvN,EAAAzF,KAAA,OAoBI,WAAM,IAC/BmC,EAAWsD,EAAKhE,SAAS,QAAzBU,OACAmZ,EAAoB7V,EAAKhE,SAAS,WAAlC6Z,gBAEFF,EAA0BjY,KAAIpC,GAAmBoB,GACvD,OAAOkZ,KAAMD,EAAyB,SAACzG,EAAOtV,GAAR,OACpCic,EAAgBjc,EAAKsV,SA1BMxD,EAAArR,OAAA6S,EAAA,EAAA7S,CAAAkR,EAAA4B,UAAA,WA8B9B5Q,MA9B8B,CAAA6Q,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAArN,EAAA3F,KAAA,OA8Bb,SAAC2U,GAEjBhP,EAAKwM,QAAUwC,MAhCcvD,EAAAtR,OAAA6S,EAAA,EAAA7S,CAAAkR,EAAA4B,UAAA,YAoC9B5Q,MApC8B,CAAA6Q,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAAoK,EAAApd,KAAA,OAoCZ,SAAC2U,GAElByI,EAAKS,MAAQlJ,MAtCgBtD,EAAAvR,OAAA6S,EAAA,EAAA7S,CAAAkR,EAAA4B,UAAA,SA0C9B5Q,MA1C8B,CAAA6Q,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAA8K,EAAA9d,KAAA,OA0Cf,SAAC6C,EAAQS,GAAY,IAAAS,EAC7BY,EAAG,GAAAjG,OAAME,EAAN,SACHqD,EAAM6b,EAAKrc,SAAS,QAAQU,OAC5BX,EAAe2B,KAAI2a,EAAKrc,SAAS,UAAW,QAC5CyD,EAASjC,KAAIgE,GAAa,CAAChF,EAAK,aAChC2C,EAAS,CACbE,KAAMC,KAAKC,UAAU,CACnBC,KAAM3C,GAAWd,GACjB0D,QAAMnB,EAAA,CACJiM,YAAa1M,GADTxD,OAAAqF,GAAA,EAAArF,CAAAiE,EAEHtB,GAAOjB,GAAQ,CAACqB,IAFb/C,OAAAqF,GAAA,EAAArF,CAAAiE,EAAA,cAGS,CAACmB,IAHVnB,KAMRc,OAAQ,QAEVO,QAAMC,QAAQ,CACZT,SACAY,QAAS,SAAA7B,GAAK,OAAIma,EAAKja,SAASF,IAChC2B,UAAW,WAETwY,EAAKlO,MAAQ,GAEbkO,EAAKnG,OAAS,MAEhBpS,UAAW,SAAA3C,GAAI,OAAIkb,EAAKnb,WAAWC,IACnC+B,YApE2BqM,ECbf+M,CAAYne,2CAC7BkC,8EAAqB,uDAErBA,+EAAmB,0CAEnBA,+EAAmB,8CAEnBA,+EAAoB,0CAGpBA,yGAEAA,8EAAmB,CAClBkc,KAAM,GACNC,MAAO,+CAGRnc,8EAAsB,CACrBkc,KAAM,GACNC,MAAO,+CAGRlc,oFC1BY+O,yWCJO,SAAAC,GAAU,IAAAC,EAAAC,EAAA,OAAAD,EAAA,SAAAM,GAAA,SAAAN,IAAA,IAAAO,EAAAlO,EAAAvD,OAAAC,EAAA,EAAAD,CAAAE,KAAAgR,GAAA,QAAAQ,EAAAvN,UAAA/E,OAAAuS,EAAA,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAAF,EAAAE,GAAA1N,UAAA0N,GAAA,OAAAtO,EAAAvD,OAAA8R,EAAA,EAAA9R,CAAAE,MAAAuR,EAAAzR,OAAA+R,EAAA,EAAA/R,CAAAkR,IAAAc,KAAAC,MAAAR,EAAA,CAAAvR,MAAAtB,OAAA+S,KAAA3R,OAAAkS,EAAA,EAAAlS,CAAAuD,EAAA,QAAA4N,EAAAnR,OAAAsD,EAAA,EAAAtD,CAAAuD,MAAA,OAAAvD,OAAAmS,EAAA,EAAAnS,CAAAkR,EAAAM,GAAAxR,OAAAoS,EAAA,EAAApS,CAAAkR,EAAA,EAAA3R,IAAA,aAAAsV,MAAA,SAAArQ,GAsBP,IAARtB,EAAQsB,EAARtB,KAEXhD,KAAKgD,KAAOA,EAEZhD,KAAK2X,QAAS,EAEd3X,KAAK2D,OAAQ,IA5Ba,CAAAtE,IAAA,aAAAsV,MAAA,WAiC1B3U,KAAK2X,QAAS,EAEd3X,KAAK2D,OAAQ,IAnCa,CAAAtE,IAAA,WAAAsV,MAAA,SAuCnBhR,GAEP3D,KAAK2D,MAAQA,EAEb3D,KAAK2X,QAAS,MA3CY3G,EAAA,CAChBD,GADgBE,EAAAnR,OAAA6S,EAAA,EAAA7S,CAAAkR,EAAA4B,UAAA,SAG3B5Q,MAH2B,CAAA6Q,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAA9Q,EAAAlC,KAAA,OAGZ,WACd,IAAM2E,EAAG,GAAAjG,OAAME,EAAN,SACHgG,EAAS,CACbC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,KAAM,8BAIV4S,QAAYxS,QAAQ,CAClBV,MACAC,SACAU,UAAWpD,EAAK4V,WAAWzF,KAAKnQ,GAChCqD,UAAWrD,EAAKS,WAAW0P,KAAKnQ,GAChCsD,QAAStD,EAAK2B,SAASwO,KAAKnQ,SAjBJ8O,EDJVkN,CAActe,0CACjCkC,+EAAoB,0CAEpBA,+EAAmB,4CAEnBA,8EAAkB,8BEwBNqc,kfAdX,OAAOC,KACLpe,KAAKgD,KACL,SAACqb,EAAD/Z,GAKE,OALwBA,EAAlB8T,YAIM5M,QAAQ,SAAAiI,GAAA,IAAGpN,EAAHoN,EAAGpN,UAAH,OAAmBgY,EAAIlR,KAAJ,GAAAzO,OAAY2H,EAAZ,cAChCgY,GAET,WAtBsB1E,GAAc/Z,yCACvCkC,+EAAmB,8CAEnBA,+EAAoB,yCAEpBA,8EAAkB,+CAElBA,8EAAuB,iDAEvBA,+EAAyB,4CAEzBC,mFCMYuc,kfAJX,OAAOrb,KAAIjD,KAAK0Y,UAAW,SAAApU,GAAA,IAAG+O,EAAH/O,EAAG+O,SAAH,SAAA3U,OAAqB2U,EAArB,oBAbDmF,GAAgB5Y,yCAC3CkC,+EAAmB,8CAEnBA,+EAAoB,yCAEpBA,8EAAkB,iDAElBA,+EAAyB,8CAEzBA,8EAAuB,6CAEvBC,mFCAYwc,yWAVY7G,GAAe9X,0CAEvCkC,yGAGAA,wGAEAA,8EAAkB,UCKN0c,ucCNM,SAACzN,GAAD,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAL,EAAA,SAAAM,GAAA,SAAAN,IAAA,IAAAO,EAAAlO,EAAAvD,OAAAC,EAAA,EAAAD,CAAAE,KAAAgR,GAAA,QAAAQ,EAAAvN,UAAA/E,OAAAuS,EAAA,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAAF,EAAAE,GAAA1N,UAAA0N,GAAA,OAAAtO,EAAAvD,OAAA8R,EAAA,EAAA9R,CAAAE,MAAAuR,EAAAzR,OAAA+R,EAAA,EAAA/R,CAAAkR,IAAAc,KAAAC,MAAAR,EAAA,CAAAvR,MAAAtB,OAAA+S,KAAA3R,OAAAkS,EAAA,EAAAlS,CAAAuD,EAAA,aAAA4N,EAAAnR,OAAAsD,EAAA,EAAAtD,CAAAuD,IAAAvD,OAAAkS,EAAA,EAAAlS,CAAAuD,EAAA,mBAAA6N,EAAApR,OAAAsD,EAAA,EAAAtD,CAAAuD,IAAAvD,OAAAkS,EAAA,EAAAlS,CAAAuD,EAAA,WAAA8N,EAAArR,OAAAsD,EAAA,EAAAtD,CAAAuD,IAAAvD,OAAAkS,EAAA,EAAAlS,CAAAuD,EAAA,YAAA+N,EAAAtR,OAAAsD,EAAA,EAAAtD,CAAAuD,IAAAvD,OAAAkS,EAAA,EAAAlS,CAAAuD,EAAA,WAAAgO,EAAAvR,OAAAsD,EAAA,EAAAtD,CAAAuD,MAAA,OAAAvD,OAAAmS,EAAA,EAAAnS,CAAAkR,EAAAM,GAAAxR,OAAAoS,EAAA,EAAApS,CAAAkR,EAAA,EAAA3R,IAAA,mBAAA8D,IAAA,WAuEf,OAAOnD,KAAKye,MAAQze,KAAK0e,WAvEV1N,EAAA,CACLD,GADKE,EAAAnR,OAAA6S,EAAA,EAAA7S,CAAAkR,EAAA4B,UAAA,cAKhB5Q,MALgB,CAAA6Q,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAA9Q,EAAAlC,KAAA,OAKI,YAGC,KAAhBkC,EAAKwc,QAAiBxc,EAAKwc,OAAS,IACtCxc,EAAKyc,UAAU,IAIE,KAAfzc,EAAKuc,OAAgBvc,EAAKuc,MAAQ,IACpCvc,EAAK0c,SAAS,GAIhB1c,EAAK2c,UAAY3c,EAAK2c,aAlBP3N,EAAApR,OAAA6S,EAAA,EAAA7S,CAAAkR,EAAA4B,UAAA,oBAwBhB5Q,MAxBgB,CAAA6Q,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAAvN,EAAAzF,KAAA,OAwBU,WAGzByF,EAAKqZ,eAAiBrZ,EAAKqZ,kBA3BZ3N,EAAArR,OAAA6S,EAAA,EAAA7S,CAAAkR,EAAA4B,UAAA,YAiChB5Q,MAjCgB,CAAA6Q,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAArN,EAAA3F,KAAA,OAiCE,WAGjB2F,EAAKoZ,OAASpZ,EAAKoZ,UApCJ3N,EAAAtR,OAAA6S,EAAA,EAAA7S,CAAAkR,EAAA4B,UAAA,aA2ChB5Q,MA3CgB,CAAA6Q,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAAoK,EAAApd,KAAA,OA2CG,SAAC0e,GAEnBtB,EAAKsB,OAASA,EAIdtB,EAAK3b,SAAS,eAAesd,MAAMC,cAAcN,OAjDlCrN,EAAAvR,OAAA6S,EAAA,EAAA7S,CAAAkR,EAAA4B,UAAA,YAwDhB5Q,MAxDgB,CAAA6Q,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAA8K,EAAA9d,KAAA,OAwDE,SAACye,GAElBX,EAAKW,MAAQA,EAIbX,EAAKrc,SAAS,eAAesd,MAAME,YAAYR,OA9DhC3e,OAAA6S,EAAA,EAAA7S,CAAAkR,EAAA4B,UAAA,oBAoEhB7Q,MApEgBjC,OAAAmT,yBAAAjC,EAAA4B,UAAA,oBAAA5B,EAAA4B,WAAA5B,EDNUkO,CAAatf,0CACzCkC,+EAAoB,0CAEpBA,+EAAmB,kDAEnBA,+EAA2B,0CAE3BA,+EAAmB,6CAEnBA,+EAAsB,6BE2CVqd,GA/CG,SAAAtT,GAAO,OAAI,SAAAkF,GAAU,IAAAC,EAAAC,EAAAC,EAAA,OAAAF,EAAA,SAAAM,GAAA,SAAAN,IAAA,IAAAO,EAAAlO,EAAAvD,OAAAC,EAAA,EAAAD,CAAAE,KAAAgR,GAAA,QAAAQ,EAAAvN,UAAA/E,OAAAuS,EAAA,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAAF,EAAAE,GAAA1N,UAAA0N,GAAA,OAAAtO,EAAAvD,OAAA8R,EAAA,EAAA9R,CAAAE,MAAAuR,EAAAzR,OAAA+R,EAAA,EAAA/R,CAAAkR,IAAAc,KAAAC,MAAAR,EAAA,CAAAvR,MAAAtB,OAAA+S,KAAA3R,OAAAkS,EAAA,EAAAlS,CAAAuD,EAAA,SAAA4N,EAAAnR,OAAAsD,EAAA,EAAAtD,CAAAuD,IAAAvD,OAAAkS,EAAA,EAAAlS,CAAAuD,EAAA,UAAA6N,EAAApR,OAAAsD,EAAA,EAAAtD,CAAAuD,MAAA,OAAAvD,OAAAmS,EAAA,EAAAnS,CAAAkR,EAAAM,GAAAxR,OAAAoS,EAAA,EAAApS,CAAAkR,EAAA,EAAA3R,IAAA,SAAA8D,IAAA,WAYjC,IAAMgP,EAAU,GAWhB,OARAnS,KAAKof,QAAQ5T,QAAQ,SAAAlH,GAAwB,IAArBoO,EAAqBpO,EAArBoO,eACjBF,KAAQE,IAEXA,EAAelH,QAAQ,SAAAnH,GAAM,OAAI8N,EAAQhF,KAAK9I,OAK3CrE,KAAK6L,QAAQ7I,KAAKqB,OAAO,SAAAoP,GAAA,OAAAA,EAAGtH,KAG5BQ,KAAK,SAAAoI,GAAQ,OAEhB5C,EAAQxF,KAAK,SAAA+G,GAAiC,IAA9B2L,EAA8B3L,EAA9B2L,WACR1K,EADsCjB,EAAlB4L,YACA7U,MAAM,KAChC,OACEmL,SAASyJ,EAAY,MAAQtK,EAAS,IACnCJ,EAAMlI,SAASjC,KAASuK,EAAS,aAhCX,CAAA1V,IAAA,WAAA8D,IAAA,WAwCjC,OAAOoc,KAAOC,SACZxf,KAAKyf,OAAOvgB,OAASc,KAAK+e,MAAMW,SAChC,eA1C+B1O,EAAA,CACvBD,GADuBE,EAAAnR,OAAA6S,EAAA,EAAA7S,CAAAkR,EAAA4B,UAAA,UAGlC9Q,MAHkC,CAAA+Q,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,iBAGd,MAHc9B,EAAApR,OAAA6S,EAAA,EAAA7S,CAAAkR,EAAA4B,UAAA,WAMlC9Q,MANkC,CAAA+Q,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBAMbnH,KANa/L,OAAA6S,EAAA,EAAA7S,CAAAkR,EAAA4B,UAAA,UAUlC7Q,MAVkCjC,OAAAmT,yBAAAjC,EAAA4B,UAAA,UAAA5B,EAAA4B,WAAA9S,OAAA6S,EAAA,EAAA7S,CAAAkR,EAAA4B,UAAA,YAuClC7Q,MAvCkCjC,OAAAmT,yBAAAjC,EAAA4B,UAAA,YAAA5B,EAAA4B,WAAA5B,ICuBxB2O,kBAxBb,SAAAA,EAAYrgB,GAAQQ,OAAAC,EAAA,EAAAD,CAAAE,KAAA2f,GAAA7f,OAAAkS,EAAA,EAAAlS,CAAAE,KAAA,UAAA4f,GAAA5f,MAAAF,OAAAkS,EAAA,EAAAlS,CAAAE,KAAA,QAAA6f,GAAA7f,MAAAF,OAAAkS,EAAA,EAAAlS,CAAAE,KAAA,aAAA8f,GAAA9f,MAClBF,OAAOsW,OAAOpW,KAAMV,8DAKpB,IAAM8C,EAAU,GAWhB,OAVIpC,KAAKmS,SACP/P,EAAQ+K,KAAK,CAEXkS,WAAYrf,KAAKsM,mBAEjBgT,YAAatf,KAAKuM,yBAElBwT,eAAgB/f,KAAKyX,kBAGlBrV,kDAtBRN,+EAAqB,0CAErBA,8EAAmB,iDAQnBC,6HAgBAC,0FAAoB,SAAA2S,GAAK,OAAKtR,EAAK8O,QAAUwC,UC6EjCqL,kBAzFb,SAAAA,EAAY1gB,EAAO0I,GAAQlI,OAAAC,EAAA,EAAAD,CAAAE,KAAAggB,GAAAlgB,OAAAkS,EAAA,EAAAlS,CAAAE,KAAA,UAAAigB,GAAAjgB,MAAAF,OAAAkS,EAAA,EAAAlS,CAAAE,KAAA,aAAAkgB,GAAAlgB,MAAAF,OAAAkS,EAAA,EAAAlS,CAAAE,KAAA,YAAAmgB,GAAAngB,MAAAF,OAAAkS,EAAA,EAAAlS,CAAAE,KAAA,aAAAogB,GAAApgB,MACzBF,OAAOsW,OAAOpW,KAAMV,GAEpBU,KAAKgI,MAAQA,EAKbhI,KAAKqgB,MAAM7U,QAAQ,SAAC6U,GAClBA,EAAM5I,gBAAkB4I,EAAMC,cAIhCtgB,KAAKugB,WAAavgB,KAAKqgB,MAAMpd,IAAI,SAAAwI,GAAI,OAAI,IAAIkU,GAAUlU,4DAMvD,OADe+H,KAAKxT,KAAKugB,WAAY,CAAEpO,SAAS,KAC/B,sBAyCqD,IAAvD7F,EAAuDhI,EAAvDgI,mBAAoBC,EAAmCjI,EAAnCiI,yBAA0B8T,EAAS/b,EAAT+b,MACvDG,EAAYhN,KAAKxT,KAAKugB,WAAY,CAAEpO,SAAS,IAC7CsO,EAAajN,KAAKxT,KAAKugB,WAAY,CAAEF,UAQ3C,GAAII,EAAWtO,QAAS,OAAOsO,EAAWC,YAAW,GAIjDF,IAEFA,EAAUrO,SAAU,GAGJqB,KAAKxT,KAAKugB,WAAY,CACtCjU,qBACAC,6BAKQmU,YAAW,uCA7DrB,OAAO1gB,KAAKugB,WAAWlc,OAAO,SAAAoH,GAAI,OAAIA,EAAK0G,iDAM3C,IAAM/P,EAAU,GAWhB,OATKoQ,KAAQxS,KAAK2gB,cAChB3gB,KAAK2gB,YAAYnV,QAAQ,SAAAiI,GAAwBA,EAArBf,eAGXlH,QAAQ,SAAAnH,GAAM,OAAIjC,EAAQ+K,KAAK9I,OAK3CjC,kDAjDRN,+EAAqB,+CAErBA,8EAAwB,6CAsBxBC,uHAMAA,2HAMAA,4HAiBAC,0FAAmB,SAAAyJ,GAAI,OAAKpI,EAAKud,WAAanV,gDAG9CzJ,0FAAoB,WACnBE,EAAKqe,WAAW/U,QAAQ,SAACqV,GAEvBA,EAAUH,YAAW,aCgBZI,GAjFQ,SAAA/P,GAAU,IAAAC,EAAAC,EAAAC,EAAA,OAAAF,EAAA,SAAAM,GAAA,SAAAN,IAAA,IAAAO,EAAAlO,EAAAvD,OAAAC,EAAA,EAAAD,CAAAE,KAAAgR,GAAA,QAAAQ,EAAAvN,UAAA/E,OAAAuS,EAAA,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAAF,EAAAE,GAAA1N,UAAA0N,GAAA,OAAAtO,EAAAvD,OAAA8R,EAAA,EAAA9R,CAAAE,MAAAuR,EAAAzR,OAAA+R,EAAA,EAAA/R,CAAAkR,IAAAc,KAAAC,MAAAR,EAAA,CAAAvR,MAAAtB,OAAA+S,KAAA3R,OAAAkS,EAAA,EAAAlS,CAAAuD,EAAA,eAAA4N,EAAAnR,OAAAsD,EAAA,EAAAtD,CAAAuD,MA+B7B0d,kBAAoB,SAAAzc,GAAc,IAAXtB,EAAWsB,EAAXtB,KAEfge,EAAa,GAEbC,EAAW,GAwBjB,GApBAje,EAAKwI,QAAQ,SAAAiI,GAAe,IAAZkB,EAAYlB,EAAZkB,MAAYuM,EACAvM,EAAM,GAAxBwM,EADkBD,EAClBC,OAAQnZ,EADUkZ,EACVlZ,MAGhBmZ,EAAO3V,QAAQ,SAAAkI,GAAqC,IAAlC0N,EAAkC1N,EAAlC0N,aAAiBC,EAAiBvhB,OAAA8Z,GAAA,EAAA9Z,CAAA4T,EAAA,kBAClD2N,EAAW5J,gBAAkB2J,EAC7BJ,EAAW7T,KAAK,IAAI6S,GAAOqB,EAAYrZ,IACvCiZ,EAAS9T,KAAKiU,GAEdC,EAAWhB,MAAM7U,QAAQ,SAAAhM,GAAA,IAAG8gB,EAAH9gB,EAAG8gB,YAAH,OACvBW,EAAS9T,KAAKmT,OAElBjd,EAAK4R,OAAOjN,GAAS2M,EAAM,KAG7BtR,EAAK1B,YAAa,EAKd0B,EAAKjC,OAAQ,CACf,IAAMkgB,EAAU,GAGhBL,EAASzV,QAAQ,SAACjN,GAAS+iB,EAAQ/iB,GAAMA,IACzC8E,EAAKjC,OAAOmgB,WAAWD,GAKzBje,EAAK+b,QAAU4B,GArEYlhB,OAAAkS,EAAA,EAAAlS,CAAAuD,EAAA,eAAA6N,EAAApR,OAAAsD,EAAA,EAAAtD,CAAAuD,MAAA,OAAAvD,OAAAmS,EAAA,EAAAnS,CAAAkR,EAAAM,GAAAN,EAAA,CACjBD,GADiBE,EAAAnR,OAAA6S,EAAA,EAAA7S,CAAAkR,EAAA4B,UAAA,gBAI5B5Q,MAJ4B,CAAA6Q,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAA9Q,EAAAlC,KAAA,OAIN,WACrB,IAAM2E,EAAG,GAAAjG,OAAMwD,EAAKsf,QAAX,SACH5c,EAAS,CACbC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,KAAM,oCAIV4S,QAAYxS,QAAQ,CAClBV,MACAC,SAEAU,UAAW,WAETpD,EAAKP,YAAa,GAEpB4D,UAAW,SAAA3C,GAAI,OAAIV,EAAK6e,kBAAkBne,IAE1C4C,QAAS,SAAC7B,GAERzB,EAAKyB,MAAQA,SAzBUuN,EAAApR,OAAA6S,EAAA,EAAA7S,CAAAkR,EAAA4B,UAAA,gBAyE5B5Q,MAzE4B,CAAA6Q,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAAvN,EAAAzF,KAAA,OAyEN,WAErByF,EAAK2Z,QAAQ5T,QAAQ,SAAC2V,GACpBA,EAAOM,mBA5EkBzQ,GCQlB0Q,GANU,SAAC3Q,EAAYlF,GAAb,OACvByR,aACE6B,GAAUtT,GACViV,GAFFxD,CAGEvM,ICFiB4Q,umBCmDnBhf,WAAa,SAAA2B,GAAyD,IAAtDsd,EAAsDtd,EAAtDsd,MAEdve,EAAKue,MAAQA,EAEbve,EAAK1B,YAAa,EAElB0B,EAAKM,MAAQ,QAGfE,SAAW,SAACF,GAEVN,EAAKM,MAAQA,EAEbN,EAAK1B,YAAa,gCApD0B/B,wCAE7CoC,0FAAe,SAEd6f,EAEAhf,EAEAif,GAEA,IAAMnd,EAAG,GAAAjG,OAAME,EAAN,gBAGHsG,EAAkB,CACtBD,KAFoB,SAAT6c,EAAkB,0BAA4B,qBAGzDD,YAEF3c,EANyB,SAAT4c,EAAkB,UAAY,aAM5Bjf,EAElB,IAAM+B,EAAkB,CACtBC,OAAQ,OACRC,KAAMC,KAAKC,UAAUE,IAGvBE,QAAMC,QAAQ,CACZV,MACAC,SACAU,UAAW,WAETpD,EAAK0f,MAAQ,GAEb1f,EAAKP,YAAa,GAEpB4D,UAAW,SAAC3C,GAAD,OACTV,EAAKS,WAAWC,IAClB4C,QAAS,SAAC7B,GAAD,OAAgBzB,EAAK2B,SAASF,oDD7C1C7B,8EAAmB,gDAEnBA,+EAAwB,0CAExBA,+EAAmB,gCEJdkH,GAA0BF,GAA1BE,UAAWC,GAAeH,GAAfG,WACXE,GAAqCD,GAArCC,YAAaC,GAAwBF,GAAxBE,oBACbG,GAAeD,GAAfC,WCXawY,wkBCqBnBC,cAAgB,SAACC,EAAoBzgB,EAAcqB,GAEjD,IAAMqf,EAAc/e,KAAIE,EAAK5B,SAAL,GAAA/C,OAAiB8C,EAAjB,UAA+B,UACjD2gB,EAAgBhf,KAAIE,EAAK5B,SAAS,mBAAoB,CAACD,EAAMqB,IAC7Duf,EAA0Bjf,KAC9BE,EAAK5B,SAAL,GAAA/C,OAAiB8C,EAAjB,UAA+B,qBAG3B6gB,EAAqB,CACzBC,kBAAmB,CACjBhf,QAAS,CAACT,GACV2L,OAAQ0T,GAEVK,cAAe,CACbjf,QAAS6e,EACTK,kBAAmBJ,EACnB5T,OAAQ0T,GAEVO,YAAa,CACXnf,QAAS6e,EACTK,kBAAmBJ,EACnB5T,OAAQ0T,GAGVQ,kBAAmB,CACjBpf,QAASL,KAAIE,KAAItD,GAAQ,4BAA6B,IAAK,WAC3D2iB,kBAAmBrf,KAAItD,GAAQ,sCAC/B2O,OAAQrL,KAAItD,GAAQ,uCAEtB8iB,kBAAmB,GACnBC,gBAAiB,IAGnB,OAAOzf,KAAIkf,EAAoBJ,EAAW,+EApCIriB,4CAwC/CoC,0FAAmB,SAAChE,EAAOqB,EAAa4iB,GACvC,IAAMtd,EAAW,GAAAjG,OAAME,EAAN,yBAD6CikB,EAU1D3gB,EAAKT,SAAS,UAPhBqhB,EAH4DD,EAG5DC,UACA5Y,EAJ4D2Y,EAI5D3Y,KACA1I,EAL4DqhB,EAK5DrhB,KAMIuhB,EAAsB,GAAArkB,OAAM8C,EAAN,WAEtBqB,EAAiBM,KAAIjB,EAAKT,SAASshB,GAAgBnhB,QAAS,QAC5DuB,KAAIjB,EAAKT,SAASshB,GAAiB,WAdqBC,EAoB1D9gB,EAAK8f,cAAcC,EAAWzgB,EAAMqB,GAHtCS,EAjB4D0f,EAiB5D1f,QACAkf,EAlB4DQ,EAkB5DR,kBACAhU,EAnB4DwU,EAmB5DxU,OAIF,IAAKlL,EAAQpE,OAAQ,OAAO,KAE5B,IAAM+jB,EAAY,SAACC,EAAkBC,GAAnB,MAAyC,CACzDC,KAAMF,EAAU,MAAQ,OACxBG,MAAOF,IAsEHG,EAAgB,CACpBC,QAxB0B,kBAAAzjB,OAAAqF,GAAA,EAAArF,CAAA,CAC1B0jB,QAAStZ,EACT5G,UACAkL,OAAQvL,KAAIgF,KAAOuG,GAAS,SAAAkF,GAAA,IAC1ByP,EAD0BzP,EAC1ByP,SACAM,EAF0B/P,EAE1B+P,eACAP,EAH0BxP,EAG1BwP,QACAQ,EAJ0BhQ,EAI1BgQ,YACAC,EAL0BjQ,EAK1BiQ,UAL0B,MAMhB,CACVC,iBAAkBC,OAAOrB,GACzBsB,SAAUC,QAAwB,UAAhBL,GAClBnV,KAAMuU,EAAUa,IAAcA,EAC9Bze,OAAQjC,KAAIwgB,EAAgB,SAAAjkB,GAAA,OFnIT,SAACwkB,GAC1B,IAAM9e,EAEF,CACFuB,SAAUud,GAwBZ,OArBIvX,KAAS9D,GAAiBqb,KAC5B9e,EAAO6I,WAAa9E,IAGlBwD,KAAS7D,GAAgBob,KAC3B9e,EAAO6I,WAAa/E,IAGlByD,KAAS5D,GAAWmb,KACtB9e,EAAO8I,WAAazE,IAGlBkD,KAAShE,GAAYub,KACvB9e,EAAOgJ,eAAiB/E,IAItBsD,KAAS/D,GAAmBsb,KAC9B9e,EAAOgJ,eAAiB9E,IAGnBlE,EEuG6C+e,CAAlBzkB,EAAGiH,YAC/Byd,OAAQjB,EAAUC,EAASC,MAE7BrB,KAAMziB,GAhBoB,GAAAX,OAiBtB8C,EAjBsB,OAiBVqB,IAQhByf,kBArE+B,WAAM,IAAAvF,EACN5Z,KAAIjB,EAAKT,SAAS,gBAAiB,OAAQ,IAAlE0iB,EAD6BpH,EAC7BoH,SAAUC,EADmBrH,EACnBqH,SACZC,EAAiBphB,KAAIgF,KAAOuG,GAAS,SAAAlK,GAMrC,IALJ6e,EAKI7e,EALJ6e,SACAM,EAIInf,EAJJmf,eACAP,EAGI5e,EAHJ4e,QACAS,EAEIrf,EAFJqf,UACAnhB,EACI8B,EADJ9B,KAEMiM,EAKF,CACFF,KAAMuU,EAAUa,IAAcA,EAC9Bze,OAAQjC,KAAIwgB,EAAgB,YAC5BS,OAAQjB,EAAUC,EAASC,IAG7B,GAAmB,IAAflU,KAAKzM,GAAa,CACpB,IAAM8hB,EAEF,CACFC,aAAcJ,EACdK,YAAaJ,GAGf3V,EAAMjM,KAAO8hB,EAAe9hB,EAAK,IAGnC,OAAOiM,IAGT,OAAO3O,OAAAqF,GAAA,EAAArF,CAAA,CACL0jB,QAAStZ,EACT5G,UACAkL,OAAQ6V,EACR9K,MAAO,CAAC4K,EAAUC,GAClBtC,KAAMziB,GALR,GAAAX,OAMM8C,EANN,OAMkBqB,KAqCd+B,EAGF,CACFM,OATgB,eAAC+c,EAADhe,UAAA/E,OAAA,QAAAgF,IAAAD,UAAA,GAAAA,UAAA,GAAqB,GAArB,OAChBd,KAAImgB,EAAerB,IAChB9e,KAAImgB,EAAe,WAOdmB,CAAUxC,EAAVwC,GACRC,IAAG,WAAAhmB,OAAa8C,EAAb,gBAML,OAFAU,EAAI,GAAAxD,OAAIW,EAAJ,gBAAuB,EAEpBqG,MAAMf,EAAK,CAChBG,KAAMC,KAAKC,UAAUJ,GACrBC,OAAQ,SAEP8f,KAAK,SAACC,GAGL,OADA1iB,EAAI,GAAAxD,OAAIW,EAAJ,gBAAuB,EACpBulB,EAASC,SAEjBC,MAAM,SAACnhB,GAENzB,EAAKyB,MAAQA,EAEbzB,EAAI,GAAAxD,OAAIW,EAAJ,gBAAuB,0DD5LhCyC,+EAA2B,kDAE3BA,+EAA2B,0CAE3BA,+EAAmB,0CE6CTijB,GAXczH,aAEzB0H,aAAa,CACXC,aAAc,SAAAvR,GAAA,IAAGwR,EAAHxR,EAAGwR,YAAH,OAAqB,WACjCA,QAGJC,eAIwBC,CAvCE,SAAA9gB,GAAA,IAAG+gB,EAAH/gB,EAAG+gB,QAAS1jB,EAAZ2C,EAAY3C,WAAYigB,EAAxBtd,EAAwBsd,MAAxB,OAC1B0D,EAAA7K,EAAA8K,cAAA,OACEC,UAAWC,KACT,kBACA,yBACA,0CACA,CAAEC,2BAA4B/jB,KAG/BsB,KAAI2e,EAAO,SAAAnO,EAAWkS,GAAX,IAAGtkB,EAAHoS,EAAGpS,KAAH,OACVikB,EAAA7K,EAAA8K,cAAA,KACEC,UAAU,YACVI,OAAO,SACPC,IAAI,sBACJC,KAAMzkB,EACNhC,IAAKsmB,GAELL,EAAA7K,EAAA8K,cAAA,KAAGC,UAAU,gCACbF,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAKP,UAAU,kBAAkBrW,EAAC,eAAAzQ,OAAiBinB,QAGvDL,EAAA7K,EAAA8K,cAACS,GAAA,EAAD,CAAMR,UAAU,YAAYI,OAAO,SAAS3kB,GAAE,YAAAvC,OAAc2mB,IAC1DC,EAAA7K,EAAA8K,cAAA,KAAGC,UAAU,gCACbF,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAE,gDCLA8W,GCrBgB3I,aAC3B4I,IACAC,aAA4C,SAAA7hB,GAAuB,IAApB8hB,EAAoB9hB,EAApB8hB,KACvCC,EAD2D/hB,EAAd4e,QACxB,MAAQ,OAEnC,MAAO,CACLoD,SAAUC,KACRH,EACA,CAAC,SAAAI,GAAG,OAAI3C,OAAO2C,EAAIC,UACnBJ,MDYaK,CA1BS,SAAApiB,GAAA,IAC5B6e,EAD4B7e,EAC5B6e,SACAtgB,EAF4ByB,EAE5BzB,OACAyjB,EAH4BhiB,EAG5BgiB,SACA7C,EAJ4Bnf,EAI5Bmf,eACAjB,EAL4Ble,EAK5Bke,kBACAmE,EAN4BriB,EAM5BqiB,WACAC,EAP4BtiB,EAO5BsiB,GAP4B,OAS5BtB,EAAA7K,EAAA8K,cAAA,aACGe,EACErjB,IAAI,SAAC4jB,GAAD,OACHvB,EAAA7K,EAAA8K,cAACqB,EAAD,CACEvnB,IAAKwnB,EAAOxT,UAAYwT,EAAOxB,QAC/ByB,QAASD,EACThkB,OAAQA,EACR4gB,eAAgBA,EAChBkD,WAAYA,EACZxD,SAAUA,EACVX,kBAAmBA,SEvBhBuE,GAAkB,CAC7BvkB,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC9DwkB,KAAM,CACJ,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,MAISC,GAAmB,CAC9B,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAKWC,GAKT,CACFC,EAAG,CACD,CAAEC,IAAK,EAAG5B,UAAW,UACrB,CAAE4B,IAAK,EAAG5B,UAAW,QACrB,CAAE4B,IAAK,EAAG5B,UAAW,UACrB,CAAE4B,IAAK,EAAG5B,UAAW,UACrB,CAAE4B,IAAK,EAAG5B,UAAW,UACrB,CAAE4B,IAAK,EAAG5B,UAAW,WAEvBjf,EAAG,CACD,CAAE6gB,IAAK,EAAG5B,UAAW,UACrB,CAAE4B,IAAK,EAAG5B,UAAW,QACrB,CAAE4B,IAAK,EAAG5B,UAAW,UACrB,CAAE4B,IAAK,EAAG5B,UAAW,UACrB,CAAE4B,IAAK,EAAG5B,UAAW,WAEvB3e,EAAG,CACD,CAAEugB,IAAK,EAAG5B,UAAW,UACrB,CAAE4B,IAAK,EAAG5B,UAAW,QACrB,CAAE4B,IAAK,EAAG5B,UAAW,UACrB,CAAE4B,IAAK,EAAG5B,UAAW,UACrB,CAAE4B,IAAK,EAAG5B,UAAW,WAEvB5e,EAAG,CACD,CAAEwgB,IAAK,EAAG5B,UAAW,UACrB,CAAE4B,IAAK,EAAG5B,UAAW,QACrB,CAAE4B,IAAK,EAAG5B,UAAW,UACrB,CAAE4B,IAAK,EAAG5B,UAAW,UACrB,CAAE4B,IAAK,EAAG5B,UAAW,WAEvB1e,EAAG,CACD,CAAEsgB,IAAK,EAAG5B,UAAW,UACrB,CAAE4B,IAAK,EAAG5B,UAAW,UACrB,CAAE4B,IAAK,EAAG5B,UAAW,WAEvB7e,EAAG,CACD,CAAEygB,IAAK,EAAG5B,UAAW,UACrB,CAAE4B,IAAK,EAAG5B,UAAW,QACrB,CAAE4B,IAAK,EAAG5B,UAAW,UACrB,CAAE4B,IAAK,EAAG5B,UAAW,UACrB,CAAE4B,IAAK,EAAG5B,UAAW,UACrB,CAAE4B,IAAK,EAAG5B,UAAW,YC9HZ6B,GAAY,SAACrD,GAAD,OAAkC,MAAZA,EAAkB,EAAI,GCCxDsD,GAA4B,SACvC1X,EAEAoU,GAHuC,OAIpC3f,KAAOuL,EAAO,CAAE3B,QAAS+V,KCQjBuD,GAAsB,SACjC9gB,GAOG,IANHmJ,EAMG3L,UAAA/E,OAAA,QAAAgF,IAAAD,UAAA,GAAAA,UAAA,GAFE,GACL6d,EACG7d,UAAA/E,OAAA,EAAA+E,UAAA,QAAAC,EACGsjB,EAAgBF,GAA0B1X,EAAOnJ,GAEjDghB,EAAqBxY,KACzBmP,KAAOoJ,EAAe,SAACnJ,EAAKqJ,GAG1B,OAAIrJ,EAAIqJ,EAAKrC,SAAiBhH,GAG9BA,EAAIqJ,EAAKrC,SAAWqC,EACbrJ,IACN,KAGL,IAAKoJ,EAAoB,MAAO,SAGhC,IAAM9S,EAAQyJ,KAAOoJ,EAAe,SAAC1M,EAADxW,GAAA,OAAqBwW,EAArBxW,EAASqQ,OAA0B,GAEvE,OAAIlI,KAASwa,GAAkBxgB,GACtBod,QAAQlP,EAAQ8S,GAAoBld,QAAQ8c,GAAU5gB,KAK3D,CACFkhB,kBAAmB,kBACjB9D,QAAQlP,EAAQ8S,GACbld,QAAQ8c,GAAU5gB,MAEvBoX,MAAO,kBAAMgG,OAAOlP,EAAMpK,QAAQ8c,GAAU5gB,OAGjCqb,MAAW,UC2Fb8F,GAXStK,aAEpB0H,aAAa,CACX6C,eAAgB,SAAApU,GAAA,IAAGqU,EAAHrU,EAAGqU,QAAH,OAAiB,SAC/BpE,EAAqBxU,GADU,OAE5B,kBAAM4Y,EAAQpE,EAAaxU,QAElCgX,IAImB6B,CAvGS,SAAAzjB,GAAA,IAC5B6e,EAD4B7e,EAC5B6e,SACA6E,EAF4B1jB,EAE5B0jB,qBACAC,EAH4B3jB,EAG5B2jB,aACAC,EAJ4B5jB,EAI5B4jB,WACA1mB,EAL4B8C,EAK5B9C,KACAqB,EAN4ByB,EAM5BzB,OACAgN,EAP4BvL,EAO5BuL,gBACAgY,EAR4BvjB,EAQ5BujB,eACArF,EAT4Ble,EAS5Bke,kBAT4B2F,EAAA7jB,EAU5BmK,MACES,EAX0BiZ,EAW1BjZ,SACAuU,EAZ0B0E,EAY1B1E,eACAC,EAb0ByE,EAa1BzE,YAb0B,OAgB5B4B,EAAA7K,EAAA8K,cAAA,aACED,EAAA7K,EAAA8K,cAAA,MAAIC,UAAU,WACZF,EAAA7K,EAAA8K,cAAA,MAAIC,UAAU,oBACZF,EAAA7K,EAAA8K,cAAA,WAGED,EAAA7K,EAAA8K,cAACQ,EAAA,eAAD,CAAgBqC,YAAa9C,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAE,uBACjClM,KAAI,CAAC,oBAAqB,SAAU,SAAAygB,GAAW,OAC9C4B,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CACE1mB,IAAKqkB,EACLvU,EAAGuU,EACH2E,QAASR,EAAenE,EAAaxU,UAM9C/L,KAAI0M,EAAD,GAAAnR,OAAqB8C,EAArB,KAAA9C,OAA6BmE,GAAU,KACpCI,KAAIwgB,EAAgB,SAAAJ,GAAK,OAC1BiC,EAAA7K,EAAA8K,cAAA,MAEEC,UAAWyC,EAAa5E,EAAOF,GAC/B9jB,IAAG,GAAAX,OAAK2kB,EAAM5c,SAAX,KAAA/H,OAAuB2kB,EAAMiF,gBAEhChD,EAAA7K,EAAA8K,cAAA,aACED,EAAA7K,EAAA8K,cAAA,aACED,EAAA7K,EAAA8K,cAAA,MAAI8C,QAAS,kBACXH,EACE7E,GACCxgB,GACD,KAGFyiB,EAAA7K,EAAA8K,cAAA,UACGgC,GACClE,EAAM5c,SACNuhB,EAAqB,CACnBnlB,SACA0lB,SAAS,IAGX7E,KAILlB,GAA8B,SAAThhB,GAElB8jB,EAAA7K,EAAA8K,cAAA,MAAI8C,QAAS,kBACXH,EACE7E,GACCxgB,GACD,KAGFyiB,EAAA7K,EAAA8K,cAAA,UACGgC,GACClE,EAAM5c,SACNuhB,EAAqB,CACnBnlB,SACA0lB,SAAS,IAGX7E,cCvEf8E,GATSlL,aAEpB0H,aAAa,CAEXqD,QAAS,SAAA5U,GAAA,IAAGgV,EAAHhV,EAAGgV,YAAH,OAAqB,SAAApF,GAAK,OAAI,kBAAMoF,EAAYpF,QAKxCqF,CAhCS,SAAApkB,GAAA,IAC5B+jB,EAD4B/jB,EAC5B+jB,QACS5E,EAFmBnf,EAE5BmK,MAASgV,eAFmB,OAI5B6B,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KACErD,EAAA7K,EAAA8K,cAAA,WACCtiB,KAAIwgB,EAAgB,SAAAJ,GAAK,OACxBiC,EAAA7K,EAAA8K,cAAA,MACElmB,IAAG,GAAAX,OAAK2kB,EAAM5c,SAAX,KAAA/H,OAAuB2kB,EAAMiF,eAEhCD,QAASA,EAAQhF,IAEjBiC,EAAA7K,EAAA8K,cAAA,WACED,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,cACdF,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAGkU,EAAMuF,wBAEhBtD,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAGkU,EAAMwF,+BCjBTC,WARA,SAAAxkB,GAAA,IAAGkhB,EAAHlhB,EAAGkhB,UAAH,OACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAWC,KACd,iBACAD,OCLSuD,GAAW,SAAAzkB,GAAA,IAAA0kB,EAAA1kB,EAAGkhB,iBAAH,IAAAwD,EAAe,sBAAfA,EAAA,OACtB1D,EAAA7K,EAAA8K,cAAA,MAAIC,UAAU,aACZF,EAAA7K,EAAA8K,cAAC0D,GAAD,CAAQzD,UAAWA,MCAV0D,GAAe,SAAA5kB,GAGvB,IAFDmC,EAECnC,EAFDmC,SACFmJ,EACG3L,UAAA/E,OAAA,QAAAgF,IAAAD,UAAA,GAAAA,UAAA,GADgD,GAE7CujB,EAAgBF,GAA0B1X,EAAOnJ,GACvD,OAA4B,IAAxBwI,KAAKuY,GACOrkB,KAAIqkB,EAAe,aACpBjd,QAAQ8c,GAAU5gB,IAAW+D,WAGrC,UCLI2e,GAAgB7L,aAC3B8L,YACE,SACA,YACA,eAEFC,aACE,iBACA,wBACA,GAEFrE,aAAqD,CACnDkD,WAAY,SAAA5jB,GAAA,IACA4F,EADA5F,EACVlD,OAAU8I,KACVof,EAFUhlB,EAEVglB,YACAC,EAHUjlB,EAGVilB,qBACaC,EAJHllB,EAIVmlB,UAAaD,QAJH,OAKN,SAAA/V,GAAA,IACJiW,EADIjW,EACJiW,MACSjS,EAFLhE,EAEJ4P,MAAS5L,gBACT5P,EAHI4L,EAGJ5L,WACA8hB,EAJIlW,EAIJkW,aACA/Z,EALI6D,EAKJ7D,MALI,OAMA,WACJ,IAAM6P,EAASrB,KACbxO,EACA,SAACyO,EAAD3K,GAAoD,IAA7BkW,EAA6BlW,EAA7BkW,uBAIrB,OAHIA,GACFA,EAAuBpe,QAAQ,SAAAqe,GAAK,OAAIxL,EAAIlR,KAAK0c,KAE5CxL,GAET,IAGG7L,KAAQiN,KACX8J,GAAqB,GACrBC,EAAQ,CACN/J,SACAvV,OACAuN,kBACAqS,UAAWJ,EACX7hB,aACAkX,MAAOuK,EACPxH,KAAM6H,IACLhF,KAAK,kBAAM4E,GAAqB,WAIzCrD,KChEW6D,GAEF,UCWEC,GAAc,SAAA1lB,GAAA,IACzB2lB,EADyB3lB,EACzB2lB,YACAC,EAFyB5lB,EAEzB4lB,eACAvV,EAHyBrQ,EAGzBqQ,MAHyB,OAKzB2Q,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KACGuB,GAAkB5E,EAAA7K,EAAA8K,cAAC4E,GAAD,MACnB7E,EAAA7K,EAAA8K,cAACQ,EAAA,QAAQqE,GAAT,CACE/B,QAAS4B,EACTtV,MAAOA,EACP6Q,UAAU,OAKH4E,GCJa9M,aACxB6L,GACAjD,IACAC,aAA4C,SAAA7hB,GAStC,IARJ4jB,EAQI5jB,EARJ4jB,WACA3pB,EAOI+F,EAPJ/F,GACU2L,EAMN5F,EANJlD,OAAU8I,KACVmZ,EAKI/e,EALJ+e,MACAyD,EAIIxiB,EAJJwiB,QACAH,EAGIriB,EAHJqiB,WACA1E,EAEI3d,EAFJ2d,UAEIoI,EAAA/lB,EADJwd,YACI,IAAAuI,EADG,oBACHA,EACEC,EAAgBjmB,KACpBsiB,EC7B+B,SAAAriB,GAKxB,IAJXimB,EAIWjmB,EAJXimB,QACAlH,EAGW/e,EAHX+e,MACAjd,EAEW9B,EAFX8B,SACA6b,EACW3d,EADX2d,UA4BA,MA1BqC,CACnCK,kBAAmB,CACjBrU,QAASoV,EAAM5c,SACf4M,SAAUjN,GAEZmc,cAAe,CACb8C,QAASkF,EACTtc,QAASoV,EAAM5c,SACf4M,SAAUjN,GAEZqc,YAAa,CACX4C,QAASkF,EACTtc,QAASoV,EAAM5c,SACf+jB,OAAQpkB,GAEVsc,kBAAmB,CACjB2C,QAASkF,EACTtc,QAASoV,EAAM5c,SACf+jB,OAAQpkB,GAEVqkB,uBAAwB,CACtBpF,QAASkF,EACTtc,QAASoV,EAAM5c,WAIJwb,GDFXyI,CAAsB,CACpBH,QAASzD,EAAQzB,QACjBhC,QACAjd,SAAU7H,EACV0jB,eA2BJ,MAAO,CACLgI,YAAa/B,EAzBY,SAAChe,GAC1B,IAAMygB,EAAqB,CACzBpsB,KACAmrB,MAAO5C,EACPzD,QACAsG,aAAcI,GACdna,MAAO0a,GAGT,GAAI7d,KAAS,CAAC,gBAAiB,qBAAsBwV,GAAY,CAC/D,IAAM2I,EAASzgB,GAAcD,GACvB2gB,EAAY/D,EAAO,aAAApoB,OAAcksB,IACjCE,EAAWhE,EAAO,YAAApoB,OAAaksB,IAC/BvS,EAAU,GAAA3Z,OAAMmsB,EAAN,KAAAnsB,OAAmBosB,GAEnC,OAAOhrB,OAAAuI,EAAA,EAAAvI,CAAA,GACF6qB,EADL,CAEE9iB,WAAYwQ,IAIhB,OAAOsS,EAIiBI,CAAmB7gB,IAC3CyK,MAAgB,UAATmN,EACHyF,GAAoBlE,EAAM5c,SAAU6jB,EAAe,SACnDpB,GAAa7F,EAAOiH,MAG5BpE,IDjDgB8E,CAAWhB,IGsEhBiB,GA1DiB3N,aAC5B8L,YAAO,kBACP8B,aACE,SAAAzX,GAAA,MAAoB,CAClB0X,QADF1X,EAAGkQ,YAGH,CACEyH,gBAAiB,kBAAM,SAAAptB,GAAC,MAAK,CAC3BmtB,QAASntB,EAAE4nB,OAAOjR,WAIxBqQ,aAAqD,CAUnDqG,cAAe,SAAA3X,GAAA,IACb4X,EADa5X,EACb4X,cACkBC,EAFL7X,EAEb8X,eAAkBD,kBAClBE,EAHa/X,EAGb+X,gBACAN,EAJazX,EAIbyX,QACAO,EALahY,EAKbgY,SACAxc,EANawE,EAMbxE,SACAyU,EAPajQ,EAObiQ,UAPa,OAQT,WAQJ,OANIA,IAAcwH,GAAYO,GAC5BJ,EAAcpc,EAAUic,GAEtBO,GACFH,EAAkBJ,GAEbM,QAGXzG,aAAqE,CACnEC,aAAc,SAAAzlB,GAAA,IACZ6rB,EADY7rB,EACZ6rB,cADY,OAER,kBAAMA,MAEZM,WAAY,SAAA5X,GAAA,IACVsX,EADUtX,EACVsX,cADU,OAEN,SAACrtB,GACS,UAAVA,EAAEqB,KACJgsB,QAINnF,IACAf,eAG2ByG,CA1EE,SAAAtnB,GAAA,IAC7B8mB,EAD6B9mB,EAC7B8mB,gBACAO,EAF6BrnB,EAE7BqnB,WACAE,EAH6BvnB,EAG7BunB,YACAV,EAJ6B7mB,EAI7B6mB,QAJ6B,OAM7B7F,EAAA7K,EAAA8K,cAAA,SACEzD,KAAK,OACLgK,QAASD,EACTE,WAAYJ,EACZK,SAAU,EACVrX,MAAOwW,EACPc,SAAUb,MCgFDc,GAtDiB5O,aAC5B8L,YACE,SACA,YACA,cACA,cACA,aACA,8BACA,kBAEFC,aAAU,YAAa,gBAAgB,GAEvCrE,aAAa,CACXmH,aAAc,SAAA1Y,GAAA,IACM2Y,EADN3Y,EACZ+X,eAAkBY,cACTzI,EAFGlQ,EAEZhF,MAASkV,UAFG,OAIR,SAAC+H,GACL,OAAKA,EACEU,EADezI,IAQxB2H,cAAe,SAAA5X,GAAA,IAAA2Y,EAAA3Y,EACb4Y,aACEC,EAFWF,EAEXE,UACArsB,EAHWmsB,EAGXnsB,UAEgBqrB,EALL7X,EAKb8X,eAAkBD,kBAClBG,EANahY,EAMbgY,SANa,OAQT,SAACxc,EAAUyU,GACf,OAAI+H,EACKH,EAAkB5H,GAEpB4I,EAAUrd,EAAUyU,EAAWzjB,KAIxCurB,gBAAiB,SAAAjsB,GAAA,IAAGgtB,EAAHhtB,EAAGgtB,aAAH,OAAsB,kBAAMA,EAAa,SAAAC,GAAC,OAAKA,MAGhEZ,YAAa,kBAAM,SAAA7tB,GAAC,OAAIA,EAAE4nB,OAAOtT,WAEjCoa,oBAAqB,SAAA3Y,GAAA,IAAa+O,EAAb/O,EAAG3S,OAAU0hB,UAAb,OACnB,SACAa,GAAS,OAAIb,EAAUa,IAAcA,MAGzCuC,IAE2ByG,CArFE,SAAAroB,GAAA,IAC7BgoB,EAD6BhoB,EAC7BgoB,aACAhB,EAF6BhnB,EAE7BgnB,cACAa,EAH6B7nB,EAG7B6nB,aACAN,EAJ6BvnB,EAI7BunB,YACAJ,EAL6BnnB,EAK7BmnB,gBACAiB,EAN6BpoB,EAM7BooB,oBACAhB,EAP6BpnB,EAO7BonB,SACAkB,EAR6BtoB,EAQ7BsoB,UACAne,EAT6BnK,EAS7BmK,MAT6B,OAW7B6W,EAAA7K,EAAA8K,cAAA,WACGqH,EAGGtH,EAAA7K,EAAA8K,cAAC0F,GAAD,CACEtH,UAAW+I,EAAoBje,EAAMkV,WACrCkI,YAAaA,EACbJ,gBAAiBA,EACjBH,cAAeA,EACfpc,SAAUT,EAAMS,SAChBwc,SAAUA,EACVY,aAAcA,IAIhBhH,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAGgd,EAAaT,GAAWrD,QAASoD,OClDpCoB,GAAgB,SAAAvoB,GAAA,IAC3BwoB,EAD2BxoB,EAC3BwoB,cACAC,EAF2BzoB,EAE3ByoB,gBACAC,EAH2B1oB,EAG3B0oB,WACAC,EAJ2B3oB,EAI3B2oB,YAJ2B,OAM3B3H,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,+BACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,6BACbF,EAAA7K,EAAA8K,cAAA,YACED,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAE,wBACPmW,EAAA7K,EAAA8K,cAAA,SACEzD,KAAK,SACLvT,KAAK,QACLiX,UAAU,kCACV7Q,MAAOsY,EACPhB,SAAUc,EACVG,OAAQJ,IAEVxH,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAE,uBACPmW,EAAA7K,EAAA8K,cAAA,SACEzD,KAAK,SACLvT,KAAK,MACLiX,UAAU,mCACV7Q,MAAOqY,EACPf,SAAUc,EACVG,OAAQJ,QChBLK,GAAmB7P,aAC9B8L,YAAO,eACPC,aACE,cACA,iBACA,SAAA/kB,GAAA,OAAAA,EAAGglB,YAAe5K,SAEpB2K,aACE,aACA,gBACA,SAAA5V,GAAA,OAAAA,EAAG6V,YAAe7K,QAEpBuG,aAAuD,CACrDoI,cAAe,SAAA1Z,GAAA,IACb2Z,EADa3Z,EACb2Z,cACAC,EAFa5Z,EAEb4Z,eAFa,OAGT,SAAC/e,EAAMoG,IACuB,UAATpG,EAAmB+e,EAAiBD,GAC5C1Y,OAGrBqQ,aAAuD,CACrD8H,cAAe,SAAAttB,GAAA,IACbwtB,EADaxtB,EACbwtB,WACAC,EAFaztB,EAEbytB,YAFaM,EAAA/tB,EAGb8pB,YAAe1K,EAHF2O,EAGE3O,SAAUD,EAHZ4O,EAGY5O,UAHZ,OAIT,WAEJA,EAAUsO,GACVrO,EAASoO,KAEXD,gBAAiB,SAAAhZ,GAAA,IAAGqZ,EAAHrZ,EAAGqZ,cAAH,OAAuB,SAACpvB,GAAM,IAAAwvB,EACrBxvB,EAAE4nB,OAAlBrX,EADqCif,EACrCjf,KAAMoG,EAD+B6Y,EAC/B7Y,MACR8Y,EAAqB,KAAV9Y,EAAeA,EAAQiB,SAASjB,EAAO,IACxDyY,EAAc7e,EAAMkf,OAGxBvH,KCxBWwH,GALiBpQ,aAC5B6P,GACAjH,IAG2ByH,CAnBS,SAAArpB,GAAA,IACpCwoB,EADoCxoB,EACpCwoB,cACAC,EAFoCzoB,EAEpCyoB,gBACAC,EAHoC1oB,EAGpC0oB,WACAC,EAJoC3oB,EAIpC2oB,YAJoC,OAMpC3H,EAAA7K,EAAA8K,cAACqI,GAAD,CACEd,cAAeA,EACfC,gBAAiBA,EACjBC,WAAYA,EACZC,YAAaA,MCkCJY,GC/BoBvQ,aAC/B8L,YAAO,kBACPjD,aAA4C,SAAA7hB,GAM1C,MAAO,CACLyiB,gBAP0DziB,EAAfwpB,WAEXjsB,GAAOW,KACrCukB,GAAgBvkB,KAChBukB,GAAgBC,QAMtBhC,aAAuD,CACrD+I,oBAAqB,SAAAta,GAAA,IAAmBua,EAAnBva,EAAG6Y,aAAgB0B,WAAnB,OAAsC,SAAA5G,GAAG,OAC5DjkB,KAAI6qB,EAAY5G,EAAK,MAEvB6G,qBAAsB,SAAAva,GAAA,IAAqBwa,EAArBxa,EAAG8X,eAAkB0C,aAArB,OAA0C,SAC9DC,GAD8D,OAG9D9pB,KACE6pB,EACA,SAAA1uB,GAAA,OAAAA,EAAG8oB,gBACiBnlB,KAAIgrB,EAAa,2BAG3CnJ,aAAuD,CAKrDoJ,SAAU,SAAAra,GAAA,IACRga,EADQha,EACRga,oBACAE,EAFQla,EAERka,qBAFQ,OAGJ,SAAC7G,GACL,IAAM+G,EAAchrB,KAAI4qB,EAAoB3G,GAAM,UAElD,OAAOnY,KAAKgf,EAAqBE,MAAkBlf,KAAKkf,KAE1DE,UAAW,SAAAra,GAAA,IAAAsa,EAAAta,EACTwX,eACE+C,EAFOD,EAEPC,kBACAC,EAHOF,EAGPE,uBACAN,EAJOI,EAIPJ,aAEFH,EANS/Z,EAMT+Z,oBACAE,EAPSja,EAOTia,qBAPS,OAQL,SAAA7G,GAAG,OAAI,WACX,IAAM+G,EAA6BhrB,KAAI4qB,EAAoB3G,GAAM,UAE7DnY,KAAKgf,EAAqBE,MAAkBlf,KAAKkf,GACnDA,EAAY3iB,QAAQ,SAAC6X,GACnBmL,EAAuBnL,KAIzB8K,EAAY3iB,QAAQ,SAAC6X,GAAU,IAE3BiF,EAGEjF,EAHFiF,cACA7hB,EAEE4c,EAFF5c,SACAoiB,EACExF,EADFwF,sBAIArV,KAAK0a,EAAc,CACjB5F,gBACA7hB,WACAoiB,2BAIF2F,EAAuBnL,GAEzBkL,EAAkBlL,UAK1B6C,ID9CuBuI,CAnCE,SAAAnqB,GAAA,IACzBwpB,EADyBxpB,EACzBwpB,SACAC,EAFyBzpB,EAEzBypB,oBACAK,EAHyB9pB,EAGzB8pB,SACArH,EAJyBziB,EAIzByiB,gBACAsH,EALyB/pB,EAKzB+pB,UALyB,OAOzB/I,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KACG1lB,KAAIikB,GAAgB4G,GAAW,SAAAra,GAAA,IAAG+R,EAAH/R,EAAG+R,UAAW4B,EAAd3T,EAAc2T,IAAd,OAC9B9B,EAAA7K,EAAA8K,cAAA,OAAKlmB,IAAK+nB,EAAK5B,UAAS,gBAAA9mB,OAAkB8mB,IACxCF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,kBAAkB6C,QAASgG,EAAUjH,IAClD9B,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CACEP,UAAWC,KACT,iBACA,CAAEiJ,wBAAyBN,EAAShH,KAEtCjY,EAAGhM,KAAI4qB,EAAoB3G,GAAM,YAAa,OAGlD9B,EAAA7K,EAAA8K,cAAA,OAAKC,UAAS,gBAAA9mB,OAAkB8mB,EAAlB,WACXviB,KACCE,KAAI4qB,EAAoB3G,GAAM,UAAW,SAAA/D,GAAK,OAC5CiC,EAAA7K,EAAA8K,cAACoJ,GAAD,CACEtvB,IAAKgkB,EAAM5c,SACXmoB,KAAMniB,KAASsa,EAAiB1D,EAAM5c,UACtC4c,MAAOA,qDEhCjBwL,GAAiB,GAAGA,eAW1B,IAAMC,GAAe,QACfC,GAAkB,WAClBC,GAAiB,UACjBC,GAAc,OACdC,GAAgB,SAChBC,GAAgB,SAEhBC,GAAoB,CACxBN,GACAC,GACAC,GACAC,GACAC,GACAC,IAGIE,GAAmB,GAMzB,SAASC,GAAmB3a,EAAO4a,EAAMC,GACvCC,KACE/d,MAAMge,QAAQ/a,GACd,yDACA6a,EACA7a,GAEF,IAAMgb,EAAYJ,EAAKC,GACvBC,KACE/d,MAAMge,QAAQC,GACd,0GAEAH,EACAG,GAjBJP,GAAkB5jB,QAAQ,SAACgkB,GACzBH,GAAiBG,IAAW,IAyHfI,OAjGf,SAASA,EAAOjb,EAAO4a,GASrB,GARAE,KACE5iB,KAAc0iB,GACd,qHAEAH,GAAkB3hB,KAAK,MACvBwhB,IAGEJ,GAAe/c,KAAKyd,EAAMN,IAO5B,OANAQ,KAC+B,IAA7B3vB,OAAO3B,KAAKoxB,GAAMrwB,OAClB,qDACA+vB,IAGKM,EAAKN,IAGd,IAvEmB/jB,EAuEf2kB,GAvEe3kB,EAuESyJ,EAtExBjD,MAAMge,QAAQxkB,GACTA,EAAExM,SACLwM,GAAkB,kBAANA,EACT4kB,KAAQ,IAAI5kB,EAAE6kB,YAAe7kB,GAE/BA,GAmEP,GAAI2jB,GAAe/c,KAAKyd,EAAML,IAAgB,CAC5C,IAAMc,EAAWT,EAAKL,IACtBO,KACEO,GAAgC,kBAAbA,EACnB,sDACAd,GACAc,GAEFP,KACEI,GAAkC,kBAAdA,EACpB,wDACAX,GACAW,GAEFC,KAAQD,EAAWN,EAAKL,KAqD1B,IAAK,IAAMvJ,KAlDPkJ,GAAe/c,KAAKyd,EAAMT,MAC5BQ,GAAmB3a,EAAO4a,EAAMT,IAChCS,EAAKT,IAActjB,QAAQ,SAACC,GAC1BokB,EAAU1iB,KAAK1B,MAIfojB,GAAe/c,KAAKyd,EAAMR,MAC5BO,GAAmB3a,EAAO4a,EAAMR,IAChCQ,EAAKR,IAAiBvjB,QAAQ,SAACC,GAC7BokB,EAAUI,QAAQxkB,MAIlBojB,GAAe/c,KAAKyd,EAAMP,MAC5BS,KACE/d,MAAMge,QAAQ/a,GACd,2CACAqa,GACAra,GAEF8a,KACE/d,MAAMge,QAAQH,EAAKP,KACnB,qHAEAA,GACAO,EAAKP,KAEPO,EAAKP,IAAgBxjB,QAAQ,SAACiG,GAAS,IAAAye,EACrCT,KACE/d,MAAMge,QAAQje,GACd,qHAEAud,GACAO,EAAKP,MAEPkB,EAAAL,GAAUM,OAAVpe,MAAAme,EAAApwB,OAAAgW,GAAA,EAAAhW,CAAoB2R,OAIpBod,GAAe/c,KAAKyd,EAAMJ,MAC5BM,KACiC,oBAAxBF,EAAKJ,IACZ,yDACAA,GACAI,EAAKJ,KAEPU,EAAYN,EAAKJ,IAAeU,IAGlBN,EACRF,GAAiBR,eAAelJ,IAAM0J,GAAiB1J,KAC3DkK,EAAUlK,GAAKiK,EAAOjb,EAAMgR,GAAI4J,EAAK5J,KAIzC,OAAOkK,YCtIHO,GAAqB,CACzBC,MADyB,SAEvB/wB,EACAgxB,EACAC,GAGA,IAAMC,EAAYF,EAAQzhB,UAAU4hB,MAE9BC,EAAapxB,EAAMmxB,MAIzB,GAAID,IAAcE,EAAY,OAAO,EAErC,IAAMC,EAAqDC,sBAEzDL,GACAM,wBACIC,GAAgBH,EAAkBI,OAASJ,EAAkBK,KAAO,EAEpEC,EADeX,EAAQY,kBACK/lB,EAAIwlB,EAAkBK,IAGxD,QAAIR,EAAYE,GAAcO,EAAeH,OACzCN,EAAYE,GAAcO,EAAeH,KAE7CxxB,EAAM6xB,SAASX,EAAWE,GAC1BJ,EAAQzhB,UAAU4hB,MAAQC,EACnBJ,EAAQzhB,UAAU4hB,UAsBvBW,GAAkB9T,aACtB0H,aAAqD,CACnDqM,YAAa,SAAA3d,GAAA,IAAG8a,EAAH9a,EAAG8a,uBAAH,OAAgC,SAAAnL,GAAK,OAAI,WACpDmL,EAAuBnL,QAG3BiO,KAEAC,sBACE,OAEAnB,GACA,SAACoB,GAAD,MAAkC,CAChCC,kBAAmBD,EAAQE,gBAI/BC,sBACE,OA3Ee,CACjBC,UADiB,SAAAttB,GAEf,MAAO,CAAE/F,GADsD+F,EAArD/F,GACGkyB,MADkDnsB,EAAjDmsB,SA4Ed,SAACe,EAA6BlB,GAA9B,MAA+D,CAC7DuB,kBAAmBL,EAAQM,aAC3BC,WAAYzB,EAAQyB,iBAKbC,GAAUZ,GA7CE,SAAA3d,GAAA,IACvBoe,EADuBpe,EACvBoe,kBACAJ,EAFuBhe,EAEvBge,kBACAM,EAHuBte,EAGvBse,WACAtmB,EAJuBgI,EAIvBhI,KACA4lB,EALuB5d,EAKvB4d,YALuB,OAOvBQ,EACEJ,EACEnM,EAAA7K,EAAA8K,cAAA,MAAI0M,MAAO,CAAEC,QAASrO,QAAQkO,KAC5BzM,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAG1D,EAAKmd,uBACbtD,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,UAAU6C,QAASgJ,EAAY5lB,IAA/C,aCtBK0mB,GAAoB7U,aAC/B8L,YAAO,kBACPpE,aAAqD,CACnDoN,MAAO,kBAAM,SAAA3e,GAAA,IACX6U,EADW7U,EACX6U,cACAO,EAFWpV,EAEXoV,sBAFW,SAAAnqB,OAGJmqB,EAHI,KAAAnqB,OAGqB4pB,KAElC+J,YAAa,SAAA3e,GAAA,IAAA4e,EAAA5e,EACX8X,eAAkB+G,EADPD,EACOC,iBAAkBrE,EADzBoE,EACyBpE,aADzB,OAEP,SAACsC,EAAWE,GAEhB,IAAM8B,EAAwB5C,GAAO1B,EAAc,CACjDuE,QAAS,CAAC,CAACjC,EAAW,GAAI,CAACE,EAAY,EAAGxC,EAAasC,OAEzD+B,EAAiBC,OAGrBtM,KAGWwM,GAAYP,GAnDS,SAAA7tB,GAAA,IAAAquB,EAAAruB,EAChCknB,eAAkBgD,EADcmE,EACdnE,uBAAwBN,EADVyE,EACUzE,aAC1CkE,EAFgC9tB,EAEhC8tB,MACAC,EAHgC/tB,EAGhC+tB,YAHgC,OAKhC/M,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,mBACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,mBACbF,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAE,6BACPmW,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,uBACb0I,GAAgBA,EAAahvB,SAGlComB,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,sBACfF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,sBACbF,EAAA7K,EAAA8K,cAAA,UACGtiB,KAAIirB,EAAc,SAACziB,EAAMglB,GAAP,OACjBnL,EAAA7K,EAAA8K,cAACyM,GAAD,CACEvB,MAAOA,EACPlyB,GAAI6zB,EAAM3mB,GACVpM,IAAK+yB,EAAM3mB,GACXA,KAAMA,EACN+iB,uBAAwBA,EACxB2C,SAAUkB,WCxCPO,GAAA,CACbC,IAAK,KACLC,MAAO,MACPC,aAAc,KACdC,cAAe,KACfC,eAAgB,KAChBC,eAAgB,KAChBC,kBAAmB,KACnBC,eAAgB,KAChBC,sBAAuB,KACvBC,YAAa,IACbC,WAAY,KACZC,WAAY,KACZC,qBAAsB,KACtBC,WAAY,KACZC,mBAAoB,MACpBC,wBAAyB,MACzBC,kBAAmB,MACnBC,kBAAmB,MACnBC,OAAQ,KACRtzB,OAAQ,IACRuzB,iBAAkB,MAClBC,uBAAwB,KACxBvzB,iBAAkB,KAClBwzB,wBAAyB,MACzBC,YAAa,MACbC,qBAAsB,KACtBC,kBAAmB,KACnBC,kBAAmB,KACnBC,gBAAiB,KACjBC,IAAK,KACLC,SAAU,KACVC,iBAAkB,KAClBC,YAAa,KACbC,eAAgB,KAChBC,sBAAuB,KACvBl0B,MAAO,KACPm0B,cAAe,KACfC,cAAe,MACfC,oBAAqB,KACrBC,UAAW,KACXC,8BAA+B,KAC/BC,wBAAyB,KACzBC,eAAgB,KAChBC,WAAY,MACZC,gBAAiB,KACjBC,oBAAqB,KACrBC,aAAc,KACdC,YAAa,KACbC,4BAA6B,KAC7BC,cAAe,KACfC,qBAAsB,KACtBC,sBAAuB,KACvBC,eAAgB,MAChBC,SAAU,KACVC,YAAa,KACbC,MAAO,MACPC,MAAO,KACPC,eAAgB,KAChBC,KAAM,KACNC,WAAY,KACZC,aAAc,KACdC,MAAO,KACPC,gBAAiB,KACjBC,uBAAwB,KACxBC,WAAY,KACZC,sBAAuB,KACvBC,YAAa,KACbC,IAAK,MACL/Z,UAAW,KACXga,YAAa,KACbC,aAAc,KACd1yB,OAAQ,KACR2yB,wBAAyB,KACzBC,0BAA2B,MAC3BC,yBAA0B,MAC1BC,WAAY,KACZC,YAAa,KACbC,aAAc,KACdC,aAAc,KACdC,UAAW,MACXC,UAAW,KACXC,UAAW,KACXC,KAAM,KACNC,UAAW,KACXC,WAAY,KACZC,gBAAiB,KACjB7xB,OAAQ,KACR8xB,cAAe,KACfC,WAAY,KACZC,QAAS,IACTC,mBAAoB,KACpBC,oBAAqB,KACrBC,mBAAoB,KACpBC,aAAc,MACdC,iBAAkB,KAClBC,cAAe,KACfC,SAAU,KACVC,SAAU,IACVC,eAAgB,KAChBC,kBAAmB,KACnBC,mBAAoB,MACpBC,gBAAiB,KACjBC,oBAAqB,KACrBC,UAAW,KACXC,gBAAiB,KACjBC,cAAe,KACfC,eAAgB,KAChBC,KAAM,KACNt4B,KAAM,KACNu4B,eAAgB,MAChBC,UAAW,KACXC,QAAS,KACTC,UAAW,MACXC,WAAY,KACZC,UAAW,MACXC,KAAM,KACNC,OAAQ,KACRC,eAAgB,KAChBC,SAAU,KACVC,WAAY,KACZC,WAAY,KACZC,WAAY,KACZC,WAAY,KACZC,WAAY,KACZC,WAAY,KACZC,YAAa,MACbC,mBAAoB,KACpBC,MAAO,KACPC,aAAc,KACdC,eAAgB,KAChBC,WAAY,KACZC,aAAc,KACdC,iBAAkB,KAClBnlB,OAAQ,MACRolB,cAAe,KACfC,KAAM,KACNC,eAAgB,KAChBC,aAAc,KACdC,YAAa,KACbl6B,MAAO,KACPm6B,mBAAoB,KACpBl6B,gBAAiB,KACjBm6B,WAAY,KACZC,QAAS,MACTC,MAAO,KACPC,YAAa,KACbC,SAAU,KACVC,OAAQ,KACRC,OAAQ,KACRC,UAAW,KACXC,QAAS,KACTC,UAAW,KACXl5B,KAAM,KACNm5B,qBAAsB,KACtBC,KAAM,KACNC,MAAO,KACPC,MAAO,KACPC,QAAS,KACTC,OAAQ,KACRC,QAAS,KACTC,QAAS,KACTC,SAAU,KACVC,wBAAyB,KACzBC,MAAO,KACPva,KAAM,KACNwa,2BAA4B,KAC5BC,KAAM,KACNC,WAAY,KACZC,cAAe,KACfC,cAAe,KACfC,aAAc,KACdC,cAAe,KACfC,YAAa,KACbC,aAAc,KACdC,kBAAmB,KACnBC,cAAe,KACfC,iBAAkB,MAClBC,gBAAiB,MACjBC,eAAgB,MAChBC,eAAgB,MAChBC,aAAc,KACdC,oBAAqB,KACrBC,WAAY,KACZC,gBAAiB,KACjBC,oBAAqB,MACrBC,sBAAuB,MACvBC,cAAe,KACfC,aAAc,KACdC,UAAW,KACXC,YAAa,MACbC,WAAY,KACZC,aAAc,MACdC,WAAY,MACZ7vB,KAAM,IACN8vB,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,MCxMKC,GAAA,CAEbC,WAAY,KACZC,YAAa,KACbC,WAAY,IACZC,YAAa,IACbC,aAAc,IACdC,WAAY,IACZC,OAAQ,IACRC,sBAAuB,KACvBC,aAAc,IACdC,QAAS,KACTC,YAAa,KACbC,qBAAsB,KACtBC,uBAAwB,KACxBC,WAAY,KACZC,cAAe,KChBFC,GAAA,CAEbC,aAAc,IAEdC,gBAAiB,IACjBC,kBAAmB,IACnBC,YAAa,KACbC,YAAa,IACbC,mBAAoB,IACpBC,cAAe,IACfC,kBAAmB,IACnBC,WAAY,IACZC,gBAAiB,IACjBC,gBAAiB,KACjBC,gBAAiB,IACjBC,aAAc,KACdC,cAAe,IACfC,oBAAqB,IACrBC,kBAAmB,KACnBC,iBAAkB,KAClBC,uBAAwB,KACxBC,QAAS,KAGTC,oBAAqB,KACrBC,sBAAuB,KACvBhjB,MAAO,IACPijB,KAAM,KACNC,SAAU,KAGVC,iBAAkB,KAClBC,cAAe,KACfC,wBAAyB,KACzBC,2BAA4B,KAC5BC,eAAgB,KAChBC,wBAAyB,KACzBC,cAAe,KACfC,0BAA2B,KAC3BC,oBAAqB,KAKrBC,sBAAuB,KACvBC,wBAAyB,KACzBC,sBAAuB,KACvBC,sBAAuB,KACvBC,wBAAyB,KACzBla,kBAAmB,IACnBma,eAAgB,KAEhBC,uBAAwB,IACxBC,qBAAsB,KACtBC,iCAAkC,KAClCC,wBAAyB,KACzBC,qBAAsB,KAGtBC,oBAAqB,KACrBC,sBAAuB,KACvBC,sBAAuB,KACvBC,oBAAqB,KACrBC,oBAAqB,KAGrBC,2BAA4B,KAC5BC,yBAA0B,KAC1BC,2BAA4B,KAG5BC,gBAAiB,IACjBC,uBAAwB,KACxBC,UAAW,IACXC,QAAS,IACTC,UAAW,KACXC,WAAY,KACZC,QAAS,IACTC,kBAAmB,KACnBC,oBAAqB,KACrBC,kBAAmB,KACnBC,iBAAkB,KAGlBC,eAAgB,IAChBC,eAAgB,IAChBC,gBAAiB,KACjBC,wBAAyB,KACzBC,uBAAwB,KACxBC,eAAgB,KAChBC,yBAA0B,KAG1BC,yBAA0B,KAC1BC,oBAAqB,KACrBC,mBAAoB,KACpBC,mBAAoB,KACpBC,wBAAyB,KACzBC,kBAAmB,KACnBC,oBAAqB,KACrBC,sBAAuB,KACvBC,oBAAqB,KACrBC,sBAAuB,KACvBC,cAAe,IACfC,yBAA0B,KAC1BC,cAAe,KACfC,oBAAqB,KACrBC,cAAe,KACfC,eAAgB,KAGhBC,sBAAuB,KACvBC,aAAc,KACdC,qBAAsB,KACtBC,mBAAoB,KACpBC,oBAAqB,KACrBC,gBAAiB,KACjBC,gBAAiB,KACjBC,cAAe,KACfC,cAAe,KAGfC,qBAAsB,KACtBC,sBAAuB,KACvBC,yBAA0B,KAC1BC,4BAA6B,KAC7BC,2BAA4B,KAC5BC,4BAA6B,MC/HhBC,GAAA,CAEbzD,oBAAqB,KACrBC,sBAAuB,KACvBC,sBAAuB,KACvBC,oBAAqB,KACrBC,oBAAqB,KAErB/B,iBAAkB,KAClBC,uBAAwB,KAExBoF,WAAY,KAGZC,cAAe,IACfC,cAAe,KAGfzC,eAAgB,IAChBC,eAAgB,IAChBC,gBAAiB,KACjBC,wBAAyB,KACzBC,uBAAwB,KACxBC,eAAgB,KAChBC,yBAA0B,KAC1BjD,oBAAqB,KACrBqF,qBAAsB,KACtBte,kBAAmB,IACnBkZ,sBAAuB,KACvBhjB,MAAO,IACPijB,KAAM,KACNC,SAAU,KAEVmF,aAAc,IAGdC,IAAK,IACLC,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,GAAI,GACJC,IAAK,IACLC,IAAK,IACLC,IAAK,IAEL1F,iBAAkB,KAClB2F,oBAAqB,KACrBxF,2BAA4B,KAG5B2C,yBAA0B,KAC1BC,oBAAqB,KACrBC,mBAAoB,KACpBC,mBAAoB,KACpBC,wBAAyB,KACzBC,kBAAmB,KACnBC,oBAAqB,KACrBC,sBAAuB,KACvBC,oBAAqB,KACrBC,sBAAuB,KACvBC,cAAe,IACfoC,oBAAqB,KACrBnC,yBAA0B,KAC1BC,cAAe,KACfC,oBAAqB,KACrBC,cAAe,KACfC,eAAgB,KAChBgC,gBAAiB,KACjBC,gBAAiB,KACjBC,qBAAsB,KAGtBjC,sBAAuB,KACvBC,aAAc,KACdC,qBAAsB,KACtBC,mBAAoB,KACpBC,oBAAqB,KACrBC,gBAAiB,KACjBC,gBAAiB,KACjB4B,gBAAiB,KACjBC,OAAQ,KACRC,gBAAiB,KACjBC,YAAa,KACbC,aAAc,KACd/B,cAAe,KACfC,cAAe,KACf7F,aAAc,IACd4H,aAAc,IACdC,aAAc,KAGd/B,qBAAsB,KACtBC,sBAAuB,KACvBC,yBAA0B,KAC1BC,4BAA6B,KAC7BC,2BAA4B,KAC5BC,4BAA6B,MChGhB2B,GAAA,CAEbnF,oBAAqB,KACrBC,sBAAuB,KACvBC,sBAAuB,KACvBC,oBAAqB,KACrBC,oBAAqB,KAErB/B,iBAAkB,KAClBC,uBAAwB,KAGxBqF,cAAe,IACfC,cAAe,KACftc,MAAO,KACP8d,gBAAiB,EAGjBjE,eAAgB,IAChBC,eAAgB,IAChBC,gBAAiB,KACjBC,wBAAyB,KACzBC,uBAAwB,KACxBC,eAAgB,KAChBC,yBAA0B,KAC1BjD,oBAAqB,KACrBjZ,kBAAmB,IACnBkZ,sBAAuB,KACvBhjB,MAAO,IACPijB,KAAM,KACNC,SAAU,KAEVmF,aAAc,IAGdC,IAAK,IACLC,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,GAAI,GACJC,IAAK,IACLC,IAAK,IACLC,IAAK,IAEL1F,iBAAkB,KAClB2F,oBAAqB,KACrBxF,2BAA4B,KAG5B2C,yBAA0B,KAC1BC,oBAAqB,KACrBC,mBAAoB,KACpBC,mBAAoB,KACpBC,wBAAyB,KACzBC,kBAAmB,KACnBC,oBAAqB,KACrBC,sBAAuB,KACvBC,oBAAqB,KACrBC,sBAAuB,KACvBC,cAAe,IACfoC,oBAAqB,KACrBnC,yBAA0B,KAC1BC,cAAe,KACfC,oBAAqB,KACrBC,cAAe,KACfC,eAAgB,KAChBgC,gBAAiB,KACjBC,gBAAiB,KACjBC,qBAAsB,KAGtBjC,sBAAuB,KACvBC,aAAc,KACdC,qBAAsB,KACtBC,mBAAoB,KACpBC,oBAAqB,KACrBC,gBAAiB,KACjBC,gBAAiB,KACjB4B,gBAAiB,KACjBC,OAAQ,KACRC,gBAAiB,KACjBC,YAAa,KACbC,aAAc,KACd/B,cAAe,KACfC,cAAe,KACf7F,aAAc,IACd4H,aAAc,IACdC,aAAc,KAGd/B,qBAAsB,KACtBC,sBAAuB,KACvBC,yBAA0B,KAC1BC,4BAA6B,KAC7BC,2BAA4B,KAC5BC,4BAA6B,MC/FhB6B,GAAA,CACbC,cAAe,KACfC,8BAA+B,KAC/BC,yBAA0B,KAC1BC,4BAA6B,KAC7BC,YAAa,KACbC,mBAAoB,KACpBC,sBAAuB,KACvBC,oCAAqC,KACrCC,4BAA6B,KAC7BC,kBAAmB,KACnBC,iBAAkB,KAClBC,mBAAoB,KACpBC,mBAAoB,KACpBC,uBAAwB,KACxBC,yBAA0B,KAC1BC,oBAAqB,KACrBC,gCAAiC,KACjCC,4BAA6B,KAC7BC,wBAAyB,KACzBC,2BAA4B,KAC5BC,wBAAyB,KACzBC,8BAA+B,KAC/BC,mBAAoB,KACpBC,6BAA8B,KAC9BC,+BAAgC,KAChCC,0BAA2B,KAC3BC,+BAAgC,KAChCC,uBAAwB,KACxBC,4BAA6B,KAC7BC,wBAAyB,KACzBC,oBAAqB,KACrBC,4BAA6B,MChChBC,GAAA,CAGbC,gBAAiB,KACjBC,iBAAkB,KAClB3I,cAAe,KACf4I,mBAAoB,KACpBC,aAAc,KACdC,KAAM,KACNC,oBAAqB,KACrBzI,0BAA2B,KAC3B0I,2BAA4B,KAC5BC,4BAA6B,KAC7BC,aAAc,KACdC,gBAAiB,KACjBC,eAAgB,KAChBC,eAAgB,KAChBC,2BAA4B,KAC5BC,4BAA6B,KAC7BC,iBAAkB,KAClB3V,cAAe,KACf4V,YAAa,KACbC,qBAAsB,KACtBC,iBAAkB,KAClBC,WAAY,KACZC,YAAa,KACbC,QAAS,IACTC,uBAAwB,KACxBC,yBAA0B,KAC1BC,gBAAiB,KACjBC,yBAA0B,KAC1BC,oBAAqB,KACrBC,2BAA4B,KAC5BC,oCAAqC,KACrCC,6BAA8B,KAC9BC,sCAAuC,KACvCC,4BAA6B,KAC7BC,qCAAsC,KACtCC,4BAA6B,KAC7BC,mCAAoC,KACpCC,4CAA6C,KAC7CC,qCAAsC,KACtCC,8CAA+C,KAC/CC,oCAAqC,KACrCC,6CAA8C,KAC9CC,mBAAoB,KACpBC,0BAA2B,KAC3BC,mCAAoC,KACpCC,4BAA6B,KAC7BC,qCAAsC,KACtCC,2BAA4B,KAC5BC,oCAAqC,KACrCC,4BAA6B,KAC7BC,mCAAoC,KACpCC,4CAA6C,KAC7CC,qCAAsC,KACtCC,8CAA+C,KAC/CC,oCAAqC,KACrCC,6CAA8C,KAC9CC,kBAAmB,KACnBC,yBAA0B,KAC1BC,kCAAmC,KACnCC,2BAA4B,KAC5BC,oCAAqC,KACrCC,0BAA2B,KAC3BC,mCAAoC,KACpCC,OAAQ,KACR7Z,WAAY,KACZ8Z,2BAA4B,KAC5BC,2BAA4B,KAC5BC,aAAc,KACdC,iBAAkB,KAClBC,eAAgB,KAChBC,mBAAoB,KACpBC,WAAY,KACZC,kBAAmB,KACnBC,2BAA4B,KAC5BC,2BAA4B,KAC5BC,cAAe,KACfC,uBAAwB,KACxBC,uBAAwB,KACxBC,WAAY,KACZ9a,WAAY,KACZ+a,OAAQ,KACR9a,WAAY,KACZ+a,QAAS,KACTC,iBAAkB,KAClBC,gBAAiB,KACjBC,gBAAiB,KACjBC,oBAAqB,KACrBC,qBAAsB,KACtBC,YAAa,KACbC,kBAAmB,MC5FNC,GAAA,CAGbbC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNC,KAAM,KACNvB,KAAM,KACNG,KAAM,KACNqlFOC,GAAA,CACbC,WAAY,KACZC,UAAW,KACXC,WAAY,KACZC,wBAAyB,KACzBC,sBAAuB,KACvBC,iBAAkB,KAClBC,YAAa,KACbC,WAAY,KACZC,iBAAkB,KAClBC,mBAAoB,KACpBC,iBAAkB,KAClBC,kBAAmB,KACnBC,aAAc,KACdC,cAAe,KACfra,qBAAsB,MCJlBsa,GAAa,CACjBC,cAAe,IACfC,yBAA0B,KAC1BC,qBAAsB,KACtBC,sBAAuB,KACvBC,aAAc,KACdC,oBAAqB,KAErBC,qBAAsB,KACtBtd,gBAAiB,IACjBC,kBAAmB,IACnB7gC,oBAAqB,KACrBm+C,wBAAyB,KACzBrd,YAAa,KACbC,YAAa,IACbC,mBAAoB,IACpBC,cAAe,IACfC,kBAAmB,IACnBC,WAAY,IACZC,gBAAiB,IACjBC,gBAAiB,KACjBC,gBAAiB,IACjBC,aAAc,GACdC,cAAe,IACfC,oBAAqB,IACrBC,kBAAmB,KACnB0c,kBAAmB,IACnBC,sBAAuB,KACvBC,gBAAiB,KACjBC,mBAAoB,KACpB5c,iBAAkB,KAClBC,uBAAwB,KACxB4c,0BAA2B,KAC3BC,WAAY,KACZC,aAAc,KACdC,oBAAqB,KAErBC,kBAAmB,KACnBC,uBAAwB,KACxBC,0BAA2B,KAC3BC,wBAAyB,KAGzBC,SAAU,KACVC,WAAY,KACZC,WAAY,KACZC,qBAAsB,KACtBC,QAAS,KACTC,KAAM,KACNC,gBAAiB,KACjBC,SAAU,KACVC,gBAAiB,KACjBC,UAAW,KACXC,UAAW,KACXC,QAAS,KACTC,cAAe,KACfC,oBAAqB,KAIrBC,aAAc,KACdC,UAAW,OAGXC,gBAAiB,KACjBC,aAAc,KACdC,gBAAiB,KACjBC,YAAa,KACbC,eAAgB,KAChBC,WAAY,IACZC,UAAW,KACXC,aAAc,KACdC,gBAAiB,KACjBC,cAAe,KACfC,YAAa,KACbC,YAAa,KACbC,cAAe,KACfC,gBAAiB,KAEjBle,sBAAuB,KACvBC,wBAAyB,KACzBC,sBAAuB,KACvBC,sBAAuB,KACvBC,wBAAyB,KAEzBla,kBAAmB,IACnBma,eAAgB,KAGhBC,uBAAwB,IACxBC,qBAAsB,KACtBC,iCAAkC,KAClCC,wBAAyB,KACzBC,qBAAsB,KAGtBC,oBAAqB,KACrBC,sBAAuB,KACvBC,sBAAuB,KACvBC,oBAAqB,KACrBC,oBAAqB,KAGrBC,2BAA4B,KAC5BC,yBAA0B,KAC1BC,2BAA4B,KAG5BG,UAAW,IACXC,QAAS,IACTG,QAAS,IAGTK,eAAgB,IAChBC,eAAgB,IAChBC,gBAAiB,KACjBC,wBAAyB,KACzBC,uBAAwB,KACxBC,eAAgB,KAChBC,yBAA0B,KAG1BC,yBAA0B,KAC1BC,oBAAqB,KACrBC,mBAAoB,KACpBC,mBAAoB,KACpBC,wBAAyB,KACzBC,kBAAmB,KACnBC,oBAAqB,KACrBC,sBAAuB,KACvBC,oBAAqB,KACrBC,sBAAuB,KACvBC,cAAe,IAGfM,sBAAuB,KACvBC,aAAc,KACdC,qBAAsB,KACtBC,mBAAoB,KACpBC,oBAAqB,KACrBC,gBAAiB,KACjBC,gBAAiB,KACjBC,cAAe,KACfC,cAAe,KACfsa,aAAc,KACdC,WAAY,KACZC,gBAAiB,KAGjBva,qBAAsB,KACtBC,sBAAuB,KACvBC,yBAA0B,KAC1BC,4BAA6B,KAC7BC,2BAA4B,KAC5BC,4BAA6B,KAC7Bma,uBAAwB,KACxBC,sBAAuB,KACvBC,kBAAmB,GACnBC,gBAAiB,KACjBC,oBAAqB,KAGrBpE,sBAAuB,KACvBC,iBAAkB,KAClBC,YAAa,KACbC,WAAY,KACZC,iBAAkB,KAClBC,mBAAoB,KACpBC,iBAAkB,KAClBC,kBAAmB,KACnBC,aAAc,KACdC,cAAe,KAGf4D,OAAQ,IACRC,GAAI,IACJrzC,QAAS,KACTuM,MAAO,IACP+mC,UAAW,KAGXC,KAAM,MC5KKC,GAAoBljC,aAC/B8L,YACE,SACA,gBACA,kBAEFpE,aAAqD,CAOnDy7B,SAAU,kBAAM,SAAChyC,EAAOid,GACtB,OAAIA,EACe,CACfxc,SAAU,EACVyU,UAAW84B,GAAWoC,WAInBpwC,IAUTiyC,QAAS,SAAAp8C,GAAA,IAAAq8C,EAAAr8C,EACPgoB,aACEs0B,EAFKD,EAELC,SACAC,EAHKF,EAGLE,eACA3gD,EAJKygD,EAILzgD,UAJKyyB,EAAAruB,EAMPknB,eACED,EAPKoH,EAOLpH,kBACAu1B,EARKnuB,EAQLmuB,kBACA5yB,EATKyE,EASLzE,aACA9B,EAVKuG,EAULvG,cAEF9c,EAZOhL,EAYPgL,qBACAyxC,EAbOz8C,EAaPy8C,kBACAr1B,EAdOpnB,EAcPonB,SACiB9pB,EAfV0C,EAeP08C,cAAiBp/C,QAfV,OAgBH,SAAAsN,GAAQ,OAAI,WAChB,IAAM4e,EAAW3qB,KAAIvB,EAAS,aAC1B8pB,GACFk1B,EAASx0B,EAAelsB,EAAWguB,GACnC3C,EAAkBkxB,GAAWoC,WAAW,IAExCgC,EAAe,CACb/yB,WACAmzB,iBAAkB/gD,EAClBgP,WACAuU,eAAgByK,IAIhBxC,EACFpc,IAEAyxC,IAEFD,OAQFI,QAAS,SAAAztC,GAAA,IACWqtC,EADXrtC,EACP+X,eAAkBs1B,kBAClBxxC,EAFOmE,EAEPnE,qBACAyxC,EAHOttC,EAGPstC,kBACAr1B,EAJOjY,EAIPiY,SAJO,OAKH,WACJo1B,IACIp1B,EACFpc,IAEAyxC,QAINI,aAA0B,CACxBC,kBADwB,WACJ,IAAAC,EAKdrhD,KAAKV,MAHWizB,EAFF8uB,EAEhB71B,eAAkB+G,iBAClB7G,EAHgB21B,EAGhB31B,SACSjI,EAJO49B,EAIhB5yC,MAASgV,eAENiI,GACH6G,EAAiB9O,MAIvB0J,GACAjH,KChDWo7B,GAAYd,GA1DE,SAAAl8C,GAAA,IACzBgoB,EADyBhoB,EACzBgoB,aACAm0B,EAFyBn8C,EAEzBm8C,SACU39B,EAHexe,EAGzBlD,OAAU0hB,UACV4I,EAJyBpnB,EAIzBonB,SACAg1B,EALyBp8C,EAKzBo8C,QACAQ,EANyB58C,EAMzB48C,QACiBt/C,EAPQ0C,EAOzB08C,cAAiBp/C,QACjB6M,EARyBnK,EAQzBmK,MARyB,OAUzB6W,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,qEACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,eACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,oBACbF,EAAA7K,EAAA8K,cAAA,MAAIC,UAAU,eACZF,EAAA7K,EAAA8K,cAAC2G,GAAD,CACEzd,MAAOgyC,EAAShyC,EAAOid,GACvBA,SAAUA,EACVY,aAAcA,IAEhBhH,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,uBAElBF,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,cAAc6C,QAAS64B,KAEzC57B,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,uBACbF,EAAA7K,EAAA8K,cAACsI,GAAD,CACEvB,aAAcA,EACdwB,SAAU3qB,KAAIvB,EAAS,YAAa,MAGxC0jB,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,sBACbF,EAAA7K,EAAA8K,cAACmN,GAAD,MACApN,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,2BACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,mBACbF,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAE,6BAETmW,EAAA7K,EAAA8K,cAACmI,GAAD,QAGJpI,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,oBACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,iBACbF,EAAA7K,EAAA8K,cAAA,SACE8C,QAAS64B,EACTp/B,KAAK,SACLnN,MAAOmO,EAAU,UACjB0C,UAAU,iBAEZF,EAAA7K,EAAA8K,cAAA,SACE8C,QAASq4B,EAAQjyC,EAAMS,UACvB4S,KAAK,SACLnN,MAAOmO,EAAU,MACjB0C,UAAU,uBCzBT+7B,GAAoBjkC,aAC/B8L,YAAO,kBACPpE,aAAsD,CAUpDw8B,YAAa,SAAA/tC,GAAA,IAAAguC,EAAAhuC,EACX+X,eACE+C,EAFSkzB,EAETlzB,kBACAC,EAHSizB,EAGTjzB,uBACAN,EAJSuzB,EAITvzB,aAJS,OAMP,SAAA7K,GAAK,OAAI,WAAM,IAEjBiF,EAGEjF,EAHFiF,cACA7hB,EAEE4c,EAFF5c,SACAoiB,EACExF,EADFwF,sBAIArV,KAAK0a,EAAc,CACjB5F,gBACA7hB,WACAoiB,0BAGF2F,EAAuBnL,GAEvBkL,EAAkBlL,MAUtBq+B,cAAe,SAAAhuC,GAAA,IAAqBwa,EAArBxa,EAAG8X,eAAkB0C,aAArB,OAA0C,SAAA1uB,GAAA,IACvD8oB,EADuD9oB,EACvD8oB,cACA7hB,EAFuDjH,EAEvDiH,SACAoiB,EAHuDrpB,EAGvDqpB,sBAHuD,QAKrDrV,KAAK0a,EAAc,CACnB5F,gBACA7hB,WACAoiB,8BAIN3C,KAGWvG,GAAY4hC,GAnFE,SAAAj9C,GAAA,IACzBk9C,EADyBl9C,EACzBk9C,YACAE,EAFyBp9C,EAEzBo9C,cACA9yB,EAHyBtqB,EAGzBsqB,KACAvL,EAJyB/e,EAIzB+e,MACS5L,EALgBnT,EAKzB+e,MAAS5L,gBALgB,OAOzB6N,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KACErD,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,oBACbF,EAAA7K,EAAA8K,cAAA,QACEC,UAAWC,KACT,iBACA,CAAEiJ,wBAAyBgzB,EAAcr+B,KAE3Cs+B,YAAU,QACVt5B,QAASm5B,EAAYn+B,IAErBiC,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAGsI,MAGXmX,GAAQtJ,EAAA7K,EAAA8K,cAAA,cC/BAq8B,GAAiB91C,IAAM+1C,MAAM,IAAIC,SAAS,iBAAO,CAC5D5zB,aAAc,GACd9B,cAAeqwB,GAAWoC,iCCGfkD,GAAmBj2C,IAAM+1C,MAAM,IAAIrhD,QAAQ,SAAAwhD,GAAI,MAAK,CAE/DzzB,kBAF+D,SAE7ClL,GAGhB2+B,EAAK9zB,aAAL,GAAAxvB,OAAAoB,OAAAgW,GAAA,EAAAhW,CAAwBkiD,EAAK9zB,cAA7B,CAA2C+zB,aAAK5+B,MAIlDmL,uBAT+D,SASxCnL,GAErB2+B,EAAK9zB,aAAe7pB,KAElB29C,EAAK9zB,aACL,SAAAziB,GAAI,OAAKy2C,KAAQ7+B,EAAO5X,MAI5Bq1C,kBAlB+D,WAoB7DkB,EAAK9zB,aAAe,IAItBqE,iBAxB+D,SAwB9CrtB,GAEf88C,EAAK9zB,aAAejrB,KAAIiC,EAAQ,SAAAme,GAAK,OAAI4+B,aAAK5+B,MAMhDkI,kBAhC+D,SAgC7Chd,GAAsC,IAAxB4zC,EAAwBl+C,UAAA/E,OAAA,QAAAgF,IAAAD,UAAA,IAAAA,UAAA,GAGpD+9C,EAAK51B,cAFH+1B,EAEmB1F,GAAWoC,UAGXtwC,MC3Cd6zC,GAAiBt2C,IAAMwR,QAClCykC,GACAH,ICLWS,GAAc,CACzB5/B,YAAa,sBACbC,kBAAmB,wBAIR4/B,GAAkB,CAAC,QAAS,qBAE5BC,GAEQ,oBAFRA,GAGQ,oBAHRA,GAKE,cALFA,GAME,cANFA,GAQI,gBARJA,GAUQ,oBCQfC,GAAwBllC,aAE5B0H,aAAa,CACXy9B,eAAgB,SAAAhvC,GAAA,IAAmBivC,EAAnBjvC,EAAG6Y,aAAgBo2B,mBAAnB,OAA8C,kBAC5DA,QAEJx8B,KAIWy8B,GAAgBH,GAvBE,SAAAl+C,GAAA,IACbke,EADale,EAC7BgoB,aAAgB9J,kBAChByF,EAF6B3jB,EAE7B2jB,aACAw6B,EAH6Bn+C,EAG7Bm+C,eACAxgC,EAJ6B3d,EAI7B2d,UAJ6B,OAM7BqD,EAAA7K,EAAA8K,cAAA,KAAGC,UAAWyC,EAAazF,GAAoB6F,QAASo6B,GAGtDn9B,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAGkzC,GAAYpgC,QCbX2gC,GAAqBtlC,aAChC0H,aAAa,CACX69B,gBAAiB,kBAAM,SAAAv+C,GAOjB,IALJ+jB,EAKI/jB,EALJ+jB,QAEAnZ,EAGI5K,EAHJ4K,SAOA,OAH8B,UAD1B5K,EADJof,YAEwC4+B,GAAkBA,GAAgBQ,WAG7D7/C,IAAI,SAAA6e,GAAI,OACnB6G,EAAA,cAAC5C,EAAA,IAAD,CAAK1mB,IAAKyiB,EAAM3S,EAAG2S,EAAMuG,QAASA,EAAQvG,EAAM5S,YCAlD6zC,GAA4B78B,YAChC,SAAA5hB,GAAA,IAAAq8C,EAAAr8C,EACEgoB,aAAgB02B,EADlBrC,EACkBqC,gBAAiBC,EADnCtC,EACmCsC,iBACjCh7B,EAFF3jB,EAEE2jB,aACA46B,EAHFv+C,EAGEu+C,gBACAK,EAJF5+C,EAIE4+C,eAJF/6B,EAAA7jB,EAKEmK,MAASS,EALXiZ,EAKWjZ,SAAUwU,EALrByE,EAKqBzE,YALrB,OAOE4B,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KAGErD,EAAA7K,EAAA8K,cAACQ,EAAA,eAAD,CAAgBqC,YAAa9C,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAE,WACjC0zC,EAAgB,CACfn/B,cACAxU,WACAmZ,QAAS66B,KAGb59B,EAAA7K,EAAA8K,cAAA,KAAGC,UAAWyC,EAAa+6B,GAAkB36B,QAAS46B,GACpD39B,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAE,mBAMTg0C,GAA2B7lC,aAE/B0H,aAAa,CACXk+B,eAAgB,SAAAzvC,GAAA,IAAmB2vC,EAAnB3vC,EAAG6Y,aAAgB82B,gBAAnB,OACd,SAECthC,EAAM5S,GAAP,OAAoB,kBAAMk0C,EAAgBthC,EAAM5S,QAEpD0zC,IAGWS,GAAmBF,GAC9BJ,yBClCIO,GAAehmC,aACnB4I,IACAC,aAA4C,SAAA1S,GAAA,IAAG8vC,EAAH9vC,EAAG8vC,OAAQ/gD,EAAXiR,EAAWjR,KAAX,MAAuB,CACjEghD,kBAAmB/9B,KAAG,sCAAuC,CAC3DtT,QAAS1F,KAASjK,EAAM+gD,SAIjBE,GAAeH,GAtBS,SAAAh/C,GAAA,IACnCk/C,EADmCl/C,EACnCk/C,kBACAn7B,EAFmC/jB,EAEnC+jB,QACAk7B,EAHmCj/C,EAGnCi/C,OACAG,EAJmCp/C,EAInCo/C,SAJmC,OAMnCp+B,EAAA7K,EAAA8K,cAAA,KACEC,UAAWg+B,EACXn7B,QAASA,EAAQk7B,IAEhBG,KCoBQC,GAA0BrmC,aACrC8L,YACE,eACA,SACA,cAEFlD,IACAC,aACE,SAAAzS,GAAkD,IAArCxJ,EAAqCwJ,EAA/CtS,OAAU8I,KAAwBlH,EAAa0Q,EAA7BkwC,aAAgB5gD,KAC7B4nB,EAAS3gB,GAAUC,GACzB,MAAO,CACL25C,UAAW,CACT/iB,KAAM,CACJvyB,KAAMpL,KAAIH,EAAD,cAAAtE,OAAqBksB,GAAU,QACxC24B,OAAQ,gBAEVO,IAAK,CACHv1C,KAAMpL,KAAIH,EAAD,cAAAtE,OAAqBksB,GAAU,OACxC24B,OAAQ,mBAMlBv+B,aAAqD,CACnDqD,QAAS,SAAA7oB,GAAA,IACOukD,EADPvkD,EACPwkD,WAAcD,gBACdt1C,EAFOjP,EAEPiP,MAFO,OAGH,SAAAi1C,GAAQ,OAAI,WAAM,IACdlhD,EAASiM,EAATjM,KAEFyhD,EAAiBx3C,KAASjK,EAAMkhD,GAClCQ,KAAQ1hD,EAAMkhD,GADK,GAAAhlD,OAAAoB,OAAAgW,GAAA,EAAAhW,CAEf0C,GAFe,CAETkhD,IAEdK,EAAgBE,EAAgBx1C,QAGpCyX,KAGWi+B,GAAkBR,GA3DE,SAAAr/C,GAAA,IAC/B+jB,EAD+B/jB,EAC/B+jB,QACS7lB,EAFsB8B,EAE/BmK,MAASjM,KACTqhD,EAH+Bv/C,EAG/Bu/C,UAH+B,OAK/Bv+B,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,4BACZviB,KAAIgF,KAAO47C,GAAY,SAAApwC,GAAA,IAAGlF,EAAHkF,EAAGlF,KAAMg1C,EAAT9vC,EAAS8vC,OAAT,OACtBj+B,EAAA7K,EAAA8K,cAACk+B,GAAD,CACEpkD,IAAKkkD,EACLA,OAAQA,EACRl7B,QAASA,EACTq7B,SAAUn1C,EACV/L,KAAMA,SCZR4hD,GAAsB9mC,aAC1B0H,aAAa,CAEXy7B,SAAU,SAAAnhD,GAAK,OAAI,SAAC2iB,GAalB,MAZe,CAEbQ,YAAakG,EAAA,cAACg6B,GAAkBrjD,GAGhCgjB,kBAAmBqG,EAAA,cAACw7B,GAAoB7kD,GAExCojB,kBAAmBiG,EAAA,cAACg6B,GAAkBrjD,GAEtCqjB,kBAAmBgG,EAAA,cAAC06B,GAAqB/jD,IAG7B2iB,IAAc,UAKrBoiC,GAAcD,GA1BE,SAAA9/C,GAAA,OAGEm8C,EAHFn8C,EAC3Bm8C,UAD2Bn8C,EAE3B2d,aCJWqiC,GAA0B,SAACC,GAAD,OACrCjnC,aACE4I,IACAs+B,aACED,EACAE,aAAgB37B,OCTT47B,GAAiBx5B,aAC5B,SAAA5mB,GAAA,IAAAqgD,EAAArgD,EAAG+e,aAAH,IAAAshC,EAAW,GAAXA,EAAAC,EAAAtgD,EAAe4e,QAAf,MAAyD,CACvDG,QACAH,aAFF,IAAA0hC,OAIA,CACEC,kBAAmB,SAAApxC,GAAA,IAAG4P,EAAH5P,EAAG4P,MAAOH,EAAVzP,EAAUyP,QAAV,OAAwB,SAAAxP,GAIrC,IAHJoxC,EAGIpxC,EAHJoxC,SACAC,EAEIrxC,EAFJqxC,YACAt2C,EACIiF,EADJjF,MAEMu2C,EAAkB3hC,EAAM5c,WAAaq+C,EAASr+C,SAC9Cw+C,EAAkBlhC,SAASihC,GAAmB9hC,GAC9CgiC,EAAa,CACjB3hC,QAAS,CACPF,MAAO,GACPH,SAAS,GAEXiiC,gBAAiB,CACf9hC,MAAOyhC,EACP5hC,SAAS,GAEXkiC,YAAa,CACX/hC,MAAOyhC,EACP5hC,SAAUA,IAIV3N,EAAS,KAkBb,OAhBK/C,KAAQ6Q,IAAU2hC,IACrBzvC,EAAS2vC,EAAWC,iBAStBJ,EAAY,CACV1hC,OANA9N,EADE0vC,EACOC,EAAW3hC,QAEX2hC,EAAWE,aAIN/hC,MACdH,QAAS3N,EAAO2N,QAChBzU,UAGK8G,MC7BA8vC,GAAuB/nC,aAClC8L,YAAO,SAAU,cACjBC,aAAU,mBAAoB,aAAa,GAE3CrE,aAAa,CACXsgC,QAAS,SAAAhhD,GAAA,IACG9C,EADH8C,EACPlD,OAAUI,KACIkE,EAFPpB,EAEPihD,WAAc7/C,MACd8/C,EAHOlhD,EAGPkhD,iBACAziD,EAJOuB,EAIPvB,UAJO,OAKO,SAACsiB,EAAiBxiB,GAAlB,OAAqC,WACnD6C,EAAM2f,EAASxiB,EAAQrB,GACvBuB,GAAWyiD,MAGbtgC,YAAa,SAAAzR,GAAA,IAAG+xC,EAAH/xC,EAAG+xC,iBAAkBziD,EAArB0Q,EAAqB1Q,UAArB,OAAmD,kBAC9DA,GAAWyiD,QCtBJC,GAAgBnoC,aAC3B8L,YACE,eACA,YACA,cACA,aACA,SACA,eACA,cACA,gBACA,8BACA,qBACA,cACA,+BAEFC,aAAU,cAAe,aAAa,GACtCA,aAAU,iBAAkB,gBAAgB,GAE5Cq7B,GAEAv+B,aACE,SAAA7hB,GAYM,IAXJ0/C,EAWI1/C,EAXJ0/C,WAWIW,EAAArgD,EAVJ+e,MACEiF,EASEq8B,EATFr8B,cACA7hB,EAQEk+C,EARFl+C,SAEFi/C,EAMIphD,EANJohD,YAMIC,EAAArhD,EALJ2d,iBAKI,IAAA0jC,EALQ,UAKRA,EAJJC,EAIIthD,EAJJshD,YAMM/lD,EAAoB,CACxByiB,kBAAmB0hC,EACnBzhC,cAAemjC,EACfjjC,YALEne,EAHJuhD,UASED,cACAljC,kBAPEpe,EAFJwhD,4BAUEnjC,kBAREre,EADJyhD,6BAYA,MAAO,CACL5iC,SAAQ,GAAAzkB,OAAK+H,EAAL,KAAA/H,OAAiB4pB,GACzBgE,aAAczsB,EAAOoiB,MAK3B+C,aAAqD,CACnDiD,aAAc,SAAAxU,GAAA,IAAmB+O,EAAnB/O,EAAG6Y,aAAgB9J,kBAAnB,OAA6C,SAAArQ,GAAO,OAChEsT,KAAG,sCAAuC,CACxCtT,QAASqQ,GAAqBrQ,MAGlC6zC,SAAU,SAAAtyC,GAAA,IAAAuyC,EAAAvyC,EAAGwyC,aAAgBC,EAAnBF,EAAmBE,cAAeC,EAAlCH,EAAkCG,cAAlC,OAAwD,iBAAM,CACtE,CAAEC,IAAKD,GACP,CAAEE,IAAKH,MAGT72C,qBAAsB,SAAA9P,GAAA,IAAG+mD,EAAH/mD,EAAG+mD,aAAH,OAAsB,kBAAMA,EAAa,SAAA95B,GAAC,OAAKA,MAErEs0B,kBAAmB,SAAAhtC,GAAA,IAAGyyC,EAAHzyC,EAAGyyC,UAAH,OAAmB,kBAAMA,EAAU,SAAA/5B,GAAC,OAAKA,MAE5Dg6B,WAAY,SAAAzyC,GAAA,IACAxS,EADAwS,EACV5S,OAAUI,KACVoiD,EAFU5vC,EAEV4vC,aACA5C,EAHUhtC,EAGVgtC,cACgB0F,EAJN1yC,EAIVkyC,aAAgBQ,UAChBzkC,EALUjO,EAKViO,UACA0kC,EANU3yC,EAMV2yC,YACAC,EAPU5yC,EAOV4yC,mBAPU,OAQN,SAAC5oD,EAAGqB,GACR,IAMMkP,EAN+B,CACnCmb,MAAOvmB,KAAIygD,EAAc,CAAC,OAAQ,cAAe,IACjDrhD,OAAQY,KAAI69C,EAAe,0BAC3Bx+C,KAAMW,KAAIwjD,EAAa,oBACvBE,YAAa1jD,KAAIyjD,EAAoB,qBAEZplD,GAC3BklD,EAAU1oD,EAAGqB,EAAK4iB,GACf0C,KAAK,SAACE,GACL,IAAMxjB,EAAYylD,SAASC,eAAe,iBACpCj9C,EAAO,IAAIk9C,KACjB3lD,EAAKykB,KAAOmhC,IAAIC,gBAAgBriC,GAChCxjB,EAAK8lD,SAAL,GAAAzoD,OAAmBoL,EAAKs9C,UAAxB,KAAA1oD,OAAqCoL,EAAKu9C,WACtC,EADJ,KAAA3oD,OACSoL,EAAKw9C,cADd,aAAA5oD,OACuC6P,EADvC,KAAA7P,OAC+CW,GAC/CgC,EAAKkmD,YAIX9+B,YAAa,SAAAjT,GAAA,IACXqvC,EADWrvC,EACXqvC,kBACgB2C,EAFLhyC,EAEX8W,aAAgBk7B,eAChB/4C,EAHW+G,EAGX/G,MAHW,OAIP,SAAC4U,GAELwhC,EAAkB,CAChBC,SAAUzhC,EACV0hC,YAAayC,EACb/4C,cAKNyX,eC9HW06B,GAAW90C,IAAM+1C,MAAM,IAAIrhD,QAAQ,SAAAwhD,GAAI,MAAK,CAMvDpB,SANuD,SAOrDryC,EACA0yC,EACAx9B,GAGA,IAAMvU,EAAmBD,KAAK+yC,EAAKxzC,QAAU,EAE7CwzC,EAAKxzC,OAAL1O,OAAAuI,EAAA,EAAAvI,CAAA,GAEKkiD,EAAKxzC,OAFV1O,OAAAqF,GAAA,EAAArF,CAAA,GAGGoP,EAAW,CACVA,WACAuU,iBACAE,UAAWpV,EACXmV,YAAa,uBAIjBrV,GAAyB,CAAEE,KAAM0yC,EAAkBzyC,OAAQwzC,EAAKxzC,aC5BvD40C,GAAkBt3C,IAAM+1C,MAAM,IAAIrhD,QAAQ,SAAAwhD,GAAI,MAAK,CAI9DoB,gBAJ8D,SAI9CthC,EAAc5S,GAK5B,GAAI/L,KAAI6+C,EAAKxzC,OAAQsT,IAAS,CAAC5S,EAAU,gBAAiB,OAAO,KAEjE8yC,EAAKxzC,OAAL1O,OAAAuI,EAAA,EAAAvI,CAAA,GAEKkiD,EAAKxzC,OAFV1O,OAAAqF,GAAA,EAAArF,CAAA,GAGGoP,EAHHpP,OAAAuI,EAAA,EAAAvI,CAAA,GAKOkiD,EAAKxzC,OAAOU,GALnB,CAMIwU,YAAa5B,8BCXR9S,GAAclD,IAAM+1C,MAAM,IAAIrhD,QAAQ,SAAAwhD,GAAI,MAAK,CAK1DhzC,YAL0D,SAK9CE,EAAkB+xC,GAE5B,IAAMwG,EAAyBtpD,KAAK6jD,EAAKxzC,QAGnCk5C,EAAeC,KAAK3F,EAAKxzC,OAAQU,GAEjC04C,EAAgBxpC,KACpBspC,EACA,SAACrpC,EAAKqJ,EAAMroB,GAeV,OAbIA,EAAM6P,IAGRmP,EAAIhf,EAAM,GAAVS,OAAAuI,EAAA,EAAAvI,CAAA,GAEKkiD,EAAKxzC,OAAOnP,GAFjB,CAIE6P,SAAU7P,EAAM,KAKpBgf,EAAIhf,GAAO2iD,EAAKxzC,OAAOnP,GAChBgf,GAET,IAKF2jC,EAAKxzC,OAASm5C,KAAKC,EAAe34C,KAAKw4C,IAGvCp5C,GAAyB,CAAEE,KAAM0yC,EAAkBzyC,OAAQwzC,EAAKxzC,aC5CvD+d,GAAYzgB,IAAM+1C,MAAM,IAAIrhD,QAAQ,SAAAwhD,GAAI,MAAK,CAMxDz1B,UANwD,SAOtDrd,EACAX,EACA0yC,GAGAe,EAAKxzC,OAAL1O,OAAAuI,EAAA,EAAAvI,CAAA,GAEKkiD,EAAKxzC,OAFV1O,OAAAqF,GAAA,EAAArF,CAAA,GAGGoP,EAHHpP,OAAAuI,EAAA,EAAAvI,CAAA,GAKOkiD,EAAKxzC,OAAOU,GALnB,CAMIyU,UAAWpV,MAIfF,GAAyB,CAAEE,KAAM0yC,EAAkBzyC,OAAQwzC,EAAKxzC,aCtBvD+c,GAAoBzf,IAAM+1C,MAAM,IAAIrhD,QAAQ,SAAAwhD,GAAI,MAAK,CAKhEz2B,kBALgE,SAK9Chd,GAAsC,IAAxB4zC,EAAwBl+C,UAAA/E,OAAA,QAAAgF,IAAAD,UAAA,IAAAA,UAAA,GAGpD+9C,EAAK51B,cAFH+1B,EAEmB1F,GAAWoC,UAGXtwC,MCVds5C,GAAY/7C,IAAM+1C,MAAM,IAAIrhD,QAAQ,SAAAwhD,GAAI,MAAK,CAMxD6F,UANwD,SAOtD34C,EACA4S,EACAm/B,GAGA,IAamB6G,EAgBEC,EA7BfC,EAAqB/4C,KAAK+yC,EAAKxzC,QAE/By5C,EAAmBjG,EAAKxzC,OAAOU,GAE/Bg5C,EAAgBlG,EAAKxzC,OAAOU,EAAW,GAEvCi5C,EAAgBnG,EAAKxzC,OAAOU,EAAW,GAE7C,GACY,OAAT4S,GAA8B,IAAb5S,GACL,SAAT4S,GAAmB5S,IAAa84C,EACpC,OAAO,KAEI,OAATlmC,IAEFkgC,EAAKxzC,OAAL1O,OAAAuI,EAAA,EAAAvI,CAAA,GAEKkiD,EAAKxzC,QAFVs5C,EAAA,GAAAhoD,OAAAqF,GAAA,EAAArF,CAAAgoD,EAGG54C,EAAW,EAHdpP,OAAAuI,EAAA,EAAAvI,CAAA,GAIOmoD,EAJP,CAKI/4C,SAAUA,EAAW,KALzBpP,OAAAqF,GAAA,EAAArF,CAAAgoD,EAOG54C,EAPHpP,OAAAuI,EAAA,EAAAvI,CAAA,GAQOooD,EARP,CASIh5C,cATJ44C,KAcW,SAAThmC,IAEFkgC,EAAKxzC,OAAL1O,OAAAuI,EAAA,EAAAvI,CAAA,GAEKkiD,EAAKxzC,QAFVu5C,EAAA,GAAAjoD,OAAAqF,GAAA,EAAArF,CAAAioD,EAGG74C,EAHHpP,OAAAuI,EAAA,EAAAvI,CAAA,GAIOqoD,EAJP,CAKIj5C,cALJpP,OAAAqF,GAAA,EAAArF,CAAAioD,EAOG74C,EAAW,EAPdpP,OAAAuI,EAAA,EAAAvI,CAAA,GAQOmoD,EARP,CASI/4C,SAAUA,EAAW,KATzB64C,KAcF15C,GAAyB,CAAEE,KAAM0yC,EAAkBzyC,OAAQwzC,EAAKxzC,aC7DvDiB,GAAa3D,IAAM+1C,MAAM,IAAIrhD,QAAQ,SAAAwhD,GAAI,MAAK,CAIzDvyC,WAJyD,SAI9CwxC,GAETtyC,OAAOC,aAAaw5C,WAAWnH,GAE/Be,EAAKxzC,OAAS,GAEdwzC,EAAKqG,WAAWpH,OCRPJ,GAAiB/0C,IAAM+1C,MAAM,IAAIrhD,QAAQ,SAAAwhD,GAAI,MAAK,CAO7DnB,eAP6D,SAAAv8C,GAiB1D,IATDwpB,EASCxpB,EATDwpB,SACAmzB,EAQC38C,EARD28C,iBACA/xC,EAOC5K,EAPD4K,SACAuU,EAMCnf,EANDmf,eAQAu+B,EAAKxzC,OAAL1O,OAAAuI,EAAA,EAAAvI,CAAA,GAEKkiD,EAAKxzC,OAFV1O,OAAAqF,GAAA,EAAArF,CAAA,GAGGoP,EAHHpP,OAAAuI,EAAA,EAAAvI,CAAA,GAKOkiD,EAAKxzC,OAAOU,GALnB,CAMIuU,qBAIJpV,GAAyB,CACvB9P,GAAIuvB,EACJvf,KAAM0yC,EAENzyC,OAAQwzC,EAAKxzC,aCzBNg5C,GAAiB17C,IAAM+1C,MAAM,IAAIrhD,QAAQ,SAAAwhD,GAAI,MAAK,CAC7DwF,eAD6D,SAAAljD,GAKzC,IAHlB+e,EAGkB/e,EAHlB+e,MACAH,EAEkB5e,EAFlB4e,QACAzU,EACkBnK,EADlBmK,MAEQS,EAAaT,EAAbS,SAER8yC,EAAKxzC,OAAL1O,OAAAuI,EAAA,EAAAvI,CAAA,GAEKkiD,EAAKxzC,OAFV1O,OAAAqF,GAAA,EAAArF,CAAA,GAGGoP,EAHHpP,OAAAuI,EAAA,EAAAvI,CAAA,GAIO2O,EAJP,CAKIyU,UACAC,SAAUE,EAAM5c,iBCdX6hD,GAAex8C,IAAMwR,QAChCsjC,GACAwC,GACAp0C,GACAud,GACAhB,GACAs8B,GACAp4C,GACAoxC,GACA2G,wBCXI7iD,GAAW,GAAAjG,OAAME,EAAN,SAEJ2pD,GAAkBz8C,IAAM+1C,MAAM,IAAIrhD,QAAQ,SAAAwhD,GAAI,MAAK,CAC9DwG,kBAD8D,SAC5C16B,GAEhB,IAAMlpB,EAAkB,CACtBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,KAAM,kBACNC,OAAQ,CACNujD,aAAc36B,MAKpB,OAAOzoB,kBAAQ,CACbV,OACAC,SACAU,UAAW,WAET08C,EAAKr+C,MAAQ,MAGf4B,UAAWy8C,EAAK0G,qBAEhBljD,QAASw8C,EAAKn+C,YAKlB6kD,qBA5B8D,SAAApkD,GA4B/B,IAARtB,EAAQsB,EAARtB,KAErBg/C,EAAK2G,YAAc3lD,EAEnBg/C,EAAK4G,eAGPA,YAnC8D,WAqC5D,IAAMhkD,EAAkB,CACtBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,KAAM,yBAGV,OAAOI,kBAAQ,CACbV,OACAC,SACAU,UAAW,aAEXC,UAAWy8C,EAAK6G,iBAEhBrjD,QAASw8C,EAAKn+C,YAIlBglD,iBAtD8D,SAsD7CjmD,GAQfo/C,EAAKh0B,WAAa5P,KAChBxb,EAAKI,KAEL,SAAC8X,EAAM4M,GACL,IAAMohC,EAAU,CACd5jD,OAAQuhB,KACNpiB,KAEE49C,aAAKD,EAAK2G,aACV,SAAAl1C,GAAA,OAAAA,EAAG6U,gBAAsCZ,EAAKqhC,WAEhD,cAEF7zC,UAAW8zC,OAAOthC,EAAKuhC,wBAEzB,SAAAvqD,OAAAoB,OAAAgW,GAAA,EAAAhW,CAAWgb,GAAX,CAAiBguC,KAEnB,KAIJjlD,SAnF8D,SAmFrDF,GAEPq+C,EAAKr+C,MAAQA,MC5FXulD,GAAQp9C,IAAM+1C,MAAM,QAAS,CACjCsH,UAAWr9C,IAAMs9C,OACjBr7C,WAAYjC,IAAMs9C,OAClBxgC,qBAAsB9c,IAAMuB,OAC5Bib,cAAexc,IAAMs9C,OACrBC,iBAAkBv9C,IAAMs9C,OACxBE,WAAYx9C,IAAMy9C,UAAUz9C,IAAMuB,QAClCoK,gBAAiB3L,IAAMuB,OACvBkB,KAAMzC,IAAMuB,OACZm8C,UAAW19C,IAAMy9C,UAAUz9C,IAAM29C,MAAM39C,IAAMuB,SAC7Cq8C,UAAW59C,IAAMy9C,UAAUz9C,IAAM29C,MAAM39C,IAAMuB,SAC7C5G,SAAUqF,IAAM69C,iBAChB9gC,sBAAuB/c,IAAMuB,OAC7Bu8C,WAAY99C,IAAMs9C,SAGdS,GAAY/9C,IAAM+1C,MAAM,YAAa,CACzC3sC,UAAWpJ,IAAMy9C,UAAUz9C,IAAMuB,QACjCnI,OAAQ4G,IAAM29C,MAAMP,MAIhBY,GAAah+C,IAAM+1C,MAAM,aAAc,CAC3CkH,SAAUj9C,IAAMs9C,OAChBH,sBAAuBn9C,IAAMs9C,OAC7BW,WAAYj+C,IAAMuB,SAGP28C,GAAcl+C,IAAM+1C,MAAM,cAAe,CACpDl+C,MAAOmI,IAAMm+C,OAAO,IACpBj8B,WAAYliB,IAAM29C,MAAMI,IACxBK,YAAap+C,IAAM29C,MAAMK,IACzB57B,aAAcpiB,IAAM29C,MAAMP,IAC1B98B,cAAetgB,IAAMq+C,MAAMr+C,IAAMuB,OAAQvB,IAAMs9C,OAAQt9C,IAAM5H,WAC7DykD,YAAa78C,IAAM29C,MAAMP,MAGdkB,GAAat+C,IAAMwR,QAC9B0sC,GACA1B,GACAC,ICzBI5jD,GAAW,GAAAjG,OAAME,EAAN,SAEJyrD,GAAmCv+C,IAC7C+1C,MAAM,IACNrhD,QAAQ,SAAAwhD,GAAI,MAAK,CAChBsI,eAAgBC,YAAI/vC,GAAAC,EAAAC,KAAC,SAAU4vC,IAAV,OAAA9vC,GAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAnX,MAAA,OAEnB,OAFmBmX,EAAAnX,KAAA,EAEbs+C,EAAKwG,kBAAkB,GAFV,OAInB,OAJmB3tC,EAAAnX,KAAA,EAIbs+C,EAAKwI,mBAJQ,wBAAA3vC,EAAAG,SAAUsvC,MAO/BE,iBARgB,WAUd,IAAMC,EAA4Bj4C,KAEhCwvC,EAAK0I,iCAGH1I,EAAK2I,cAEL3I,EAAK0I,gCACH9lD,EAAkB,CACtBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,KAAM,4BACNC,OAAQ,CAEN8K,YAAagyC,EAAK4I,eAClB16C,YAAau6C,MAKnB,OAAOplD,kBAAQ,CACbV,OACAC,SACAU,UAAW,WAET08C,EAAK6I,cAAe,EAEpB7I,EAAKr+C,MAAQ,MAGf4B,UAAWy8C,EAAK8I,qBAEhBtlD,QAASw8C,EAAKn+C,YAIlBinD,qBA9CgB,SA8CKloD,GAGnBo/C,EAAKpyC,MAAQnM,KAEXsnD,KAAO,GAAArsD,OAAAoB,OAAAgW,GAAA,EAAAhW,CAAKkiD,EAAKpyC,OAAV,CAAiBhC,GAAchL,EAAKI,SAC3C,MAGEiM,KAAK+yC,EAAK4I,gBC/ES,IDiFrB5I,EAAKgJ,UAAW,GAEiD,OAA/Dr8C,OAAOC,aAAaC,QAAQ,+BAE9BmzC,EAAKqG,aAILrG,EAAKxzC,OAASzJ,KAAK2J,MAEjBC,OAAOC,aAAaC,QAAQ,gCAIhCmzC,EAAK6I,cAAe,EAEpB7I,EAAKiJ,UAAW,GAGlBpnD,SA5EgB,SA4EPF,GAEPq+C,EAAKr+C,MAAQA,kEE3FNunD,GAAgCp/C,IAAM+1C,MAAM,IAAIrhD,QAAQ,SAAAwhD,GAAI,MAAK,CAC5EqG,WAD4E,WAE1E,IAAM8C,EAAe,CACnBj8C,SAAU,EACVuU,eAAgB8mC,KACdlmD,KAAO,cACPoiB,KAAO,CAAC,gBAAiB,eAFX8jC,CAIdvI,EAAK2G,aACPhlC,UzBpB0B,OyBqB1BD,YAAa,qBAGfs+B,EAAKxzC,OAAS,CACZ48C,EAAGD,GAGL98C,GAAyB,CACvBE,KAAM,8BAENC,OAAQwzC,EAAKxzC,UAIjB68C,UAxB4E,WA4B1E,OAFArJ,EAAKz+C,QAAU,EAERy+C,EAAKwI,oBAGd9H,mBA/B4E,WAkC1EV,EAAKx/B,mBAAqBw/B,EAAKx/B,gEClCtB8oC,GAA8Bx/C,IACxC+1C,MAAM,IACNC,SAAS,iBAAO,CAGfv+C,OAAQ,EACRynD,UAAU,EACVxoC,mBAAmB,EACnBqoC,cAAc,KAEfU,MAAM,SAAAvJ,GAAI,MAAK,CACd0I,sCACE,IAAMc,EAAgBptC,KAEpBnW,KAAO+5C,EAAKxzC,QACZ,SAAC6P,EAAKqJ,GACJ,IAAM+jC,EAA6BxoD,KACjCykB,EAAKjE,eACL,YAIF,OADApF,EAAIlR,KAAKs+C,GACFptC,GAET,IAEF,OAAO0sC,KAAQS,IAGjBb,oBACE,OAAOvsC,KAEL4jC,EAAK2G,YACL,SAACtqC,EAAD/Z,GAAmC,IAA3BglD,EAA2BhlD,EAA3BglD,WAAY7iD,EAAenC,EAAfmC,SAKlB,OAJI6iD,GAEFjrC,EAAIlR,KAAK1G,GAEJ4X,GAET,KAIJqtC,wBACE,OAAOC,KACL1oD,KAAI2oD,YAAU5J,GAAMt/B,kBAAkBpf,SFzDjB,EE0DrB0+C,EAAKz+C,SAKTqnD,qBACE,IAAMiB,EAAeD,YAAU5J,GAAMt/B,kBAAkBopC,WAGvD,OAD2BC,KAAMF,EFlEV,GEmEG7J,EAAKz+C,OAAS,OC1DxCyoD,GAAgBlgD,IAAM+1C,MAAM,QAAS,CACzCx8B,QAASvZ,IAAMs9C,OACf6C,kBAAmBngD,IAAMy9C,UAAUz9C,IAAM29C,MAAM39C,IAAMs9C,SACrDx/B,uBAAwB9d,IAAMy9C,UAAUz9C,IAAM29C,MAAM39C,IAAMs9C,SAC1Dt7C,WAAYhC,IAAMs9C,OAClB8C,WAAYpgD,IAAMy9C,UAAUz9C,IAAMs9C,QAClC+C,WAAYrgD,IAAMy9C,UAAUz9C,IAAMs9C,QAClCr7C,WAAYjC,IAAMy9C,UAAUz9C,IAAMs9C,QAClCgD,WAAYtgD,IAAMy9C,UAAUz9C,IAAMs9C,QAClCp7C,WAAYlC,IAAMy9C,UAAUz9C,IAAMs9C,QAClCiD,WAAYvgD,IAAMy9C,UAAUz9C,IAAMs9C,QAClCn7C,QAASnC,IAAMy9C,UAAUz9C,IAAMs9C,QAC/B5+B,OAAQ1e,IAAMy9C,UAAUz9C,IAAMs9C,QAC9Bl7C,eAAgBpC,IAAMy9C,UAAUz9C,IAAMs9C,QACtC7qD,GAAIuN,IAAMuB,OACVi/C,WAAYxgD,IAAMuB,OAClBsH,MAAO7I,IAAMy9C,UAAUz9C,IAAMs9C,UAGlBmD,GAAyBzgD,IAAM+1C,MAAM,oBAAqB,CACrE3hD,UAAW,8BACX+qD,UAAU,EACVtnD,MAAOmI,IAAMy9C,UAAUz9C,IAAMm+C,OAAO,KACpCz7C,OAAQ1C,IAAMm+C,OAAO,IACrBr6C,MAAO9D,IAAM29C,MAAMuC,MAGRQ,GAA8B1gD,IAAMwR,QAE/C8sC,GAEAmC,GACArB,GACAb,GACAiB,ICTWmB,GAA4BnvC,aACvC8L,YAAO,SAAU,+BACjB+3B,aAAU,CACRC,kBADQ,YAONkJ,EADItqD,KAAKV,MADPwmD,4BAA+BwE,qBAKrCpkC,IAZuC5I,CAdf,SAAAhZ,GAAA,IACxBooD,EADwBpoD,EACxBooD,aADwBC,EAAAroD,EAExBwhD,4BAA+BmF,EAFP0B,EAEO1B,SAAUz8C,EAFjBm+C,EAEiBn+C,OAFjB,OAIvBy8C,EACC3lC,EAAA7K,EAAA8K,cAACqnC,GAAD,CACE3qC,UAAWsgC,GACX/zC,OAAQA,EACR3L,OAAQmmD,OAAO0D,KAGjBpnC,EAAA7K,EAAA8K,cAAC0D,GAAD,QC3BS4jC,GAAkB,SAACl4C,GAAD,MACnB,WAAVA,EAAgB,IAAMA,GCQXm4C,WAAc,SAAAxoD,GAAA,IAAG3C,EAAH2C,EAAG3C,WAAY0mB,EAAf/jB,EAAe+jB,QAAf,OACzB/C,EAAA7K,EAAA8K,cAAA,OACEC,UAAWC,KAAG,gBAAiB,CAAEsnC,wBAAyBprD,IAC1D0mB,QAASA,IAEP1mB,GAAc2jB,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAE,qCCRd69C,GAAwB1vC,aACnC0H,aAAa,CAQXiD,aAAc,kBAAM,SAAA3jB,EAMpB6e,GANoB,IAClBgmC,EADkB7kD,EAClB6kD,UACA7gC,EAFkBhkB,EAElBgkB,cACA7hB,EAHkBnC,EAGlBmC,SACA+iD,EAJkBllD,EAIlBklD,UAJkB,OAMC/jC,KAAG,CACtBwnC,MAAO9D,EACP+D,iBAAkBnpC,QAAQolC,GAC1BgE,SAAU3D,EACV4D,YAAa,GAAA1uD,OAAG+H,EAAH,KAAA/H,OAAe4pB,KAAoBnF,SCazCkqC,GAAgB/vC,aAC3B8L,YACE,cACA,SACA,YACA,+BAGFpE,aAAa,CASXkD,WAAY,SAAA5jB,GAAA,IACA4F,EADA5F,EACVlD,OAAU8I,KACVof,EAFUhlB,EAEVglB,YACA3C,EAHUriB,EAGVqiB,WACa6C,EAJHllB,EAIVmlB,UAAaD,QAJH,OAKN,SAAA/V,GAGA,IAHGgE,EAGHhE,EAHGgE,gBAAiBhR,EAGpBgN,EAHoBhN,SAKlB6mD,EAAiBjpD,KACrBsiB,EACA,CAAE1Y,QAASxH,IAEb,GAAI+L,KAAQ86C,GAAiB,OAAO,KAIpC,IAAMC,EAAiBnvC,KACrBkvC,EACA,SAACjvC,EAAD3K,GAA6C,IAAb+L,EAAa/L,EAArCkW,uBACN,OAAKnK,GAELjU,KAAQiU,EAAQ,SAAAoK,GAAK,OAAIxL,EAAIlR,KAAK0c,KAC3BxL,GAHaA,GAInB,IAGL,OAAOmL,EAAQ,CACb/J,OAAQ8tC,EACRrjD,OACAuN,kBACAsH,MAAOuK,EACPxH,KAAM,mBAOVgG,QAAS,SAAAtoB,GAAA,IACwB4jD,EADxB5jD,EACPsmD,4BAA+B1C,gBADxB,OAEH,SAACthC,EAAc5S,GAAf,OAAoCk0C,EAAgBthC,EAAM5S,KAQhE8Y,qBAAsB,SAAAjU,GAAA,IAAG4S,EAAH5S,EAAG4S,WAAH,OAAoB,kBAAMA,MAElDqmC,GACA9mC,KAGW0B,GAAQylC,GAAcG,ICvGtBC,GAAqBnwC,aAChC8L,YAAO,UACPlD,IAEAC,aAEE,SAAA7hB,GAMM,IALJ2lB,EAKI3lB,EALJ2lB,YACU/f,EAIN5F,EAJJlD,OAAU8I,KACVrH,EAGIyB,EAHJzB,OAGI6qD,EAAAppD,EAFJwiB,QAAWzB,EAEPqoC,EAFOroC,QAAS7gB,EAEhBkpD,EAFgBlpD,WAAYmpD,EAE5BD,EAF4BC,eAAgBC,EAE5CF,EAF4CE,MAAU9mC,EAEtDhnB,OAAA8Z,GAAA,EAAA9Z,CAAA4tD,EAAA,mDADJlrC,EACIle,EADJke,kBAEMoI,EAAS3gB,GAAUC,GACnB2jD,EAAc1qD,KAAI2jB,EAAD,iBAAApoB,OAA2BksB,IAC5C84B,EAAWvgD,KAAI2jB,EAAD,QAAApoB,OAAkBksB,IAEtC,MAAO,CACLkjC,QAAS,GACT7jC,YAAaA,EAAY5E,EAASxiB,GAClCkrD,eAAgB,cAChBC,aAAcxrC,EACdyrC,cAAe7gD,GAAQs2C,GACvBmK,YAAazgD,GAAQygD,GACrBK,WAAU,GAAAxvD,OAAKkvD,EAAL,KAAAlvD,OAAcivD,GACxBQ,UAAWzK,EACX0K,kBAAmBP,EACnBtpD,UAAWsF,GAAarF,GACxBklB,MAAO,CACL2kC,WAAW,EACXhpC,eCdGipC,GAAab,GAExB,SAAAnpD,GAAA,IACE2lB,EADF3lB,EACE2lB,YACAtoB,EAFF2C,EAEE3C,WACAigB,EAHFtd,EAGEsd,MAHF2sC,EAAAjqD,EAIEolB,MAASrE,EAJXkpC,EAIWlpC,QAASgpC,EAJpBE,EAIoBF,UAClB9pD,EALFD,EAKEC,UACAihD,EANFlhD,EAMEkhD,iBACAqI,EAPFvpD,EAOEupD,YACAI,EARF3pD,EAQE2pD,cACAH,EATFxpD,EASEwpD,QACAK,EAVF7pD,EAUE6pD,UACAC,EAXF9pD,EAWE8pD,kBACAJ,EAZF1pD,EAYE0pD,aACAD,EAbFzpD,EAaEypD,eACAG,EAdF5pD,EAcE4pD,WACAhpC,EAfF5gB,EAeE4gB,YAfF,OAkBEyD,EAAA,cAAC5C,EAAA,QAAQyoC,kBAAT,CAA2BC,QAASX,EAAStoC,UAAU,gBACpDggC,GAEC78B,EAAA,cAAC5D,GAAD,CACEpjB,WAAYA,EACZigB,MAAOA,EACPyD,QAASA,EACTH,YAAaA,IAGjByD,EAAA,cAAC5C,EAAA,QAAQ2oC,kBAAT,KACGL,GACC1lC,EAAA,cAAC5C,EAAA,WAAD,CAEEkE,YAAaA,KAKnBtB,EAAA,cAAC5C,EAAA,QAAQ4oC,UAAT,KAAoBpqD,GAEpBokB,EAAA,cAAC5C,EAAA,QAAQ6oC,iBAAT,KACEjmC,EAAA,cAAC5C,EAAA,UAAD,CAEEkE,YAAaA,EACby5B,SAAU0K,KAKdzlC,EAAA,cAAC5C,EAAA,QAAQ8oC,kBAAT,CAA2BrpC,UAAWuoC,GACnCG,GAGHvlC,EAAA,cAAC5C,EAAA,QAAQ6oC,iBAAT,KAGEjmC,EAAA,cAAC5C,EAAA,UAAD,CAAWkE,YAAaA,EAAay5B,SAAUyK,KAGhDH,GACCrlC,EAAA,cAAC5C,EAAA,QAAQ+oC,wBAAT,KACEnmC,EAAA,cAAC5C,EAAA,QAAQgpC,cAAT,CAAuBC,KAAK,QACzBf,GAEHtlC,EAAA,cAAC5C,EAAA,QAAQgpC,cAAT,CAAuBC,KAAK,OACzBnB,OCpFAoB,GAAa3xC,aACxB8L,YACE,YACA,SACA,cACA,cAEFi8B,GACAl8B,GACA6jC,GACA9mC,KCTWU,GAAKqoC,GAChB,SAAA3qD,GAAA,IACE6e,EADF7e,EACE6e,SACA8E,EAFF3jB,EAEE2jB,aACAq9B,EAHFhhD,EAGEghD,QAHF4J,EAAA5qD,EAIEihD,WAAc5jD,EAJhButD,EAIgBvtD,WAAYigB,EAJ5BstC,EAI4BttC,MAC1B4jC,EALFlhD,EAKEkhD,iBACA3iD,EANFyB,EAMEzB,OACAikB,EAPFxiB,EAOEwiB,QACArD,EARFnf,EAQEmf,eACAjB,EATFle,EASEke,kBACAmE,EAVFriB,EAUEqiB,WACAzB,EAXF5gB,EAWE4gB,YAXF,OAaEI,EAAA7K,EAAA8K,cAAA,MAAIC,UAAU,0BAGZF,EAAA7K,EAAA8K,cAAC+oC,GAAD,CACE9rC,kBAAmBA,EACnBsE,QAASA,EACTjkB,OAAQA,EACRonB,YAAaq7B,EACbE,iBAAkBA,EAClB7jD,WAAYA,EACZigB,MAAOA,EACPsD,YAAaA,IAEdjiB,KAAIwgB,EAAgB,SAAAJ,GAAK,OACxBiC,EAAA7K,EAAA8K,cAAA,MACElmB,IAAG,GAAAX,OAAK2kB,EAAM5c,SAAX,KAAA/H,OAAuB2kB,EAAMiF,eAChC9C,UAAWyC,EAAa5E,EAAOF,IAE9BX,EACC8C,EAAA7K,EAAA8K,cAAA,aACED,EAAA7K,EAAA8K,cAAA,aACGtiB,KAAI,CAAC6jB,EAAQqoC,QAASroC,EAAQsoC,aAAc,SAAA5sD,GAAI,OAC/C8iB,EAAA7K,EAAA8K,cAAA,MAAIlmB,IAAKmD,GACP8iB,EAAA7K,EAAA8K,cAAC6E,GAAD,CACE7rB,GAAIiE,EACJ6gB,MAAOA,EACPsD,WAAYA,EACZG,QAASA,EACT7E,UAAU,2BAOpBqD,EAAA7K,EAAA8K,cAAA,aACED,EAAA7K,EAAA8K,cAAA,aACED,EAAA7K,EAAA8K,cAAA,UACED,EAAA7K,EAAA8K,cAAC6E,GAAD,CACE/G,MAAOA,EACPsD,WAAYA,EACZG,QAASA,EACThF,KAAK,QACLG,UAAU,oCCqCxBotC,WAA0B/xC,aAC9B8L,YAAO,+BAEPpE,aAAa,CAKXsqC,eAAgB,SAAA77C,GAAA,IACd4P,EADc5P,EACd4P,MADcksC,EAAA97C,EAEdqyC,4BAA+B4F,EAFjB6D,EAEiB7D,kBAAmB97C,EAFpC2/C,EAEoC3/C,MAFpC,OAGV,kBACJ3M,KAAIyoD,EAAmB,SAAChiC,GACtB,IAAM8lC,EAAcjoC,GAClBlE,EAAM5c,SACNpC,KAAOuL,EAAO,CAAEyV,QAASqE,EAAMrE,UAC/B,SACA7a,WACF,OAAO1K,OAAAuI,EAAA,EAAAvI,CAAA,GACF4pB,EADL,CAEErG,QACAoD,OAAQomC,GAAgB2C,WAIhCtpC,MAIWupC,GAAkBJ,GA5FE,SAAA/qD,GAAA,IAC/B6e,EAD+B7e,EAC/B6e,SAD+Bw9B,EAAAr8C,EAE/BgoB,aACE++B,EAH6B1K,EAG7B0K,UACAL,EAJ6BrK,EAI7BqK,SACAC,EAL6BtK,EAK7BsK,SACAJ,EAN6BlK,EAM7BkK,aACAroC,EAP6Bm+B,EAO7Bn+B,kBACA5S,EAR6B+wC,EAQ7B/wC,MAEF0/C,EAV+BhrD,EAU/BgrD,eACAzsD,EAX+ByB,EAW/BzB,OACA4lB,EAZ+BnkB,EAY/BmkB,YACAvF,EAb+B5e,EAa/B4e,QACAzU,EAd+BnK,EAc/BmK,MAd+B,OAiB/B6W,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KACErD,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,wBAEbF,EAAA7K,EAAA8K,cAAA,SAAOC,UAAU,sBACfF,EAAA7K,EAAA8K,cAACQ,EAAA,QAAQ2pC,MAAT,KAGEpqC,EAAA7K,EAAA8K,cAACiD,GAAD,CAAO/Z,MAAOA,EAAOga,YAAaA,KAEnCwiC,EACC3lC,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KAGErD,EAAA7K,EAAA8K,cAACU,GAAD,CACExC,eAAgBhV,EAAMgV,eACtB2C,KAAMkpC,IACN3oC,WAAY/W,EACZ/M,OAAQA,EACRqgB,QAASA,EACTC,SAAUA,EACVX,kBAAmBA,EACnBoE,GAAIA,KAINtB,EAAA7K,EAAA8K,cAACoqC,GAAD,CACElhD,MAAOA,EACPkY,WAAY/W,EACZ/M,OAAQA,EACRsgB,SAAUA,EACVX,kBAAmBA,KAIvB8C,EAAA7K,EAAA8K,cAAC0D,GAAD,QAIL+hC,GACC1lC,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,sBACbF,EAAA7K,EAAA8K,cAACqqC,GAAD,CAAavnC,QAASgjC,EAAW1pD,WAAYkpD,QCpF/ClmD,GAAW,GAAAjG,OAAME,EAAN,SAEJixD,GAAkC/jD,IAC5C+1C,MAAM,IACNrhD,QAAQ,SAAAwhD,GAAI,MAAK,CAChBwI,iBADgB,SACCkC,EAAsBoD,GACrC,IAAMlrD,EAAkB,CACtBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,KAAM,gCACNC,OAAQ,CACN6qD,iBAAkBrD,EAClBsD,aAAcF,MASpB,OAFA9N,EAAKwG,kBAAkB,GAEhBnjD,kBAAQ,CACbV,OACAC,SACAU,UAAW,WAET08C,EAAKr+C,MAAQ,KAEbq+C,EAAKiJ,UAAW,GAGlB1lD,UAAWy8C,EAAKiO,iBAEhBzqD,QAASw8C,EAAKn+C,YAKlBosD,iBAlCgB,SAAA3rD,GAkCe,IAAZtB,EAAYsB,EAAZtB,KAEjBg/C,EAAKh1C,QAAU7J,KAAIH,EAAM,sCAAwC,GAEE,OAA/D2L,OAAOC,aAAaC,QAAQ,+BAE9BmzC,EAAKqG,aAILrG,EAAKxzC,OAASzJ,KAAK2J,MAEjBC,OAAOC,aAAaC,QAAQ,gCAKhCmzC,EAAKiJ,UAAW,GAGlBpnD,SAtDgB,SAsDPF,GAEPq+C,EAAKr+C,MAAQA,MChENusD,GAA+BpkD,IAAM+1C,MAAM,IAAIrhD,QAAQ,SAAAwhD,GAAI,MAAK,CAC3EqG,WAD2E,WAEzE,IAAM8C,EAAe,CACnBj8C,SAAU,EACVuU,eAAgB8mC,KACdlmD,KAAO,cACPoiB,KAAO,CAAC,gBAAiB,eAFX8jC,CAIdvI,EAAK2G,aACPhlC,UvCpB0B,OuCqB1BD,YAAa,SAGfs+B,EAAKxzC,OAAS,CACZ48C,EAAGD,GAGL98C,GAAyB,CACvBE,KAAM,8BAENC,OAAQwzC,EAAKxzC,UAIjBy0C,iBAxB2E,WA2BzEjB,EAAKgB,iBAAmBhB,EAAKgB,oBCpCpBmN,GAA6BrkD,IAAM+1C,MAAM,IAAIC,SAAS,iBAAO,CACxEkB,iBAAiB,KCMbkG,GAAQp9C,IAAM+1C,MAAM,QAAS,CACjClrC,EAAG7K,IAAMs9C,OACTgH,EAAGtkD,IAAMs9C,OACTiH,EAAGvkD,IAAMs9C,SAGLkH,GAASxkD,IAAM+1C,MAAM,SAAU,CACnCxuC,SAAUvH,IAAMs9C,OAChBmH,UAAWzkD,IAAMy9C,UAAUz9C,IAAMuB,QACjCmjD,SAAU1kD,IAAMuB,OAChBojD,SAAU3kD,IAAMuB,OAChBmd,OAAQ1e,IAAMy9C,UAAUz9C,IAAMs9C,QAC9BsH,KAAM5kD,IAAMy9C,UAAUz9C,IAAMs9C,QAC5BlkD,OAAQ4G,IAAMy9C,UAAUz9C,IAAM29C,MAAMP,OAGzByH,GAA6B7kD,IAAM+1C,MAAM,oBAAqB,CACzE3hD,UAAW,8BACX+qD,UAAU,EACVtnD,MAAOmI,IAAMy9C,UAAUz9C,IAAMm+C,OAAO,KACpCz7C,OAAQ1C,IAAMm+C,OAAO,IACrBj9C,QAASlB,IAAM29C,MAAM6G,MAGVM,GAA8B9kD,IAAMwR,QAE/C8sC,GAEAuG,GACAd,GACAK,GACAC,ICPWU,GAAiCvzC,aAC5C8L,YAAO,SAAU,8BAA+B,0BAChD+3B,aAAU,CACRC,kBADQ,WACY,IAAAC,EAQdrhD,KAAKV,MALPotD,EAHgBrL,EAGhBqL,cAMFlC,EATkBnJ,EAKhB0E,4BAA+ByE,kBAIhBkC,EATCrL,EAOhByP,uBAA0BC,eAEkBC,cAGlD9qC,KAIW+qC,GAAyBJ,GAjCE,SAAAvsD,GAAA,IACtCooD,EADsCpoD,EACtCooD,aADsCwE,EAAA5sD,EAEtCyhD,4BAA+BkF,EAFOiG,EAEPjG,SAAUz8C,EAFH0iD,EAEG1iD,OAFH,OAIrCy8C,EACC3lC,EAAA7K,EAAA8K,cAACqnC,GAAD,CACE3qC,UAAWsgC,GACX/zC,OAAQA,EACR3L,OAAQmmD,OAAO0D,KAGjBpnC,EAAA7K,EAAA8K,cAAC0D,GAAD,QCpBSwkC,GAAqBnwC,aAChC8L,YAAO,SAAU,+BACjBlD,IAEAC,aAEE,SAAA7hB,GAOM,IANM4F,EAMN5F,EANJlD,OAAU8I,KAMNwjD,EAAAppD,EALJwiB,QACEzT,EAIEq6C,EAJFr6C,SACGyT,EAGDhnB,OAAA8Z,GAAA,EAAA9Z,CAAA4tD,EAAA,cAD2B1K,EAC3B1+C,EADJyhD,4BAA+B/C,gBAEzBp4B,EAASzgB,GAAcD,GAE7B,MAAO,CACL4jD,QAAS,GACTqD,UAAW/rD,QAAMgsD,QAAQC,QAAQ,CAC/BvvC,KAAM,qBACNvjB,GAAI8U,IAEN2vC,kBACAsO,kBAAiB,YAAA5yD,OAAc2U,GAC/Bk+C,YAAapuD,KAAI2jB,EAAS,aAC1BzO,WAAYlV,KAAI2jB,EAAD,QAAApoB,OAAkBksB,QCnB5B0jC,GAAab,GAAmB,SAAAnpD,GAAA,IAC3C0+C,EAD2C1+C,EAC3C0+C,gBACAmO,EAF2C7sD,EAE3C6sD,UACA94C,EAH2C/T,EAG3C+T,WACAi5C,EAJ2ChtD,EAI3CgtD,kBACAC,EAL2CjtD,EAK3CitD,YAL2C,OAO3C5oC,EAAA,cAAC5C,EAAA,QAAQyrC,yBAAT,KACGxO,GACCr6B,EAAA,cAAC5C,EAAA,QAAQ0rC,cAAT,CACEC,IAAKP,EACL3rD,QAASJ,QAAMgsD,QAAQO,sBAG3BhpC,EAAA,cAAC5C,EAAA,QAAQ6rC,aAAT,KACGL,GAIH5oC,EAAA,cAAC5C,EAAA,QAAQ8rC,WAAT,CAAoB/rC,KAAMwrC,GACvBj5C,MCrBM42C,GAAa3xC,aACxB8L,YAAO,YAAa,SAAU,cAAe,cAC7Ci8B,GACAl8B,GACA6jC,GAEAhoC,aAAa,CACX8sC,QAAS,SAAAxtD,GAAA,IAAcY,EAAdZ,EAAGwiB,QAAW5hB,OAAd,OACP,SACA8e,GAAO,OAAIglC,OAAO7lD,KAAIqQ,KAAKtO,EAAQ,CAAEyR,EAAGqN,IAAY,IAAK,QAE7DkC,KCNWU,GAAKqoC,GAChB,SAAA3qD,GAAA,IACE6e,EADF7e,EACE6e,SACA8E,EAFF3jB,EAEE2jB,aACA6pC,EAHFxtD,EAGEwtD,QACAjvD,EAJFyB,EAIEzB,OACAikB,EALFxiB,EAKEwiB,QACArD,EANFnf,EAMEmf,eANF,OAQE6B,EAAA7K,EAAA8K,cAAA,MAAIC,UAAU,0BAGZF,EAAA7K,EAAA8K,cAACwsC,GAAD,CAAYjrC,QAASA,EAASjkB,OAAQA,IACrCI,KAAIwgB,EAAgB,SAAAJ,GAAK,OACxBiC,EAAA7K,EAAA8K,cAACQ,EAAA,QAAQqE,GAAT,CAEE/qB,IAAG,GAAAX,OAAK2kB,EAAM5c,SAAX,KAAA/H,OAAuB2kB,EAAMiF,eAEhC9C,UAAWyC,EAAa5E,EAAOF,GAE/BxO,MAAOm9C,EAAQzuC,EAAM5c,UACrB4hB,QAAS,oBCiCb2pC,GAA4B10C,aAChC8L,YAAO,+BAEPpE,aAAa,CAKXitC,eAAgB,SAAAx+C,GAAA,IACd4P,EADc5P,EACd4P,MAC+BrW,EAFjByG,EAEdsyC,4BAA+B/4C,QAFjB,OAGV,kBACJ/J,KAAI+J,EAAS,SAACzK,GACZ,IAAMitD,EAAcrsD,KAClBqQ,KAAKjR,EAAO2C,OAAQ,CAAEyR,EAAG0M,EAAM5c,WAC/B,IACA,GAEF,OAAO3G,OAAAuI,EAAA,EAAAvI,CAAA,GACFyC,EADL,CAEE8gB,QACAoD,OAAQomC,GAAgB2C,YAOrB0C,GAAoBF,GAlEE,SAAA1tD,GAAA,IACjC6e,EADiC7e,EACjC6e,SACgB8nC,EAFiB3mD,EAEjCgoB,aAAgB2+B,SAChBgH,EAHiC3tD,EAGjC2tD,eACApvD,EAJiCyB,EAIjCzB,OACA4lB,EALiCnkB,EAKjCmkB,YACAvF,EANiC5e,EAMjC4e,QACAzU,EAPiCnK,EAOjCmK,MAPiC,OASjC6W,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KACErD,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,wBACbF,EAAA7K,EAAA8K,cAAA,SAAOC,UAAU,sBACfF,EAAA7K,EAAA8K,cAACQ,EAAA,QAAQ2pC,MAAT,KAGEpqC,EAAA7K,EAAA8K,cAACiD,GAAD,CAAO/Z,MAAOA,EAAOga,YAAaA,KAEnCwiC,EACC3lC,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KAGErD,EAAA7K,EAAA8K,cAACU,GAAD,CACExC,eAAgBhV,EAAMgV,eACtB2C,KAAM6rC,IACNpvD,OAAQA,EACRqgB,QAASA,EACTC,SAAUA,EACVyD,GAAIA,MAIRtB,EAAA7K,EAAA8K,cAAC0D,GAAD,WCrDGkpC,GAAkB70C,aAC7B8L,YAAO,YAAa,UACpBlD,IACAC,aAA4C,SAAA7hB,GAGtC,IAFM4F,EAEN5F,EAFJlD,OAAU8I,KACV4c,EACIxiB,EADJwiB,QAEM8D,EAASzgB,GAAcD,GACvB2gB,EAAY/D,EAAO,aAAApoB,OAAcksB,IACjCE,EAAWhE,EAAO,YAAApoB,OAAaksB,IAErC,MAAO,CACLvS,WAAU,GAAA3Z,OAAKmsB,EAAL,KAAAnsB,OAAkBosB,MAGhCkiC,GACA9mC,KCsBWksC,GAAUD,GAxCE,SAAA7tD,GAAA,IACvB6e,EADuB7e,EACvB6e,SACA8E,EAFuB3jB,EAEvB2jB,aACA5P,EAHuB/T,EAGvB+T,WACAyO,EAJuBxiB,EAIvBwiB,QACArD,EALuBnf,EAKvBmf,eACAkD,EANuBriB,EAMvBqiB,WANuB,OAQvBrB,EAAA7K,EAAA8K,cAAA,MAAIC,UAAU,0BACZF,EAAA7K,EAAA8K,cAAA,MAAIC,UAAU,gBACZF,EAAA7K,EAAA8K,cAACS,GAAA,EAAD,CAAMJ,OAAO,SAAS3kB,GAAE,YAAAvC,OAAcooB,EAAQzT,WAC5CiS,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,cACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,iBAAiBsB,EAAQM,KACxC9B,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,eAAenN,MAInCpV,KAAIwgB,EAAgB,SAAAJ,GAAK,OACxBiC,EAAA7K,EAAA8K,cAAA,MACElmB,IAAG,GAAAX,OAAK2kB,EAAM5c,SAAX,KAAA/H,OAAuB2kB,EAAMiF,eAChC9C,UAAWyC,EAAa5E,EAAOF,IAE/BmC,EAAA7K,EAAA8K,cAAA,aACED,EAAA7K,EAAA8K,cAAA,aACED,EAAA7K,EAAA8K,cAAA,UACED,EAAA7K,EAAA8K,cAAC6E,GAAD,CACE7rB,GAAIuoB,EAAQzT,SACZgQ,MAAOA,EACPsD,WAAYA,EACZG,QAASA,EACT7E,UAAU,+BCtBbowC,GAAQnsC,YACnB,SAAA5hB,GAAA,IACE6e,EADF7e,EACE6e,SACAtgB,EAFFyB,EAEEzB,OACAwgB,EAHF/e,EAGE+e,MACA+C,EAJF9hB,EAIE8hB,KACAqC,EALFnkB,EAKEmkB,YACAvF,EANF5e,EAME4e,QACAzU,EAPFnK,EAOEmK,MACAkY,EARFriB,EAQEqiB,WARF,OAUErB,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KACErD,EAAA7K,EAAA8K,cAACQ,EAAA,QAAQ2pC,MAAT,KAGEpqC,EAAA7K,EAAA8K,cAACiD,GAAD,CAAO/Z,MAAOA,EAAOga,YAAaA,KAIpCnD,EAAA7K,EAAA8K,cAACU,GAAD,CAEExC,eAAgBhV,EAAMgV,eACtB2C,KAAMA,EACNO,WAAYA,EACZ9jB,OAAQA,EACRqgB,QAASA,EACTC,SAAUA,EACVE,MAAOA,EACPuD,GAAIwrC,QC7BC3M,GAAgBnoC,aAC3B8L,YAAO,aAAc,gBACrBlD,IACAC,aAA4C,SAAA7hB,GAOtC,IAAAguD,EAAAhuD,EANJ0/C,WACEuO,EAKED,EALFC,WACA5rC,EAIE2rC,EAJF3rC,WAEFtD,EAEI/e,EAFJ+e,MACS7gB,EACL8B,EADJmK,MAASjM,KAEHgwD,EAAoBD,GAAc,GA6BxC,MAAO,CACLE,YAAajwD,EACbkwD,kBA1BwBlgD,KAAQ6Q,GAC9BmvC,EACAp0C,KACAo0C,EACA,SACEn0C,EACAqJ,EACAllB,GAYA,OAVA6b,EAAI7b,GAAQS,KAAIykB,EAAM,SAACnlB,GACrB,IAAMitD,EAActmC,GAClB7F,EAfkB,SAAA5P,GAAA,IAAGJ,EAAHI,EAAGJ,SAAH,OAC1BhP,KAAOsiB,EAAY,CAAEtT,aAebs/C,CAAoBpwD,IAEtB,OAAOzC,OAAAuI,EAAA,EAAAvI,CAAA,GACFyC,EADL,CAEEkkB,OAAQomC,GAAgB2C,OAGrBnxC,GAET,OAQN6H,KCtDW0sC,GAAoBnN,GAC/B,SAAAnhD,GAAA,IACE6e,EADF7e,EACE6e,SACAsvC,EAFFnuD,EAEEmuD,YACgB9rC,EAHlBriB,EAGEgoB,aAAgB3F,WAHlBksC,EAAAvuD,EAIEs/C,aACE5gD,KAAQmhB,EALZ0uC,EAKY1uC,SAAUC,EALtByuC,EAKsBzuC,SAEpBvhB,EAPFyB,EAOEzB,OACAwgB,EARF/e,EAQE+e,MACAoF,EATFnkB,EASEmkB,YACAvF,EAVF5e,EAUE4e,QACAzU,EAXFnK,EAWEmK,MACAikD,EAZFpuD,EAYEouD,kBAZF,OAcEptC,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,wBACbF,EAAA7K,EAAA8K,cAAA,SAAOC,UAAU,sBACfF,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KACGlc,KAASgmD,EAAa,iBACrBntC,EAAA7K,EAAA8K,cAAC8sC,GAAD,CACEjsC,KAAMssC,EAAkBvuC,GACxBwC,WAAYA,EACZlY,MAAOA,EACPga,YAAaA,EACb5lB,OAAQA,EACRqgB,QAASA,EACTC,SAAUA,EACVE,MAAOA,IAGV5W,KAASgmD,EAAa,gBACrBntC,EAAA7K,EAAA8K,cAAC8sC,GAAD,CACEjsC,KAAMssC,EAAkBtuC,GACxBuC,WAAYA,EACZlY,MAAOA,EACPga,YAAaA,EACb5lB,OAAQA,EACRqgB,QAASA,EACTC,SAAUA,EACVE,MAAOA,SCrCfyvC,GAAgBx1C,aACpB8L,YACE,kBACA,UACA,cACA,SACA,YACA,YACA,eAGFpE,aAAa,CASXkD,WAAY,SAAA5jB,GAAA,IAAAyuD,EAAAzuD,EACVlD,OAAU8I,EADA6oD,EACA7oD,KAAM1I,EADNuxD,EACMvxD,KAChB8nB,EAFUhlB,EAEVglB,YACA3C,EAHUriB,EAGVqiB,WACa6C,EAJHllB,EAIVmlB,UAAaD,QAJH,OAKN,SAAA/V,EAQJlV,EAEAy0D,GACG,IARDv7C,EAQChE,EARDgE,gBAEAhR,EAMCgN,EANDhN,SAmBIgZ,EAASkH,EAAWtiB,OAExB,SAAAqP,GAAA,IAbepD,EAaZrC,EAAHyF,EAAGzF,QAASuc,EAAZ9W,EAAY8W,OAAZ,OACEvc,IAAYxH,IAdC6J,EAcmBka,EAbrB,WAAThpB,IAGAwxD,EACK1iD,IAAW/R,EAEb+R,IAAW/R,MASdgvD,EAAiB9tC,EAAOxc,IAC5B,SAAAzD,GAAA,OAAAA,EACIoqB,yBAKHqpC,OAEA5uD,OAAO0f,SAENtE,EAAOvgB,QACTsqB,EAAQ,CACN/J,OAAQ8tC,EACRrjD,OACAuN,kBACAsH,MAAOuK,EACPxH,KAAM,mBAQZgG,QAAS,SAAA/T,GAAA,IACGvS,EADHuS,EACP3S,OAAUI,KACVkkD,EAFO3xC,EAEP2xC,YACAG,EAHO9xC,EAGP8xC,UAHO,OAIH,SAAC/jC,EAAc5S,GACnB,MAAa,SAAT1N,EACKqkD,EAAUzC,gBAAgBthC,EAAM5S,GAElCw2C,EAAYtC,gBAAgBthC,EAAM5S,KAS3C8Y,qBAAsB,SAAAhU,GAAA,IACVxS,EADUwS,EACpB5S,OAAUI,KACVqO,EAFoBmE,EAEpBnE,gBACA8W,EAHoB3S,EAGpB2S,WAHoB,OAIhB,SAAAnR,GAMA,IALJ+S,EAKI/S,EALJ+S,QACA1lB,EAII2S,EAJJ3S,OAKMqwD,EAAqC/vD,KAAI0M,EAAD,GAAAnR,OAAqB8C,EAArB,KAAA9C,OAA6BmE,GAAU,IAErF,OAAI0lB,EAEK5B,EAAWtiB,OAAO,SAAA4H,GAAA,IAAGoZ,EAAHpZ,EAAGoZ,QAAH,OAAApZ,EAAYue,UACvB3nB,GAAUqwD,EAAoBzmD,SAAS4Y,KAI1C,WAAT7jB,EAGKmlB,EAAWtiB,OAAO,SAAA+H,GAAA,IAAGiZ,EAAHjZ,EAAGiZ,QAAH,OACvB6tC,EAAoBzmD,SAAS4Y,KAI1BsB,EAAWtiB,OAAO,SAAA4I,GAAA,IAAGoY,EAAHpY,EAAGoY,QAAH,OAAApY,EAAYud,UACvB3nB,GAAUqwD,EAAoBzmD,SAAS4Y,SAGzD2nC,GACA9mC,KAGW0B,GAAQkrC,GAActF,IC1HtB2F,GAAa71C,aACxB8L,YACE,YACA,SACA,cACA,aACA,WAEFi8B,GACAn/B,IACAC,aAA4C,SAAA7hB,GAOtC,IANM9C,EAMN8C,EANJlD,OAAUI,KACCgC,EAKPc,EALJhB,QAAWE,KACXX,EAIIyB,EAJJzB,OACWwiB,EAGP/gB,EAHJwiB,QAAWzB,QACX5B,EAEInf,EAFJmf,eACAkD,EACIriB,EADJqiB,WAEMysC,EAAoBnwD,KAAIwgB,EAAgB,YACxC4vC,EAAclwD,KAAIK,EAAM,CAACX,EAAQ,WAAY,IAG7CywD,EAAoBl1C,KAAOuI,EAAY,SAC3CtI,EACAqJ,GAEA,OACGjb,KAAS2mD,EAAmB1rC,EAAKzZ,UAC/ByZ,EAAKrC,UAAYA,EAKlBliB,KAAIukB,EAAD,KAAAhpB,OAAY8C,MAAYqiB,OAAOhhB,IACpCwb,EAAIyiB,KAAK3zB,KAAKua,GACPrJ,IAGTA,EAAIk1C,MAAMpmD,KAAKua,GACRrJ,GATEA,GAUR,CACDk1C,MAAO,GACPzyB,KAAM,KAGR,MAAO,CACLha,QAAStT,KAAK6/C,EAAa,CAAEhuC,YAC7BsB,WAAY2sC,EACZrxC,UAAoB,SAATzgB,EAAkB,cAAgB,mBAGjDwrD,GACA9mC,KC9DWunC,GAAqBnwC,aAChC8L,YAAO,UACPlD,IAEAC,aAEE,SAAA7hB,GAaM,IAZJ2lB,EAYI3lB,EAZJ2lB,YACU/f,EAWN5F,EAXJlD,OAAU8I,KACVrH,EAUIyB,EAVJzB,OAUI6qD,EAAAppD,EATJwiB,QACEzB,EAQEqoC,EARFroC,QACAmuC,EAOE9F,EAPF8F,WACAhvD,EAMEkpD,EANFlpD,WACAmpD,EAKED,EALFC,eACAC,EAIEF,EAJFE,MACG9mC,EAGDhnB,OAAA8Z,GAAA,EAAA9Z,CAAA4tD,EAAA,gEADJlrC,EACIle,EADJke,kBAEMoI,EAAS3gB,GAAUC,GACnB2jD,EAAc1qD,KAAI2jB,EAAD,iBAAApoB,OAA2BksB,IAC5C84B,EAAWvgD,KAAI2jB,EAAD,QAAApoB,OAAkBksB,IAEtC,MAAO,CACL6oC,YAA4B,MAAfD,EAAqB,WAAa,GAC/C1F,QAAS,GACT7jC,YAAaA,EAAY5E,EAASxiB,GAClCkrD,eAAgB,cAChBC,aAAcxrC,EACdyrC,cAAe7gD,GAAQs2C,GACvBmK,YAAazgD,GAAQygD,GACrBK,WAAU,GAAAxvD,OAAKkvD,EAAL,KAAAlvD,OAAcivD,GACxBS,kBAAmBP,EACnBtpD,UAAWsF,GAAarF,GACxBklB,MAAO,CACL2kC,WAAW,EACXmF,aACAnuC,eCpBGipC,GAAab,GAExB,SAAAnpD,GAAA,IACE2lB,EADF3lB,EACE2lB,YACAtoB,EAFF2C,EAEE3C,WACAigB,EAHFtd,EAGEsd,MAHF2sC,EAAAjqD,EAIEolB,MAASrE,EAJXkpC,EAIWlpC,QAASgpC,EAJpBE,EAIoBF,UAAWmF,EAJ/BjF,EAI+BiF,WAC7BjvD,EALFD,EAKEC,UACAihD,EANFlhD,EAMEkhD,iBACAqI,EAPFvpD,EAOEupD,YACAI,EARF3pD,EAQE2pD,cACAH,EATFxpD,EASEwpD,QACAM,EAVF9pD,EAUE8pD,kBACAJ,EAXF1pD,EAWE0pD,aACAyF,EAZFnvD,EAYEmvD,YACA1F,EAbFzpD,EAaEypD,eACAG,EAdF5pD,EAcE4pD,WACAhpC,EAfF5gB,EAeE4gB,YAfF,OAkBEyD,EAAA,cAAC5C,EAAA,QAAQyoC,kBAAT,CAA2BC,QAASX,EAAStoC,UAAU,gBACpDggC,GAEC78B,EAAA,cAAC5D,GAAD,CACEpjB,WAAYA,EACZigB,MAAOA,EACPyD,QAASA,EACTH,YAAaA,IAGjByD,EAAA,cAAC5C,EAAA,QAAQ2oC,kBAAT,KAGGL,GAAa1lC,EAAA,cAAC5C,EAAA,WAAD,CAAYkE,YAAaA,KAGzCtB,EAAA,cAAC5C,EAAA,QAAQ4oC,UAAT,KAAoBpqD,GAGpBokB,EAAA,cAAC5C,EAAA,QAAQ6oC,iBAAT,CAA0B4E,WAAYA,GAGpC7qC,EAAA,cAAC5C,EAAA,QAAQ2tC,UAAT,CAAmBluC,UAAWiuC,GAC3BD,GAIH7qC,EAAA,cAAC5C,EAAA,UAAD,CAAWkE,YAAaA,EAAay5B,SAAU0K,KAIjDzlC,EAAA,cAAC5C,EAAA,QAAQ8oC,kBAAT,CAA2BrpC,UAAWuoC,GACnCG,GAGFF,GACCrlC,EAAA,cAAC5C,EAAA,QAAQ+oC,wBAAT,KACEnmC,EAAA,cAAC5C,EAAA,QAAQgpC,cAAT,CAAuBC,KAAK,QACzBf,GAEHtlC,EAAA,cAAC5C,EAAA,QAAQgpC,cAAT,CAAuBC,KAAK,OACzBnB,OC/EAjnC,GAAKusC,GAEhB,SAAA7uD,GAAA,IACE6e,EADF7e,EACE6e,SACA8E,EAFF3jB,EAEE2jB,aACAq9B,EAHFhhD,EAGEghD,QAHF4J,EAAA5qD,EAIEihD,WAAc5jD,EAJhButD,EAIgBvtD,WAAYigB,EAJ5BstC,EAI4BttC,MAC1B4jC,EALFlhD,EAKEkhD,iBACA3iD,EANFyB,EAMEzB,OACAikB,EAPFxiB,EAOEwiB,QACArD,EARFnf,EAQEmf,eACAjB,EATFle,EASEke,kBACAmE,EAVFriB,EAUEqiB,WACA1E,EAXF3d,EAWE2d,UACAiD,EAZF5gB,EAYE4gB,YAZF,OAcEI,EAAA7K,EAAA8K,cAAA,MAAIC,UAAU,0BAGZF,EAAA7K,EAAA8K,cAACouC,GAAD,CACEnxC,kBAAmBA,EACnBsE,QAASA,EACTjkB,OAAQA,EACRonB,YAAaq7B,EACbE,iBAAkBA,EAClB7jD,WAAYA,EACZigB,MAAOA,EACPsD,YAAaA,IAEdjiB,KAAIwgB,EAAgB,SAAAJ,GAAK,OACxBiC,EAAA7K,EAAA8K,cAAA,MACElmB,IAAG,GAAAX,OAAK2kB,EAAM5c,SAAX,KAAA/H,OAAuB2kB,EAAMiF,eAChC9C,UAAWyC,EAAa5E,EAAOF,IAE/BmC,EAAA7K,EAAA8K,cAAA,aACED,EAAA7K,EAAA8K,cAAA,aACED,EAAA7K,EAAA8K,cAAA,UACED,EAAA7K,EAAA8K,cAAC6E,GAAD,CACE7rB,GAAIslB,OAAOhhB,GACXwgB,MAAOA,EACPsD,WAAYA,EAAWma,KACvBha,QAASA,EACT7E,UAAWA,OAKlBO,GACC8C,EAAA7K,EAAA8K,cAAA,aACED,EAAA7K,EAAA8K,cAAA,aACED,EAAA7K,EAAA8K,cAAA,UACED,EAAA7K,EAAA8K,cAAC6E,GAAD,CACE7rB,GAAIuoB,EAAQrN,gBACZ4J,MAAOA,EACPsD,WAAYA,EAAW4sC,MACvBzsC,QAASA,EACT7E,UAAWA,aCiDlB2xC,GAzCet2C,aAC1B8L,YAAO,SAAU,mBACjBpE,aAAqD,CACnDsqC,eAAgB,SAAA77C,GAAA,IACEkT,EADFlT,EACd6Y,aAAgB3F,WACNnlB,EAFIiS,EAEdrS,OAAUI,KACVqO,EAHc4D,EAGd5D,gBAHc,OAIV,SAAChN,EAAQwgB,GACb,IAAM6vC,EAAsB/vD,KAAI0M,EAAD,GAAAnR,OAAqB8C,EAArB,KAAA9C,OAA6BmE,GAAU,IAoBtE,OAAOI,KAAIiwD,EAAqB,SAACxpC,GAC/B,IAAM8lC,EAActmC,GAAa7F,EApBR,SAACqG,GAAD,OACzBrlB,KACEsiB,EACA,SAAAjT,GAKM,IAJJ2R,EAII3R,EAJJ2R,QACApX,EAGIyF,EAHJzF,QACAoF,EAEIK,EAFJL,SACAmX,EACI9W,EADJ8W,OAGA,OACEnF,IAAYqE,IAFY,WAATloB,EAAoB6R,EAAWmX,MAG/B3nB,GACdoL,IAAYoV,EAAM5c,WAOeotD,CAAmBnqC,IAC3D,MAAO,CACLrE,QAASqE,EACTrG,QACAoD,OAAQomC,GAAgB2C,UAKhCtpC,IAGyB4tC,CA5FS,SAAAxvD,GAAA,IAClC6e,EADkC7e,EAClC6e,SACAmJ,EAFkChoB,EAElCgoB,aACAgjC,EAHkChrD,EAGlCgrD,eACU9tD,EAJwB8C,EAIlClD,OAAUI,KACVqB,EALkCyB,EAKlCzB,OACAwgB,EANkC/e,EAMlC+e,MACAoF,EAPkCnkB,EAOlCmkB,YACAvF,EARkC5e,EAQlC4e,QACAzU,EATkCnK,EASlCmK,MATkC,OAWlC6W,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,wBACbF,EAAA7K,EAAA8K,cAAA,SAAOC,UAAU,sBACfF,EAAA7K,EAAA8K,cAACQ,EAAA,QAAQ2pC,MAAT,KAGEpqC,EAAA7K,EAAA8K,cAACiD,GAAD,CAAO/Z,MAAOA,EAAOga,YAAaA,KAGnC6D,EAAa2+B,WAAa3+B,EAAa3qB,WACtC2jB,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KAGErD,EAAA7K,EAAA8K,cAACU,GAAD,CACExC,eAAgBhV,EAAMgV,eACtB2C,KAAMkpC,EAAezsD,EAAQwgB,GAC7BxgB,OAAQA,EACR8jB,WAAY2F,EAAa3F,WACzBzD,QAASA,EACTC,SAAUA,EACVX,kBAAmB8J,EAAa9J,kBAChCoE,GAAIA,KAINtB,EAAA7K,EAAA8K,cAACwuC,GAAD,CACEtlD,MAAOA,EACPkY,WAAY2F,EAAa3F,WACzB9jB,OAAQA,EACRrB,KAAMA,EACN2hB,SAAUA,EACVX,kBAAmB8J,EAAa9J,qBAIpC8C,EAAA7K,EAAA8K,cAAA,SAAOC,UAAU,uBC5BZwuC,GAnBgB12C,aAC3B0H,aAA8C,CAC5Cy7B,SAAU,SAAAhtC,GAAA,IAAMnU,EAANQ,OAAAm0D,GAAA,EAAAn0D,CAAA,GAAA2T,GAAA,OAAkB,SAACwO,GAC3B,IAAMzT,EAAkB,CAEtB8T,kBAAmBgD,EAAA7K,EAAA8K,cAACqtC,GAAsBtzD,GAC1CijB,cAAe+C,EAAA7K,EAAA8K,cAACquC,GAAgBt0D,GAChCmjB,YAAa6C,EAAA7K,EAAA8K,cAACquC,GAAgBt0D,GAC9BojB,kBAAmB4C,EAAA7K,EAAA8K,cAACkqC,GAAoBnwD,GACxCqjB,kBAAmB2C,EAAA7K,EAAA8K,cAAC2sC,GAAsB5yD,IAG5C,OAAK2iB,EAEEzT,EAAOyT,GAFS,SAODiyC,CAxBE,SAAA5vD,GAAA,OAGXm8C,EAHWn8C,EAC5Bm8C,UAD4Bn8C,EAE5B2d,YACwC,OC8D7BkyC,GA5BgB72C,aAE3B0H,aAAa,CAEXhW,YAAa,SAAA0E,GAAA,IAAA2Y,EAAA3Y,EACX4Y,aAAgBtd,EADLqd,EACKrd,YAAa9O,EADlBmsB,EACkBnsB,UACpBgP,EAFEwE,EAEXjF,MAASS,SAFE,OAGP,kBAAMF,EAAYE,EAAUhP,KAGlCqP,YAAa,SAAA/P,GAAA,IAAA40D,EAAA50D,EACX8sB,aAAgBu7B,EADLuM,EACKvM,UAAW3nD,EADhBk0D,EACgBl0D,UAClBgP,EAFE1P,EAEXiP,MAASS,SAFE,OAGP,kBAAM24C,EAAU34C,EAAU,KAAMhP,KAGtCsP,cAAe,SAAAuE,GAAA,IAAAsgD,EAAAtgD,EACbuY,aAAgBu7B,EADHwM,EACGxM,UAAW3nD,EADdm0D,EACcn0D,UAClBgP,EAFI6E,EAEbtF,MAASS,SAFI,OAGT,kBAAM24C,EAAU34C,EAAU,OAAQhP,KAGxCuP,WAAY,SAAAuE,GAAA,IAAAsgD,EAAAtgD,EAAGsY,aAAgB7c,EAAnB6kD,EAAmB7kD,WAAYvP,EAA/Bo0D,EAA+Bp0D,UAA/B,OAAiD,kBAC3DuP,EAAWvP,OAKWq0D,CA5DE,SAAAjwD,GAAA,IAC5BgoB,EAD4BhoB,EAC5BgoB,aACAtd,EAF4B1K,EAE5B0K,YACAM,EAH4BhL,EAG5BgL,qBACAyxC,EAJ4Bz8C,EAI5By8C,kBACAvxC,EAL4BlL,EAK5BkL,cACAD,EAN4BjL,EAM5BiL,YACAE,EAP4BnL,EAO5BmL,WAP4B,OAS5B6V,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KACGtZ,GACCC,EACAN,EACAO,EACAC,EACAC,EACA6c,EAAa9d,QACbvL,IAAI,SAAAwQ,GAAA,IAAGzR,EAAHyR,EAAGzR,OAAQoN,EAAXqE,EAAWrE,WAAYD,EAAvBsE,EAAuBtE,EAAvB,OACJmW,EAAA7K,EAAA8K,cAACQ,EAAA,0BAAD,CACEsC,QAASrmB,EACToN,WAAYA,EACZ/P,IAAK8P,GAELmW,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAGA,OAGZmW,EAAA7K,EAAA8K,cAAA,KAAGC,UAAU,2BAA2B6C,QAAS04B,GAC/Cz7B,EAAA7K,EAAA8K,cAAA,KAAGC,UAAU,sBCqCN6sC,kBAAQ5M,GArEE,SAAAnhD,GAAA,IACrB6e,EADqB7e,EACrB6e,SACAmJ,EAFqBhoB,EAErBgoB,aACArE,EAHqB3jB,EAGrB2jB,aACA+9B,EAJqB1hD,EAIrB0hD,SACA12C,EALqBhL,EAKrBgL,qBACAyxC,EANqBz8C,EAMrBy8C,kBACAyT,EAPqBlwD,EAOrBkwD,eACA3xD,EARqByB,EAQrBzB,OACAwgB,EATqB/e,EASrB+e,MACAoxC,EAVqBnwD,EAUrBmwD,YACAhO,EAXqBniD,EAWrBmiD,WACAh+B,EAZqBnkB,EAYrBmkB,YACAvF,EAbqB5e,EAarB4e,QACAzU,EAdqBnK,EAcrBmK,MACAwT,EAfqB3d,EAerB2d,UAfqB,OAiBrBqD,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,eACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,uBACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,4BACbF,EAAA7K,EAAA8K,cAAC8+B,GAAD,CACE51C,MAAOA,EAEPwT,UAAWA,EACXqK,aAAcA,EACdrE,aAAcA,KAGlB3C,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,qBACbF,EAAA7K,EAAA8K,cAAC2G,GAAD,CAAezd,MAAOA,EAAO6d,aAAcA,KAE7ChH,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,wBAGbF,EAAA7K,EAAA8K,cAACQ,EAAA,uBAAD,CAAwBnE,MAAOokC,IAAY0O,aAAcjO,IAGzDnhC,EAAA7K,EAAA8K,cAAC4uC,GAAD,CACE7nC,aAAcA,EACdhd,qBAAsBA,EACtByxC,kBAAmBA,EACnBtyC,MAAOA,MAIb6W,EAAA7K,EAAA8K,cAACyuC,GAAD,CACE7wC,SAAUA,EACVmJ,aAAcA,EACdzpB,OAAQA,EACRwgB,MAAOA,EACPoF,YAAaA,EACbvF,QAASA,EACTzU,MAAOA,EACPwT,UAAWA,KAEXwyC,GAAeD,IACflvC,EAAA7K,EAAA8K,cAAC+7B,GAAD,CACE7yC,MAAOA,EACPsyC,kBAAmBA,EACnBzxC,qBAAsBA,EACtBmlD,YAAaA,EACbD,eAAgBA,EAChBloC,aAAcA,EACdZ,SAAU8oC,QC/DLG,GAAS,SAAArwD,GAAA,IACpBzB,EADoByB,EACpBzB,OACA2L,EAFoBlK,EAEpBkK,OACAyT,EAHoB3d,EAGpB2d,UAHoB,OAKpBqD,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KACG1lB,KACCuL,EACA,SAAAC,GAAK,OACH6W,EAAA7K,EAAA8K,cAACqvC,GAAD,CACE3yC,UAAWA,EACX5iB,IAAKoP,EAAMS,SACXrM,OAAQA,EACR4L,MAAOA,6BCPX9J,GAAW,GAAAjG,OAAME,EAAN,SAEJi2D,GAA2B/oD,IAAM+1C,MAAM,IAAIrhD,QAAQ,SAAAwhD,GAAI,MAAK,CAEvEjnC,WAAYwvC,YAAI/vC,GAAAC,EAAAC,KAAC,SAAUK,EAAVzW,GAAA,IAAA4F,EAAAqgB,EAAArlB,EAAA4vD,EAAA,OAAAt6C,GAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAnX,MAAA,OAIb,OAJoCwG,EAAvB5F,EAAuB4F,KAAMqgB,EAA7BjmB,EAA6BimB,QAASrlB,EAAtCZ,EAAsCY,OAAtC2V,EAAAC,KAAA,EAAAD,EAAAnX,KAAA,EAIPs+C,EAAK+S,aAAaxqC,GAJX,OA6Bb,OArBMuqC,EAAiB12C,KAErB4jC,EAAKuQ,WACL,SAACl0C,EAAKqJ,GAKJ,OAJKlU,KAAK6K,EAAK,CAAEmM,OAAQ9C,EAAK8C,UAE5BnM,EAAIlR,KAAKua,GAEJrJ,GAET,IAGF2jC,EAAKgT,sBAAsB,CACzB9qD,OACAqgB,UACAvd,QAAS8nD,IAxBEj6C,EAAAnX,KAAA,EA6BPs+C,EAAKt8C,MAAM,CACfwE,OACAqgB,UACArlB,WAhCW,OAqCb,OArCa2V,EAAAnX,KAAA,GAqCPs+C,EAAKwG,kBAAkB,GArChB,QAwCbxG,EAAKiT,2BAxCQp6C,EAAAnX,KAAA,iBAAAmX,EAAAC,KAAA,GAAAD,EAAAq6C,GAAAr6C,EAAA,SA2CbmnC,EAAKn+C,SAALgX,EAAAq6C,IA3Ca,yBAAAr6C,EAAAG,SAAUD,EAAV,kBA+CjBrV,MAjDuE,SAAA+N,GAiD9B,IAAjCvJ,EAAiCuJ,EAAjCvJ,KAAMqgB,EAA2B9W,EAA3B8W,QAASrlB,EAAkBuO,EAAlBvO,OACfN,EAAkB,CACtBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,KAAM,yBACNC,OAAQ,CACN4U,aAAcyQ,EAEd4qC,cAAer1D,OAAOmI,OAAO+5C,EAAKoT,iBAClCC,aAAcnwD,EACdowD,WAAYzxC,OAAgB,OAAT3Z,OAIzB,OAAO7E,kBAAQ,CACbV,OACAC,SAEAU,UAAW08C,EAAKlqC,WAEhBvS,UAAWy8C,EAAKr/C,WAEhB6C,QAASw8C,EAAKn+C,YAIlBiU,WA3EuE,WA6ErEkqC,EAAKpyC,MAAQ,GAEboyC,EAAKuT,YAAc,KAEnBvT,EAAKiJ,UAAW,GAGlBtoD,WApFuE,WAoFlB,IAA1CC,EAA0CqB,UAAA/E,OAAA,QAAAgF,IAAAD,UAAA,GAAAA,UAAA,GAAd,CAAEjB,KAAM,IACvCgK,EAAU7J,KAAIP,EAAKI,KAAM,+BAAiC,GAEhEg/C,EAAKpyC,MAAQzM,KAEXqQ,KAAKxG,EAAS,cAAe,IAC7B,cACA,IAKFg1C,EAAKuT,YAAcvoD,EAAQoR,OAAO,SAACC,EAAKyqC,GAQtC,OAPAzqC,EAAIyqC,EAAQz1C,UAAYmiD,KAAK1M,EAAS,CACpC,WACA,SACA,SACA,eACA,eAEKzqC,GACN,IAEH2jC,EAAKr+C,MAAQ,KAEbq+C,EAAKiJ,UAAW,GAGlB8J,aAhHuE,SAgH1DxqC,GACX,IAAM5lB,EAAW,GAAAjG,OAAME,EAAN,SACXgG,EAAkB,CACtBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,KAAM,yBACNC,OAAQ,CACN8K,YAAaua,EACbkrC,WAAW,MAIjB,OAAOpwD,kBAAQ,CACbV,MACAC,SACAU,UAAW,aAEXC,UAAWy8C,EAAK0T,kBAEhBlwD,QAASw8C,EAAKn+C,YAKlB6xD,kBAxIuE,WAwIZ,IAAzC9yD,EAAyCqB,UAAA/E,OAAA,QAAAgF,IAAAD,UAAA,GAAAA,UAAA,GAAJ,GAErD+9C,EAAKuQ,WAAaluD,KAAOzB,EAAKI,KAAM,WAGtCa,SA7IuE,SA6I9DF,GAEPq+C,EAAKiJ,UAAW,EAEhBjJ,EAAKr+C,MAAQA,MClJJgyD,GAAwB7pD,IAAM+1C,MAAM,IAAIrhD,QAAQ,SAAAwhD,GAAI,MAAK,CAEpEgT,sBAFoE,SAAA1wD,GAEM,IAAlD4F,EAAkD5F,EAAlD4F,KAAMqgB,EAA4CjmB,EAA5CimB,QAASvd,EAAmC1I,EAAnC0I,QACrC,GAAIwF,KAAQ9C,KAAQ1C,IAAW,OAAO,KAItC,IAAM4oD,EAAkB91D,OAAAuI,EAAA,EAAAvI,CAAA,GAAQkiD,EAAKoT,iBAErC5pD,KACEwB,EAGA,SAAAyG,GAA0B,IAAvBJ,EAAuBI,EAAvBJ,SAAUmX,EAAa/W,EAAb+W,OAAeorC,EAAmBprC,GAAUnX,IAI3D2uC,EAAKoT,gBAAkBQ,EACD,IAAlB3mD,KAAKjC,IAEPg1C,EAAKt8C,MAAM,CACTwE,OACAqgB,UAEArlB,OAAQ88C,EAAK6T,gBAMnBhV,eA9BoE,SAAAntC,GA8BT,IAA1CxJ,EAA0CwJ,EAA1CxJ,KAAMqgB,EAAoC7W,EAApC6W,QAASrlB,EAA2BwO,EAA3BxO,OAE9B88C,EAAKv+B,eAAiBve,EAEtB88C,EAAKt8C,MAAM,CACTwE,OACAqgB,UAEArlB,OAAQ88C,EAAK6T,gBAKjBZ,yBA3CoE,WA8ClE,IAAMa,EAAa7yD,KAAI++C,EAAKpyC,MAAO,SAEnCoyC,EAAKv+B,eAAiBpf,KAEpB29C,EAAK2G,YACL,SAAAnpD,GAAA,IAAGiH,EAAHjH,EAAGiH,SAAH,OAAkBgG,KAASqpD,EAAYrvD,8BCrEhCsvD,GAAsBjqD,IAAM+1C,MAAM,IAAI0J,MAAM,SAAAvJ,GAAI,MAAK,CAChEgU,kBAEE,IAAMC,EAAMjU,EAAK6T,aACjB,OAAOpvC,KAELu7B,EAAKpyC,MACL,SAAAtL,GAAA,IAAG+e,EAAH/e,EAAG+e,MAAH,OAAe6yC,KAAUD,EAAK,SAAA7F,GAAC,OAAIA,IAAMvsC,OAAOR,QAIpDwyC,mBAEE,OAAO5yD,KAAI++C,EAAKv+B,eAAgB,gBCV9B0yC,GAAOrqD,IAAM+1C,MAAM,OAAQ,CAC/Bx+B,MAAOvX,IAAMs9C,OACbkD,WAAYxgD,IAAMy9C,UAAUz9C,IAAMuB,QAClC+oD,iBAAkBtqD,IAAMy9C,UAAUz9C,IAAMuB,UAGpCw8C,GAAY/9C,IAAM+1C,MAAM,oBAAqB,CACjDsH,UAAWr9C,IAAMs9C,OACjBr7C,WAAYjC,IAAMs9C,OAClBxgC,qBAAsB9c,IAAMuB,OAC5Bib,cAAexc,IAAMs9C,OACrBC,iBAAkBv9C,IAAMs9C,OACxBE,WAAYx9C,IAAMy9C,UAAUz9C,IAAMuB,QAClCoK,gBAAiB3L,IAAMuB,OACvBkB,KAAMzC,IAAMuB,OACZm8C,UAAW19C,IAAMy9C,UAAUz9C,IAAM29C,MAAM39C,IAAMuB,SAC7Cq8C,UAAW59C,IAAMy9C,UAAUz9C,IAAM29C,MAAM39C,IAAMuB,SAC7C5G,SAAUqF,IAAMs9C,OAChBvgC,sBAAuB/c,IAAMuB,OAC7Bu8C,WAAY99C,IAAMs9C,SAGPiN,GAAiBvqD,IAAM+1C,MAAM,uBAAwB,CAChEjyC,MAAO9D,IAAMy9C,UAAUz9C,IAAM29C,MAAM0M,KACnCZ,YAAazpD,IAAMm+C,OAAO,IAC1BgB,SAAUn/C,IAAMwqD,QAChB3yD,MAAOmI,IAAMm+C,OAAO,IACpBmL,gBAAiBtpD,IAAMm+C,OAAO,IAC9BxmC,eAAgB3X,IAAMy9C,UAAUz9C,IAAM29C,MAAMI,KAC5C37B,aAAcpiB,IAAM29C,MAAMI,MCrCb0M,GDwCoBzqD,IAAMwR,QAEvCirC,GAEA8N,GACAxB,GACAc,GACAI,IC/CiCS,OAAO,CACxCjB,YAAa,GACb3lD,MAAO,GACPq7C,UAAU,EACVtnD,MAAO,GACPyxD,gBAAiB,GACjB3xC,eAAgB,GAChByK,aAAc,KC0PDuoC,GAjPe3qD,IAAM+1C,MAAM,IAAIrhD,QAAQ,SAAAwhD,GAAI,MAAK,CAG7D0U,YAH6D,SAGjDn4D,EAAIsR,GACd,IAAMlL,EAAW,GAAAjG,OAAME,EAAN,SACXgG,EAAkB,CACtBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,KAAM,kBACNC,OAAQ,CACNujD,aAAc,MAIpBpjD,kBAAQ,CACNV,MACAC,SAEAU,UAAW,kBAAM08C,EAAKlqC,cACtBvS,UAAW,SAET3C,GAFS,OAINo/C,EAAK2U,iBAAiB/zD,EAAMrE,EAAIsR,IAErCrK,QAAS,SAAC7B,GAAD,OAAgBq+C,EAAKn+C,SAASF,OAI3CmU,WA7B6D,WA+B3DkqC,EAAKrgD,YAAa,EAElBqgD,EAAKr+C,MAAQ,MAGfgzD,iBApC6D,SAsC3D/zD,EAEArE,EAEAsR,GAGAmyC,EAAK2G,YAAcxlD,KAAIP,EAAM,OAAQ,IAErCo/C,EAAKr+C,MAAQ,KAEbq+C,EAAK4G,cAEL5G,EAAK+S,aAAax2D,EAAIsR,IAIxBhM,SAvD6D,SAuDpDF,GAEPq+C,EAAKrgD,YAAa,EAElBqgD,EAAKr+C,MAAQA,GAKfoxD,aAhE6D,SAgEhDx2D,EAAIsR,GACf,IAAMlL,EAAW,GAAAjG,OAAME,EAAN,SACXgG,EAAkB,CACtBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,KAAM,0BACNC,OAAQ,CACN2U,WAAYtb,EACZyb,aAAcnK,EAAgBrN,KAAKjE,GAEnCq4D,cAAe3zD,KAAI++C,EAAK2G,YAAa,gBAI3CtjD,kBAAQ,CACNV,MACAC,SAEAU,UAAW,kBAAM08C,EAAKlqC,cAEtBvS,UAAW,SAAC3C,GAAD,OAA+Bo/C,EAAK0T,kBAAkB9yD,IAEjE4C,QAAS,SAAC7B,GAAD,OAAgBq+C,EAAKn+C,SAASF,OAI3C+xD,kBA1F6D,SA0F3C9yD,GAEhBo/C,EAAKrgD,YAAa,EAElBqgD,EAAKh1C,QAAU/J,KACbE,KAAIP,EAAKI,KAAM,8BAA+B,IAC9C,SAAAT,GAAM,OAAAzC,OAAAuI,EAAA,EAAAvI,CAAA,GACDyC,EADC,CAEJ2C,OAAQ/B,KAAIZ,EAAQ,WAAaU,KAAIV,EAAO2C,OAAQ,SAAAme,GAAK,OAAAvjB,OAAAuI,EAAA,EAAAvI,CAAA,GACpDujB,EADoD,CAIvD1O,MAAOlI,KAASwa,GAAkB5D,EAAMA,OACpCA,EAAM1O,MAAQ0O,EAAMwzC,cACpBxzC,EAAM1O,MACVmiD,aAAczzC,EAAM1O,MAAQ0O,EAAMwzC,sBAKxC7U,EAAKr+C,MAAQ,MAIfilD,YAlH6D,WAmH3D,IAAMjkD,EAAW,GAAAjG,OAAME,EAAN,SACXgG,EAAkB,CACtBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,KAAM,yBAGVI,kBAAQ,CACNV,MACAC,SAEAU,UAAW,kBAAM08C,EAAKlqC,cAEtBvS,UAAW,SAAC3C,GAAD,OAAgCo/C,EAAK6G,iBAAiBjmD,IAEjE4C,QAAS,SAAC7B,GAAD,OAAgBq+C,EAAKn+C,SAASF,OAK3CklD,iBAvI6D,SAuI5CjmD,GAEfo/C,EAAKkI,YAAc/mD,KAAIP,EAAM,OAAQ,IAErCo/C,EAAK+U,iBAAmB,KAExB,IAAMC,EAAmB/zD,KAAI++C,EAAK2G,YAAa,SAAAl9C,GAAI,OAAIw2C,aAAKx2C,KAE5Du2C,EAAKh0B,WAAa5P,KAAO4jC,EAAKkI,YAAa,SAACpvC,EAAM4M,GAChD,IAAMohC,EAAU,CACd5jD,OAAQuhB,KACNpiB,KACE2yD,EAAkB,SAAA1yD,GAAA,OAAAA,EAAGgkB,gBAAsCZ,EAAKqhC,WAC/D,cAEL7zC,UAAW8zC,OAAOthC,EAAKuhC,wBAEzB,SAAAvqD,OAAAoB,OAAAgW,GAAA,EAAAhW,CAAWgb,GAAX,CAAiBguC,KAChB,IACqD,OAApDn6C,OAAOC,aAAaC,QAAQ,oBAE9BmzC,EAAKqG,aAGLrG,EAAKxzC,OAASzJ,KAAK2J,MAAMC,OAAOC,aAAaC,QAAQ,sBAKzDooD,YApK6D,SAsK3D/sD,EAEAuN,EAEArR,EAEA4d,EAEAwF,EAEA3Z,EAEAyZ,GAEA,IAAM3kB,EAAW,GAAAjG,OAAME,EAAN,SACXgG,EAAkB,CACtBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,KAAM,4BACNC,OAAQ,CACNgyD,WAAYrnD,EACZsnD,YAAanzC,EACbjL,aAAc3S,MAIpB,OAAOf,kBAAQ,CACbV,MACAC,SACAU,UAAW,aAEXC,UAAW,SAAC3C,GAAD,OAETo/C,EAAKoV,iBACHx0D,EACAsH,EACAuN,EACA+R,EACAF,EACAljB,IAIJZ,QAAS,SAAC7B,GAAD,OAAgBq+C,EAAKn+C,SAASF,OAI3CyzD,iBArN6D,SAuN3Dx0D,EACAsH,EACAuN,EACA+R,EACAF,EACAljB,GAGA47C,EAAKviC,OAASxc,KACZE,KAAIP,EAAKI,KAAM,gCAAiC,IAAK,MAGnDg/C,EAAKviC,OAAOvgB,QACdsqB,EAAQ,CAEN/J,OAAQuiC,EAAKviC,OACbV,MAAOuK,EACPpf,OACAuN,kBACA5P,WAAYzB,EACZ0b,KAAM,oBC0ECu1C,GAhTYvrD,IAAM+1C,MAAM,IAAIrhD,QAAQ,SAAAwhD,GAAI,MAAK,CAE1DqG,WAF0D,WAIxDrG,EAAKh0B,WAAWxiB,QAAQ,SAAAlH,EAAwBmsB,GAAU,IAA/Bvb,EAA+B5Q,EAA/B4Q,UACnBhG,EAAmBuhB,EAAQ,EAC3BhiB,EAIF,CACFS,WAEAuU,eATsDnf,EAApBY,OASXb,OAAO,SAAAoP,GAAA,MAAmC,YAAnCA,EAAG61C,aACjC3lC,UAAWqlC,OAAO9zC,GAElBwO,YAAa,oBACbs/B,iBAAiB,GAGfv0C,EAAMgV,eAAevkB,SAEvB8iD,EAAKxzC,OAAL1O,OAAAuI,EAAA,EAAAvI,CAAA,GAEKkiD,EAAKxzC,OAFV1O,OAAAqF,GAAA,EAAArF,CAAA,GAGGoP,EAHHpP,OAAAuI,EAAA,EAAAvI,CAAA,GAIO2O,EAJP,CAKIyU,SAAS,EACTC,SAAU,UAKhB9U,GAAyB,CAAEE,KAAM,mBAAoBC,OAAQwzC,EAAKxzC,YAUtE8oD,iBA3C0D,WA2CnB,IAAtBt1D,EAAsBiC,UAAA/E,OAAA,QAAAgF,IAAAD,UAAA,GAAAA,UAAA,GAAb,KAAMof,EAAOpf,UAAA/E,OAAA,EAAA+E,UAAA,QAAAC,EACrC,OAAQlC,GAEN,IAAK,MAEHggD,EAAK9zB,aAAL,GAAAxvB,OAAAoB,OAAAgW,GAAA,EAAAhW,CAAwBkiD,EAAK9zB,cAA7B,CAA2C+zB,aAAK5+B,KAChD,MAEF,IAAK,SAEH2+B,EAAK9zB,aAAe7pB,KAElB29C,EAAK9zB,aACL,SAAAziB,GAAI,OAAKy2C,KAAQ7+B,EAAO5X,KAE1B,MAEF,IAAK,QAEHu2C,EAAK9zB,aAAe,GACpB,MACF,QAEE8zB,EAAK9zB,aAAe7K,EAAMpgB,IAAI,SAAAogB,GAAK,OAAI4+B,aAAK5+B,OAQlDw9B,eA1E0D,SAAAntC,GAkFvD,IAAA6jD,EAAA7jD,EAPDutC,wBAOC,IAAAsW,EAPkB,mBAOlBA,EANDroD,EAMCwE,EANDxE,SACAuU,EAKC/P,EALD+P,eAOAu+B,EAAKxzC,OAAL1O,OAAAuI,EAAA,EAAAvI,CAAA,GAEKkiD,EAAKxzC,OAFV1O,OAAAqF,GAAA,EAAArF,CAAA,GAGGoP,EAHHpP,OAAAuI,EAAA,EAAAvI,CAAA,GAKOkiD,EAAKxzC,OAAOU,GALnB,CAMIuU,qBAKJpV,GAAyB,CAAEE,KAAM0yC,EAAkBzyC,OAAQwzC,EAAKxzC,SAGhEwzC,EAAKsV,iBAAiB,UAMxB1W,SAxG0D,SAyGxDryC,GAGA,IAFA0yC,EAEAh9C,UAAA/E,OAAA,QAAAgF,IAAAD,UAAA,GAAAA,UAAA,GAF2B,mBAC3Bwf,EACAxf,UAAA/E,OAAA,EAAA+E,UAAA,QAAAC,EAEMgL,EAAmBpP,OAAO3B,KAAK6jD,EAAKxzC,QAAQtP,OAAS,EAE3D8iD,EAAKxzC,OAAL1O,OAAAuI,EAAA,EAAAvI,CAAA,GAEKkiD,EAAKxzC,OAFV1O,OAAAqF,GAAA,EAAArF,CAAA,GAGGoP,EAAW,CACV8zC,iBAAiB,EACjB9zC,WACAuU,iBACAC,YAAa,oBACbC,UAAWpV,KAKfF,GAAyB,CAAEE,KAAM0yC,EAAkBzyC,OAAQwzC,EAAKxzC,UAMlEQ,YAnI0D,SAmI9CE,GAEV,IAAMu4C,EAAyB3nD,OAAO3B,KAAK6jD,EAAKxzC,QAG1Ck5C,EAAeC,KAAK3F,EAAKxzC,OAAQU,GAEjC04C,EAAgBxpC,KAAOspC,EAAc,SAACrpC,EAAKqJ,EAAMroB,GAarD,OAXIA,EAAM6P,IAERmP,EAAIhf,EAAM,GAAVS,OAAAuI,EAAA,EAAAvI,CAAA,GAEKkiD,EAAKxzC,OAAOnP,GAFjB,CAIE6P,SAAU7P,EAAM,KAIpBgf,EAAIhf,GAAO2iD,EAAKxzC,OAAOnP,GAChBgf,GACN,IAEH2jC,EAAKxzC,OAASm5C,KAAKC,EAAeH,EAAWvoD,QAG7CmP,GAAyB,CAAEE,KAAM,mBAAoBC,OAAQwzC,EAAKxzC,UAOpE+d,UApK0D,SAoKhDrd,EAAkBX,GAE1ByzC,EAAKxzC,OAAL1O,OAAAuI,EAAA,EAAAvI,CAAA,GAEKkiD,EAAKxzC,OAFV1O,OAAAqF,GAAA,EAAArF,CAAA,GAGGoP,EAHHpP,OAAAuI,EAAA,EAAAvI,CAAA,GAKOkiD,EAAKxzC,OAAOU,GALnB,CAMIyU,UAAWpV,MAIfF,GAAyB,CAAEE,KAAM,mBAAoBC,OAAQwzC,EAAKxzC,UAIpEiB,WApL0D,WAsLxDd,OAAOC,aAAaw5C,WAAW,oBAE/BpG,EAAKxzC,OAAS,GAEdwzC,EAAKqG,cAOPR,UAjM0D,SAiMhD34C,EAAkB4S,GAE1B,IAOmB01C,EAPbxP,EAAqBloD,OAAO3B,KAAK6jD,EAAKxzC,QAAQtP,OAE9C4pD,EAAc9G,EAAKxzC,OAAOU,GAE1B4L,EAAWknC,EAAKxzC,OAAOU,EAAW,GAElCxL,EAAWs+C,EAAKxzC,OAAOU,EAAW,GAC3B,OAAT4S,IAEFkgC,EAAKxzC,OAAL1O,OAAAuI,EAAA,EAAAvI,CAAA,GAEKkiD,EAAKxzC,QAFVgpD,EAAA,GAAA13D,OAAAqF,GAAA,EAAArF,CAAA03D,EAGGtoD,EAAW,EAHdpP,OAAAuI,EAAA,EAAAvI,CAAA,GAIOgpD,EAJP,CAKI55C,SAAUA,EAAW,KALzBpP,OAAAqF,GAAA,EAAArF,CAAA03D,EAOGtoD,EAPHpP,OAAAuI,EAAA,EAAAvI,CAAA,GAQOgb,EARP,CASI5L,cATJsoD,KAaF,GAAa,SAAT11C,EAAiB,KAAA21C,EAEnB,GAAIvoD,IAAa84C,EAAY,OAAO,KAEpChG,EAAKxzC,OAAL1O,OAAAuI,EAAA,EAAAvI,CAAA,GAEKkiD,EAAKxzC,QAFVipD,EAAA,GAAA33D,OAAAqF,GAAA,EAAArF,CAAA23D,EAGGvoD,EAHHpP,OAAAuI,EAAA,EAAAvI,CAAA,GAIO4D,EAJP,CAKIwL,cALJpP,OAAAqF,GAAA,EAAArF,CAAA23D,EAOGvoD,EAAW,EAPdpP,OAAAuI,EAAA,EAAAvI,CAAA,GAQOgpD,EARP,CASI55C,SAAUA,EAAW,KATzBuoD,IAcFppD,GAAyB,CAAEE,KAAM,mBAAoBC,OAAQwzC,EAAKxzC,UAOpE+c,kBAlP0D,SAkPxChd,GAAsC,IAAxB4zC,EAAwBl+C,UAAA/E,OAAA,QAAAgF,IAAAD,UAAA,IAAAA,UAAA,GAGpD+9C,EAAK51B,cAFH+1B,EAEmB1F,GAAWoC,UAGXtwC,GAOzB60C,gBA/P0D,SA+P1CthC,EAAc5S,GAG5B,GAAI/L,KAAI6+C,EAAKxzC,OAAN,GAAA9P,OAAiBwQ,EAAjB,mBAA6C4S,EAAM,OAAO,KAEjEkgC,EAAKxzC,OAAL1O,OAAAuI,EAAA,EAAAvI,CAAA,GAEKkiD,EAAKxzC,OAFV1O,OAAAqF,GAAA,EAAArF,CAAA,GAGGoP,EAHHpP,OAAAuI,EAAA,EAAAvI,CAAA,GAKOkiD,EAAKxzC,OAAOU,GALnB,CAMIwU,YAAa5B,OAKnB0lC,eA/Q0D,SAAAhoD,GAmRtC,IAHlB6jB,EAGkB7jB,EAHlB6jB,MACAH,EAEkB1jB,EAFlB0jB,QACAzU,EACkBjP,EADlBiP,MAEQS,EAAaT,EAAbS,SAER8yC,EAAKxzC,OAAL1O,OAAAuI,EAAA,EAAAvI,CAAA,GAEKkiD,EAAKxzC,OAFV1O,OAAAqF,GAAA,EAAArF,CAAA,GAGGoP,EAHHpP,OAAAuI,EAAA,EAAAvI,CAAA,GAIO2O,EAJP,CAKIyU,UACAC,SAAUE,EAAM5c,cAKtBixD,iBAjS0D,SAiSzCxoD,GAEf8yC,EAAKxzC,OAAL1O,OAAAuI,EAAA,EAAAvI,CAAA,GAEKkiD,EAAKxzC,OAFV1O,OAAAqF,GAAA,EAAArF,CAAA,GAGGoP,EAHHpP,OAAAuI,EAAA,EAAAvI,CAAA,GAKOkiD,EAAKxzC,OAAOU,GALnB,CAOI8zC,iBAAkBhB,EAAKxzC,OAAOU,GAAU8zC,wBC3T1C2U,GAAc7rD,IAAM+1C,MAAM,cAAe,CAC7C+V,UAAW9rD,IAAMuB,OACjB4+C,kBAAmBngD,IAAMy9C,UAAUz9C,IAAMs9C,QACzCyN,cAAe/qD,IAAMy9C,UAAUz9C,IAAMs9C,QACrCyO,OAAQ/rD,IAAMs9C,OACd/lC,MAAOvX,IAAMs9C,OACbz0C,MAAO7I,IAAMs9C,OACb0N,aAAchrD,IAAMs9C,SAIhBF,GAAQp9C,IAAM+1C,MAAM,QAAS,CACjCsH,UAAWr9C,IAAMs9C,OACjBr7C,WAAYjC,IAAMs9C,OAClBxgC,qBAAsB9c,IAAMuB,OAC5Bib,cAAexc,IAAMs9C,OACrBC,iBAAkBv9C,IAAMs9C,OACxBE,WAAYx9C,IAAMy9C,UAAUz9C,IAAMuB,QAClCoK,gBAAiB3L,IAAMuB,OACvBkB,KAAMzC,IAAMuB,OACZm8C,UAAW19C,IAAMy9C,UAAUz9C,IAAM29C,MAAM39C,IAAMuB,SAC7Cq8C,UAAW59C,IAAMy9C,UAAUz9C,IAAM29C,MAAM39C,IAAMuB,SAC7C5G,SAAUqF,IAAM69C,iBAChB9gC,sBAAuB/c,IAAMuB,OAC7Bu8C,WAAY99C,IAAMs9C,SAIdS,GAAY/9C,IAAM+1C,MAAM,YAAa,CACzC3sC,UAAWpJ,IAAMy9C,UAAUz9C,IAAMuB,QACjCnI,OAAQ4G,IAAM29C,MAAMP,MAIhBoH,GAASxkD,IAAM+1C,MAAM,SAAU,CACnCxuC,SAAUvH,IAAMs9C,OAChByN,cAAe/qD,IAAMs9C,OACrB0O,aAAchsD,IAAMy9C,UAAUz9C,IAAMuB,QACpC0qD,aAAcjsD,IAAMy9C,UAAUz9C,IAAMuB,QACpCnI,OAAQ4G,IAAMy9C,UAAUz9C,IAAM29C,MAAMkO,KACpCpH,UAAWzkD,IAAMuB,OACjB2qD,eAAgBlsD,IAAMuB,OACtB4qD,eAAgBnsD,IAAMuB,SAIlBy8C,GAAah+C,IAAM+1C,MAAM,aAAc,CAC3CkH,SAAUj9C,IAAMs9C,OAChBH,sBAAuBn9C,IAAMs9C,OAC7BW,WAAYj+C,IAAMuB,SAGP6qD,GAAcpsD,IAAM+1C,MAAM,cAAe,CACpD8G,YAAa78C,IAAM29C,MAAMP,IACzBl7B,WAAYliB,IAAM29C,MAAMI,IACxBr7C,OAAQ1C,IAAMm+C,OAAO,CACnB/6C,SAAUpD,IAAMs9C,OAChB3lC,eAAgB3X,IAAM29C,MAAMP,IAC5BvlC,UAAW7X,IAAMuB,OACjBqW,YAAa5X,IAAMuB,OACnB21C,gBAAiBl3C,IAAMwqD,UAEzBpoC,aAAcpiB,IAAM29C,MAAMP,IAC1Bl8C,QAASlB,IAAM29C,MAAM6G,IACrBlkC,cAAetgB,IAAMq+C,MAAMr+C,IAAMuB,OAAQvB,IAAMs9C,OAAQt9C,IAAM5H,WAC7DvC,WAAYmK,IAAMwqD,QAClB3yD,MAAOmI,IAAMm+C,OAAO,IACpBC,YAAap+C,IAAM29C,MAAMK,IACzBrqC,OAAQ3T,IAAM29C,MAAM39C,IAAMs9C,UCpEb+O,GDuEUrsD,IAAMwR,QAC7B46C,GACAb,GACAZ,IC1E8BD,OAAO,CACrCxoC,WAAY,GACZ26B,YAAa,GACbn6C,OAAQ,GACR0f,aAAc,GACdlhB,QAAS,GACTof,cAAeqwB,GAAWoC,UAC1Bl9C,YAAY,EACZgC,MAAO,GACP8b,OAAQ,KCgIK24C,GAvIgBtsD,IAAM+1C,MAAM,IAAIrhD,QAAQ,SAAAwhD,GAAI,MAAK,CAG9DqW,YAH8D,SAGlDC,EAAyBz1D,GAAgB,IAE3CrB,EAAS3B,GAAOuB,OAAhBI,KAERwgD,EAAKxgD,GAAL1B,OAAAqF,GAAA,EAAArF,CAAA,GACG+C,EAASy1D,IAKdx1D,gBAb8D,SAa9Cw1D,GAEdtW,EAAK9zB,aAAeoqC,GAKtBC,UApB8D,SAoBpDC,GAERxW,EAAKyW,eAAiBD,GAKxBz1D,UA3B8D,SA2BpDF,GAAQ,IAERrB,EAAS3B,GAAOuB,OAAhBI,KAERwgD,EAAK0W,cAAc1W,EAAK2W,QAGpB3W,EAAK2W,OAGP3W,EAAKl/C,gBAAgBk/C,EAAKxgD,GAAMqB,KAKhCm/C,EAAK4W,eAAep3D,EAAMqB,GAE1Bm/C,EAAKqW,YAALv4D,OAAAgW,GAAA,EAAAhW,CAAqBkiD,EAAK9zB,cAAerrB,KAI7C61D,aAhD8D,SAgDjDpmD,GAEX0vC,EAAK2W,OAASrmD,GAGhBsmD,eArD8D,SAqD/Cp3D,EAAcqB,GAE3B,IAAMg2D,EAAuB,SAACr3D,GAAD,OAE1B0gD,KAAQF,EAAK9zB,aAAc1sB,EAAKqB,KAG3BjB,EAAY/B,GAAOmhD,cAAnBp/C,QAPmCk3D,EASlBj5D,GAAOgQ,gBAAxBtN,EATmCu2D,EASnCv2D,OAAQC,EAT2Bs2D,EAS3Bt2D,KACVu2D,EAAwB,WAATv3D,EAENw3D,EAAiBn5D,GAAOgM,QAA/BnG,MAER,GAAI8M,KAAQwvC,EAAK9zB,cAAe,OAAO8zB,EAAKiX,aAAaF,GAEzD,GAAIA,GAAgBF,EAAqBt2D,GAAS,KAEjC22D,EAAqBr5D,GAAOs5D,YAAnCzzD,OAKR0zD,EAH4Bv5D,GAAO6lD,YAA3B0T,iBAGQpX,EAAK9zB,aAAcrrB,GAGnCq2D,EAAiBr2D,EAAQm/C,EAAK9zB,aAActsB,EAAQC,OAAOtD,IAG3Dy6D,EAAan2D,EAAQm/C,EAAK9zB,cAG5B,IAAK6qC,GAAgBF,EAAqBr2D,GAAO,KAEhC02D,EAAqBr5D,GAAOw5D,UAAnC3zD,MAEAlC,EAAS3D,GAAOyD,QAAhBE,KAEA41D,EAAoBv5D,GAAOgmD,UAA3BuT,gBAEA1C,EAAgB72D,GAAO+lD,YAAvB8Q,YACF4C,EAAUl7C,KAAO5a,EAAKX,GAAQS,QAClC,SAAC2yD,EAAD3xD,GAAuC,IAA/B+gB,EAA+B/gB,EAA/B+gB,QAAS5L,EAAsBnV,EAAtBmV,gBASf,OAPIuoC,EAAK9zB,aAAazhB,SAAS4Y,IAE7B4wC,EAAI9oD,KAAKsM,GAIXw8C,EAAI9oD,MAAMtK,GACHkT,KAAKkgD,IACX,IAILiD,EAAiBr2D,EAAQm/C,EAAK9zB,cAG9BkrC,EAAgBpX,EAAK9zB,aAAcorC,GAGnC5C,GAAa7zD,EAAQhD,GAAOgQ,iBAG5BmpD,EAAan2D,EAAQm/C,EAAK9zB,gBAK9B+qC,aA3H8D,SA2HjDF,IAMXQ,GAL6BR,EAEzBl5D,GAAOs5D,YAEPt5D,GAAOw5D,WAJHE,oBAOR15D,GAAOgM,QAAQ2tD,oBCvINC,GAAkB3tD,IAAM+1C,MAAM,kBAAmB,CAC5D8W,OAAQ7sD,IAAMwqD,QACdzzD,OAAQiJ,IAAMuB,OACd9K,OAAQuJ,IAAMm+C,OAAO,IACrBznD,KAAMsJ,IAAMm+C,OAAO,IACnB/7B,aAAcpiB,IAAM29C,MAAM39C,IAAMs9C,QAChCqP,eAAgB3sD,IAAMy9C,UAAUz9C,IAAMq+C,MAAMr+C,IAAMuB,OAAQvB,IAAMs9C,WCRnDsQ,GDWc5tD,IAAMwR,QACjCm8C,GACArB,ICbkC5B,OAAO,CACzCmC,QAAQ,EACR91D,OAAQ,GACRN,OAAQ,GACRC,KAAM,GACN0rB,aAAc,GACduqC,eAAgB,OCiDHkB,GA9CgB7tD,IAAM+1C,MAAM,IAAIrhD,QAAQ,SAAAwhD,GAAI,MAAK,CAI9D4X,UAJ8D,SAIpD57D,EAAGqB,EAAKw6D,GAChB,IAAMl1D,EAAW,GAAAjG,OAAME,EAAN,yBACT4kB,EAA6Cq2C,EAA7Cr2C,QAASlgB,EAAoCu2D,EAApCv2D,QAASkL,EAA2BqrD,EAA3BrrD,OAAQhM,EAAmBq3D,EAAnBr3D,KAC5BsC,EAAO,CACX4f,IAAK,6BACLo1C,MAAM,EACN50D,OAAQ,CACN4c,KAAMziB,EACNmkB,UACAhhB,OACAc,UACAkL,WAKJ,OADAwzC,EAAK+X,qBAAqB16D,GACnBqG,MAAMf,EAAK,CAAEE,OAAQ,OAAQC,KAAMC,KAAKC,UAAUF,KACtD6f,KAAK,SAACC,GAGL,OADAo9B,EAAK+X,qBAAqB16D,GACnBulB,EAASC,SAEjBC,MAAM,SAACnhB,GAENq+C,EAAKx8C,QAAQ7B,GAEbq+C,EAAK+X,qBAAqB16D,MAIhC06D,qBAlC8D,SAkCzC16D,GAGnB2iD,EAAI,GAAAtjD,OAAIW,EAAJ,gBAAwB2iD,EAAI,GAAAtjD,OAAIW,EAAJ,gBAGlCmG,QAxC8D,SAwCtD7B,GAENq+C,EAAKr+C,MAAQA,MCjDXq2D,GAAeluD,IAAM+1C,MAAM,eAAgB,CAC/CsE,cAAer6C,IAAMwqD,QACrBlQ,cAAet6C,IAAMwqD,QACrB3yD,MAAOmI,IAAMm+C,OAAO,MCLPloC,GDQWjW,IAAMwR,QAC9B08C,GACAL,ICV+BnD,OAAO,CACtCrQ,eAAe,EACfC,eAAe,EACfziD,MAAO,KC6IMs2D,GAxIgBnuD,IAAM+1C,MAAM,IAAIrhD,QAAQ,SAAAwhD,GAAI,MAAK,CAE9Dt8C,MAF8D,SAExD6kB,GACJ,IAAM5lB,EAAG,GAAAjG,OAAME,EAAN,SACHgG,EAAS,CACbC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,KAAM,kBACNC,OAAQ,CACN4U,YAAayQ,MAKnBllB,kBAAQ,CACNV,MACAC,SACAU,UAAW,WAET08C,EAAKh/C,KAAO,GAEZg/C,EAAKrgD,YAAa,GAGpB4D,UAAW,SAAA3C,GAAI,OAAIo/C,EAAKr/C,WAAWC,EAAM2nB,IAEzC/kB,QAAS,SAAA7B,GAAK,OAAIq+C,EAAKn+C,SAASF,OAIpChB,WA9B8D,SAAA2B,EA8B3BimB,GAAiB,IAAvCvnB,EAAuCsB,EAAvCtB,KAEXg/C,EAAKh/C,KAAOG,KAAIH,EAAM,sBAAuB,IAE7Cg/C,EAAKkY,aAAa3vC,GAElBy3B,EAAKmY,gBAAgB5vC,GAErBy3B,EAAKr+C,MAAQ,KAEbq+C,EAAKz3B,QAAUA,GAGjB1mB,SA3C8D,SA2CrDF,GAEPq+C,EAAKr+C,MAAQA,EAEbq+C,EAAKrgD,YAAa,GAGpBu4D,aAlD8D,SAkDjD3vC,GACX,IAAM5lB,EAAG,GAAAjG,OAAME,EAAN,SACHgG,EAAS,CACbC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,KAAM,sBACNC,OAAQ,CACN8K,YAAa,CAACua,GAGd/Z,WAAY,CAACwxC,EAAKh/C,KAAKmhB,SAAU69B,EAAKh/C,KAAKohB,UAC3ClU,YAAa,CAAC,SAKpB7K,kBAAQ,CACNV,MACAC,SACAU,UAAW,aAEXC,UAAW,SAAA3C,GAAI,OAAIo/C,EAAKoY,kBAAkBx3D,IAE1C4C,QAAS,SAAA7B,GAAK,OAAIq+C,EAAKn+C,SAASF,OAIpCy2D,kBA7E8D,SA6E5Cx3D,GAOhB,IAAMI,EAAOJ,EAAKI,KAAKC,IAAI,SAAAwQ,GAAA,IAAG3F,EAAH2F,EAAG3F,WAAY0c,EAAf/W,EAAe+W,OAAf,MAAoC,CAC7D7V,MADyBlB,EAAuBkB,MAEhD6jD,OAAQ1qD,EACRtL,KAAMgoB,KAGRw3B,EAAKqY,QAAUpyD,KACbmW,KACEpb,EACA,SAACs3D,EAAD5mD,GAAqB,IAAb8kD,EAAa9kD,EAAb8kD,OAKN,OAJe,IAAXA,IAEF8B,EAAI9B,GAAUn0D,KAAOrB,EAAM,SAAAyI,GAAI,OAAIA,EAAK+sD,SAAWA,KAE9C8B,GAET,MAKNH,gBAzG8D,SAyG9C5vC,GACd,IAAM5lB,EAAG,GAAAjG,OAAME,EAAN,gBACHgG,EAAS,CACbC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,KAAM,0BAENkqD,QAAO,GAAAzwD,OAAKyE,KAAI6+C,EAAKh/C,KAAM,WAAY,KACvC6e,UAAW0I,KAIfllB,kBAAQ,CACNV,MACAC,SACAU,UAAW,aAEXC,UAAW,SAAA3C,GAAI,OAAIo/C,EAAKuY,qBAAqB33D,IAE7C4C,QAAS,SAAA7B,GAAK,OAAIq+C,EAAKn+C,SAASF,OAIpC42D,qBAhI8D,SAgIzC33D,GAEnBo/C,EAAKwY,WAAa53D,EAAKgf,MAEvBogC,EAAKrgD,YAAa,MC1IT84D,GAAe3uD,IAAM+1C,MAAM,eAAgB,CACtD7+C,KAAM8I,IAAMm+C,OAAO,IACnBoQ,QAASvuD,IAAM29C,MAAM39C,IAAM29C,MAAM39C,IAAMm+C,OAAO,MAC9CtoD,WAAYmK,IAAMwqD,QAClB/rC,QAASze,IAAMy9C,UAAUz9C,IAAMuB,QAC/BmtD,WAAY1uD,IAAMm+C,OAAO,IACzBtmD,MAAOmI,IAAMy9C,UAAUz9C,IAAMm+C,OAAO,OCRvByQ,GDWW5uD,IAAMwR,QAC9Bm9C,GACAR,ICb+BzD,OAAO,CACtCxzD,KAAM,GACNq3D,QAAS,GACT14D,YAAY,EACZ4oB,QAAS,KACTiwC,WAAY,GACZ72D,MAAO,OCYMg3D,GAVa,SAAAr2D,GAAA,IAC1Bs2D,EAD0Bt2D,EAC1Bs2D,aACAC,EAF0Bv2D,EAE1Bu2D,UACAC,EAH0Bx2D,EAG1Bw2D,UACAC,EAJ0Bz2D,EAI1By2D,WAJ0B,OAKf,iBAAO,CAClBC,eAAc,GAAAt8D,OAAKq8D,GACnBE,kBAAiB,GAAAv8D,OAAKk8D,EAAL,KAAAl8D,OAAqBm8D,EAArB,OAAAn8D,OAAoCo8D,MCyCxCI,GAzCW,SAAA52D,GAAA,IACxB62D,EADwB72D,EACxB62D,UACAC,EAFwB92D,EAExB82D,aACAR,EAHwBt2D,EAGxBs2D,aACAC,EAJwBv2D,EAIxBu2D,UACAr5D,EALwB8C,EAKxB9C,KACAu5D,EANwBz2D,EAMxBy2D,WANwB,OAOb,WAEX,IAeMM,EAAgC,iBAAO,CAC3CL,eAAc,GAAAt8D,OAAKq8D,GACnBE,kBAAiB,GAAAv8D,OAAKk8D,EAAL,KAAAl8D,OAAqBm8D,EAArB,OAAAn8D,OAAoCy8D,KAGjD75D,EAAQ,CACZkB,KAAM64D,EACN94D,OAAQ84D,EACR3xC,MAvB6B,WAAM,IAAA4xC,EAO/BF,IALFG,EAFiCD,EAEjCC,WACA1N,EAHiCyN,EAGjCzN,YACA2N,EAJiCF,EAIjCE,aACA9X,EALiC4X,EAKjC5X,SACA+X,EANiCH,EAMjCG,UAEF,MAAO,CACLT,eAAc,GAAAt8D,OAAK68D,GACnBN,kBAAiB,GAAAv8D,OAAKglD,EAAL,KAAAhlD,OAAiB+8D,EAAjB,KAAA/8D,OAA8B88D,EAA9B,KAAA98D,OAA8CmvD,EAA9C,OAAAnvD,OAA+Dy8D,MAiBpF,OAAK75D,EAAME,GAEJF,EAAME,KAFY,OCyBZk6D,GAxDc,SAAAp3D,GAAA,IAC3B82D,EAD2B92D,EAC3B82D,aACAO,EAF2Br3D,EAE3Bq3D,WACA7xC,EAH2BxlB,EAG3BwlB,UACAtoB,EAJ2B8C,EAI3B9C,KACAs5D,EAL2Bx2D,EAK3Bw2D,UACAjzD,EAN2BvD,EAM3BuD,WACAhI,EAP2ByE,EAO3BzE,OACA+qB,EAR2BtmB,EAQ3BsmB,OAR2B,OAShB,WACX,IAAMijC,EAAsB1qD,KAAI2mB,EAAD,iBAAAprB,OAA6BksB,GAAU,IAChE84B,EAAmBvgD,KAAI2mB,EAAD,QAAAprB,OAAoBksB,GAAU,KACrDznB,KAAI2mB,EAAD,QAAAprB,OAAoBi9D,GAAc,IAiCpCr6D,EAAQ,CACZkB,KA/B+B,iBAAO,CACtCw4D,eAAc,GAAAt8D,OAAKglD,GACnBuX,kBAAiB,MAAAv8D,OAAQmvD,EAAR,OAAAnvD,OAAyBo8D,GAC1Cc,MAAO,KA6BPr5D,OAzBiC,WAAM,IACdX,EAAc/B,EAA/BmhD,cAAiBp/C,QACnBipB,EAAoB1nB,KAAIvB,EAAD,aAAAlD,OAAuBi9D,IAC9C7wC,EAAmB3nB,KAAIvB,EAAD,YAAAlD,OAAsBi9D,IAC5CtjD,EAAU,GAAA3Z,OAAMmsB,EAAN,KAAAnsB,OAAmBosB,GAEnC,MAAO,CACLkwC,eAAc,GAAAt8D,OAAK2Z,EAAL,OAAA3Z,OAAqBglD,GACnCuX,kBAAiB,MAAAv8D,OAAQmvD,EAAR,OAAAnvD,OAAyBo8D,GAC1Cc,MAAO,KAiBTlyC,MAZgC,WAAM,IAAA4xC,EACJF,IAA1BvN,EAD8ByN,EAC9BzN,YAAanK,EADiB4X,EACjB5X,SACrB,MAAO,CACLsX,eAAc,GAAAt8D,OAAKmJ,EAAL,OAAAnJ,OAAqBglD,GACnCuX,kBAAiB,MAAAv8D,OAAQmvD,EAAR,OAAAnvD,OAAyBo8D,GAC1Cc,MAAO,MAUX,OAAKt6D,EAAME,GAEJF,EAAME,KAFY,OCrDZq6D,GAVc,SAAAv3D,GAAA,IAC3Bs2D,EAD2Bt2D,EAC3Bs2D,aACAC,EAF2Bv2D,EAE3Bu2D,UACAC,EAH2Bx2D,EAG3Bw2D,UACAC,EAJ2Bz2D,EAI3By2D,WAJ2B,OAKhB,iBAAO,CAClBC,eAAc,GAAAt8D,OAAKq8D,GACnBE,kBAAiB,GAAAv8D,OAAKk8D,EAAL,KAAAl8D,OAAqBm8D,EAArB,OAAAn8D,OAAoCo8D,MCaxCgB,GAlBa,SAAAx3D,GAAA,IAC1Bq3D,EAD0Br3D,EAC1Bq3D,WACAb,EAF0Bx2D,EAE1Bw2D,UACAjzD,EAH0BvD,EAG1BuD,WACA+9C,EAJ0BthD,EAI1BshD,YAJ0B,OAKf,WACX,IAAMrjD,EAASiR,KACbrQ,KAAIyiD,EAAa,WACjB,SAAAnyC,GAAA,OAAAA,EAAGJ,WAA4BxL,IAE3BwQ,EAAalV,KAAIZ,EAAD,cAAA7D,OAAuBi9D,GAAc,IAE3D,MAAO,CACLX,eAAc,GAAAt8D,OAAK2Z,GACnB4iD,kBAAiB,GAAAv8D,OAAKo8D,MCqBXiB,GAlCS,SAAAz3D,GAAA,IAAG82D,EAAH92D,EAAG82D,aAAcN,EAAjBx2D,EAAiBw2D,UAAWjzD,EAA5BvD,EAA4BuD,WAA5B,OAAoD,SAC1Em0D,GA8BA,MANoB,CAClBC,eAtBoC,WAAM,IAAAX,EACiBF,IAAnDvN,EADkCyN,EAClCzN,YAAa2N,EADqBF,EACrBE,aAAc9X,EADO4X,EACP5X,SAAU+X,EADHH,EACGG,UACvCG,EAAK,GAAAl9D,OAAMglD,EAAN,KAAAhlD,OAAkB+8D,EAAlB,KAAA/8D,OAA+B88D,EAA/B,KAAA98D,OAA+CmvD,EAA/C,OAAAnvD,OAAgEmJ,GAC3E,MAAO,CACLmzD,eAAgBY,EAChBX,kBAAiB,GAAAv8D,OAAKo8D,GACtBc,UAiBFM,aAbkC,WAAM,IAAAC,EACmBf,IAAnDvN,EADgCsO,EAChCtO,YAAa2N,EADmBW,EACnBX,aAAc9X,EADKyY,EACLzY,SAAU+X,EADLU,EACKV,UACvCG,EAAK,GAAAl9D,OAAMglD,EAAN,KAAAhlD,OAAkB+8D,EAAlB,KAAA/8D,OAA+B88D,EAA/B,KAAA98D,OAA+CmvD,GAC1D,MAAO,CACLmN,eAAgBY,EAChBX,kBAAiB,GAAAv8D,OAAKo8D,GACtBc,WAWeI,OCuHNI,GA3IE,SAAA93D,GAgBX,IAqBAu2D,EApCJ3wD,EAeI5F,EAfJ4F,KACAuN,EAcInT,EAdJmT,gBACAqS,EAaIxlB,EAbJwlB,UACAjiB,EAYIvD,EAZJuD,WAYIw0D,EAAA/3D,EAXJrC,WAWI,IAAAo6D,EAXE,GAWFA,EAVJv6C,EAUIxd,EAVJwd,KACAk6C,EASI13D,EATJ03D,WASIM,EAYAz8D,GATFuB,OAAU0hB,EAHRw5C,EAGQx5C,UAAWthB,EAHnB86D,EAGmB96D,KAErBw/C,EAOEnhD,GAPFmhD,cAEAnxC,EAKEhQ,GALFgQ,gBAEA+1C,EAGE/lD,GAHF+lD,YAEAe,EACE9mD,GADF8mD,YAGIwU,EAA2Br4C,EAAU7gB,GACrC2oB,EAAiB3gB,GAAUC,GAC3ByxD,EAAqBxxD,GAAcD,GACnC4wD,EAA6Bh4C,EAAUrL,IAAoBA,EAE3D5U,EAA0BM,KAAItD,GAAD,GAAAnB,OAAY8C,EAAZ,sBAAsC,IACnEo5D,EAAuB3rD,KAAK9L,KAAI0M,EAAD,GAAAnR,OAAqB8C,EAArB,KAAA9C,OAA6BmE,KAGhEg4D,EADW,OAAT3wD,EtK4dC,SAAiBk/C,EAAgBmT,GAEtC,IAAMC,GADNpT,EAASqT,KAAKC,IAAItT,GAAU,KACS,GAErC,OAAIA,EAAS,IAAMA,EAAS,GACnBmT,EAAU,GAEfC,EAAc,GAAKA,EAAc,EAC5BD,EAAU,GAEC,IAAhBC,EACKD,EAAU,GAEZA,EAAU,GsKxeHI,CAAQ/B,EAAc,CAAC,2BAAQ,iCAAS,yCAGI,IAA5CA,EAAapwD,WAAWC,MAAM,IAAImyD,MAC1C,QACA,UAGN,IAAM7B,EAAqB53D,KAAIwjD,EAAD,gBAAAjoD,OAA8Bi9D,GAAc,KACrEx4D,KAAI69C,EAAD,sBAAAtiD,OAAsCi9D,GAAc,IAEtDP,EAAe,WAAM,IAGZj5D,EAGTtC,GAHFyD,QAAWnB,OAEKa,EACdnD,GADF+jD,aAAgB5gD,KASlB,MAAO,CACLy4D,UALEz4D,EAFF65D,YAQArB,aANEx4D,EADF85D,YAQApZ,SANuBvgD,KAAIH,EAAD,cAAAtE,OAAqBksB,GAAU,IAOzDijC,YAN0B1qD,KAAIH,EAAD,cAAAtE,OAAqBksB,GAAU,IAO5D2wC,WANyBp4D,KAAIH,EAAD,GAAAtE,OAAUyD,EAAV,UAAAzD,OAAyBksB,MAWnDnZ,EAAO,CACXnO,QAAS,CACPwmB,YACAc,SACA+wC,aACAb,YACAj7D,UACAu7D,eACAvzD,aACArG,QAEFu7D,aAAc,CACZhC,aACAH,eACAC,YACAC,aAEFkC,QAAS,CACP5B,eACAvzD,aACAizD,aAEFmC,UAAW,CACT7B,eACAD,YACA35D,OACAu5D,aACAH,eACAC,aAEFqC,YAAa,CACXnC,aACAH,eACAC,YACAC,aAEFlV,YAAa,CACXA,cACAkV,YACAjzD,aACA8zD,eAMEwB,EAAa,CAEjB75D,QAASo4D,GAAqBjqD,EAAKnO,SACnCy5D,aAAclB,GAAqBpqD,EAAKsrD,cACxCC,QAASjB,GAAgBtqD,EAAKurD,SAC9BC,UAAW/B,GAAkBzpD,EAAKwrD,WAClCC,YAAavC,GAAoBlpD,EAAKyrD,aACtCtX,YAAakW,GAAoBrqD,EAAKm0C,cAGxC,OAAKuX,EAAWr7C,GAEH,YAATA,EACKq7C,EAAWr7C,GAAMk6C,GAGnBmB,EAAWr7C,KANY,MC/CjBs7C,GArGmBtxD,IAAM+1C,MAAM,IAAIrhD,QAAQ,SAAAwhD,GAAI,MAAK,CAcjEx4B,QAdiE,SAAAllB,GA+B9D,IAfDmb,EAeCnb,EAfDmb,OAEAvV,EAaC5F,EAbD4F,KAaCmzD,EAAA/4D,EAZDmT,uBAYC,IAAA4lD,EAZiB,GAYjBA,EAAAC,EAAAh5D,EAXDs2D,oBAWC,IAAA0C,EAXc,KAWdA,EAAAC,EAAAj5D,EAVDimB,eAUC,IAAAgzC,EAVS,KAUTA,EARDzzC,EAQCxlB,EARDwlB,UAEAjiB,EAMCvD,EANDuD,WAEAkX,EAICza,EAJDya,MAICs9C,EAAA/3D,EAHDrC,WAGC,IAAAo6D,EAHK,GAGLA,EAAAhyC,EAAA/lB,EAFDwd,YAEC,IAAAuI,EAFM,GAENA,EAAAmzC,EAAAl5D,EADD03D,WAEMJ,EAAQQ,GAAS,CACrB3kD,kBAEAmjD,eACA9wC,YACA7nB,MACAiI,OACArC,aACAia,OACAk6C,gBAVD,IAAAwB,EADY,GACZA,IAYK74D,EAAW,GAAAjG,OAAME,EAAN,UACXkG,EAWLhF,OAAAuI,EAAA,EAAAvI,CAAA,CACC29D,UAAU,EACVh+C,SACAvV,OACAqgB,UACAmzC,aAAc3+C,EAAML,OACpBi/C,WAAY5+C,EAAMN,OACfm9C,GAGL,OAAOv2D,kBAAQ,CACbV,MACAC,OAAQ,CACNC,OAAQ,OACRC,KAAMC,KAAKC,UAAUF,IAGvBQ,UAAW,kBAAM08C,EAAKlqC,cAEtBvS,UAAW,SAAAkO,GAAA,IAAGpS,EAAHoS,EAAGpS,KAAH,OAAc2gD,EAAKr/C,WAAWtB,IAEzCmE,QAAS,SAAC7B,GAAD,OAAgBq+C,EAAKn+C,SAASF,OAI3CmU,WAhFiE,WAkF/DkqC,EAAKrgD,YAAa,GAGpBgB,WArFiE,SAqFtDtB,GACLA,GACFsN,OAAOivD,KAAKv8D,EAAM,UAGpB2gD,EAAKrgD,YAAa,GAGpBkC,SA7FiE,SA6FxDF,GAEPq+C,EAAKr+C,MAAQA,EAEbq+C,EAAKrgD,YAAa,MCnGTk8D,GAAqB/xD,IAAM+1C,MAAM,qBAAsB,CAClElgD,WAAYmK,IAAMwqD,UCHLwH,GDMiBhyD,IAAMwR,QACpCugD,GACAT,ICRqC5G,OAAO,CAC5C70D,YAAY,IC+CCo8D,GA7CWjyD,IAAM+1C,MAAM,IAAIrhD,QAAQ,SAAAwhD,GAAI,MAAK,CACzDt8C,MADyD,WAEvD,IAAMf,EAAG,GAAAjG,OAAME,EAAN,SACHgG,EAAS,CACbC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,KAAM,6BAIVI,kBAAQ,CACNV,MACAC,SACAU,UAAW,WAET08C,EAAKh/C,KAAO,GAEZg/C,EAAKr+C,MAAQ,KAEbq+C,EAAKrqC,QAAS,GAGhBpS,UAAW,SAAA3C,GAAI,OAAIo/C,EAAKr/C,WAAWC,IAEnC4C,QAAS,SAAA7B,GAAK,OAAIq+C,EAAKn+C,SAASF,OAIpChB,WA5ByD,SAAA2B,GA4BtB,IAAtBtB,EAAsBsB,EAAtBtB,KAEXg/C,EAAKh/C,KAAOA,EAEZg/C,EAAKrqC,QAAS,EAEdqqC,EAAKr+C,MAAQ,MAGfE,SArCyD,SAqChDF,GAEPq+C,EAAKr+C,MAAQA,EAEbq+C,EAAKrqC,QAAS,2BCuFHqmD,GAzHOlyD,IACnB+1C,MAAM,IACNC,SAAS,iBAAO,CACfmc,oBAAqB,MAEtBz9D,QAAQ,SAAAwhD,GAAI,MAAK,CAChB3/C,MADgB,WAGd2/C,EAAK7vC,QAAU,IAIjB+rD,eAPgB,SAODp8C,GAIb,OADAkgC,EAAK2W,QAAU3W,EAAK2W,OACP,UAAT72C,GACFkgC,EAAKic,oBAAsB,GACpB,OAGLjc,EAAK2W,OAEP3W,EAAKic,oBAAsBjc,EAAK7vC,SAGhC6vC,EAAK7vC,QAAU6vC,EAAKic,oBACpBjc,EAAKic,oBAAsB,IAEtB,OAGTE,gBA3BgB,SA2BA5/D,EAAqB6/D,GACnC,IAAMC,EAASv+D,OAAAuI,EAAA,EAAAvI,CAAA,GAAQkiD,EAAKic,qBAEtBK,EAAarc,aAAKD,EAAKuc,eAAehgE,EAAI6/D,IAShD,OARII,KAAIH,EAAW9/D,UAEV8/D,EAAU9/D,GACR+/D,IAETD,EAAU9/D,GAAM+/D,GAElBtc,EAAKic,oBAAsBI,EACpB,MAITI,mBA3CgB,SA2CGxI,EAAKmI,GACtB,IAAMC,EAASv+D,OAAAuI,EAAA,EAAAvI,CAAA,GAAQkiD,EAAKic,qBACxB5pD,KAAM4hD,EAAK,SAAA13D,GAAE,OAAIigE,KAAIH,EAAW9/D,KAClCiN,KAAQyqD,EAAK,SAAC13D,UAEL8/D,EAAU9/D,KAGnBiN,KAAQyqD,EAAK,SAAC13D,GAEZ,IAAM+/D,EAAarc,aAAKD,EAAKuc,eAAehgE,EAAI6/D,IAC5CE,IAEFD,EAAU9/D,GAAM+/D,KAItBtc,EAAKic,oBAAsBI,GAG7BK,cA/DgB,SA+DFngE,GAEZ,IAAMogE,EAAa7+D,OAAAuI,EAAA,EAAAvI,CAAA,GAAQkiD,EAAK7vC,gBACzBwsD,EAAcpgE,GAErByjD,EAAK7vC,QAAUwsD,MAGlBpT,MAAM,SAAAvJ,GAAI,MAAK,CACduc,eADc,SACChgE,EAAqB6/D,GAElC,IAAKA,EAAW,OAAO5qD,KAAKwuC,EAAKh/C,KAAM,CAAEzE,OAGzC,IACMyO,EAAwB,yBAAdoxD,EAEZpc,EAAK4c,YAEL5c,EAAK4D,YACT,OAAOpyC,KAAKxG,EAAS,CAAE3G,UANC,SAAA9H,GAAE,OAAIslB,OAAOtlB,EAAGkM,MAAM,KAAK,IAMjBo0D,CAAgBtgE,MAGpDqnD,kBACE,IAAM54C,EAAU7J,KAAItD,GAAQ,iBAC5B,OAAOue,KACLpR,EACA,SAACqR,EAAD/Z,GAIE,OAJwBA,EAAlB8T,YAGM5M,QAAQ,SAAAjJ,GAAM,OAAI8b,EAAIlR,KAAK5K,KAChC8b,GAET,KAIJugD,kBACE,IAAM5xD,EAAU7J,KAAItD,GAAQ,wBAE5B,OAAOue,KACLpR,EAEA,SAACqR,EAAD5K,GAAoC,IAA5BJ,EAA4BI,EAA5BJ,SACAyrD,EAD4BrrD,EAAlB2E,YACW,GAE3B,OADA0mD,EAAOz4D,UAAYgN,EACnB,GAAA3U,OAAAoB,OAAAgW,GAAA,EAAAhW,CAAWue,GAAX,CAAgBygD,KAElB,QC1HFC,GAAajzD,IAAM+1C,MAAM,aAAc,CAC3CpiD,SAAUqM,IAAMy9C,UAAUz9C,IAAMs9C,QAChC98C,mBAAoBR,IAAMy9C,UAAUz9C,IAAM29C,MAAM39C,IAAMs9C,SACtDh2C,oBAAqBtH,IAAMy9C,UAAUz9C,IAAM29C,MAAM39C,IAAMs9C,SACvD78C,yBAA0BT,IAAMy9C,UAAUz9C,IAAM29C,MAAM39C,IAAMs9C,SAC5Dj2C,0BAA2BrH,IAAMy9C,UAAUz9C,IAAM29C,MAAM39C,IAAMs9C,SAC7D4V,YAAalzD,IAAMuB,OACnB9O,GAAIuN,IAAMs9C,OACV5iD,SAAUsF,IAAMy9C,UAAUz9C,IAAMs9C,UAGrB6V,GAAUnzD,IAAM+1C,MAAM,UAAW,CAC5C7+C,KAAM8I,IAAM29C,MAAMsV,IAClB5sD,QAASrG,IAAMm+C,OAAO,IACtB0O,OAAQ7sD,IAAMwqD,QACd3+C,OAAQ7L,IAAMwqD,QACd3yD,MAAOmI,IAAMy9C,UAAUz9C,IAAMm+C,OAAO,OCpBvBiV,GDuBMpzD,IAAMwR,QACzB2hD,GACAlB,GACAC,IC1B0BxH,OAAO,CACjCxzD,KAAM,GACNmP,QAAS,GACTwmD,QAAQ,EACRhhD,QAAQ,EAERwnD,YAAa,GACbx7D,MAAO,OCHIy7D,GAAsBtzD,IAChC+1C,MAAM,IACNC,SAAS,iBAAO,CACfud,iBAAiB,KAElB7+D,QAAQ,SAAAwhD,GAAI,MAAK,CAEhBnB,eAFgB,SAGd32C,EACAqgB,EACA+0C,GAGA,IAAMC,EAAet8D,KAAIq8D,EAAqB,WAAY,IAG1Dtd,EAAKv+B,eAAiB67C,EAEtBtd,EAAKwd,WAAWt1D,EAAMqgB,EAASg1C,IAIjCtK,yBAjBgB,WAoBd,IAAMa,EAAa7yD,KAAI++C,EAAKpyC,MAAO,SAEnCoyC,EAAKv+B,eAAiBpf,KAEpB29C,EAAK2G,YACL,SAAArkD,GAAA,IAAGmC,EAAHnC,EAAGmC,SAAH,OAAkBgG,KAASqpD,EAAYrvD,SClBlCg5D,GAAyB3zD,IAAM+1C,MAAM,IAC/CrhD,QAAQ,SAAAwhD,GAAI,MAAK,CAIhBjnC,WAAYwvC,YAAI/vC,GAAAC,EAAAC,KAAC,SAAUK,EAEzB7Q,EAEAqgB,EAEAkgC,GANe,OAAAjwC,GAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAnX,MAAA,OAUf,OAVemX,EAAAnX,KAAA,EAUTs+C,EAAKwd,WAAWt1D,EAAMqgB,EAASkgC,GAVtB,OAaf,OAbe5vC,EAAAnX,KAAA,EAaTs+C,EAAKwG,kBAAkB,GAbd,OAgBfxG,EAAKiT,2BAhBU,wBAAAp6C,EAAAG,SAAUD,MAmB3BykD,WAvBgB,SAwBdt1D,EACAqgB,EACArlB,GAEA,IAAM4kB,EAAY3mB,KAAItD,GAAQ,oBAAqB,IAC7C0Z,EAAQ,CAACuQ,EAAU3F,SAAU2F,EAAU1F,UACvCzf,EAAW,GAAAjG,OAAME,EAAN,SACXgG,EAAkB,CACtBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,KAAM,uBACNC,OAAQ,CACN4U,YAAa+J,OAAO0G,GACpBylC,aAAc,KACd0P,YAAanmD,EACb87C,aAAcnwD,EACdowD,WAAYzxC,OAAgB,OAAT3Z,OAIzB,OAAO9E,QAAMC,QAAQ,CACnBV,MACAC,SAEAU,UAAW08C,EAAKlqC,WAEhBvS,UAAWy8C,EAAKr/C,WAEhB6C,QAASw8C,EAAKn+C,YAIlBiU,WAxDgB,WA0DdkqC,EAAKpyC,MAAQ,GAEboyC,EAAK6B,UAAY,KAEjB7B,EAAKqd,iBAAkB,GAIzB18D,WAlEgB,SAkELC,GACT,IAAM2W,EAAQpW,KAAIP,EAAKI,KAAM,2BAA4B,IAEzDg/C,EAAKpyC,MAAQzM,KAAIqQ,KAAK+F,EAAO,cAAe,IAAK,eAEjDyoC,EAAK6B,UAAYzlC,KAAO7E,EAAO,SAAC8E,EAAKyqC,GAMnC,OAJAzqC,EAAIyqC,EAAQt+B,QAAUgrC,KACpB1M,EACA,CAAC,SAAU,SAAU,eAEhBzqC,GACN,IAEH2jC,EAAKr+C,MAAQ,KAEbq+C,EAAKqd,iBAAkB,GAGzBx7D,SArFgB,SAqFPF,GAEPq+C,EAAKr+C,MAAQA,EAEbq+C,EAAKqd,iBAAkB,MCnGvBlJ,GAAOrqD,IAAM+1C,MAAM,OAAQ,CAC/Bx+B,MAAOvX,IAAMs9C,OACbkD,WAAYxgD,IAAMy9C,UAAUz9C,IAAMuB,QAClC+oD,iBAAkBtqD,IAAMy9C,UAAUz9C,IAAMuB,UAGpCw8C,GAAY/9C,IAAM+1C,MAAM,oBAAqB,CACjDsH,UAAWr9C,IAAMs9C,OACjBr7C,WAAYjC,IAAMs9C,OAClBxgC,qBAAsB9c,IAAMuB,OAC5Bib,cAAexc,IAAMs9C,OACrBC,iBAAkBv9C,IAAMs9C,OACxBE,WAAYx9C,IAAMy9C,UAAUz9C,IAAMuB,QAClCoK,gBAAiB3L,IAAMuB,OACvBkB,KAAMzC,IAAMuB,OACZm8C,UAAW19C,IAAMy9C,UAAUz9C,IAAM29C,MAAM39C,IAAMuB,SAC7Cq8C,UAAW59C,IAAMy9C,UAAUz9C,IAAM29C,MAAM39C,IAAMuB,SAC7C5G,SAAUqF,IAAMs9C,OAChBvgC,sBAAuB/c,IAAMuB,OAC7Bu8C,WAAY99C,IAAMs9C,SAGduW,GAAe7zD,IAAM+1C,MAAM,qBAAsB,CACrDjyC,MAAO9D,IAAMy9C,UAAUz9C,IAAM29C,MAAM0M,KACnCtS,UAAW/3C,IAAMm+C,OAAO,IACxBgB,UAAU,EACVtnD,MAAOmI,IAAMm+C,OAAO,IACpBxmC,eAAgB3X,IAAMy9C,UAAUz9C,IAAM29C,MAAMI,OAGjC+V,GAAoB9zD,IAAMwR,QAErCirC,GAEAoX,GACAP,GACAK,ICPaI,GAlCW,SAAAv7D,GAAA,IACxB2jB,EADwB3jB,EACxB2jB,aACAC,EAFwB5jB,EAExB4jB,WACAgB,EAHwB5kB,EAGxB4kB,aACAtZ,EAJwBtL,EAIxBsL,MACAkwD,EALwBx7D,EAKxBw7D,MACAC,EANwBz7D,EAMxBy7D,MANwB,OAQxBz6C,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,8BACZviB,KAAI2M,EAAO,SAAA6D,EAA0Cgd,GAA1C,IAAGpN,EAAH5P,EAAG4P,MAAOipC,EAAV74C,EAAU64C,WAAY8J,EAAtB3iD,EAAsB2iD,iBAAtB,OACV9wC,EAAA7K,EAAA8K,cAAA,OACElmB,IAAG,GAAAX,OAAK2kB,EAAL,KAAA3kB,OAAc03D,EAAd,KAAA13D,OAAkC+xB,GACrCjL,UAAU,wBAEVF,EAAA7K,EAAA8K,cAAA,QACEC,UAAWyC,EAAa5E,EAAOy8C,GAE/Bz3C,QAASH,EAAW7E,EAAOipC,EAAYwT,IAEtC52C,EAAa7F,EAAOy8C,IAEvBx6C,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,yBAAyB8mC,GACzChnC,EAAA7K,EAAA8K,cAAA,QACEC,UAAWyC,EAAa5E,EAAO08C,GAE/B13C,QAASH,EAAW7E,EAAOipC,EAAYyT,IAEtC72C,EAAa7F,EAAO08C,SC1BlBpO,GACTvsD,QADFgsD,QAAWO,oBAkCEqO,GA/BkB,SAAA17D,GAAA,IAC/B27D,EAD+B37D,EAC/B27D,SACAH,EAF+Bx7D,EAE/Bw7D,MACAC,EAH+Bz7D,EAG/By7D,MAH+B,OAK/Bz6C,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,0BACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,6DACbF,EAAA7K,EAAA8K,cAAA,OACEC,UAAU,uCAEVksC,IAAKuO,EAASH,GACdI,IAAI,WACJ16D,QAAS,SAAAxH,GAAC,OAAI2zD,GAAoB3zD,EAAG,YAIzCsnB,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,kDACbF,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAKP,UAAU,qBAAqBrW,EAAE,WAExCmW,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,6DACbF,EAAA7K,EAAA8K,cAAA,OACEC,UAAU,kEAEVksC,IAAKuO,EAASF,GACdG,IAAI,WACJ16D,QAAS,SAAAxH,GAAC,OAAI2zD,GAAoB3zD,EAAG,cCChCmiE,GCf2B7iD,aACtC8L,YACE,SACA,YACA,cACA,aACA,sBAEFpE,aAAuD,CACrDo7C,cAAe,SAAA97D,GAAA,IACSu/C,EADTv/C,EACb+7D,mBAAsBxc,UADT,OAET,SAAAvzC,GAAM,OAAInN,KAAI0gD,EAAW,CAACvzC,EAAQ,UAAW,QAErD0U,aAAuD,CACrDiD,aAAc,SAAAxU,GAAA,IAAG2sD,EAAH3sD,EAAG2sD,cAAH,OAAuB,SAAC/8C,EAAO/S,GAC3C,IAAMgwD,EAAWn9D,KACfqQ,KAAK4sD,EAAc9vD,GAAS,CAAE+S,UAC9B,qBAEF,OAAOoC,KACL,uBACA,CAAE86C,4BAA6BD,MAInCp4C,WAAY,SAAAxU,GAAA,IACV0sD,EADU1sD,EACV0sD,cACUl2D,EAFAwJ,EAEVtS,OAAU8I,KACVof,EAHU5V,EAGV4V,YACaE,EAJH9V,EAIV+V,UAAaD,QAJH,OAKN,SAACnG,EAAOipC,EAAYh8C,GAApB,OAA+B,WACnC,IAAMmP,EAAStc,KACbqQ,KAAK4sD,EAAc9vD,GAAS,CAAE+S,UAAU,qBAEtC5D,GACF+J,EAAQ,CACN/J,SACAvV,OACAuN,gBAAiB60C,EACjBvtC,MAAOuK,EACPxH,KAAM,UACNk6C,WAAY,oBAKlBiE,SAAU,SAAAzgE,GAAA,IAAyBqkD,EAAzBrkD,EAAG6gE,mBAAsBxc,UAAzB,OAA2C,SAAAvzC,GAAM,OACzDnN,KAAI0gD,EAAD,GAAAnlD,OAAe4R,EAAf,eAAoC,MAGzCkwD,eAAgB,SAAAzsD,GAAA,IAAA0sD,EAAA1sD,EACdssD,mBACE58C,EAFYg9C,EAEZh9C,eACA7T,EAHY6wD,EAGZ7wD,MAHY,OAKV,WACJ,GAAIA,EAAO,CACT,IAAM8wD,EAAYj9D,KAAOmM,EAAO,SAChC,OAAO6W,KAAOi6C,EAAW,SAAA1sD,GAAe,IAAZqP,EAAYrP,EAAZqP,MAE1B,OAD0BpgB,KAAIwgB,EAAgB,YACrBk9C,QAAQt9C,KAGrC,MAAO,KAGT6F,aAAc,SAAA1T,GAAA,IAAG4qD,EAAH5qD,EAAG4qD,cAAH,OAAuB,SAAC/8C,EAAO/S,GAC3C,IAAMqE,EAAQxR,KACZqQ,KAAK4sD,EAAc9vD,GAAS,CAAE+S,UAC9B,SAEF,OAAO1O,EAAQA,EAAMpK,UAAY,QAGrC2b,ID3D8B06C,CA1BS,SAAAt8D,GAAA,IACvC2jB,EADuC3jB,EACvC2jB,aACAC,EAFuC5jB,EAEvC4jB,WACA+3C,EAHuC37D,EAGvC27D,SACAO,EAJuCl8D,EAIvCk8D,eACAt3C,EALuC5kB,EAKvC4kB,aACA42C,EANuCx7D,EAMvCw7D,MACAC,EAPuCz7D,EAOvCy7D,MAPuC,OASvCz6C,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KACErD,EAAA7K,EAAA8K,cAACs7C,GAAD,CACEZ,SAAUA,EACVH,MAAOA,EACPC,MAAOA,IAETz6C,EAAA7K,EAAA8K,cAACu7C,GAAD,CACElxD,MAAO4wD,IACPV,MAAOA,EACPC,MAAOA,EACP72C,aAAcA,EACdjB,aAAcA,EACdC,WAAYA,OEsCH64C,GC9DmBzjD,aAChC8L,YACE,eACA,cACA,aACA,SACA,qBACA,kBAGFpE,aAAa,CAQX07B,QAAS,SAAAp8C,GAAA,IACW4pB,EADX5pB,EACPknB,eAAkB0C,aAClB6yB,EAFOz8C,EAEPy8C,kBACU72C,EAHH5F,EAGPlD,OAAU8I,KACMqgB,EAJTjmB,EAIPs/C,aAAgBr5B,QACMs2B,EALfv8C,EAKP+7D,mBAAsBxf,eALf,OAMH,WACJA,EAAe32C,EAAMqgB,EAAS2D,GAC9B6yB,MAQFG,QAAS,SAAAztC,GAAA,IACWqtC,EADXrtC,EACP+X,eAAkBs1B,kBAClBC,EAFOttC,EAEPstC,kBAFO,OAGH,WACJD,IACAC,QAGJI,aAAU,CACRC,kBADQ,WACY,IAAAC,EAMdrhD,KAAKV,OACTizB,EAPkB8uB,EAGhB71B,eAAkB+G,kBAHF8uB,EAKhBgf,mBAAsB58C,mBAK5ByC,IDSa66C,CAjDkB,SAAAz8D,GAAA,IACrBwe,EADqBxe,EAC/BlD,OAAU0hB,UACV49B,EAF+Bp8C,EAE/Bo8C,QACAQ,EAH+B58C,EAG/B48C,QACAmf,EAJ+B/7D,EAI/B+7D,mBAJ+B,OAM/B/6C,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,qEACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,eACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,oBACbF,EAAA7K,EAAA8K,cAAA,MAAIC,UAAU,eACZF,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAE,qBAITmW,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,cAAc6C,QAAS64B,KAGzC57B,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,uBACbF,EAAA7K,EAAA8K,cAACsI,GAAD,CACE5L,UAAU,qBACVqK,aAAc+zC,EACdvyC,SAAU,KAGdxI,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,sBACbF,EAAA7K,EAAA8K,cAACmN,GAAD,OAEFpN,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,oBACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,iBACbF,EAAA7K,EAAA8K,cAAA,SAEE8C,QAAS64B,EACTp/B,KAAK,SACLnN,MAAOmO,EAAU,UACjB0C,UAAU,iBAEZF,EAAA7K,EAAA8K,cAAA,SACE8C,QAASq4B,EACT5+B,KAAK,SACLnN,MAAOmO,EAAU,MACjB0C,UAAU,uBEtBPw7C,GAZoB1jD,aACjC8L,YAAO,SAAU,YAAa,cAAe,sBAC7CC,aAAU,cAAe,aAAa,GAEtCrE,aAAa,CAEX+7B,kBAAmB,SAAAttC,GAAA,IAAG+yC,EAAH/yC,EAAG+yC,UAAH,OAAmB,kBAAMA,EAAU,SAAA/5B,GAAC,OAAKA,QAE9DvG,IARiC5I,CAbF,SAAAhZ,GAAA,IAC/By8C,EAD+Bz8C,EAC/By8C,kBACA0T,EAF+BnwD,EAE/BmwD,YAF+B,OAI/BnvC,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,qBACbF,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAKP,UAAU,mBAAmBrW,EAAE,oBACpCmW,EAAA7K,EAAA8K,cAAA,KAAGC,UAAU,0BAA0B6C,QAAS04B,GAC9Cz7B,EAAA7K,EAAA8K,cAAA,KAAGC,UAAU,mBAEdivC,GAAenvC,EAAA7K,EAAA8K,cAAC07C,GAAD,CAAmBlgB,kBAAmBA,OCL3C4J,GAfO,CACpB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KCyFWgV,GAtCgBriD,aAC3B8L,YACE,SACA,qBACA,gBAEFlD,IACAC,aACE,SAAA1S,GAAA,IAAavJ,EAAbuJ,EAAGrS,OAAU8I,KAAb,MAA2B,CACzBA,OACA0gB,OAAQ3gB,GAAUC,MAGtBi3C,aAAsB,CACpBC,kBADoB,WACA,IAAAC,EAKdrhD,KAAKV,MAHD4hE,EAFU7f,EAEhBn3C,KACgBqgB,EAHA82B,EAGhBuC,aAAgBr5B,SAGlBxP,EANkBsmC,EAIhBgf,mBAAsBtlD,YAEbmmD,EAAa32C,EAASogC,KAEnCwW,mBAToB,SASDC,GAAW,IAAAC,EAKxBrhE,KAAKV,MAHD4hE,EAFoBG,EAE1Bn3D,KACgBqgB,EAHU82C,EAG1Bzd,aAAgBr5B,QAHU+2C,EAAAD,EAI1BhB,mBAAsBb,EAJI8B,EAIJ9B,WAAY/7C,EAJR69C,EAIQ79C,eAGhC29C,EAAUl3D,OAASg3D,GAErB1B,EAAW0B,EAAa32C,EADNtnB,KAAIwgB,EAAgB,gBAK5CyC,IAG0Bq7C,CA7ES,SAAAj9D,GAAA,IAAAuuD,EAAAvuD,EACnCs/C,aACE5gD,KACEmhB,EAH+B0uC,EAG/B1uC,SACAC,EAJ+ByuC,EAI/BzuC,SACGphB,EAL4BlD,OAAA8Z,GAAA,EAAA9Z,CAAA+yD,EAAA,yBAQnCjoC,EARmCtmB,EAQnCsmB,OARmC42C,EAAAl9D,EASnC+7D,mBAAsBzwD,EATa4xD,EASb5xD,MAAOyvD,EATMmC,EASNnC,gBATM,OAWnC/5C,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,aACbF,EAAA7K,EAAA8K,cAACk8C,GAAD,MACAn8C,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,wBACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,oBACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,mBACbF,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,wBACbxiB,EAAI,cAAAtE,OAAeksB,MAGxBtF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,mBACbF,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,wBACbxiB,EAAI,cAAAtE,OAAeksB,OAIzBy0C,EACC/5C,EAAA7K,EAAA8K,cAAC46C,GAAD,CACEL,MAAO37C,EACP47C,MAAO37C,EACPxU,MAAOA,IAGT0V,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,gBCLRk8C,GA/Ce51D,IAAM+1C,MAAM,IAAIrhD,QAAQ,SAAAwhD,GAAI,MAAK,CAC7Dt8C,MAD6D,SACvD4K,GACJ,IAAM3L,EAAG,GAAAjG,OAAME,EAAN,SACHgG,EAAS,CACbC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,KAAM,iBACNC,OAAQ,CACN2U,WAAYvJ,MAIlBjL,kBAAQ,CACNV,MACAC,SACAU,UAAW,WAET08C,EAAKpgD,QAAU,KAEfogD,EAAKiJ,UAAW,GAGlB1lD,UAAWy8C,EAAKr/C,WAEhB6C,QAASw8C,EAAKn+C,YAIlBlB,WA5B6D,SA4BlDC,GAMTo/C,EAAKiJ,UAAW,EAEhBjJ,EAAKpgD,QAAUgB,EAAKI,KAAK,GAAG2+D,eAAe,IAAM,KAEjD3f,EAAKr+C,MAAQ,MAGfE,SAzC6D,SAyCpDF,GAEPq+C,EAAKr+C,MAAQA,MC7CJi+D,GAAc91D,IAAM+1C,MAAM,cAAe,CACpDjgD,QAASkK,IAAMy9C,UAAUz9C,IAAMm+C,OAAO,KACtCgB,SAAUn/C,IAAMwqD,QAChB3yD,MAAOmI,IAAMy9C,UAAUz9C,IAAMm+C,OAAO,OCJvB4X,GDOU/1D,IAAMwR,QAC7BskD,GACAF,ICT8BlL,OAAO,CACrC50D,QAAS,KACTqpD,UAAU,EACVtnD,MAAO,2BCkEMm+D,GA5DkBh2D,IAAM+1C,MAAM,IAAIrhD,QAAQ,SAAAwhD,GAAI,MAAK,CAChE+f,aADgE,SACnDrV,GACX,IAAM/nD,EAAG,GAAAjG,OAAME,EAAN,SACHgG,EAAS,CACbC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,KAAM,+BACNC,OAAQ,CACN6qD,iBAAkBrD,MAKxB,OAAOrnD,kBAAQ,CACbV,MACAC,SACAU,UAAW,WAET08C,EAAKiJ,UAAW,EAEhBjJ,EAAKr+C,MAAQ,MAGf4B,UAAW,SAAA3C,GAAI,OAAIo/C,EAAKggB,kBAAkBp/D,EAAM8pD,IAEhDlnD,QAASw8C,EAAKn+C,YAIlBm+D,kBA7BgE,SA8B9Dp/D,EAKA8pD,GAEoBnmC,KAClBpjB,KAAIP,EAAM,uCAAwC,IAClD,CAAC,aACD,CAAC,SAGS4I,QAAQ,SAAAy2D,GAAM,OAAIjgB,EAAKkgB,QAAQC,IAAIF,EAAOjR,UAAWiR,KAEjE,IAAMG,EAAkBC,KAAKp6D,aAAO+5C,EAAKkgB,UAAUlR,UAEnDhP,EAAKsgB,mBAAmB5V,EAAc0V,GAEtCpgB,EAAKr+C,MAAQ,KAEbq+C,EAAKiJ,UAAW,GAGlBpnD,SAtDgE,SAsDvDF,GAEPq+C,EAAKr+C,MAAQA,MC5CF4+D,GApBuBz2D,IACnC+1C,MAAM,IACNC,SAAS,iBAAO,CACfiP,eAAgB,GAChB4H,QAAQ,KAETn4D,QAAQ,SAAAwhD,GAAI,MAAK,CAChBsgB,mBAAoB,SAAC5V,EAAsBnuD,GAEzCyjD,EAAK+O,eAAiB/O,EAAKkgB,QAAQ/+D,IAAI5E,GACvCikE,YAAQxgB,GAAMt/B,kBAAkB+/C,iBAAiB/V,EAAcnuD,OAGlEgtD,MAAM,SAAAvJ,GAAI,MAAK,CACd0gB,kBAEE,OAAOz6D,aAAO+5C,EAAKkgB,aCfnBS,GAAS72D,IAAM+1C,MAAM,SAAU,CACnCmP,UAAWllD,IAAMy9C,UAAUz9C,IAAMs9C,QACjCwZ,YAAa92D,IAAMy9C,UAAUz9C,IAAMuB,UAGxBw1D,GAAoB/2D,IAAM+1C,MAAM,oBAAqB,CAChEqgB,QAASp2D,IAAM7I,IAAI0/D,IACnB1X,UAAU,EACVtnD,MAAOmI,IAAMy9C,UAAUz9C,IAAMm+C,OAAO,OASvB6Y,GANgBh3D,IAAMwR,QACnCulD,GACAE,GACAR,ICuCaT,GAhDkBh2D,IAAM+1C,MAAM,IAAIrhD,QAAQ,SAAAwhD,GAAI,MAAK,CAChEghB,uBADgE,SACzCtW,GACrB,IAAM/nD,EAAG,GAAAjG,OAAME,EAAN,SACHgG,EAAS,CACbC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,KAAM,uBACNC,OAAQ,CACN6qD,iBAAkBrD,MAKxB,OAAOrnD,kBAAQ,CACbV,MACAC,SACAU,UAAW,WAET08C,EAAKpgD,QAAU,GAEfogD,EAAKiJ,UAAW,GAGlB1lD,UAAWy8C,EAAKr/C,WAEhB6C,QAASw8C,EAAKn+C,YAIlBlB,WA7BgE,SA6BrDC,GAMTo/C,EAAKpgD,QAAUuB,KAAIP,EAAM,+BAAgC,IAEzDo/C,EAAKr+C,MAAQ,KAEbq+C,EAAKiJ,UAAW,GAGlBpnD,SA1CgE,SA0CvDF,GAEPq+C,EAAKr+C,MAAQA,MClDJs/D,GAAiBn3D,IAAM+1C,MAAM,oBAAqB,CAC7DjgD,QAASkK,IAAMy9C,UAAUz9C,IAAMm+C,OAAO,KACtCgB,UAAU,EACVtnD,MAAOmI,IAAMy9C,UAAUz9C,IAAMm+C,OAAO,OAQvBiZ,GALap3D,IAAMwR,QAChC2lD,GACAnB,0GCAI7jE,GAAQ6N,IAAM+1C,MAAM,CACxBshB,QAASr3D,IAAMuB,OACfkB,KAAM,GACN60D,MAAOt3D,IAAMu3D,MAAMv3D,IAAMuB,UAGdi2D,GAAax3D,IACvB+1C,MAAM,CACLl+C,MAAOmI,IAAMy9C,UAAUtrD,MAExBuC,QAAQ,SAAAwhD,GAAI,MAAK,CAChBuhB,SADgB,SACP5/D,GACPq+C,EAAKr+C,MArBW,SAACA,GAAD,OACnBA,EACG,CACAw/D,QAASx/D,EAAMw/D,QACf50D,KAAM5K,EAAM4K,KACZ60D,MAAOz/D,EAAMy/D,OAEb,KAcaI,CAAc7/D,OCrBpB8/D,GAAa33D,IACvB+1C,MAAM,QAAS,CACdoJ,UAAU,IAEXzqD,QAAQ,SAAAwhD,GAAI,MAAK,CAChB0hB,YADgB,SACJzY,GACVjJ,EAAKiJ,SAAWA,MCDhB0Y,GAAa73D,IAAM+1C,MAAM,aAAc,CAC3C+hB,cAAe93D,IAAMy9C,UAAUz9C,IAAMuB,QACrCw2D,cAAe/3D,IAAMy9C,UAAUz9C,IAAMuB,QACrCy2D,aAAch4D,IAAMy9C,UAAUz9C,IAAMuB,QACpC02D,aAAcj4D,IAAMy9C,UAAUz9C,IAAMuB,QACpCyqD,aAAchsD,IAAMy9C,UAAUz9C,IAAMuB,QACpC0qD,aAAcjsD,IAAMy9C,UAAUz9C,IAAMuB,UAGhC22D,GAAoBl4D,IAAM+1C,MAAM,eAAgB,CACpDxuC,SAAUvH,IAAMs9C,OAChBhxC,YAAatM,IAAM29C,MAAMka,MAGrB3X,GAAgBlgD,IAAM+1C,MAAM,QAAS,CACzCx8B,QAASvZ,IAAMs9C,OACf6C,kBAAmBngD,IAAMy9C,UAAUz9C,IAAM29C,MAAM39C,IAAMs9C,SACrDx/B,uBAAwB9d,IAAMy9C,UAAUz9C,IAAM29C,MAAM39C,IAAMs9C,SAC1Dt7C,WAAYhC,IAAMs9C,OAClB8C,WAAYpgD,IAAMy9C,UAAUz9C,IAAMs9C,QAClC+C,WAAYrgD,IAAMy9C,UAAUz9C,IAAMs9C,QAClCr7C,WAAYjC,IAAMy9C,UAAUz9C,IAAMs9C,QAClCgD,WAAYtgD,IAAMy9C,UAAUz9C,IAAMs9C,QAClCp7C,WAAYlC,IAAMy9C,UAAUz9C,IAAMs9C,QAClCiD,WAAYvgD,IAAMy9C,UAAUz9C,IAAMs9C,QAClCn7C,QAASnC,IAAMy9C,UAAUz9C,IAAMs9C,QAC/B5+B,OAAQ1e,IAAMy9C,UAAUz9C,IAAMs9C,QAC9B/1C,SAAUvH,IAAMy9C,UAAUz9C,IAAMs9C,QAChCl7C,eAAgBpC,IAAMy9C,UAAUz9C,IAAMs9C,QACtC7qD,GAAIuN,IAAMuB,OACVi/C,WAAYxgD,IAAMuB,OAClBsH,MAAO7I,IAAMy9C,UAAUz9C,IAAMs9C,UCpClBpF,GDuCwBl4C,IAAMwR,QACzCxR,IAAM+1C,MAAM,mBAAoB,CAC9Bl+C,MAAOmI,IAAMy9C,UAAUz9C,IAAMm+C,OAAO,KACpCgB,UAAU,EACVsH,WAAYzmD,IAAMm+C,OAAO,IACzBsL,YAAazpD,IAAM29C,MAAMua,IACzB9jE,UAAW,mBACXymB,WAAY7a,IAAM29C,MAAMuC,IACxBx9C,OAAQ1C,IAAMm+C,OAAO,MAEvBqZ,GACAG,GACArZ,IE9CCmB,MAAM,iBAAO,CACZ0Y,cAAc,IAAAlnD,EACmB5Z,KAAItD,GAAQ,oBAAqB,IAEhE,MAAO,CAHKkd,EACJoH,SADIpH,EACMqH,cCOrB5jB,QAAQ,SAAAwhD,GAAI,MAAK,CAChBkiB,UADgB,SACN11D,GACRwzC,EAAKxzC,OAASA,MAGjBhO,QAAQ,SAAAwhD,GAAI,MAAK,CAChBqG,WADgB,WAEd,IAAM8b,EAAiB9/D,KACrB,SAAAC,KAAG4Q,UAAH,IAAchQ,EAAdZ,EAAcY,OAAd,OAA4BsN,KAAQtN,IADfb,CAErB29C,EAAKh0B,YACD45B,EAAgBxpC,KAAO+lD,EAAgB,SAAC9lD,EAAKqJ,EAAM+I,GACvD,IAAMvhB,EAAWuhB,EAAQ,EACnBhiB,EAAQ,CACZS,WACAuU,eAAgB8mC,KACdlmD,KAAO,cACPoiB,KAAO,CAAC,gBAAiB,eAFX8jC,CAGd7iC,EAAKxiB,QACPwe,YAAa,oBACbC,UAAWqlC,OAAOthC,EAAKxS,YAgBzB,OAbK1C,KAAQ/D,EAAMgV,kBACjB0+C,KACE1zD,EACA,OACA,CAAC,eAAgB,gBAEnB0zD,KACE9jD,EACAnP,EACAT,IAIG4P,GACN,IAEH2jC,EAAKkiB,UAAUtc,GAEfv5C,GAAyB,CACvBE,KAAM,mBACNC,OAAQwzC,EAAKxzC,UAIjBu1C,gBAzCgB,SAyCAvhD,EAAqBiM,GAA6B,IACxDS,EAAaT,EAAbS,SACF04C,EAAa9nD,OAAAuI,EAAA,EAAAvI,CAAA,GACdkiD,EAAKxzC,OADS1O,OAAAqF,GAAA,EAAArF,CAAA,GAEhBoP,EAFgBpP,OAAAuI,EAAA,EAAAvI,CAAA,GAGZ2O,EAHY,CAIfjM,WAIJw/C,EAAKkiB,UAAUtc,IAIjBwc,oBAvDgB,WAwDd,IAAM7qD,EAAQyoC,EAAKiiB,QAEnBjiB,EAAKuQ,WAAan0C,KAChB7E,EACA,SAAC8E,EAAKqJ,GACJ,IAAM28C,EAAkDlhE,KAAI6+C,EAAKuQ,WAAY7qC,EAAM,IAC7E48C,EAAiBrhE,KAAIohE,EAAoB,SAAC9hE,GAAW,IAAAwa,EAMrD5Z,KACFqQ,KAAKwuC,EAAKuT,YAAa,CAAEliD,SAAU9Q,EAAO8Q,WAC1C,iBACA,IAPAuwD,EAFuD7mD,EAEvD6mD,cACAC,EAHuD9mD,EAGvD8mD,cACAC,EAJuD/mD,EAIvD+mD,aACAC,EALuDhnD,EAKvDgnD,aAOF,OAAOjkE,OAAAuI,EAAA,EAAAvI,CAAA,GACFyC,EADL,CAEEqhE,gBACAC,gBACAC,eACAC,mBAIJ,OADA5B,KAAI9jD,EAAKqJ,EAAM48C,GACRjmD,GAET,QC1FgE7d,QAAQ,SAAAwhD,GAAI,MAAK,CACvFuiB,sBADuF,SACjE3hE,GACpBo/C,EAAKuT,YAAc3yD,EAAKI,MAAQ,GAChCg/C,EAAKuhB,SAAS,MACdvhB,EAAKoiB,0BAGN5jE,QAAQ,SAAAwhD,GAAI,MAAK,CAChBwiB,iBADgB,WAEd,IAAM7/D,EAAW,GAAAjG,OAAME,EAAN,SACXoO,EAAUysB,KACdxxB,KACA8iD,KACA1mD,KAAO,CAAEogE,YAAa,MACtBxhE,KAAI,YAJUw2B,CAKduoB,EAAKuQ,YAED3tD,EAAkB,CACtBE,KAAMC,KAAKC,UAAU,CACnBE,OAAQ,CAAE6T,aAAc/L,GACxB/H,KAAM,uBAERJ,OAAQ,QAGV,OAAOQ,kBAAQ,CACbT,SACAY,QAASw8C,EAAKn+C,SACdyB,UAAW,WAAQ08C,EAAK0hB,aAAY,IACpCn+D,UAAWy8C,EAAKuiB,sBAChB5/D,YC/BqEnE,QAAQ,SAAAwhD,GAAI,MAAK,CAC5F0T,kBAD4F,SAC1E9yD,GAChB,IAAM8hE,EAAyBrgE,KAAkB,SAAlBA,CAA4BzB,EAAKI,MAEhEg/C,EAAKuQ,WAAan0C,KAChBsmD,EACA,SACErmD,EACAqJ,GAEA,IAAM1a,EAAUqR,EAAIqJ,EAAK8C,SAAW,GAUpC,OARAnM,EAAIqJ,EAAK8C,QAAT,GAAA9rB,OAAAoB,OAAAgW,GAAA,EAAAhW,CACKkN,GADL,CAAAlN,OAAAuI,EAAA,EAAAvI,CAAA,GAGO4nB,EAHP,CAIIjB,OAAQ,MAILpI,GACN,IAGL2jC,EAAKuhB,SAAS,MAGdvhB,EAAKwiB,uBAGNhkE,QAAQ,SAAAwhD,GAAI,MAAK,CAChB+S,aADgB,SACHxqC,GACX,IAAM5lB,EAAW,GAAAjG,OAAME,EAAN,SACXgG,EAAkB,CACtBE,KAAMC,KAAKC,UAAU,CACnBE,OAAQ,CACN8K,YAAaua,EACbkrC,WAAW,GAEbxwD,KAAM,2BAERJ,OAAQ,QAGV,OAAOQ,kBAAQ,CACbT,SACAY,QAASw8C,EAAKn+C,SACdyB,UAAW,WAAQ08C,EAAK0hB,aAAY,IACpCn+D,UAAWy8C,EAAK0T,kBAChB/wD,YC5CoEnE,QAAQ,SAAAwhD,GAAI,MAAK,CAC3F2iB,gBAD2F,SAC3E/hE,GAEdo/C,EAAKr7B,WAAa/Y,GAAchL,EAAKI,MAEnCwP,KAAQwvC,EAAKxzC,SAC0C,OAApDG,OAAOC,aAAaC,QAAQ,oBAE/BmzC,EAAKqG,aAGLrG,EAAKxzC,OAASzJ,KAAK2J,MAAMC,OAAOC,aAAaC,QAAQ,qBAEvDmzC,EAAK0hB,aAAY,GACjB1hB,EAAKuhB,SAAS,UAGf/iE,QAAQ,SAAAwhD,GAAI,MAAK,CAChBoX,gBADgB,SACA7uC,GACd,IAAM5lB,EAAW,GAAAjG,OAAME,EAAN,SACXgG,EAAkB,CACtBE,KAAMC,KAAKC,UAAU,CACnBE,OAAQ,CACN8K,YAAa,CAACua,GACdra,YAAajN,KAAI,WAAJA,CAAgB++C,EAAK2G,aAClC14C,aACFwpB,KACExxB,KACA8iD,KACA9nD,KAAI,YAHNw2B,CAIEuoB,EAAKuQ,aAEPttD,KAAM,0BAERJ,OAAQ,QAEV,OAAOQ,kBAAQ,CACbT,SACAY,QAASw8C,EAAKn+C,SACdyB,UAAW,WACT08C,EAAKuhB,SAAS,MACdvhB,EAAK0hB,aAAY,IAEnBn+D,UAAWy8C,EAAK2iB,gBAChBhgE,YC3DLnE,QAAQ,SAAAwhD,GAAI,MAAK,CAChBygB,iBAAkBlY,YAAI/vC,GAAAC,EAAAC,KACpB,SAAU+nD,EAAiBl4C,GAA3B,OAAA/P,GAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAnX,MAAA,OAGI,OAHJmX,EAAAC,KAAA,EAAAD,EAAAnX,KAAA,EAGUs+C,EAAK+S,aAAaxqC,GAH5B,OAKI,OALJ1P,EAAAnX,KAAA,EAKUs+C,EAAKwG,kBAAkB,GALjC,OAOI,OAPJ3tC,EAAAnX,KAAA,EAOUs+C,EAAKoX,gBAAgB7uC,GAP/B,OAAA1P,EAAAnX,KAAA,gBAAAmX,EAAAC,KAAA,EAAAD,EAAAq6C,GAAAr6C,EAAA,SASImnC,EAAKn+C,SAALgX,EAAAq6C,IATJ,yBAAAr6C,EAAAG,SAAUynD,EAAV,oBNL+CjM,SOA/CtN,GAAQp9C,IAAM+1C,MAAM,cAAe,CACvClrC,EAAG7K,IAAMs9C,OACTgH,EAAGtkD,IAAMs9C,OACTiH,EAAGvkD,IAAMs9C,SAGLwb,GAAQ94D,IAAM+1C,MAAM,QAAS,CACjCx8B,QAASvZ,IAAMs9C,OACf5kD,WAAYsH,IAAMuB,OAClBw3D,aAAc/4D,IAAMs9C,OACpBoK,WAAY1nD,IAAMuB,OAClBy3D,SAAUh5D,IAAMuB,OAChB03D,QAASj5D,IAAMuB,OACf23D,QAASl5D,IAAMuB,OACf43D,iBAAkBn5D,IAAMuB,OACxB63D,iBAAkBp5D,IAAMuB,OACxBugD,MAAO9hD,IAAMs9C,OACbuE,eAAgB7hD,IAAMs9C,OACtB+F,QAASrjD,IAAMs9C,OACfgG,YAAatjD,IAAMs9C,OACnBlkD,OAAQ4G,IAAMy9C,UAAUz9C,IAAM29C,MAAMP,KACpCic,WAAYr5D,IAAMy9C,UAAUz9C,IAAM29C,MAAMP,OAG7Bkc,GAAoBt5D,IAAM+1C,MAAM,oBAAqB,CAChE3hD,UAAW,oBACXoD,QAASwI,IAAM29C,MAAMmb,IACrB3Z,UAAU,EACVtnD,MAAOmI,IAAMy9C,UAAUz9C,IAAMm+C,OAAO,OCfhCtlD,GAAW,GAAAjG,OAAME,EAAN,SAEJymE,GAA8Bv5D,IAAM+1C,MAAM,IAAIrhD,QAAQ,SAAAwhD,GAAI,MAAK,CAC1EygB,iBAD0E,SACzD/V,EAAsBoD,GACrC,IAAMlrD,EAAkB,CACtBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,KAAM,gCACNC,OAAQ,CACN6qD,iBAAkBrD,EAClBsD,aAAcF,MAKpB,OAAOzqD,kBAAQ,CACbV,OACAC,SACAU,UAAW,WAET08C,EAAKiJ,UAAW,EAEhBjJ,EAAKr+C,MAAQ,KAEbq+C,EAAK1+C,QAAU,IAGjBiC,UAAWy8C,EAAKsjB,sBAEhB9/D,QAASw8C,EAAKn+C,YAIlByhE,sBA/B0E,SA+BpD1iE,GAMpBo/C,EAAK1+C,QAAUijB,KACbpjB,KAAIP,EAAM,wCAAyC,IACnD,aACA,QAGFo/C,EAAKr+C,MAAQ,KAEbq+C,EAAKiJ,UAAW,GAGlBpnD,SAhD0E,SAgDjEF,GAEPq+C,EAAKr+C,MAAQA,MC9DJ4hE,GAAyBz5D,IAAM+1C,MAAM,IAAI0J,MAAM,SAAAvJ,GAAI,MAAK,CAEnE8J,iBAEE,OAAO7oD,KAAI++C,EAAK1+C,QAAS,eCHhBkiE,GAAyB15D,IAAMwR,QAC1C8nD,GACAC,GACAE,IC0FaE,GA/EyB35D,IAAM+1C,MAAM,IAAIrhD,QAAQ,SAAAwhD,GAAI,MAAK,CACvE0jB,kBADuE,WAErE,IAAM/gE,EAAW,GAAAjG,OAAME,EAAN,SACXgG,EAAkB,CACtBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,KAAM,4BACNC,OAAQ,CAEN8K,YAAagyC,EAAK8J,WAClB57C,YAAajN,KAAI+D,GAAa,gBAIpC,OAAO3B,kBAAQ,CACbV,MACAC,SACAU,UAAW,WAET08C,EAAKrqC,QAAS,EAEdqqC,EAAKr+C,MAAQ,MAGf4B,UAAW,SAAC3C,GAAD,OAA+Bo/C,EAAK2jB,sBAAsB/iE,IAErE4C,QAAS,SAAC7B,GAAD,OAAgBq+C,EAAKn+C,SAASF,OAI3CgiE,sBA9BuE,SA8BjD/iE,GAEpB,IAAM4kB,EAAgB5Z,GAAchL,EAAKI,MAEzCg/C,EAAKpyC,MAAQwO,KACXoJ,EACA,SAACnJ,EAAD/Z,GAA8D,IAAtD+gB,EAAsD/gB,EAAtD+gB,QAASuE,EAA6CtlB,EAA7CslB,uBAAwB3b,EAAqB3J,EAArB2J,QAAS0G,EAAYrQ,EAAZqQ,MAEhD,GAAI0J,EAAIpQ,GAAU,CAChB,IAAM23D,EAAYziE,KAAIkb,EAAD,GAAA3f,OAASuP,EAAT,aAA8B,GAC7C3K,EAAUH,KAAIkb,EAAD,GAAA3f,OAASuP,EAAT,cAA+B,GAC5C43D,EAAgBj8C,GAA0B,GAGhDvL,EAAIpQ,GAAW,CAEb63D,MAAOznD,EAAIpQ,GAAS63D,MAAQ,EAE5BnxD,MAAO0J,EAAIpQ,GAAS0G,MAAQA,EAC5BrR,QAAO,GAAA5E,OAAAoB,OAAAgW,GAAA,EAAAhW,CAAMwD,GAAN,CAAe+hB,IACtB5F,OAAM,GAAA/gB,OAAAoB,OAAAgW,GAAA,EAAAhW,CAAM8lE,GAAN9lE,OAAAgW,GAAA,EAAAhW,CAAoB+lE,UAI5BxnD,EAAIpQ,GAAW,CACb63D,MAAO,EACPxiE,QAAS,CAAC+hB,GACV1Q,QACA8K,OAAQmK,GAtBgD,IA0BpDtmB,EAAY+a,EAAIpQ,GAAhB3K,QAGR,OAFA6+D,KAAI9jD,EAAD,GAAA3f,OAASuP,EAAT,YAA4B8H,KAAKzS,IAE7B+a,GACN,IAGL2jC,EAAKrqC,QAAS,GAGhB9T,SAxEuE,SAwE9DF,GAEPq+C,EAAKr+C,MAAQA,MCzDFoiE,GA5BsBj6D,IAClC+1C,MAAM,IACNC,SAAS,iBAAO,CACflyC,MAAO,MAER27C,MAAM,SAAAvJ,GAAI,MAAK,CACd8J,iBACE,OAAOF,YAAU5J,GAAMt/B,kBAAkBopC,YAG3Cka,4BACE,OAAO5nD,KACL4jC,EAAKpyC,MACL,SAAC2F,EAADjR,EAAoCjF,GAAQ,IAAjCymE,EAAiCxhE,EAAjCwhE,MAAOxiE,EAA0BgB,EAA1BhB,QAASqR,EAAiBrQ,EAAjBqQ,MACnBsxD,EAAcx5D,KAASwa,GAAkBpD,OAAOxkB,IAClDymE,EACA72D,KAAK3L,GAET,OAAOxD,OAAAuI,EAAA,EAAAvI,CAAA,GACFyV,EADLzV,OAAAqF,GAAA,EAAArF,CAAA,GAEGT,EAAMsV,EAAQsxD,KAGnB,QC5BF/c,GAAQp9C,IAAM+1C,MAAM,QAAS,CACjClrC,EAAG7K,IAAMs9C,OACTgH,EAAGtkD,IAAMs9C,OACTiH,EAAGvkD,IAAMs9C,SAGLS,GAAY/9C,IAAM+1C,MAAM,YAAa,CACzC9zC,WAAYjC,IAAMs9C,OAClBxgC,qBAAsB9c,IAAMuB,OAC5Bib,cAAexc,IAAMs9C,OACrBC,iBAAkBv9C,IAAMs9C,OACxBE,WAAYx9C,IAAMy9C,UAAUz9C,IAAMuB,QAClCoK,gBAAiB3L,IAAMuB,OACvBkB,KAAMzC,IAAMuB,OACZm8C,UAAW19C,IAAMy9C,UAAUz9C,IAAM29C,MAAM39C,IAAMuB,SAC7Cq8C,UAAW59C,IAAMy9C,UAAUz9C,IAAM29C,MAAM39C,IAAMuB,SAC7C5G,SAAUqF,IAAMs9C,OAChBvgC,sBAAuB/c,IAAMuB,OAC7Bu8C,WAAY99C,IAAMs9C,SAGdwb,GAAQ94D,IAAM+1C,MAAM,QAAS,CACjCx8B,QAASvZ,IAAMs9C,OACf5kD,WAAYsH,IAAMuB,OAClBw3D,aAAc/4D,IAAMs9C,OACpBoK,WAAY1nD,IAAMuB,OAClBy3D,SAAUh5D,IAAMuB,OAChB03D,QAASj5D,IAAMuB,OACf23D,QAASl5D,IAAMuB,OACf43D,iBAAkBn5D,IAAMuB,OACxB63D,iBAAkBp5D,IAAMuB,OACxBugD,MAAO9hD,IAAMs9C,OACbuE,eAAgB7hD,IAAMs9C,OACtB+F,QAASrjD,IAAMs9C,OACfgG,YAAatjD,IAAMs9C,OACnBlkD,OAAQ4G,IAAMy9C,UAAUz9C,IAAM29C,MAAMP,KACpCic,WAAYr5D,IAAMy9C,UAAUz9C,IAAM29C,MAAMP,OAG7Bgd,GAAwBp6D,IAAM+1C,MAAM,wBAAyB,CACxEv+C,QAASwI,IAAM7I,IAAI2hE,IACnBjtD,QAAQ,EACRhU,MAAOmI,IAAMy9C,UAAUz9C,IAAMm+C,OAAO,KACpCj8B,WAAYliB,IAAMy9C,UAAUz9C,IAAM29C,MAAMI,OAS3Bsc,GANoBr6D,IAAMwR,QACvC4oD,GACAT,GACAM,ICjDI/Z,GAAgBlgD,IAAM+1C,MAAM,QAAS,CACzCx8B,QAASvZ,IAAMs9C,OACf6C,kBAAmBngD,IAAMy9C,UAAUz9C,IAAM29C,MAAM39C,IAAMs9C,SACrDx/B,uBAAwB9d,IAAMy9C,UAAUz9C,IAAM29C,MAAM39C,IAAMs9C,SAC1Dt7C,WAAYhC,IAAMs9C,OAClB8C,WAAYpgD,IAAMy9C,UAAUz9C,IAAMs9C,QAClC+C,WAAYrgD,IAAMy9C,UAAUz9C,IAAMs9C,QAClCr7C,WAAYjC,IAAMy9C,UAAUz9C,IAAMs9C,QAClCgD,WAAYtgD,IAAMy9C,UAAUz9C,IAAMs9C,QAClCp7C,WAAYlC,IAAMy9C,UAAUz9C,IAAMs9C,QAClCiD,WAAYvgD,IAAMy9C,UAAUz9C,IAAMs9C,QAClCn7C,QAASnC,IAAMy9C,UAAUz9C,IAAMs9C,QAC/B/1C,SAAUvH,IAAMy9C,UAAUz9C,IAAMs9C,QAChC5+B,OAAQ1e,IAAMy9C,UAAUz9C,IAAMs9C,QAC9Bl7C,eAAgBpC,IAAMy9C,UAAUz9C,IAAMs9C,QACtC7qD,GAAIuN,IAAMuB,OACVi/C,WAAYxgD,IAAMuB,OAClBsH,MAAO7I,IAAMy9C,UAAUz9C,IAAMs9C,UCDlBgd,GDIqBt6D,IAAMwR,QACtCxR,IAAM+1C,MAAM,qBAAsB,CAChCl+C,MAAOmI,IAAMy9C,UAAUz9C,IAAMm+C,OAAO,KACpCgB,UAAU,EACV/qD,UAAW,gBACXymB,WAAY7a,IAAM29C,MAAMuC,IACxBx9C,OAAQ1C,IAAMm+C,OAAO,IACrBtlD,IAAKmH,IAAMuB,SAGb+8C,ICbC5pD,QAAQ,SAAAwhD,GAAI,MAAK,CAChBqkB,cADgB,SACFplB,GACZ5yC,GAAyB,CACvB9P,GAAI4E,KAAItD,GAAQ,mCAChB0O,KAAM0yC,EACNzyC,OAAQwzC,EAAKxzC,aAIlBhO,QAAQ,SAAAwhD,GAAI,MAAK,CAEhBqG,WAFgB,SAELpH,GACT,IAAMkjB,EAAiB9/D,KAAO29C,EAAKh0B,WAAY,SAAA1pB,GAAA,OAAAA,EAAGY,OAAoBhG,SAEtE8iD,EAAKxzC,OAAS4P,KAAO+lD,EAAgB,SAAC9lD,EAAKqJ,EAAM+I,GAC/C,IAAMvhB,EAAWuhB,EAAQ,EACnBhiB,EAAgB,CACpBS,WACAuU,eAAgBpf,KAAOqjB,EAAKxiB,OAAQ,CAAEokD,WAAY,YAClD5lC,YAAa,oBACbC,UAAWqlC,OAAOthC,EAAKxS,YAOzB,OAJK1C,KAAQ/D,EAAMgV,iBACjB0+C,KAAI9jD,EAAKnP,EAAUT,GAGd4P,GACN,IAEH2jC,EAAKqkB,cAAcplB,OC3CnBqlB,GACE,OADFA,GAEA,KCeOC,GDV2BH,GACrC5lE,QAAQ,SAAAwhD,GAAI,MAAK,CAChBpB,SADgB,SAEdryC,EACA0yC,EACAx9B,GAEA,IAAMvU,EAAmBD,KAAK+yC,EAAKxzC,QAAU,EAC7CwzC,EAAKxzC,OAAL1O,OAAAuI,EAAA,EAAAvI,CAAA,GACKkiD,EAAKxzC,OADV1O,OAAAqF,GAAA,EAAArF,CAAA,GAEGoP,EAAW,CACVA,WACAuU,iBACAC,YAAa,oBACbC,UAAWpV,KAGfyzC,EAAKqkB,cAAcplB,IAErBjyC,YAlBgB,SAkBJE,EAAkB+xC,GAC5B,IAAMwG,EAAatpD,KAAK6jD,EAAKxzC,QAEvBk5C,EAAeC,KAAK3F,EAAKxzC,OAAQU,GAEjC04C,EAAgBxpC,KACpBspC,EACA,SAACrpC,EAAKqJ,EAAMroB,GACV,IAAMmnE,EAAS3iD,OAAOxkB,GAStB,OARImnE,EAASt3D,IACXmP,EAAImoD,EAAS,GAAb1mE,OAAAuI,EAAA,EAAAvI,CAAA,GACKqD,KAAI6+C,EAAKxzC,OAAQnP,GADtB,CAEE6P,SAAUs3D,EAAS,KAIvBnoD,EAAIhf,GAAO8D,KAAI6+C,EAAKxzC,OAAQnP,GACrBgf,GAET,IAIF2jC,EAAKxzC,OAASm5C,KAAKC,EAAe34C,KAAKw4C,IACvCzF,EAAKqkB,cAAcplB,IAGrB10B,UA7CgB,SA8Cdrd,EACAX,EACA0yC,GAEAe,EAAKxzC,OAAL1O,OAAAuI,EAAA,EAAAvI,CAAA,GACKkiD,EAAKxzC,OADV1O,OAAAqF,GAAA,EAAArF,CAAA,GAEGoP,EAFHpP,OAAAuI,EAAA,EAAAvI,CAAA,GAGOqD,KAAI6+C,EAAKxzC,OAAQU,GAHxB,CAIIyU,UAAWpV,MAGfyzC,EAAKqkB,cAAcplB,IAErB4G,UA3DgB,SA4Dd34C,EACA4S,EACAm/B,GAEA,IAU2BwlB,EAcEC,EAxBvB1e,EAAqB/4C,KAAK+yC,EAAKxzC,QAC/By5C,EAAe9kD,KAAI6+C,EAAKxzC,OAAQU,GAChCg5C,EAAY/kD,KAAI6+C,EAAKxzC,OAAQ,CAACU,EAAW,IACzCi5C,EAAYhlD,KAAI6+C,EAAKxzC,OAAQ,CAACU,EAAW,IAE/C,GACG4S,IAASwkD,IAA6B,IAAbp3D,GACtB4S,IAASwkD,IAAkBp3D,IAAa84C,EAC5C,OAAO,KAELlmC,IAASwkD,KACXtkB,EAAKxzC,OAAL1O,OAAAuI,EAAA,EAAAvI,CAAA,GACKkiD,EAAKxzC,QADVi4D,EAAA,GAAA3mE,OAAAqF,GAAA,EAAArF,CAAA2mE,EAEGv3D,EAAW,EAFdpP,OAAAuI,EAAA,EAAAvI,CAAA,GAGOmoD,EAHP,CAII/4C,SAAUA,EAAW,KAJzBpP,OAAAqF,GAAA,EAAArF,CAAA2mE,EAMGv3D,EANHpP,OAAAuI,EAAA,EAAAvI,CAAA,GAOOooD,EAPP,CAQIh5C,cARJu3D,KAaE3kD,IAASwkD,KACXtkB,EAAKxzC,OAAL1O,OAAAuI,EAAA,EAAAvI,CAAA,GACKkiD,EAAKxzC,QADVk4D,EAAA,GAAA5mE,OAAAqF,GAAA,EAAArF,CAAA4mE,EAEGx3D,EAFHpP,OAAAuI,EAAA,EAAAvI,CAAA,GAGOqoD,EAHP,CAIIj5C,cAJJpP,OAAAqF,GAAA,EAAArF,CAAA4mE,EAMGx3D,EAAW,EANdpP,OAAAuI,EAAA,EAAAvI,CAAA,GAOOmoD,EAPP,CAQI/4C,SAAUA,EAAW,KARzBw3D,KAYF,OAAO1kB,EAAKqkB,cAAcplB,IAE5BxxC,WAvGgB,SAuGLwxC,GACTe,EAAKxzC,OAAS,GACdwzC,EAAKqG,WAAWpH,OC/FnBzgD,QAAQ,SAAAwhD,GAAI,MAAK,CAChBn+C,SADgB,SACPF,GACPq+C,EAAKr+C,MAAQA,EACbq+C,EAAKiJ,UAAW,GAGlB0Z,gBANgB,SAMA/hE,GAEdo/C,EAAKr7B,WAAa/Y,GAAchL,EAAKI,MACrC,IAAMuf,EAAgBpf,KACpB4B,KAAK2J,MAAMC,OAAOC,aAAaC,QAAQ,kBAAoB,MAC3D1L,KAAItD,GAAQ,oCAEV0iB,EACFy/B,EAAKxzC,OAAS+T,EAEdy/B,EAAKqG,WAAW,iBAElBrG,EAAKr+C,MAAQ,GACbq+C,EAAKiJ,UAAW,MAGnBzqD,QAAQ,SAAAwhD,GAAI,MAAK,CAKhBoX,gBALgB,SAKA91D,EAAwB8C,GACtC,IAAMxB,EAAkB,CACtBE,KAAMC,KAAKC,UAAU,CACnBE,OAAQ,CACN8K,YAAa1M,EACb4M,YAAajN,KAAI++C,EAAK2G,YAAa,YACnC14C,aAAc,CAAC7J,IAEjBnB,KAAM,0BAERJ,OAAQ,QAEV,OAAOQ,kBAAQ,CACbT,SACAY,QAASw8C,EAAKn+C,SACdyB,UAAW,WACT08C,EAAKiJ,UAAW,EAChBjJ,EAAKr+C,MAAQ,IAEf4B,UAAWy8C,EAAK2iB,gBAChBhgE,IAAKq9C,EAAKr9C,UAIfnE,QAAQ,SAAAwhD,GAAI,MAAK,CAChB2kB,mBAAoBpc,YAAI/vC,GAAAC,EAAAC,KACtB,SAAUisD,EAAVriE,GAAA,IAAAwpB,EAAAxqB,EAAA8C,EAAA,OAAAoU,GAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAnX,MAAA,OAOI,OANFoqB,EADFxpB,EACEwpB,SACAxqB,EAFFgB,EAEEhB,QACA8C,EAHF9B,EAGE8B,SAHFyU,EAAAC,KAAA,EAAAD,EAAAnX,KAAA,EAOUs+C,EAAKwG,kBAAkB16B,GAPjC,OASI,OATJjT,EAAAnX,KAAA,EASUs+C,EAAK4G,cATf,OAWI,OAXJ/tC,EAAAnX,KAAA,EAWUs+C,EAAKoX,gBAAgB91D,EAAS8C,GAXxC,OAAAyU,EAAAnX,KAAA,iBAAAmX,EAAAC,KAAA,GAAAD,EAAAq6C,GAAAr6C,EAAA,SAaImnC,EAAKn+C,SAALgX,EAAAq6C,IAbJ,yBAAAr6C,EAAAG,SAAU2rD,EAAV,qBC3EAhiE,GAAW,GAAAjG,OAAME,EAAN,SAEJgoE,GAAqBL,GAA4B/P,OAAO,CACnE7yD,MAAO,GACPsnD,UAAU,EACV/qD,UAAW,gBACXymB,WAAY,GACZnY,OAAQ,GACR4d,cAAe,GACfznB,SCPIqnD,GAAgBlgD,IAAM+1C,MAAM,QAAS,CACzCx8B,QAASvZ,IAAMs9C,OACf6C,kBAAmBngD,IAAMy9C,UAAUz9C,IAAM29C,MAAM39C,IAAMs9C,SACrDx/B,uBAAwB9d,IAAMy9C,UAAUz9C,IAAM29C,MAAM39C,IAAMs9C,SAC1Dt7C,WAAYhC,IAAMs9C,OAClB8C,WAAYpgD,IAAMy9C,UAAUz9C,IAAMs9C,QAClC+C,WAAYrgD,IAAMy9C,UAAUz9C,IAAMs9C,QAClCr7C,WAAYjC,IAAMy9C,UAAUz9C,IAAMs9C,QAClCgD,WAAYtgD,IAAMy9C,UAAUz9C,IAAMs9C,QAClCp7C,WAAYlC,IAAMy9C,UAAUz9C,IAAMs9C,QAClCiD,WAAYvgD,IAAMy9C,UAAUz9C,IAAMs9C,QAClCn7C,QAASnC,IAAMy9C,UAAUz9C,IAAMs9C,QAC/B/1C,SAAUvH,IAAMy9C,UAAUz9C,IAAMs9C,QAChC5+B,OAAQ1e,IAAMy9C,UAAUz9C,IAAMs9C,QAC9Bl7C,eAAgBpC,IAAMy9C,UAAUz9C,IAAMs9C,QACtC7qD,GAAIuN,IAAMuB,OACVi/C,WAAYxgD,IAAMuB,OAClBsH,MAAO7I,IAAMy9C,UAAUz9C,IAAMs9C,UCnBlByd,GDsBmB/6D,IAAMwR,QACpCxR,IAAM+1C,MAAM,mBAAoB,CAC9BoJ,UAAU,EACVzoC,kBAAmB1W,IAAMwqD,QACzBp2D,UAAW,cACXymB,WAAY7a,IAAM29C,MAAMuC,IACxBx9C,OAAQ1C,IAAMm+C,OAAO,IACrBtlD,IAAKmH,IAAMuB,SAEbi2D,GACAG,GAEArZ,IErBC5pD,QAAQ,SAAAwhD,GAAI,MAAK,CAChB8kB,cADgB,SACFngD,GAEZq7B,EAAKr7B,WAAaA,GAEpBu9C,UALgB,SAKN11D,GACRwzC,EAAKxzC,OAASA,MAGjBhO,QAAQ,SAAAwhD,GAAI,MAAK,CAEhBqG,WAFgB,WAGd,IAAM8b,EAAiB9/D,KAAO29C,EAAKh0B,WAAY,SAAA1pB,GAAA,OAAAA,EAAGY,OAAoBhG,SAEhE0oD,EAAgBxpC,KAAO+lD,EAAgB,SAAC9lD,EAAKqJ,EAAM+I,GACvD,IAAMvhB,EAAWuhB,EAAQ,EACnBhiB,EAAgB,CACpBS,WACAuU,eAAgBpf,KAAOqjB,EAAKxiB,OAAQ,CAAEokD,WAAY,YAClD5lC,YAAa,oBACbC,UAAWqlC,OAAOthC,EAAKxS,YAOzB,OAJK1C,KAAQ/D,EAAMgV,iBACjB0+C,KAAI9jD,EAAKnP,EAAUT,GAGd4P,GACN,IAEH2jC,EAAKkiB,UAAUtc,GAEfv5C,GAAyB,CACvBE,KAAM,cACNC,OAAQwzC,EAAKxzC,UAIjBk0C,mBA7BgB,WA8BdV,EAAKx/B,mBAAqBw/B,EAAKx/B,sBChClChiB,QAAQ,SAAAwhD,GAAI,MAAK,CAChBn+C,SADgB,SACPF,GACPq+C,EAAKuhB,SAAS5/D,GACdq+C,EAAK0hB,aAAY,IAGnBiB,gBANgB,SAMA/hE,GACd,IAAM6f,EAAc1d,KAAK2J,MAAMC,OAAOC,aAAaC,QAAQ,gBAAkB,MAE7EmzC,EAAK8kB,cAAcl5D,GAAchL,EAAKI,OAEjCwP,KAAQiQ,GAGXu/B,EAAKqG,aAFLrG,EAAKkiB,UAAUzhD,GAIjBu/B,EAAKuhB,SAAS,MACdvhB,EAAK0hB,aAAY,OAGpBljE,QAAQ,SAAAwhD,GAAI,MAAK,CAKhBoX,gBALgB,SAKA91D,EAAwBgN,GACtC,IAAM1L,EAAkB,CACtBE,KAAMC,KAAKC,UAAU,CACnBE,OAAQ,CACN8K,YAAa1M,EACb4M,YAAajN,KAAI++C,EAAK2G,YAAa,YACnCn4C,WAAYF,GAEdrL,KAAM,wBAERJ,OAAQ,QAEV,OAAOQ,kBAAQ,CACbT,SACAY,QAASw8C,EAAKn+C,SACdyB,UAAW,WACT08C,EAAK0hB,aAAY,GACjB1hB,EAAKuhB,SAAS,OAEhBh+D,UAAWy8C,EAAK2iB,gBAChBhgE,IAAKq9C,EAAKr9C,UAIfnE,QAAQ,SAAAwhD,GAAI,MAAK,CAChB+kB,iBAAkBxc,YAAI/vC,GAAAC,EAAAC,KACpB,SAAUqsD,EAAVziE,GAAA,IAAAhB,EAAAgN,EAAA,OAAAkK,GAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAnX,MAAA,OAMI,OALFJ,EADFgB,EACEhB,QACAgN,EAFFhM,EAEEgM,OAFFuK,EAAAC,KAAA,EAAAD,EAAAnX,KAAA,EAMUs+C,EAAKwG,kBAAkB,GANjC,OAQI,OARJ3tC,EAAAnX,KAAA,EAQUs+C,EAAKoX,gBAAgB91D,EAASgN,GARxC,OAAAuK,EAAAnX,KAAA,gBAAAmX,EAAAC,KAAA,EAAAD,EAAAq6C,GAAAr6C,EAAA,SAUImnC,EAAKuhB,SAAL1oD,EAAAq6C,IAVJ,yBAAAr6C,EAAAG,SAAU+rD,EAAV,oBFvEoDvQ,OAAO,CAC/D7yD,MAAO,KACPsnD,UAAU,EACVzoC,mBAAmB,EACnBtiB,UAAW,cACXymB,WAAY,GACZnY,OAAQ,GACR4d,cAAe,GACfznB,IAAKlG,IGiEMuoE,GA1CmB1pD,aAC9B8L,YACE,YACA,kBACA,WAEFk7B,GACE,SAAA7wC,GAAA,IAAG5Q,EAAH4Q,EAAG5Q,OAAH,OAAA4Q,EAAW5D,gBAAwCrN,KAAKK,KAE1Ds+C,aAAsB,CACpBC,kBADoB,WACA,IAAAC,EAMdrhD,KAAKV,MAJIkE,EAFK69C,EAEhB/9C,QAAWE,KACXX,EAHgBw+C,EAGhBx+C,OACAgN,EAJgBwxC,EAIhBxxC,gBACak3D,EALG1lB,EAKhBwE,UAAakhB,iBAITE,EAAqB9jE,KAAI0M,EAAiB,CAAC,OAAQhN,IACnDqkE,EAAa/jE,KAAIK,EAAM,CAACX,EAAQ,YAChCskE,EAAe/oD,KACnB8oD,EACA,SAAC7oD,EAAoBqJ,GAInB,OAHIjb,KAASw6D,EAAoBv/C,EAAKrC,UACpChH,EAAIlR,KAAK0W,OAAO6D,EAAKjO,kBAEhB4E,GACN,IAEL0oD,EAAiB,CACfzjE,QAAS2jE,EACT32D,OAAM,CAAGuT,OAAOhhB,IAAVnE,OAAAoB,OAAAgW,GAAA,EAAAhW,CAAsBqnE,SAIlC7iB,GACE,SAAA5wC,GAAA,OAAAA,EAAGmyC,UAA4BoF,WAEjC/kC,IAG6BkhD,CAzDE,SAAA9iE,GAAA,IAC/BzB,EAD+ByB,EAC/BzB,OAEE2L,EAH6BlK,EAE/BuhD,UACEr3C,OAH6B,OAM/B8W,EAAA7K,EAAA8K,cAAA,WACED,EAAA7K,EAAA8K,cAACqnC,GAAD,CACE3qC,UAAWsgC,GACX/zC,OAAQA,EACR3L,OAAQA,OCkDRhD,GAAS,GAETgM,GAAU,IADAwR,GAAezd,GACf,CAAYC,IACtBuB,GAAS,IAAIimE,SAAYC,OAAO1oE,E3OxEb,CACvB,CAAE2oE,OAAQ,KAAM3L,MAAO,6CAAWp2C,UAAW,MAC7C,CAAE+hD,OAAQ,KAAM3L,MAAO,UAAWp2C,UAAW,MAC7C,CAAE+hD,OAAQ,KAAM3L,MAAO,eAAap2C,UAAW,MAQ/C,CAAE+hD,OAAQ,KAAM3L,MAAO,aAAWp2C,UAAW,MAS7C,CAAE+hD,OAAQ,KAAM3L,MAAO,6BAAUp2C,UAAW,Q2OqDxC24B,GAAOh/B,GAAUkoD,SAAYG,eAAgB37D,IAE7C47D,GAAe37D,IAClB+1C,MAAM,YAAa,CAClBiP,uBAAwBhlD,IAAM47D,SAASC,GAA6B,IACpE/gB,mBAAoB96C,IAAM47D,SAASxE,GAAqB,IACxD0E,sBAAuB97D,IAAM47D,SAASvB,GAA4B,IAClEzjD,kBAAmB5W,IAAM47D,SAASlC,GAAwB,IAC1D1f,4BAA6Bh6C,IAAM47D,SACjClb,GAEA,IAEFzG,4BAA6Bj6C,IAAM47D,SACjC9W,GAEA,IAEFplC,eAAgB1f,IAAM47D,SAAStlB,GAAgB,IAC/Cie,mBAAoBv0D,IAAM47D,SAAS9H,GAAmB,MAEvDpJ,SAEH12D,OAAOsW,OAAOvW,GAAdC,OAAAuI,EAAA,EAAAvI,CAAA,CACE+nE,wBACAjiB,eACAkiB,mBACAlkB,gBACA+C,eACA92C,mBACA4Z,aACArnB,WAEA2lE,UAAW,GACX5nE,KAAM,IAAIoB,GAAK1B,IACfyD,QAAS,IAAI0kE,GAAQnoE,IACrBmkD,cACAikB,WAAYZ,SAAYa,WAAW1R,OAAO,CACxCh1C,QAAS5iB,EACTupE,MAAO,eAGTC,SAAU,IAAI13D,GAAS7Q,IACvB0lD,WAAY,IAAI8iB,GAAWxoE,IAC3BmhD,cAAe,IAAIsnB,GAAczoE,IACjCs5D,YAAa,IAAIoP,GAAY1oE,IAC7Bw5D,UAAW,IAAImP,GAAU3oE,IACzBgmD,UAAWghB,GACXnhB,YAAakhB,GAEb19D,MAAO,IAAIuU,GAAM5d,IAEjB4oE,UAAW,IAAIC,GAAU7oE,IAEzB+H,SAAU,IAAI+gE,GAAS9oE,IAEvBgI,WAAY,IAAI+gE,GAAW/oE,IAE3B8Q,SAAU,IAAIk4D,GAAShpE,IACvBqmD,aAAc,IAAI8T,GAAan6D,IAE/BypB,YAAa,IAAIw/C,GAAYjpE,IAC7BkpE,YAAa,IAAI1B,SAAY2B,YAAYpqE,EAAiB,KAC1DqqE,OAAQ,IAAI5B,SAAY6B,OAAO,CAC7BC,aAActqE,IAEhBuqE,OAAQ,IAAI/B,SAAYgC,OAAOzqE,GAC/B0qE,aAAc,IAAIjC,SAAYkC,aAAa3qE,GAC3C4qE,KAAM,IAAInC,SAAYoC,KAAK7qE,EAAiB8qE,GAE5CC,UAAW,IAAIxrB,GAAKv/C,EAAiB,SAAUwC,IAE/CwoE,QAAS,IAAIzrB,GAAKv/C,EAAiB,OAAQwC,IAC3CA,UACAyK,YACG47D,KAGU5nE,+BC1EFgqE,GAvBIvsD,aACf+L,aACE,WACA,gBACA,GAEFA,aACE,gBACA,sBACA,gBAGFrE,aAAqD,CACnDC,aAAc,SAAAxR,GAAA,IAAGq2D,EAAHr2D,EAAGq2D,aAAH,OAAsB,kBAAMA,GAAa,KAEvDC,YAAa,SAAAr2D,GAAA,IAAGs2D,EAAHt2D,EAAGs2D,OAAH,OAAgB,SAAChsE,GAC5BA,EAAE4S,iBACFo5D,QAGJ7kD,eAG0B8kD,CAlEE,SAAA3lE,GAAA,IAC5Bua,EAD4Bva,EAC5Bua,SACAkrD,EAF4BzlE,EAE5BylE,YACAD,EAH4BxlE,EAG5BwlE,aAH4B,OAK5BxkD,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,uBACbF,EAAA7K,EAAA8K,cAAA,KACE8C,QAAS,kBAAMyhD,GAAcjrD,IAC7B2G,UACEC,KAAG,sDACD,qCAEJH,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,iBACbF,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAE,uBAETmW,EAAA7K,EAAA8K,cAAA,KAAGC,UAAU,gBACbF,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAE,oBAAoBqW,UAAU,sBAGrC3G,GACEyG,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,oDACbF,EAAA7K,EAAA8K,cAAA,MAAIC,UAAU,iBACXviB,KAAIpE,EAAc,SAACqrE,EAAM37D,GAAP,OACjB+W,EAAA7K,EAAA8K,cAAA,UACED,EAAA7K,EAAA8K,cAAA,KACEO,KAAI,GAAApnB,OAAKC,EAAL,KAAAD,OAAawrE,IAEjB5kD,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAGZ,QAId+W,EAAA7K,EAAA8K,cAAA,UACED,EAAA7K,EAAA8K,cAAA,KAAGC,UAAU,cAAc6C,QAAS0hD,GAClCzkD,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAE,uBCXVg7D,GAVkB7sD,aAC7B8L,YAAO,QACPlD,IACAC,aAAsB,iBACnB,CACCikD,aAAY,GAAA1rE,OAAKC,EAAL,KAAAD,OAAaG,EAAaC,wBAE1ConB,IAG4BmkD,CA7BE,SAAA/lE,GAAA,IAC9B8lE,EAD8B9lE,EAC9B8lE,aAD8B,OAG9B9kD,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,uBACbF,EAAA7K,EAAA8K,cAAA,KACEO,KAAMskD,EACN5kD,UAAWC,KACT,sDACA,qCAGFH,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,iBACbF,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAE,yBAETmW,EAAA7K,EAAA8K,cAAA,KAAGC,UAAU,2BCyCN8kD,GAXQhtD,aACnB8L,YAAO,OAAQ,UACf+3B,aAA+B,CAC7BC,kBAD6B,WAERphD,KAAKV,MAAhB8B,OACDmpE,QAAU,CAAE/oE,KAAM,QAAS8f,QAASm7B,OAG/Cv2B,IAGkBskD,CA1CS,SAAAlmE,GAAA,IAAW0lE,EAAX1lE,EAAGklE,KAAQQ,OAAX,OAC3B1kD,EAAA7K,EAAA8K,cAAA,WAASC,UAAU,QACjBF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,UACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,eAAeilD,aAAW,qBACvCnlD,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,cACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,sBACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,mBACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,OACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,YAIrBF,EAAA7K,EAAA8K,cAAA,KAAGC,UAAU,cACXF,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAE,0BAETmW,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,2BAA2BjnB,GAAG,sBAC3C+mB,EAAA7K,EAAA8K,cAACQ,EAAA,aAAamiD,WAAd,OAEF5iD,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,uBACbF,EAAA7K,EAAA8K,cAAC4kD,GAAD,MACA7kD,EAAA7K,EAAA8K,cAACskD,GAAD,CAAcG,OAAQA,IACtB1kD,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,gBACbF,EAAA7K,EAAA8K,cAACQ,EAAA,MAAD,cCADmjD,GALU5rD,aACrB8L,YAAO,SAAU,QACjBlD,IAGoBwkD,CAjCE,SAAApmE,GAAA,IAAW0lE,EAAX1lE,EAAGklE,KAAQQ,OAAX,OACtB1kD,EAAA7K,EAAA8K,cAAA,WACED,EAAA7K,EAAA8K,cAAA,UAAQC,UAAU,UAChBF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,eAAeilD,aAAW,qBACvCnlD,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,cACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,sBACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,mBACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,OACbF,EAAA7K,EAAA8K,cAACS,GAAA,EAAD,CAAMR,UAAU,OAAOvkB,GAAG,SAIhCqkB,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,2BAA2BjnB,GAAG,sBAC3C+mB,EAAA7K,EAAA8K,cAACQ,EAAA,aAAamiD,WAAd,OAEF5iD,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,uBACbF,EAAA7K,EAAA8K,cAAC4kD,GAAD,MACA7kD,EAAA7K,EAAA8K,cAACskD,GAAD,CAAcG,OAAQA,IACtB1kD,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,gBACbF,EAAA7K,EAAA8K,cAACQ,EAAA,MAAD,kCCQD4kD,GARartD,aACxB4I,IACAC,aAA4C,SAAAzS,GAAc,IAAXlS,EAAWkS,EAAXlS,KAE7C,MAAO,CAAErB,KADIkE,KAAOnD,GAAc,SAAA1B,GAAA,IAAG8B,EAAH9B,EAAG8B,MAAH,OAAemL,KAASnL,EAAOE,QAK5CopE,CAxBS,SAAAtmE,GAAA,IAAYK,EAAZL,EAAGolB,MAAS/kB,IAAOxE,EAAnBmE,EAAmBnE,KAAnB,OAChCmlB,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KACG1lB,KAAI9C,EAAM,SAAAsT,GAAA,IAAGtS,EAAHsS,EAAGtS,MAAOC,EAAVqS,EAAUrS,OAAQC,EAAlBoS,EAAkBpS,KAAlB,OACTikB,EAAA7K,EAAA8K,cAAA,MAAIC,UAAU,mBAAmBnmB,IAAKgC,GACpCikB,EAAA7K,EAAA8K,cAACslD,GAAA,EAAD,CACE5pE,GAAE,GAAAvC,OAAKiG,GAALjG,OAAW2C,GACbypE,gBAAgB,SAChB3pE,MAAOA,GAEPmkB,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAG/N,WC+DL2pE,WA1CYztD,aACvB8L,YACE,SACA,OACA,UACA,QACA,WAEFpE,aAAgC,CAC9BiF,YAAa,SAAAxW,GAAA,IACApR,EADAoR,EACXrR,QAAWC,MADA2oE,EAAAv3D,EAEX5H,QACE8L,EAHSqzD,EAGTrzD,OACAszD,EAJSD,EAITC,aAEF9qE,EANWsT,EAMXtT,KANW+qE,EAAAz3D,EAOXvK,MACEiiE,EARSD,EAQTC,yBACAzqD,EATSwqD,EASTxqD,WATS,OAWP,SAACniB,GAAD,OAAgB,SAACP,GACrBA,EAAE4S,iBACE+G,IACFxX,EAAK+F,aAAa3H,GAClB0sE,GAAa,GACbvqD,EAAW,gBACXyqD,IACA9oE,UAIN8+C,aAAkC,CAChCC,kBADgC,YAK9Bj7C,EADInG,KAAKV,MADPuM,QAAW1F,2BAKjB+f,IAGuBklD,CArES,SAAA9mE,GAAA,IAChC2lB,EADgC3lB,EAChC2lB,YACAohD,EAFgC/mE,EAEhC+mE,QACU7pE,EAHsB8C,EAGhClD,OAAUI,KACVkoB,EAJgCplB,EAIhColB,MAJgC4hD,EAAAhnE,EAKhCnE,KACEgC,EAN8BmpE,EAM9BnpE,OACAqB,EAP8B8nE,EAO9B9nE,KAP8B,OAUhC8hB,EAAA7K,EAAA8K,cAAA,MAAIC,UAAU,cACX6lD,EACG/lD,EAAA7K,EAAA8K,cAAColD,GAAD,CAAWjhD,MAAOA,EAAOloB,KAAMA,IAC/BgC,EAAKP,IAAI,SAAAhB,GAAG,OACZqjB,EAAA7K,EAAA8K,cAAA,MAAIlmB,IAAK4C,EAAKujB,UAAU,oBACtBF,EAAA7K,EAAA8K,cAAA,KACEO,KAAK,GACLN,UAAWC,KAAG,CAAEtjB,OAAQA,IAAWF,IACnComB,QAAS4B,EAAYhoB,IAErBqjB,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAGlN,YCjCPinE,GAAS,SAAA5kE,GAAA,IAAGolB,EAAHplB,EAAGolB,MAAH,OACpBpE,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,6BACbF,EAAA7K,EAAA8K,cAACgmD,GAAD,CAAWF,SAAS,EAAO3hD,MAAOA,2BC6LzB8hD,GAhHWluD,aACtB0H,aAAa,CACXymD,cAAe,kBAAM,SAAAh4D,GAaf,IAAAi4D,EAAAj4D,EAZJk4D,UAESC,EAULF,EAVF7gE,MAEOghE,EAQLH,EARF5gE,MAQEghE,EAAAr4D,EANJs4D,OAESC,EAILF,EAJFjhE,MAEOohE,EAELH,EAFFhhE,MAOIohE,EAAkC,EAA3BzP,KAAKC,IAAImP,EAASI,GACzBE,EAAO1P,KAAKC,IAAIkP,EAASI,GACzB/sE,EAAQw9D,KAAK2P,KAAK3P,KAAA4P,IAACF,EAAQ,GAAT1P,KAAA4P,IAAeH,EAAQ,IAE3CI,EAAkC,IAA1B7P,KAAK8P,KAAKL,EAAOjtE,GAAew9D,KAAK+P,GAejD,OAZIR,GAASJ,GAAUK,EAAQJ,IAC7BS,EAAQ,IAAMA,GAGZN,EAAQJ,GAAUK,GAASJ,IAC7BS,EAAQ,IAAMA,GAGZN,EAAQJ,GAAUK,EAAQJ,IAC5BS,GAAS,KAGJ,CACLrtE,QACAwtE,OAAQH,OAKdtnD,aAAa,CACX0nD,YAAc,SAAAh5D,GAAA,IACZ+3D,EADY/3D,EACZ+3D,cADYkB,EAAAj5D,EAEZk5D,cACE5rE,EAHU2rE,EAGV3rE,KACAwV,EAJUm2D,EAIVn2D,OACAvV,EALU0rE,EAKV1rE,GALU,OAOR,WACJ,OAAKkC,KAAInC,EAAM,SAAS,IAClBmC,KAAInC,EAAM,SAAS,IACnBmC,KAAIlC,EAAI,SAAS,IACjBkC,KAAIlC,EAAI,SAAS,GAIlBkC,KAAIqT,EAAQ,UAAYrT,KAAIqT,EAAQ,SAShC,CACLq2D,SATepB,EAAc,CAC7BE,UAAW3qE,EACX+qE,OAAQv1D,IAQRs2D,SANerB,EAAc,CAC7BE,UAAWn1D,EACXu1D,OAAQ9qE,KAYL,CAAE4rE,SAJQpB,EAAc,CAC7BE,UAAW3qE,EACX+qE,OAAQ9qE,KApBD,KAwBX8rE,gBAAiB,SAAAvtE,GAAA,IAAAwtE,EAAAxtE,EACfotE,cACE5rE,EAFagsE,EAEbhsE,KACAwV,EAHaw2D,EAGbx2D,OACAvV,EAJa+rE,EAIb/rE,GAJa,OAMX,WACJ,IAAMgsE,EAAa9pE,KAAInC,EAAM,SAAWmC,KAAIlC,EAAI,QAEhD,OAAOwkB,KACL,UADO3lB,OAAAqF,GAAA,EAAArF,CAAA,CAGL0W,OAASrT,KAAIqT,EAAQ,UAAYrT,KAAIqT,EAAQ,UAHxC,UAAA9X,OAIMuuE,GAAeA,QAKlCjoD,aAAa,CAEXkoD,aAAc,kBAAM,SAAAZ,GAAK,gBAAA5tE,OAAc4tE,EAAd,YAG3BnmD,aAAU,SAAApS,GAAA,MAAsB,CAC9Bo5D,UAAUT,EADF34D,EAAG24D,kBAMQU,CA/JE,SAAA9oE,GAYX,IAXZyoE,EAWYzoE,EAXZyoE,gBACAG,EAUY5oE,EAVZ4oE,aACAC,EASY7oE,EATZ6oE,SASYE,EAAA/oE,EARZ6oE,SACEN,EAOUQ,EAPVR,SACAC,EAMUO,EANVP,SAMUQ,EAAAhpE,EAJZsoE,cACE5rE,EAGUssE,EAHVtsE,KACAwV,EAEU82D,EAFV92D,OAGF,OAAIhE,KAAQ26D,GAAkB,KAG5B7nD,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KACErD,EAAA7K,EAAA8K,cAAA,OACEC,UAAWunD,IACX96C,MAAO,CAELhzB,MAAK,QAAAP,OAAUmuE,EAAS5tE,MAAnB,MACL+e,KAAI,GAAAtf,OAAKsC,EAAK6J,MAAV,KACJmmB,IAAG,GAAAtyB,OAAKsC,EAAK8J,MAAV,KAEHyiE,UAAWL,EAAaL,EAASJ,WAGnCtpE,KAAIqT,EAAQ,UAAYrT,KAAIqT,EAAQ,UACpC8O,EAAA7K,EAAA8K,cAAA,OACEC,UAAWunD,IACX96C,MAAO,CAELhzB,MAAK,QAAAP,OAAUouE,EAAS7tE,MAAnB,MAEL+e,KAAI,GAAAtf,OAAK8X,EAAO3L,MAAZ,KAEJmmB,IAAG,GAAAtyB,OAAK8X,EAAO1L,MAAZ,KAEHyiE,UAAWL,EAAaJ,EAASL,cCAhC5a,GA9Bcv0C,aACzB8L,YAAO,UACPlD,IACAC,aAA4C,SAAA1S,GAKtC,IAJMvJ,EAINuJ,EAJJrS,OAAU8I,KAERmO,EAEE5E,EAHJ8C,MACE8B,WAGIuS,EAASzgB,GAAcD,GAe7B,MAAO,CACLsjE,aAfmBpvD,KACnB/F,EACA,SAACgG,EAAoBqJ,GACnB,IAAMmD,EAAY1nB,KAAIukB,EAAD,aAAAhpB,OAAoBksB,IACnCE,EAAW3nB,KAAIukB,EAAD,YAAAhpB,OAAmBksB,IACjC6iD,EAAQ,GAAA/uE,OAAMmsB,EAAN,KAAAnsB,OAAmBosB,GAGjC,OAFAzM,EAAIlR,KAAKsgE,GAEFpvD,GACN,OAWiBqvD,CA/DS,SAAAppE,GAAA,IAAGkpE,EAAHlpE,EAAGkpE,aAAH,OACjCloD,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KACG1lB,KAAIuqE,EAAc,SAAAj/D,GAAI,OACrB+W,EAAA7K,EAAA8K,cAAA,QAAMlmB,IAAKkP,EAAMiX,UAAU,qBACxBjX,QC4FIo/D,GA9CWrwD,aACtB8L,YACE,cACA,SACA,eAEFpE,aAAiF,CAC/E4oD,eAAgB,SAAAn6D,GAAA,IAEZqP,EAFYrP,EACdrS,OACE0hB,UAFY,OAIV,SAAApP,GAMA,IALJ2R,EAKI3R,EALJ2R,QACAwoD,EAIIn6D,EAJJm6D,KACAtvE,EAGImV,EAHJnV,GACAiZ,EAEI9D,EAFJ8D,aACAs2D,EACIp6D,EADJo6D,OAEM3L,EAAG,GAAAzjE,OAAMmvE,EAAN,KAAAnvE,OAAcokB,EAhEL,OAkElB,MAAO,CACL9gB,OAAQ,CACNuM,KAAMuU,EAAUtL,GAChB2qD,OAEF4L,QAASlqD,OAAOtlB,GAChBsvE,OACAtjD,QAASlF,EACTmzC,OAAQ2J,EACR2L,OAAQrR,KAAKuR,MAAMF,EAAS,UAIlC9oD,aAAqF,CACnFipD,iBAAkB,SAAAzuE,GAAA,IAChBouE,EADgBpuE,EAChBouE,eACA7E,EAFgBvpE,EAEhBupE,YAFgB,OAGZ,SAAAl/C,GAAK,OAAI,WACb,IAAM7mB,EAAO,CAAC4qE,EAAe/jD,IAC7Bk/C,EAAYmF,WAAWlrE,GACvB+lE,EAAYlqD,UAAW,OAG3BqH,IAGqBioD,CA1FE,SAAA7pE,GAAA,IAAA8pE,EACvBH,EADuB3pE,EACvB2pE,iBACAjwD,EAFuB1Z,EAEvB0Z,KACU9T,EAHa5F,EAGvBlD,OAAU8I,KACVqM,EAJuBjS,EAIvBiS,MAJuB83D,EAAA/pE,EAKvBiS,MACEs3D,EANqBQ,EAMrBR,KACAn0D,EAPqB20D,EAOrB30D,aACAlC,EARqB62D,EAQrB72D,aACA82D,EATqBD,EASrBC,OACAC,EAVqBF,EAUrBE,OAEFzsD,EAZuBxd,EAYvBwd,KACA5W,EAbuB5G,EAavB4G,EACAC,EAduB7G,EAcvB6G,EAduB,OAgBvBma,EAAA7K,EAAA8K,cAAA,OACEC,UAAWC,KAAG,QAAD2oD,EAAA,GAAAtuE,OAAAqF,GAAA,EAAArF,CAAAsuE,EAAA,QAAA1vE,OACFojB,GAASA,GADPhiB,OAAAqF,GAAA,EAAArF,CAAAsuE,EAAA,OAEXpwD,GAFWowD,IAIbn8C,MAAO,CAAEjU,KAAI,GAAAtf,OAAKwM,EAAL,KAAW8lB,IAAG,GAAAtyB,OAAKyM,EAAL,MAC3Bkd,QAAS4lD,EAAiB13D,IAE1B+O,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,iBACbF,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,gBACdF,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAG3E,KAASgN,MAInB8N,EAAA7K,EAAA8K,cAACssC,GAAD,CAAYt7C,MAAOA,IACnB+O,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,uBAAhB,KACK9L,EAAY,QAAAhb,OAASyL,GAAcD,MAExCob,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,qBACdF,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,oBACbqoD,EADH,IACSvoD,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAG3E,KAtCD,SAwChB8a,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,sBAAhB,IAAA9mB,OAA0C4vE,EAA1C,OAAA5vE,OAAsD6vE,SCoBjDt4D,GA/BUqH,aACrB8L,YAAO,WACPlD,IAEAC,aAAU,SAAAzS,GAQJ,IAPJ3H,EAOI2H,EAPJ3H,OAOIyiE,EAAA96D,EANJ7H,QACEgR,WACE7b,EAIAwtE,EAJAxtE,KACAC,EAGAutE,EAHAvtE,GAIEwtE,EAAWxmE,KACf0N,KAAO5J,EAAQ,SAAA4I,GAAK,OAAIxR,KAAIwR,EAAO,UAAYxR,KAAIwR,EAAO,YAExD+5D,EAAsB,KAQ1B,OAPI1tE,GAAQC,IACVytE,EAAsBrqE,KACpBoqE,EAAU,SAAAjvE,GAAA,IAAGsiB,EAAHtiB,EAAGsiB,KAAH,OAAcrV,KAAS,CAAC,MAAO,SAAUqV,MAKhD,CACL2sD,SAAUC,GAAuBD,KAGrCvoD,IAGoByoD,CA3DE,SAAArqE,GAAA,IACdsoE,EADctoE,EACtByH,OACA0iE,EAFsBnqE,EAEtBmqE,SAFsB,OAItBnpD,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,mBAGbF,EAAA7K,EAAA8K,cAACimD,GAAD,CAASoB,cAAeA,IACvB3pE,KAAIwrE,EAAU,SAAAh7D,GAAA,IAEb5I,EAFa4I,EAEb5I,MAEAC,EAJa2I,EAIb3I,MAEAgX,EANarO,EAMbqO,KANa,OAQbwD,EAAA7K,EAAA8K,cAACqpD,GAAD,CACEvvE,IAAG,GAAAX,OAAKmM,EAAL,KAAAnM,OAAcoM,GAEjByL,MAAOq2D,EAAcr2D,MACrBuL,KAAMA,EACN3W,EAAGL,EACHI,EAAGL,SC6IEiG,GA5IWwM,aACtB8L,YAAO,UAAW,OAAQ,SAC1BpE,aAAa,CAGX6pD,eAAgB,kBAAM,SAAAp7D,EAAkBxS,EAAID,GAAS,IAC7C8gB,EAAO,CAAEgtD,SAAU,GAAIC,OAAQ,IACrC,OAFmDt7D,EAA5BpH,aAGrB,IAAK,WACCpL,IACF6gB,EAAKitD,OAAS,SAEhB,MACF,IAAK,WACC/tE,GAAQC,GACV6gB,EAAKgtD,SAAW,OAChBhtD,EAAKitD,OAAS,OACL/tE,EACT8gB,EAAKgtD,SAAW,OAEhBhtD,EAAKitD,OAAS,MAKpB,OAAOjtD,IAQTktD,SAAU,kBAAM,SAAAt7D,EAAWrU,GAAX,OAAAqU,EAAGvH,KAAqBqH,KAAK,SAAAuB,GAAQ,OAAIA,EAAS,KAAO1V,MAEzE4vE,QAAS,kBAAM,SAACzrE,EAAMR,GAAP,OAEbQ,EAAKa,OAAO,SAAA7E,GAAA,OAAAA,EAAG2M,KAAgBqH,KAAK,SAAAO,GAAA,IAAAC,EAAAlU,OAAA6T,GAAA,EAAA7T,CAAAiU,EAAA,GAAEgB,EAAFf,EAAA,GAAYW,EAAZX,EAAA,UAClClU,OAAOuV,QAAQrS,GAAM2J,KAAK,SAAA6I,GAAmB,IAAAvJ,EAAAnM,OAAA6T,GAAA,EAAA7T,CAAA0V,EAAA,GAAjBnW,EAAiB4M,EAAA,GAAZhE,EAAYgE,EAAA,GAE3C,MAAY,QAAR5M,EAAsB4I,EAAOwE,SAASsI,GAEnCa,SAASvW,EAAK,MAAQ0V,GAAY9M,EAAOwE,SAASkI,aAMjEqQ,aAAa,CAKXkqD,aAAc,SAAA9iE,GAAA,IACZyiE,EADYziE,EACZyiE,eACAG,EAFY5iE,EAEZ4iE,SAEEnyD,EAJUzQ,EAGZP,QACEgR,WAEM1a,EANIiK,EAMZjM,KAAQgC,OAENgQ,EARU/F,EAOZlD,MACEiJ,QARU,OAWR,SAACoE,GAAU,IAETvV,EAAqBuV,EAArBvV,KAAMwV,EAAeD,EAAfC,OAAQvV,EAAOsV,EAAPtV,GAGdkuE,EAAkBtyD,EAAW7b,MAC9B6b,EAAW5b,KACVsV,EAAM3J,sBACP4J,EAGLxV,EAAO6b,EAAW7b,MAAQA,EAC1BwV,EAAS24D,GAAmB34D,EAC5BvV,EAAM4b,EAAW5b,KAAOsV,EAAM3J,sBACzB3L,EAdU,IAAAmuE,EAiBcP,EAAet4D,EAAOtV,EAAID,GAA/C8tE,EAjBOM,EAiBPN,SAAUC,EAjBHK,EAiBGL,OAGZT,EAASU,EAASz4D,EAAO,KACzBg4D,EAASS,EAASz4D,EAAO,KAYzB84D,EAAgB,SAACC,GACrB,OAAKA,EAEW,iBAAZn9D,EAAmCm9D,EAAWxkE,OAVhCiB,EAWAujE,GAVU,UAAXntE,EACZgB,KAAI4I,EAAQ,SAAW,GACvB5I,KAAI4I,EAAQ,SAAW,KACTA,EAAOjB,OAIF,KARP,IAACiB,GAcdwjE,EAAY,SAChBD,EACAE,GAFgB,OAAA1vE,OAAAuI,EAAA,EAAAvI,CAAA,GAKbwvE,EALa,CAMhBxtD,KAAM0tD,EACN1kE,MAAOukE,EAAcC,MAGvB,MAAO,CACL/4D,MAAMzW,OAAAuI,EAAA,EAAAvI,CAAA,GACDyW,EADA,CAEH+3D,OAAQnrE,KAAImrE,EAAQ,EAAG,GACvBC,OAAQprE,KAAIorE,EAAQ,EAAG,KAEzBvtE,KAAMuuE,EAAUvuE,EAAM8tE,GACtB7tE,GAAIsuE,EAAUtuE,EAAI8tE,GAClBv4D,YAIJ/D,WAAY,SAAAxF,GAAA,IAAAwiE,EAAAxiE,EACVpB,QACErI,EAFQisE,EAERjsE,KACAmU,EAHQ83D,EAGR93D,OAHQ,OAKN,WACJ,OAAKA,EACEnU,EADa8hB,EAAA7K,EAAA8K,cAAC0D,GAAD,UAIxB/C,IAIqBwpD,CA3JE,SAAAprE,GAAA,IACvBmO,EADuBnO,EACvBmO,WACAy8D,EAFuB5qE,EAEvB4qE,aAFuB,OAIvBx/C,KAAQuyB,aAAKxvC,MACTA,IAAaxP,IAAI,SAAC8I,EAAQ4jE,GAAT,OAEjBrqD,EAAA7K,EAAA8K,cAACqqD,GAAD,CACEvwE,IAAKswE,EACL5jE,OAAQmjE,EAAanjE,OAGvB0G,SC1BFrN,QADFgsD,QAAWjnD,oBAAeF,gBA0Ef4lE,GAjEyBvyD,aACpC8L,YACE,QACA,SACA,OACA,UACA,UACA,eACA,gBACA,eAEFpE,aAAqD,CACnD8qD,eAAgB,SAAAr8D,GAAA,IAAAs8D,EAAAt8D,EACdrS,OAAU0hB,EADIitD,EACJjtD,UAAW5Y,EADP6lE,EACO7lE,KAAM1I,EADbuuE,EACavuE,KAChBypE,EAFGx3D,EAEd5H,QAAWo/D,aACQ+E,EAHLv8D,EAGdnQ,QAAWnB,OACKa,EAJFyQ,EAIdmwC,aAAgB5gD,KAChBg+C,EALcvtC,EAKdutC,cACQ7+C,EANMsR,EAMdtT,KAAQgC,OACRwkD,EAPclzC,EAOdkzC,YAPc,OAQV,SAAC3oD,GAGLitE,GAAa,GACb,IAAMjgE,EAAQ87C,SAASmpB,uBACrB,8BACA,GACIC,EAAuBppB,SAASmpB,uBACpC,uBACA,GAEIrlD,EAAS3gB,GAAUC,GACnByxD,EAAaxxD,GAAcD,GAC3B5I,EAAQ,CACZooB,MAAO,CACL5kB,KAAM3B,KAAIH,EAAD,GAAAtE,OAAUsxE,EAAV,UAAAtxE,OAA8BksB,GAAU,IACjDulD,MAAK,GAAAzxE,OAAKyE,KAAIH,EAAM,aAAc,IAA7B,SAEPT,OAAQ,CACNuC,KACE,GAAApG,OAAGyE,KAAI69C,EAAD,qBAAAtiD,OAAqCi9D,GAAc,KAAzD,IAAAj9D,OACMyE,KAAI69C,EAAD,oBAAAtiD,OAAoCi9D,GAAc,MAE/Dn5D,KAAM,CACJsC,KAAM3B,KAAIwjD,EAAD,gBAAAjoD,OAA8Bi9D,GAAc,MAGnDyU,EAAWjtE,KAAI7B,EAAOE,EAAM,IAC5B6uE,EAAU,GAAA3xE,OAAGokB,EAAU3gB,IAAb,IAAAzD,OACRyE,KAAIitE,EAAU,OAAQ,KADd,IAAA1xE,OAERyE,KAAIitE,EAAU,QAAS,KAE/BE,yBAAe,CACbC,SAAU,aACVvyE,IACAkyE,uBACAM,0BAA2B,MAC3BxlE,QACAqlE,gBAINnqD,IAG4BuqD,CAvEE,SAAAnsE,GAAA,IAAGwrE,EAAHxrE,EAAGwrE,eAAH,OAC9BxqD,EAAA7K,EAAA8K,cAAA,UAAQC,UAAU,8BAChBF,EAAA7K,EAAA8K,cAAA,KAAGC,UAAU,gBAAgB6C,QAASynD,OC+C7BY,GArBsBpzD,aACjC6P,GACAnI,aAAqD,CACnD2rD,gBAAiB,SAAAl9D,GAAA,IAAkBm9D,EAAlBn9D,EAAG6V,YAAesnD,WAAlB,OAAqC,kBAAMA,QAE9D5rD,aAAqD,CACnDC,aAAc,SAAAvR,GAAA,IACZi9D,EADYj9D,EACZi9D,gBACA7jD,EAFYpZ,EAEZoZ,cACejO,EAHHnL,EAGZ4V,YAAezK,SAHH,OAIR,WACAA,IACFiO,IACA6jD,SAINxrD,eACAe,IAGgC2qD,CAjDS,SAAAvsE,GAAA,IACzCqsE,EADyCrsE,EACzCqsE,gBACA7jD,EAFyCxoB,EAEzCwoB,cACAC,EAHyCzoB,EAGzCyoB,gBACAC,EAJyC1oB,EAIzC0oB,WACAC,EALyC3oB,EAKzC2oB,YACepO,EAN0Bva,EAMzCglB,YAAezK,SAN0B,OAQzCyG,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KACErD,EAAA7K,EAAA8K,cAAA,UAAQC,UAAU,+DAChBF,EAAA7K,EAAA8K,cAAA,KAAGC,UAAU,gBAAgB6C,QAASsoD,KAExCrrD,EAAA7K,EAAA8K,cAAA,OACEC,UAAWC,KAAG,kCAAmC,CAAEqrD,QAASjyD,KAE3DA,GAECyG,EAAA7K,EAAA8K,cAACqI,GAAD,CACEd,cAAeA,EACfC,gBAAiBA,EACjBC,WAAYA,EACZC,YAAaA,QC2DV8jD,GAxDgBzzD,aAC3B8L,YACE,YACA,SACA,cACA,UACA,mBAEFC,aACE,mBACA,0BACA,GAEFrE,aAAqD,CACnDiD,aAAc,SAAAxU,GAAA,IAAckE,EAAdlE,EAAG5H,QAAW8L,OAAd,OAA6B,kBACzC8N,KAAG,uBAAwB,CAAEurD,SAAUr5D,MAEzCs5D,SAAU,SAAAv9D,GAAA,IAAAw9D,EAAAx9D,EACR4V,YACE7K,EAFMyyD,EAENzyD,MACAK,EAHMoyD,EAGNpyD,cACAJ,EAJMwyD,EAINxyD,OAJM,OAMJ,kBAAOI,EAAgB,EAAI+E,OAAOnF,EAASD,KAEjD0yD,UAAW,SAAA3xE,GAAA,IAAA4xE,EAAA5xE,EACTqM,QACErI,EAFO4tE,EAEP5tE,KACAmU,EAHOy5D,EAGPz5D,OAHO,OAKL,iBAAO,CACX05D,WAAY5tE,KAAOD,EAAM,MACzB7B,YAAagW,KAGf25D,oBAAqB,SAAAv9D,GAAA,IACT7J,EADS6J,EACnB3S,OAAU8I,KACVof,EAFmBvV,EAEnBuV,YACArnB,EAHmB8R,EAGnB9R,IACAsvE,EAJmBx9D,EAInBw9D,uBACA9nD,EALmB1V,EAKnB0V,UALmB,OAMf,SAACwd,GACLsqC,GAAuB,GACvB,IAAMC,EAAQvuE,KAAIsjB,KAAQ0gB,EAAQ,aAAc,OAAQ,MACxDxd,EAAUD,QAAQ,CAChB/J,OAAQ+xD,EACRtnE,OACA6U,MAAOuK,EACPrnB,MACA6f,KAAM,cACL2vD,QAAQ,kBAAMF,GAAuB,SAG5CrrD,IAG0BwrD,CA5EE,SAAAptE,GAAA,IAC5B2jB,EAD4B3jB,EAC5B2jB,aACAgpD,EAF4B3sE,EAE5B2sE,SACAE,EAH4B7sE,EAG5B6sE,UACAG,EAJ4BhtE,EAI5BgtE,oBACAK,EAL4BrtE,EAK5BqtE,iBAL4B,OAO5BrsD,EAAA7K,EAAA8K,cAAA,OAAKC,UAAWyC,KAGd3C,EAAA7K,EAAA8K,cAACQ,EAAA,UAAD,CACEuD,YAAa2nD,IACbK,oBAAqBA,EACrBM,iBAAkBD,EAClB1qC,OAAQkqC,IACR/+D,MAAM,cC+BCy/D,GAhBmBv0D,aAC9B+L,aAAU,YAAa,mBAAmB,GAC1CrE,aAAqD,CACnDC,aAAc,SAAAxR,GAAA,IAAGq+D,EAAHr+D,EAAGq+D,gBAAH,OAAyB,kBAAMA,GAAgB,KAC7D5T,eAAgB,SAAAxqD,GAAA,IAAGq+D,EAAHr+D,EAAGq+D,UAAWD,EAAdp+D,EAAco+D,gBAAd,OAAoC,kBAAMA,GAAiBC,OAE7E5rD,aAA4C,SAAA3mB,GAAA,IAAGuyE,EAAHvyE,EAAGuyE,UAAWC,EAAdxyE,EAAcwyE,SAAd,MAA8B,CACxExsD,UAAWC,KAAG,oBAAqB,CACjCwsD,yBAA0BF,IAE5BG,UAAWzlE,KAAS,CAAC,cAAeulE,MAEtC7sD,eACAe,IAG6BisD,CA7CS,SAAA7tE,GAAA,IACtC8tE,EADsC9tE,EACtC8tE,SACA5sD,EAFsClhB,EAEtCkhB,UACAusD,EAHsCztE,EAGtCytE,UACAC,EAJsC1tE,EAItC0tE,SACApW,EALsCt3D,EAKtCs3D,MACAsC,EANsC55D,EAMtC45D,eACAgU,EAPsC5tE,EAOtC4tE,UAPsC,OAStC5sD,EAAA7K,EAAA8K,cAAA,OAAKC,UAAWA,EAAW6C,QAAS61C,GAClC54C,EAAA7K,EAAA8K,cAAA,UAAQC,UAAU,8BACf0sD,EACC5sD,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,qCAAqCo2C,GAErDt2C,EAAA7K,EAAA8K,cAAA,KAAGC,UAAS,eAAA9mB,OAAiBszE,MAGhCD,GACCzsD,EAAA7K,EAAA8K,cAAA,MAAIC,UAAU,0BACX6sD,WAASpvE,IAAImvE,EAAU,SAACE,EAAOC,GAAR,OACtBjtD,EAAA7K,EAAA8K,cAAA,MAAIlmB,IAAKkzE,EAAG/sD,UAAU,0BACpBF,EAAA7K,EAAA8K,cAAA,SAAI+sD,UCsEHE,GAnEcl1D,aACzB8L,YACE,UACA,SACA,eACA,UACA,WAEFC,aAA0B,WAAY,eAAe,GACrDnD,IACAC,aAA4C,SAAAzS,GAItC,IAHMxJ,EAGNwJ,EAHJtS,OAAU8I,KACC/H,EAEPuR,EAFJpQ,QAAWnB,OACKa,EACZ0Q,EADJkwC,aAAgB5gD,KAEV4nB,EAAS3gB,GAAUC,GACnBuoE,EAAYtvE,KAAIH,EAAD,cAAAtE,OAAqBksB,IACpC8nD,EAAYvvE,KAAIH,EAAD,cAAAtE,OAAqBksB,IAC1C,MAAO,CACL+nD,oBAAqBvlE,GAAQjK,KAAIH,EAAD,GAAAtE,OAAUyD,EAAV,UAAAzD,OAAyBksB,KACzDrR,MAAO,CACL,CACEhb,GAAI,QACJmlD,SAAU+uB,GAEZ,CACEl0E,GAAI,QACJmlD,SAAUgvB,OAKlB1tD,aAAqD,CACnDC,aAAc,SAAAzlB,GAAA,IAAGozE,EAAHpzE,EAAGozE,YAAH,OAAqB,kBAAMA,GAAY,KACrDC,aAAc,SAAA9+D,GAAA,IAEV7N,EAFU6N,EACZzQ,QACE4C,aAFU,OAIR,SAAC/D,GACL+D,EAAa/D,KAEf2wE,mBAAoB,SAAA9+D,GAAA,IAAG6K,EAAH7K,EAAG6K,SAAU+zD,EAAb5+D,EAAa4+D,YAAb,OAA+B,kBAAM,kBAAMA,GAAa/zD,QAE9EmG,aAA+D,CAC7D+tD,UAAW,SAAAv9D,GAAA,IACEnT,EADFmT,EACTpT,QAAWC,MACXwwE,EAFSr9D,EAETq9D,aACWntE,EAHF8P,EAGT3J,QAAWnG,MACAvD,EAJFqT,EAITlS,QAAWnB,OACXyhD,EALSpuC,EAKTouC,aACAkvB,EANSt9D,EAMTs9D,mBANS,OAOL,SAAAv0E,GAAE,OAAI,WACV,GAAI4D,IAAW5D,EAAI,CACjBs0E,EAAat0E,GACb,IAAM+R,EAASnN,KAAIygD,EAAD,QAAAllD,OAAuBH,EAAvB,OAAgC,IAC5C+E,EAAU,CAACH,KAAIygD,EAAc,YACnCl+C,EAAM4K,EAAQhN,GAEdjB,IAEF,OAAOywE,SAGX3tD,eACAe,IAGwB8sD,CAxFS,SAAA1uE,GAAA,IACjCquE,EADiCruE,EACjCquE,oBACAI,EAFiCzuE,EAEjCyuE,UACAx5D,EAHiCjV,EAGjCiV,MAHiC,OAKjC+L,EAAA7K,EAAA8K,cAACssD,GAAD,CACEG,SAAS,aACTpW,MAAO+W,GAENp5D,EAAMtW,IAAI,SAAAwQ,GAAA,IAAGlV,EAAHkV,EAAGlV,GAAImlD,EAAPjwC,EAAOiwC,SAAP,OACTp+B,EAAA7K,EAAA8K,cAAA,OACE8C,QAAS0qD,EAAUx0E,GACnBinB,UAAU,wBACVnmB,IAAKd,GAEL+mB,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAGu0C,UCdDuvB,GAzBmB,CAChC,CACE9yE,KAAM,CAAC,SAAU,QAAS,QAAS,QACnC+yE,SAAU,CAAEjyE,IAAI,EAAMD,MAAM,GAC5BuN,KAAM,mBAER,CACEpO,KAAM,CACJ,SACA,QACA,QACA,OACA,mBACA,mBAEF+yE,SAAU,CAAEjyE,IAAI,EAAOD,MAAM,GAC7BuN,KAAM,gBAER,CACEpO,KAAM,CAAC,SAAU,QAAS,QAAS,QACnC+yE,SAAU,CAAEjyE,IAAI,EAAMD,MAAM,GAC5BuN,KAAM,eC4CG4kE,GAzBc71D,aACzB8L,YACE,OACA,UACA,SAEFlD,IACAC,aAA4C,SAAAzS,GAAA,IAAWvR,EAAXuR,EAAGvT,KAAQgC,OAAX,MAA2B,CACrEixE,eAAgB/uE,KAAO4uE,GAA2B,SAAAzzE,GAAA,IAAGW,EAAHX,EAAGW,KAAH,OAChDsM,KAAStM,EAAMgC,QAEnB6iB,aAAqD,CACnDquD,gBAAiB,SAAAt/D,GAAA,IAAAu/D,EAAAv/D,EACflI,QAAWyP,EADIg4D,EACJh4D,gBAAiB2vD,EADbqI,EACarI,aACnBE,EAFMp3D,EAEf7K,MAASiiE,yBAFM,OAGX,SAAC+H,GAAD,OAAkB,WAEtB/H,IACA9vD,KAAM63D,EAAU,SAACv+D,EAAOtV,GAAR,OAAgBic,EAAgBjc,EAAKsV,KACrDs2D,GAAa,QAGjB/kD,IAGwBqtD,CA1CS,SAAAjvE,GAAA,IACjC+uE,EADiC/uE,EACjC+uE,gBACAD,EAFiC9uE,EAEjC8uE,eAFiC,OAIjC9tD,EAAA7K,EAAA8K,cAACssD,GAAD,CAAiBG,SAAS,UACvBoB,EAAenwE,IAAI,SAAAwQ,GAAA,IAAGy/D,EAAHz/D,EAAGy/D,SAAU3kE,EAAbkF,EAAalF,KAAb,OAClB+W,EAAA7K,EAAA8K,cAAA,OACEC,UAAU,wBACV6C,QAASgrD,EAAgBH,GACzB7zE,IAAKkP,GAEL+W,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAGZ,UC4BHkP,GA/BSH,aACpB8L,YACE,OACA,UACA,SAEFlD,IACAC,aAAU,WAOR,MAAO,CAAEqtD,WALU,CACjB,eACA,cACA,qBAIJxuD,aAAqD,CACnDuqD,UAAW,SAAA97D,GAAA,IACEw3D,EADFx3D,EACT5H,QAAWo/D,aADFC,EAAAz3D,EAETvK,MAASiiE,EAFAD,EAEAC,yBAA0BzqD,EAF1BwqD,EAE0BxqD,WAF1B,OAGL,SAAC+yD,GAAD,OAAyB,WACT,iBAAhBA,GACFtI,IAEFzqD,EAAW+yD,GACXxI,GAAa,QAGjB/kD,IAGmBwtD,CA7CS,SAAApvE,GAAA,IAAGirE,EAAHjrE,EAAGirE,UAAWiE,EAAdlvE,EAAckvE,WAAd,OAC5BluD,EAAA7K,EAAA8K,cAACssD,GAAD,CAAiBG,SAAS,QACvBwB,EAAWvwE,IAAI,SAAAmL,GAAI,OAClBkX,EAAA7K,EAAA8K,cAAA,OACEC,UAAU,wBACV6C,QAASknD,EAAUnhE,GACnB/O,IAAK+O,GAELkX,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAGf,UCoDHulE,GAjCoBr2D,aAC/B8L,YACE,OACA,SACA,UACA,QACA,eAEFpE,aAAqC,CACnC4uD,WAAY,SAAAngE,GAAA,IAAAu3D,EAAAv3D,EACV5H,QACEgR,EAFQmuD,EAERnuD,WACAvK,EAHQ04D,EAGR14D,OACA24D,EAJQD,EAIRC,aACAjvD,EALQgvD,EAKRhvD,cALQkvD,EAAAz3D,EAOVvK,MACEiiE,EARQD,EAQRC,yBACA0I,EATQ3I,EASR2I,QATQ,OAWN,WACCvhE,GACH0J,IAEEkmC,KAAQrlC,EAAY,CAAE7b,MAAM,EAAMC,IAAI,KACxCkqE,IAEF0I,EAAQ,gBACR5I,GAAc34D,OAGlB4T,IAE8B4tD,CA5DS,SAAAxvE,GAAA,IAC7B9C,EAD6B8C,EACvClD,OAAUI,KACVoyE,EAFuCtvE,EAEvCsvE,WAFuCG,EAAAzvE,EAGvCglB,YAAe7K,EAHwBs1D,EAGxBt1D,MAAOC,EAHiBq1D,EAGjBr1D,OACdvc,EAJ+BmC,EAIvCnE,KAAQgC,OAJ+B,OAMvCmjB,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,uBACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,2BACbF,EAAA7K,EAAA8K,cAAC4tD,GAAD,MACA7tD,EAAA7K,EAAA8K,cAACyuD,GAAD,MACU,UAATxyE,GAAoB8jB,EAAA7K,EAAA8K,cAACitD,GAAD,MACrBltD,EAAA7K,EAAA8K,cAAA,UAAQC,UAAU,6BAA6B6C,QAASurD,GACtDtuD,EAAA7K,EAAA8K,cAAA,KAAGC,UAAU,gBAKjBF,EAAA7K,EAAA8K,cAACwrD,GAAD,CAAc9uE,IAAKE,IACnBmjB,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,2BACbF,EAAA7K,EAAA8K,cAACsqD,GAAD,MAGAvqD,EAAA7K,EAAA8K,cAACmrD,GAAD,CAAoBrxE,IAAG,GAAAX,OAAK+f,EAAL,KAAA/f,OAAcggB,SCrC9BxV,GAAgB,CAC3B6nB,OAAQ,CACNmC,eAAgB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzCyB,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAE/B3D,IAAK,CACHkC,eAAgB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzCyB,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,KAKpBs/C,GAAmB,CAC9B/oE,EAAG,CACDgpE,MAAO,CACLljD,IAAK,CACH,CACEmjD,UAAW,CAAC,EAAG,GACfC,OAAQ,EAAE,GAAI,KAEhB,CACED,UAAW,CAAC,EAAG,GACfC,OAAQ,CAAC,GAAI,KAEf,CACED,UAAW,CAAC,EAAG,GACfC,OAAQ,CAAC,GAAI,OAGjBrjD,OAAQ,CACN,CACEojD,UAAW,CAAC,EAAG,GACfC,OAAQ,EAAE,GAAI,KAEhB,CACED,UAAW,CAAC,EAAG,GACfC,OAAQ,CAAC,GAAI,KAEf,CACED,UAAW,CAAC,EAAG,GACfC,OAAQ,CAAC,GAAI,QAInBC,SAAU,CACRrjD,IAAK,CACH,CACEmjD,UAAW,CAAC,EAAG,EAAG,GAClBC,OAAQ,EAAE,GAAI,KAEhB,CACED,UAAW,CAAC,EAAG,EAAG,GAClBC,OAAQ,CAAC,GAAI,KAEf,CACED,UAAW,CAAC,EAAG,EAAG,GAClBC,OAAQ,CAAC,GAAI,OAGjBrjD,OAAQ,CACN,CACEojD,UAAW,CAAC,EAAG,EAAG,GAClBC,OAAQ,EAAE,GAAI,KAEhB,CACED,UAAW,CAAC,EAAG,EAAG,GAClBC,OAAQ,CAAC,GAAI,KAEf,CACED,UAAW,CAAC,EAAG,EAAG,GAClBC,OAAQ,CAAC,GAAI,SAKrBjpE,EAAG,CACD+oE,MAAO,CACLljD,IAAK,CACH,CACEmjD,UAAW,CAAC,EAAG,EAAG,GAClBC,OAAQ,EAAE,GAAI,KAEhB,CACED,UAAW,CAAC,EAAG,EAAG,GAClBC,OAAQ,CAAC,GAAI,MAGjBrjD,OAAQ,CACN,CACEojD,UAAW,CAAC,EAAG,EAAG,GAClBC,OAAQ,CAAC,GAAI,KAEf,CACED,UAAW,CAAC,EAAG,EAAG,GAClBC,OAAQ,CAAC,GAAI,QAInBC,SAAU,CACRrjD,IAAK,CACH,CACEmjD,UAAW,CAAC,EAAG,EAAG,GAClBC,OAAQ,EAAE,GAAI,KAEhB,CACED,UAAW,CAAC,EAAG,EAAG,GAClBC,OAAQ,CAAC,GAAI,KAEf,CACED,UAAW,CAAC,EAAG,EAAG,GAClBC,OAAQ,CAAC,GAAI,MAGjBrjD,OAAQ,CACN,CACEojD,UAAW,CAAC,EAAG,EAAG,GAClBC,OAAQ,CAAC,GAAI,KAEf,CACED,UAAW,CAAC,EAAG,EAAG,GAClBC,OAAQ,CAAC,GAAI,KAEf,CACED,UAAW,CAAC,EAAG,EAAG,GAClBC,OAAQ,CAAC,GAAI,UAQVE,GAAa,CACxB7zE,OAAQ,CAAC,GAAI,CAAC,GAAI,GAAI,MACtBE,MAAO,CAAC,GAAI,CAAC,MACbC,KAAM,CAAC,GAAI,CAAC,KACZC,MAAO,CAAC,GAAI,CAAC,GAAI,GAAI,KACrBH,iBAAkB,CAAC,GAAI,CAAC,KACxBI,gBAAiB,CAAC,GAAI,CAAC,MCiDZyzE,GAxIkBj3D,aAC7B8L,YACE,OACA,UACA,QACA,cACA,cACA,UAEFpE,aAA+C,CAO7CwvD,UAAW,SAAA/gE,GAAA,IACDtR,EADCsR,EACTtT,KAAQgC,OACCgQ,EAFAsB,EAETvK,MAASiJ,QAFA,OAGL,SAAAuB,GAIA,IAHJ1Q,EAGI0Q,EAHJ1Q,KACA3D,EAEIqU,EAFJrU,IACA+O,EACIsF,EADJtF,KAGA,GAAY,mBAAR/O,EAA0B,CAC5B,IAAMo1E,EAAmBtxE,KAAImxE,GAAD,GAAA51E,OAAgByD,EAAhB,SACtBuyE,EAAoBvxE,KAAImxE,GAAD,GAAA51E,OAAgByD,EAAhB,SAC7Ba,EAAOqB,KAAOrB,EAAM,SAAAxD,GAAA,IAAG2M,EAAH3M,EAAG2M,KAAH,OAClBQ,KACER,EACA,SAAAwoE,GAAQ,OACNloE,KAASkoE,EAAUF,IAChB9nE,KAAKgoE,EAAU,SAAAC,GAAa,OAC7BnoE,KAASioE,EAAmBE,SAItC,IAAM5lB,EAAkB,UAAX7sD,EAAqB,MAAQ,SACpC0yE,EAAwB,gBAAZ1iE,EAA4B,QAAU,WAElD2iE,EAAY3xE,KAAI8wE,GAAD,KAAAv1E,OAAwBm2E,EAAxB,KAAAn2E,OAAqCswD,IACpD+lB,EAAY5xE,KAAI8wE,GAAD,KAAAv1E,OAAwBm2E,EAAxB,KAAAn2E,OAAqCswD,IAEpDgmB,EAAU7xE,KACdqQ,KAAKshE,EAAW,SAAA/gE,GAAA,IAAGogE,EAAHpgE,EAAGogE,UAAH,OAAmB1nE,KAAS0nE,EAAW/lE,KACvD,UAEI6mE,EAAU9xE,KACdqQ,KAAKuhE,EAAW,SAAA/gE,GAAA,IAAGmgE,EAAHngE,EAAGmgE,UAAH,OAAmB1nE,KAAS0nE,EAAW/lE,KACvD,UAII8mE,EAAazoE,KAAS,CAAC,QAAS,QAAStK,GAAU,KAAO,OAGhE,OAAOkC,KACLrB,EACA,SAAA+I,GAAM,OACJmR,KAAQ/Z,KAAI4I,EAAD,GAAArN,OAAYw2E,EAAZ,WAAiCF,EAAQ,GAAIA,EAAQ,KAC7D93D,KAAQ/Z,KAAI4I,EAAD,GAAArN,OAAYw2E,EAAZ,WAAiCD,EAAQ,GAAIA,EAAQ,UAI3E/uD,IACAC,aAA4C,SAAA3Q,GAMvC,IAJDg/D,EAICh/D,EAJDg/D,UACWhxE,EAGVgS,EAHD3J,QAAWrI,KACX4K,EAECoH,EAFDpH,KAGIqE,EAAa,SAACpT,GAAD,OACjBm1E,EAAU,CACRxxE,KAAMQ,EACNnE,MACA+O,UAGE+mE,EAAa1iE,EAAW,gBACxB2iE,EAAmBnmE,KAAKkmE,GAExBE,EAAoBpmE,KAAKwD,EAAW,mBAE1C,MAAO,CACL6iE,WAFiB7Y,KAAKuR,MAAOqH,EAAoBD,EAAoB,MAAQ,EAG7EC,oBACAD,mBACAG,WAAYJ,KAGhBnwD,aAAuC,CACrC4oD,eAAgB,SAAA3hE,GAAA,IACJ6W,EADI7W,EACd7K,OAAU0hB,UADI,OAEV,SAAC+G,GAAkB,IAErBxE,EAKEwE,EALFxE,QACAwoD,EAIEhkD,EAJFgkD,KACAtvE,EAGEsrB,EAHFtrB,GACAiZ,EAEEqS,EAFFrS,aACAs2D,EACEjkD,EADFikD,OAEI3L,EAAG,GAAAzjE,OAAMmvE,EAAN,KAAAnvE,OAAcokB,EA3HL,OA6HlB,MAAO,CACL9gB,OAAQ,CACNuM,KAAMuU,EAAUtL,GAChB2qD,OAEF4L,QAASlqD,OAAOtlB,GAChBsvE,OACAtjD,QAASlF,EACTmzC,OAAQ2J,EACR2L,OAAQrR,KAAKuR,MAAMF,EAAS,UAIlC9oD,aAAyC,CACvCipD,iBAAkB,SAAA7hE,GAAA,IAChBwhE,EADgBxhE,EAChBwhE,eADgB4H,EAAAppE,EAEhB28D,YACEmF,EAHcsH,EAGdtH,WACAuH,EAJcD,EAIdC,aAJc,OAMZ,SAACh2D,GAAD,OAA2B,WAC/B,IAAKjN,KAAQiN,GAAS,CACpB,IAAMzc,EAAOC,KAAIwc,EAAQ,SAAAoK,GAAK,OAAI+jD,EAAe/jD,KAEjDqkD,EAAWlrE,GACXyyE,GAAa,SAMSC,CA1JE,SAAApxE,GAAA,IAC9B2pE,EAD8B3pE,EAC9B2pE,iBACAqH,EAF8BhxE,EAE9BgxE,WACAD,EAH8B/wE,EAG9B+wE,kBACAD,EAJ8B9wE,EAI9B8wE,iBACAhnE,EAL8B9J,EAK9B8J,KACAmnE,EAN8BjxE,EAM9BixE,WACS13D,EAPqBvZ,EAO9B4E,MAAS2U,MAPqB,OAS9ByH,EAAA7K,EAAA8K,cAAA,KACEC,UAAS,iCAAA9mB,OAAmC0P,GAC5Cia,QAAS4lD,EAAiBsH,IAE1BjwD,EAAA7K,EAAA8K,cAAA,SAAI+vD,EAAJ,KACAhwD,EAAA7K,EAAA8K,cAAA,aAAQ1H,GAAD,GAAAnf,OAAa22E,EAAb,YAAA32E,OAAoC02E,OChDlCO,GAAqB,CAChC3kD,IAAK,CACH2D,YAAa,CACX,CACEzpB,EAAG,MACHC,EAAG,KAEL,CACED,EAAG,MACHC,EAAG,KAEL,CACED,EAAG,KACHC,EAAG,KAEL,CACED,EAAG,KACHC,EAAG,OAEL,CACED,EAAG,MACHC,EAAG,OAEL,CACED,EAAG,MACHC,EAAG,QAGP+nB,eAAgB,CACd,CACEhoB,EAAG,KACHC,EAAG,KAEL,CACED,EAAG,MACHC,EAAG,KAEL,CACED,EAAG,MACHC,EAAG,KAEL,CACED,EAAG,MACHC,EAAG,OAEL,CACED,EAAG,MACHC,EAAG,OAEL,CACED,EAAG,MACHC,EAAG,OAEL,CACED,EAAG,MACHC,EAAG,OAEL,CACED,EAAG,KACHC,EAAG,OAEL,CACED,EAAG,KACHC,EAAG,SAIT4lB,OAAQ,CACN4D,YAAa,CACX,CACEzpB,EAAG,MACHC,EAAG,OAEL,CACED,EAAG,MACHC,EAAG,OAEL,CACED,EAAG,KACHC,EAAG,OAEL,CACED,EAAG,KACHC,EAAG,OAEL,CACED,EAAG,MACHC,EAAG,OAEL,CACED,EAAG,MACHC,EAAG,QAGP+nB,eAAgB,CACd,CACEhoB,EAAG,KACHC,EAAG,OAEL,CACED,EAAG,MACHC,EAAG,OAEL,CACED,EAAG,MACHC,EAAG,OAEL,CACED,EAAG,MACHC,EAAG,OAEL,CACED,EAAG,MACHC,EAAG,OAEL,CACED,EAAG,MACHC,EAAG,OAEL,CACED,EAAG,MACHC,EAAG,OAEL,CACED,EAAG,KACHC,EAAG,OAEL,CACED,EAAG,KACHC,EAAG,UCtHEyqE,GAAc,SAAAtxE,GAAA,IAAG6N,EAAH7N,EAAG6N,QAAS68C,EAAZ1qD,EAAY0qD,KAAZ,OAEzB1pC,EAAA7K,EAAA8K,cAAA,OACEswD,QAAQ,MACRt3E,GAAG,UACHu3E,MAAM,6BACNC,MAAM,+BACN7qE,EAAE,MACFC,EAAE,MACF6qE,QAAQ,cACRC,SAAS,WACTzwD,UAAU,uBAEVF,EAAA7K,EAAA8K,cAAA,SACED,EAAA7K,EAAA8K,cAAA,SACED,EAAA7K,EAAA8K,cAAA,QACEra,EAAE,OACFC,EAAE,MACFqa,UAAU,MACVvmB,MAAM,QACNi3E,OAAO,QACPC,KAAK,YAEP7wD,EAAA7K,EAAA8K,cAAA,QACEC,UAAU,MACV4wD,EAAE,6DACFD,KAAK,aAGT7wD,EAAA7K,EAAA8K,cAAA,SACED,EAAA7K,EAAA8K,cAAA,QACEra,EAAE,KACFC,EAAE,QACFqa,UAAU,MACVvmB,MAAM,MACNi3E,OAAO,MACPC,KAAK,aAGT7wD,EAAA7K,EAAA8K,cAAA,SACED,EAAA7K,EAAA8K,cAAA,QACEra,EAAE,KACFC,EAAE,QACFqa,UAAU,MACVvmB,MAAM,MACNi3E,OAAO,MACPC,KAAK,aAGT7wD,EAAA7K,EAAA8K,cAAA,SACED,EAAA7K,EAAA8K,cAAA,SACED,EAAA7K,EAAA8K,cAAA,QAAMra,EAAE,KAAKC,EAAE,QAAQlM,MAAM,MAAMi3E,OAAO,SAE5C5wD,EAAA7K,EAAA8K,cAAA,UAAQE,GAAG,QAAQ4wD,GAAG,MAAMC,EAAE,QAC9BhxD,EAAA7K,EAAA8K,cAAA,UAAQE,GAAG,OAAO4wD,GAAG,MAAMC,EAAE,SAE/BhxD,EAAA7K,EAAA8K,cAAA,SACED,EAAA7K,EAAA8K,cAAA,QACEra,EAAE,KACFC,EAAE,QACFqa,UAAU,MACVvmB,MAAM,IACNi3E,OAAO,MACPC,KAAK,YAEP7wD,EAAA7K,EAAA8K,cAAA,QACEra,EAAE,IACFC,EAAE,QACFqa,UAAU,MACVvmB,MAAM,IACNi3E,OAAO,MACPC,KAAK,YAEP7wD,EAAA7K,EAAA8K,cAAA,QAAMpa,EAAE,QAAQqa,UAAU,MAAMvmB,MAAM,IAAIi3E,OAAO,MAAMC,KAAK,aAE9D7wD,EAAA7K,EAAA8K,cAAA,SACED,EAAA7K,EAAA8K,cAAA,QACEra,EAAE,KACFC,EAAE,QACFqa,UAAU,MACVvmB,MAAM,IACNi3E,OAAO,MACPC,KAAK,YAEP7wD,EAAA7K,EAAA8K,cAAA,QACEra,EAAE,IACFC,EAAE,QACFqa,UAAU,MACVvmB,MAAM,IACNi3E,OAAO,MACPC,KAAK,YAEP7wD,EAAA7K,EAAA8K,cAAA,QAAMpa,EAAE,QAAQqa,UAAU,MAAMvmB,MAAM,IAAIi3E,OAAO,MAAMC,KAAK,aAE9D7wD,EAAA7K,EAAA8K,cAAA,SACED,EAAA7K,EAAA8K,cAAA,QACEra,EAAE,MACFC,EAAE,QACFqa,UAAU,MACVvmB,MAAM,IACNi3E,OAAO,MACPC,KAAK,YAEP7wD,EAAA7K,EAAA8K,cAAA,QACEra,EAAE,MACFC,EAAE,QACFqa,UAAU,MACVvmB,MAAM,IACNi3E,OAAO,MACPC,KAAK,YAEP7wD,EAAA7K,EAAA8K,cAAA,QACEra,EAAE,MACFC,EAAE,QACFqa,UAAU,MACVvmB,MAAM,IACNi3E,OAAO,MACPC,KAAK,aAGT7wD,EAAA7K,EAAA8K,cAAA,SACED,EAAA7K,EAAA8K,cAAA,QACEra,EAAE,MACFC,EAAE,QACFqa,UAAU,MACVvmB,MAAM,IACNi3E,OAAO,MACPC,KAAK,YAEP7wD,EAAA7K,EAAA8K,cAAA,QACEra,EAAE,MACFC,EAAE,QACFqa,UAAU,MACVvmB,MAAM,IACNi3E,OAAO,MACPC,KAAK,YAEP7wD,EAAA7K,EAAA8K,cAAA,QACEra,EAAE,MACFC,EAAE,QACFqa,UAAU,MACVvmB,MAAM,IACNi3E,OAAO,MACPC,KAAK,aAGT7wD,EAAA7K,EAAA8K,cAAA,SACED,EAAA7K,EAAA8K,cAAA,QAAMra,EAAE,KAAKsa,UAAU,MAAMvmB,MAAM,MAAMi3E,OAAO,IAAIC,KAAK,YACzD7wD,EAAA7K,EAAA8K,cAAA,QAAMra,EAAE,QAAQsa,UAAU,MAAMvmB,MAAM,MAAMi3E,OAAO,IAAIC,KAAK,aAE9D7wD,EAAA7K,EAAA8K,cAAA,SACED,EAAA7K,EAAA8K,cAAA,QACEra,EAAE,KACFC,EAAE,MACFqa,UAAU,MACVvmB,MAAM,MACNi3E,OAAO,IACPC,KAAK,YAEP7wD,EAAA7K,EAAA8K,cAAA,QACEra,EAAE,QACFC,EAAE,MACFqa,UAAU,MACVvmB,MAAM,MACNi3E,OAAO,IACPC,KAAK,cAIE,iBAAZhkE,GAEIhP,KAAIwyE,GAAoB,CAAC3mB,EAAM78C,GAAU,IAAIlP,IAAI,SAAAwQ,EAAW8+D,GAAX,IAAGrnE,EAAHuI,EAAGvI,EAAGC,EAANsI,EAAMtI,EAAN,OAClDma,EAAA7K,EAAA8K,cAAA,QACEC,UAAU,wBACVnmB,IAAG,GAAAX,OAAKwM,EAAL,KAAAxM,OAAUyM,GACbD,EAAGA,EACHC,EAAGA,EACHlM,MDhMuB,MCkMvBi3E,OACc,gBAAZ/jE,GAA6BogE,EAAI,EDlMZ,MADA,YE8DpBgE,GAvBcj5D,aACzB8L,YAAO,QAAS,QAChBlD,IACAC,aAAoC,SAAA1S,GAG9B,IAFItR,EAEJsR,EAFJtT,KAAQgC,OACCgQ,EACLsB,EADJvK,MAASiJ,QAEH68C,EAAkB,UAAX7sD,EAAqB,MAAQ,SAE1C,MAAO,CACL6sD,OACAmlB,UAAWhxE,KAAI+F,GAAO,CAAC8lD,EAAM78C,GAAU,OAG3C6S,aAAqD,CACnDwxD,kBAAmB,SAAA9iE,GAAA,IAAGs7C,EAAHt7C,EAAGs7C,KAAe78C,EAAlBuB,EAASxK,MAASiJ,QAAlB,OAAkC,kBACnDsT,KACE,mBADA,oBAAA/mB,OAEoByT,EAAQ1H,MAAM,KAAK,GAFvC,KAAA/L,OAE6CswD,QAK3BynB,CAxCE,SAAAnyE,GAAA,IAC1BkyE,EAD0BlyE,EAC1BkyE,kBACAxnB,EAF0B1qD,EAE1B0qD,KACS78C,EAHiB7N,EAG1B4E,MAASiJ,QACTgiE,EAJ0B7vE,EAI1B6vE,UAJ0B,OAM1B7uD,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KACErD,EAAA7K,EAAA8K,cAAA,OAAKC,UAAWgxD,KACD,iBAAZrkE,GACIlP,KAAIkxE,EAAW,SAAC/lE,GAAD,OAChBkX,EAAA7K,EAAA8K,cAACgvD,GAAD,CAAgBl1E,IAAK+O,EAAMA,KAAMA,OAGvCkX,EAAA7K,EAAA8K,cAACmxD,GAAD,CAAa1nB,KAAMA,EAAM78C,QAASA,OC6CzBwkE,GAlCYr5D,aACvB8L,YACE,UACA,UACA,kBACA,SACA,SAEF+3B,aAA0B,CACxBggB,mBADwB,SACLC,GAAW,IAAA/f,EASxBrhD,KAAKV,MAPGkC,EAFgB6/C,EAE1BjgD,OAAUI,KACCkE,EAHe27C,EAG1Bx1C,QAAWnG,MACX6kB,EAJ0B82B,EAI1B92B,QACA1nB,EAL0Bw+C,EAK1Bx+C,OACAgN,EAN0BwxC,EAM1BxxC,gBACA5N,EAP0Bo/C,EAO1Bp/C,IACAiH,EAR0Bm4C,EAQ1Bn4C,MAEI0tE,EAA0B,UAATp1E,EACnB,CAAC+oB,GACDpnB,KAAI0M,EAAiB,CAACrO,EAAMqB,IAEhC,GAAIu+D,EAAUn/D,MAAQA,GAAOuQ,KAAQokE,GAAiB,OAAO,KAExDC,KAASD,KACZlxE,EAAM7C,EAAQ+zE,GACd1tE,EAAMxD,MAAM7C,EAAQ+zE,OAI1B1wD,IAGsB4wD,CAzDS,SAAAxyE,GAAA,IAAAyyE,EAAAzyE,EAAGuH,QAAWyG,EAAdykE,EAAczkE,OAAQiJ,EAAtBw7D,EAAsBx7D,QAAtB,OAC/B+J,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,0BACbF,EAAA7K,EAAA8K,cAACouD,GAAD,MACAruD,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,8BACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,8BACbF,EAAA7K,EAAA8K,cAAA,OAAKhnB,GAAG,MAAMinB,UAAU,+BACxBF,EAAA7K,EAAA8K,cAACgxD,GAAD,MACAjxD,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,wBACZlT,GACCgT,EAAA7K,EAAA8K,cAACQ,EAAA,aAAaixD,eAAd,CACEC,aAAa,kBACbh4E,MAAO,IACPi3E,OAAQ,IACRgB,SAAU,SAAAC,GAAI,OAAI57D,EAAQ47D,GAAQ,GAAI,IAAK,IAAK,IAAK,QAGzD7xD,EAAA7K,EAAA8K,cAAC6xD,GAAD,YCvBGC,GAAmC,CAC9C52E,OAAQ,CACN,CACEqhB,KAAM,mBACN85C,MAAO,MACP54D,KAAM,CACJ,CACEs0E,cAAe,EACfrhB,IAAK,CAAC,EAAG,EAAG,IAEd,CACEqhB,cAAe,EACfrhB,IAAK,CAAC,EAAG,EAAG,IAAK,IAAK,EAAG,IAE3B,CACEqhB,cAAe,GACfrhB,IAAK,CAAC,IAAK,QAIjB,CACEn0C,KAAM,uBACN85C,MAAO,OAET,CACE95C,KAAM,cACN85C,MAAO,MACP54D,KAAM,CAAC,IAAK,IAAK,IAAK,MAExB,CACE8e,KAAM,cACN85C,MAAO,KACP54D,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAEjD,CACE8e,KAAM,cACN85C,MAAO,MACP54D,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,MAElC,CACE8e,KAAM,cACN85C,MAAO,KACP54D,KAAM,CAAC,GAAI,GAAI,GAAI,KAErB,CACE8e,KAAM,iBACN85C,MAAO,MACP54D,KAAM,CACJ,CACEu0E,OAAQ,GACRC,WAAY,GAEd,CACED,OAAQ,GACRC,WAAY,GAEd,CACED,OAAQ,GACRC,WAAY,GAEd,CACED,OAAQ,GACRC,WAAY,GAEd,CACED,OAAQ,GACRC,WAAY,GAEd,CACED,OAAQ,GACRC,WAAY,KAIlB,CACE11D,KAAM,cACN85C,MAAO,MACP54D,KAAM,CAAC,GAAI,GAAI,GAAI,MAGvBtC,iBAAkB,CAChB,CACEohB,KAAM,cACN85C,MAAO,MACP54D,KAAM,CAAC,IAAK,IAAK,MAEnB,CACE8e,KAAM,uBACN85C,MAAO,OAET,CACE95C,KAAM,cACN85C,MAAO,MACP54D,KAAM,CAAC,IAAK,IAAK,IAAK,MAExB,CACE8e,KAAM,cACN85C,MAAO,KACP54D,KAAM,CAAC,IAAK,IAAK,OAGrBrC,MAAO,CACL,CACEmhB,KAAM,mBACN85C,MAAO,MACP54D,KAAM,CACJ,CACEs0E,cAAe,GACfrhB,IAAK,CAAC,GAAI,KAEZ,CACEqhB,cAAe,IACfrhB,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,KAExB,CACEqhB,cAAe,MACfrhB,IAAK,CAAC,GAAI,OAIhB,CACEn0C,KAAM,uBACN85C,MAAO,OAET,CACE95C,KAAM,cACN85C,MAAO,MACP54D,KAAM,CAAC,IAAK,IAAK,IAAK,MAExB,CACE8e,KAAM,cACN85C,MAAO,MACP54D,KAAM,CAAC,GAAI,GAAI,KAEjB,CACE8e,KAAM,cACN85C,MAAO,KACP54D,KAAM,CAAC,GAAI,MAGfpC,KAAM,CACJ,CACEkhB,KAAM,mBACN85C,MAAO,MACP54D,KAAM,CACJ,CACEs0E,cAAe,IACfrhB,IAAK,CAAC,IAAK,MAEb,CACEqhB,cAAe,IACfrhB,IAAK,CAAC,IAAK,MAEb,CACEqhB,cAAe,IACfrhB,IAAK,CAAC,IAAK,QAIjB,CACEn0C,KAAM,uBACN85C,MAAO,OAET,CACE95C,KAAM,cACN85C,MAAO,MACP54D,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,MAE7B,CACE8e,KAAM,cACN85C,MAAO,MACP54D,KAAM,CAAC,IAAK,MAEd,CACEivB,MAAO,OACPnQ,KAAM,iBACN85C,MAAO,MACP54D,KAAM,CACJ,CACEu0E,OAAQ,IACRC,WAAY,GAEd,CACED,OAAQ,IACRC,WAAY,GAEd,CACED,OAAQ,IACRC,WAAY,GAEd,CACED,OAAQ,IACRC,WAAY,GAEd,CACED,OAAQ,IACRC,WAAY,GAEd,CACED,OAAQ,IACRC,WAAY,KAIlB,CACEvlD,MAAO,OACPnQ,KAAM,iBACN85C,MAAO,MACP54D,KAAM,CACJ,CACEu0E,OAAQ,IACRC,WAAY,GAEd,CACED,OAAQ,IACRC,WAAY,GAEd,CACED,OAAQ,IACRC,WAAY,GAEd,CACED,OAAQ,IACRC,WAAY,GAEd,CACED,OAAQ,IACRC,WAAY,GAEd,CACED,OAAQ,IACRC,WAAY,MAKpB32E,MAAO,CACL,CACEihB,KAAM,mBACN85C,MAAO,MACP54D,KAAM,CACJ,CACEs0E,cAAe,MACfrhB,IAAK,CAAC,IAAK,IAAK,MAElB,CACEqhB,cAAe,IACfrhB,IAAK,CAAC,IAAK,IAAK,IAAK,MAEvB,CACEqhB,cAAe,IACfrhB,IAAK,CAAC,IAAK,QAIjB,CACEn0C,KAAM,uBACN85C,MAAO,OAET,CACE95C,KAAM,cACN85C,MAAO,KACP54D,KAAM,CAAC,IAAK,MAEd,CACE8e,KAAM,cACN85C,MAAO,MACP54D,KAAM,CAAC,IAAK,IAAK,MAEnB,CACE8e,KAAM,iBACN85C,MAAO,KACP54D,KAAM,CACJ,CACEu0E,OAAQ,IACRC,WAAY,GAEd,CACED,OAAQ,IACRC,WAAY,GAEd,CACED,OAAQ,IACRC,WAAY,GAEd,CACED,OAAQ,IACRC,WAAY,GAEd,CACED,OAAQ,IACRC,WAAY,GAEd,CACED,OAAQ,IACRC,WAAY,KAIlB,CACE11D,KAAM,cACN85C,MAAO,MACP54D,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,OAGpClC,gBAAiB,CACf,CACEghB,KAAM,cACN85C,MAAO,MACP54D,KAAM,CAAC,IAAK,IAAK,MAEnB,CACE8e,KAAM,uBACN85C,MAAO,OAET,CACE95C,KAAM,cACN85C,MAAO,MACP54D,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,MAE7B,CACE8e,KAAM,cACN85C,MAAO,KACP54D,KAAM,CAAC,IAAK,IAAK,MAEnB,CACE8e,KAAM,mBACN85C,MAAO,MAET,CACE95C,KAAM,cACN85C,MAAO,MACP54D,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,QAKzBy0E,GAA4C,CACvDh3E,OAAQ,CACN,CACEqhB,KAAM,mBACN85C,MAAO,MACP54D,KAAM,CACJ,CACEs0E,cAAe,EACfrhB,IAAK,CAAC,EAAG,EAAG,IAEd,CACEqhB,cAAe,EACfrhB,IAAK,CAAC,EAAG,EAAG,IAAK,IAAK,EAAG,IAE3B,CACEqhB,cAAe,GACfrhB,IAAK,CAAC,IAAK,QAIjB,CACEn0C,KAAM,cACN85C,MAAO,KACP54D,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAEjD,CACE8e,KAAM,cACN85C,MAAO,MACP54D,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,MAElC,CACE8e,KAAM,cACN85C,MAAO,KACP54D,KAAM,CAAC,GAAI,GAAI,GAAI,KAErB,CACE8e,KAAM,iBACN85C,MAAO,MACP54D,KAAM,CACJ,CACEu0E,OAAQ,GACRC,WAAY,GAEd,CACED,OAAQ,GACRC,WAAY,GAEd,CACED,OAAQ,GACRC,WAAY,GAEd,CACED,OAAQ,GACRC,WAAY,GAEd,CACED,OAAQ,GACRC,WAAY,GAEd,CACED,OAAQ,GACRC,WAAY,KAIlB,CACE11D,KAAM,cACN85C,MAAO,MACP54D,KAAM,CAAC,GAAI,GAAI,GAAI,MAGvBtC,iBAAkB,CAChB,CACEohB,KAAM,cACN85C,MAAO,MACP54D,KAAM,CAAC,IAAK,IAAK,MAEnB,CACE8e,KAAM,cACN85C,MAAO,KACP54D,KAAM,CAAC,IAAK,IAAK,MAEnB,CACE8e,KAAM,iBACNmQ,MAAO,OACP2pC,MAAO,KACP54D,KAAM,CACJ,CACEu0E,OAAQ,IACRC,WAAY,GAEd,CACED,OAAQ,IACRC,WAAY,GAEd,CACED,OAAQ,IACRC,WAAY,GAEd,CACED,OAAQ,IACRC,WAAY,GAEd,CACED,OAAQ,IACRC,WAAY,GAEd,CACED,OAAQ,IACRC,WAAY,KAIlB,CACE11D,KAAM,cACN85C,MAAO,KACP54D,KAAM,CAAC,IAAK,IAAK,IAAK,OAG1BrC,MAAO,CACL,CACEmhB,KAAM,mBACN85C,MAAO,MACP54D,KAAM,CACJ,CACEs0E,cAAe,GACfrhB,IAAK,CAAC,GAAI,KAEZ,CACEqhB,cAAe,IACfrhB,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,KAExB,CACEqhB,cAAe,MACfrhB,IAAK,CAAC,GAAI,OAIhB,CACEn0C,KAAM,uBACN85C,MAAO,OAET,CACE95C,KAAM,cACN85C,MAAO,MACP54D,KAAM,CAAC,IAAK,IAAK,IAAK,MAExB,CACE8e,KAAM,cACN85C,MAAO,MACP54D,KAAM,CAAC,GAAI,GAAI,KAEjB,CACE8e,KAAM,cACN85C,MAAO,KACP54D,KAAM,CAAC,GAAI,MAGfpC,KAAM,CACJ,CACEkhB,KAAM,mBACN85C,MAAO,MACP54D,KAAM,CACJ,CACEs0E,cAAe,IACfrhB,IAAK,CAAC,IAAK,MAEb,CACEqhB,cAAe,IACfrhB,IAAK,CAAC,IAAK,MAEb,CACEqhB,cAAe,IACfrhB,IAAK,CAAC,IAAK,QAIjB,CACEn0C,KAAM,uBACN85C,MAAO,OAET,CACE95C,KAAM,cACN85C,MAAO,MACP54D,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,MAE7B,CACE8e,KAAM,cACN85C,MAAO,MACP54D,KAAM,CAAC,IAAK,MAEd,CACEivB,MAAO,OACPnQ,KAAM,iBACN85C,MAAO,MACP54D,KAAM,CACJ,CACEu0E,OAAQ,IACRC,WAAY,GAEd,CACED,OAAQ,IACRC,WAAY,GAEd,CACED,OAAQ,IACRC,WAAY,GAEd,CACED,OAAQ,IACRC,WAAY,GAEd,CACED,OAAQ,IACRC,WAAY,GAEd,CACED,OAAQ,IACRC,WAAY,KAIlB,CACEvlD,MAAO,OACPnQ,KAAM,iBACN85C,MAAO,MACP54D,KAAM,CACJ,CACEu0E,OAAQ,IACRC,WAAY,GAEd,CACED,OAAQ,IACRC,WAAY,GAEd,CACED,OAAQ,IACRC,WAAY,GAEd,CACED,OAAQ,IACRC,WAAY,GAEd,CACED,OAAQ,IACRC,WAAY,GAEd,CACED,OAAQ,IACRC,WAAY,MAKpB32E,MAAO,CACL,CACEihB,KAAM,mBACN85C,MAAO,MACP54D,KAAM,CACJ,CACEs0E,cAAe,MACfrhB,IAAK,CAAC,IAAK,IAAK,MAElB,CACEqhB,cAAe,IACfrhB,IAAK,CAAC,IAAK,IAAK,IAAK,MAEvB,CACEqhB,cAAe,IACfrhB,IAAK,CAAC,IAAK,QAIjB,CACEn0C,KAAM,cACN85C,MAAO,KACP54D,KAAM,CAAC,IAAK,MAEd,CACE8e,KAAM,cACN85C,MAAO,MACP54D,KAAM,CAAC,IAAK,IAAK,MAEnB,CACE8e,KAAM,iBACN85C,MAAO,KACP54D,KAAM,CACJ,CACEu0E,OAAQ,IACRC,WAAY,GAEd,CACED,OAAQ,IACRC,WAAY,GAEd,CACED,OAAQ,IACRC,WAAY,GAEd,CACED,OAAQ,IACRC,WAAY,GAEd,CACED,OAAQ,IACRC,WAAY,GAEd,CACED,OAAQ,IACRC,WAAY,KAIlB,CACE11D,KAAM,cACN85C,MAAO,MACP54D,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,OAGpClC,gBAAiB,CACf,CACEghB,KAAM,cACN85C,MAAO,MACP54D,KAAM,CAAC,IAAK,IAAK,MAEnB,CACE8e,KAAM,cACN85C,MAAO,KACP54D,KAAM,CAAC,IAAK,IAAK,MAEnB,CACE8e,KAAM,mBACN85C,MAAO,MAET,CACE95C,KAAM,cACN85C,MAAO,MACP54D,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,QClrBzB00E,GAAiC,CAC5CtsB,EAAG,OACHusB,EAAG,OACHC,EAAG,QACHrxE,EAAG,QACHM,EAAG,OACHD,EAAG,OACHE,EAAG,OACHH,EAAG,QACHkxE,EAAG,OACHC,GAAI,OACJC,GAAI,MACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,QACJC,GAAI,OACJjxE,GAAI,OACJkxE,GAAI,OACJC,GAAI,QACJC,GAAI,OACJC,GAAI,QACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,IAAK,OACLC,IAAK,OACLC,IAAK,MACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,QACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLv0E,IAAK,OACLG,IAAK,OACLC,IAAK,OACLotBvkE,aACE8L,YAAO,WACPpE,aAA4B,CAC1B88D,gBAAiB,kBAAM,SAACvjF,GAAD,OAAgBm5E,GAAMn5E,IAAOA,IACpDwjF,iBAAkB,SAAAz9E,GAAA,IACL25D,EADK35D,EAChBlC,QAAW67D,oBADK,OAEZ,SAAC1/D,GAAD,OACJknB,KAAG,qBAAsB,CACvBu8D,6BAA8B/jB,EAAoB1/D,OAEtD0jF,kBAAmB,SAAAxuE,GAAA,IAAcwqD,EAAdxqD,EAAGrR,QAAW67D,oBAAd,OACjB,SAAChI,GAAD,OACExwC,KAAG,sBAAuB,CACxBy8D,8BAA+Bv1E,KAC7BspD,EACA,SAAA13D,GAAE,OAAI0/D,EAAoB1/D,WAMpC2nB,IArBF5I,CAsBEukE,IC0BSM,GAAeP,GAxCE,SAAAt9E,GAAA,IAC5BtB,EAD4BsB,EAC5BtB,KAD4Bo/E,EAAA99E,EAE5BlC,QAAWq8D,EAFiB2jB,EAEjB3jB,mBAAoBN,EAFHikB,EAEGjkB,gBAC/B2jB,EAH4Bx9E,EAG5Bw9E,gBACAC,EAJ4Bz9E,EAI5By9E,iBACAE,EAL4B39E,EAK5B29E,kBACAI,EAN4B/9E,EAM5B+9E,gBAN4B,OAQ5B/8D,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KACErD,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,yBACZviB,KAAID,EAAM,SAAAyQ,EAAyBk8D,GAAzB,IAAG2H,EAAH7jE,EAAG6jE,cAAerhB,EAAlBxiD,EAAkBwiD,IAAlB,OACT3wC,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,0BAA0BnmB,IAAKi4E,GAAiB3H,GAC5D2H,GACChyD,EAAA7K,EAAA8K,cAAA,OACEC,UAAWy8D,EAAkBhsB,GAC7B5tC,QAAS,kBAAMo2C,EAAmBxI,KAElC3wC,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAG2yE,EAAgBxK,MAG5BhyD,EAAA7K,EAAA8K,cAAA,MAAIC,UAAU,sBACXviB,KAAIgzD,EAAK,SAAA13D,GAAE,OACV+mB,EAAA7K,EAAA8K,cAAA,MACEC,UAAWu8D,EAAiBxjF,GAC5Bc,IAAKd,EACL8pB,QAAS,kBAAM81C,EAAgB5/D,KAE/B+mB,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAG2yE,EAAgBvjF,aAOpC+mB,EAAA7K,EAAA8K,cAAA,UAAQC,UAAU,0BAA0B6C,QAASg6D,GAArD,SCYSC,GAnBchlE,aACzB8L,YAAO,WACPlD,IACAC,aAA4C,SAAAzS,GAAA,IAC1Cue,EAD0Cve,EAC1Cue,MAD0C,MAErC,CACLswD,eAAgB98D,KAAG,6BAA8B,CAC/C+8D,kCAA6C,SAAVvwD,OAGvCjN,aAAqD,CACnDy9D,iBAAkB,SAAAjjF,GAAA,IAAcy+D,EAAdz+D,EAAG4C,QAAW67D,oBAAd,OAA0C,SAAA1/D,GAAE,OAC5DknB,KAAG,wBAAyB,CAC1Bi9D,+BAAgCzkB,EAAoB1/D,SAG1DqjF,GAGwBe,CA5CE,SAAAr+E,GAAA,IAC1BtB,EAD0BsB,EAC1BtB,KACAu/E,EAF0Bj+E,EAE1Bi+E,eACWpkB,EAHe75D,EAG1BlC,QAAW+7D,gBACXskB,EAJ0Bn+E,EAI1Bm+E,iBACAJ,EAL0B/9E,EAK1B+9E,gBAL0B,OAO1B/8D,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,oBACbF,EAAA7K,EAAA8K,cAAA,MAAIC,UAAW+8D,GACZt/E,KAAID,EAAM,SAAAyQ,GAAA,IAAG8jE,EAAH9jE,EAAG8jE,OAAQC,EAAX/jE,EAAW+jE,WAAX,OACTlyD,EAAA7K,EAAA8K,cAAA,MACEC,UAAWi9D,EAAiBlL,GAC5Bl4E,IAAKk4E,EACLlvD,QAAS,kBAAM81C,EAAgBoZ,KAE9BC,MAIPlyD,EAAA7K,EAAA8K,cAAA,UAAQC,UAAU,0BAA0B6C,QAASg6D,GAArD,SCFSO,GAAchB,GA7BE,SAAAt9E,GAAA,IAC3BtB,EAD2BsB,EAC3BtB,KACWm7D,EAFgB75D,EAE3BlC,QAAW+7D,gBACX2jB,EAH2Bx9E,EAG3Bw9E,gBACAC,EAJ2Bz9E,EAI3By9E,iBACAM,EAL2B/9E,EAK3B+9E,gBAL2B,OAO3B/8D,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KACErD,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,yBACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,2BACbF,EAAA7K,EAAA8K,cAAA,MAAIC,UAAU,sBACXviB,KAAID,EAAM,SAAAzE,GAAE,OACX+mB,EAAA7K,EAAA8K,cAAA,MACEC,UAAWu8D,EAAiBxjF,GAC5Bc,IAAKd,EACL8pB,QAAS,kBAAM81C,EAAgB5/D,KAE/B+mB,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAG2yE,EAAgBvjF,WAMlC+mB,EAAA7K,EAAA8K,cAAA,UAAQC,UAAU,0BAA0B6C,QAASg6D,GAArD,SC8DSQ,GAhBoBvlE,aAC/B8L,YAAO,WAAY,UACnBjD,aAA4C,SAAA3mB,GAAA,MAA2B,CACrEorB,OAAQzgB,GADkC3K,EAAG4B,OAAU8I,SAGzD8a,aAAqD,CACnD89D,YAAa,SAAA/uE,GAAA,IAAG6W,EAAH7W,EAAG6W,OAAH,OAAgB,SAACroB,GAAD,SAAA7D,OACxB6D,EAAM,aAAA7D,OAAcksB,IADI,KAAAlsB,OACS6D,EAAM,YAAA7D,OAAaksB,OAEzDm4D,aAAc,kBAAM,SAAC/1E,GAAD,OAClB/J,KAAI+J,EAAS,SAAAgH,GAAA,IAAG3N,EAAH2N,EAAG3N,UAAH,SAAA3H,OAAsB2H,EAAtB,iBAEjBu7E,GACA17D,IAG8B88D,CAtEE,SAAA1+E,GAAA,IAAA89E,EAAA99E,EAChClC,QAAWq8D,EADqB2jB,EACrB3jB,mBAAoBN,EADCikB,EACDjkB,gBAC/B2kB,EAFgCx+E,EAEhCw+E,YACAf,EAHgCz9E,EAGhCy9E,iBACAgB,EAJgCz+E,EAIhCy+E,aACAd,EALgC39E,EAKhC29E,kBACYj/E,EANoBsB,EAMhCsD,SAAY5E,KACZ4nB,EAPgCtmB,EAOhCsmB,OACAy3D,EARgC/9E,EAQhC+9E,gBACAvgE,EATgCxd,EAShCwd,KATgC,OAWhCwD,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KACErD,EAAA7K,EAAA8K,cAAA,OACEC,UAAWC,KACT,wBACA,CAAEw9D,6BAA8Bh0E,KAAKjM,IAAS,GAC9C,CAAEkgF,+BAAgCj0E,KAAKjM,GAAQ,KAGhDC,KAAID,EAAM,SAAAyQ,GAAA,IACDnD,EADCmD,EACT+W,OACa24D,EAFJ1vE,EAET2E,YACG5V,EAHM1C,OAAA8Z,GAAA,EAAA9Z,CAAA2T,EAAA,iCAKT6R,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,0BAA0BnmB,IAAKiR,GAC5CgV,EAAA7K,EAAA8K,cAAA,OACEC,UAAWy8D,EAAkBc,EAAaI,IAC1C96D,QAAS,kBACPo2C,EAAmBskB,EAAaI,GAAcrhE,KAGhDwD,EAAA7K,EAAA8K,cAAA,YAAO/iB,EAAI,QAAA9D,OAASksB,MAEtBtF,EAAA7K,EAAA8K,cAAA,MAAIC,UAAU,sBACXviB,KAAIkgF,EAAa,SAAAzvE,GAAA,IAActN,EAAdsN,EAAGrN,UAAwB9D,EAA3BzC,OAAA8Z,GAAA,EAAA9Z,CAAA4T,EAAA,sBAChB4R,EAAA7K,EAAA8K,cAAA,MACEC,UAAWu8D,EAAgB,GAAArjF,OAAI0H,EAAJ,YAC3B/G,IAAK+G,EACLiiB,QAAS,kBAAM81C,EAAe,GAAAz/D,OAAI0H,EAAJ,WAAuB0b,KAErDwD,EAAA7K,EAAA8K,cAAA,YAAOu9D,EAAYvgF,YAQ/B+iB,EAAA7K,EAAA8K,cAAA,UAAQC,UAAU,0BAA0B6C,QAASg6D,GAArD,SCOSe,GA7BuB9lE,aAClC8L,YACE,aACA,SACA,iBAEFlD,IACAC,aACE,SAAAzS,GAAA,IACYxJ,EADZwJ,EACEtS,OAAU8I,KACIwO,EAFhBhF,EAEE7L,WAAc6Q,UACG9W,EAHnB8R,EAGEstC,cAAiBp/C,QAHnB,MAIO,CACLuhF,YAAavhF,EACTyC,KACAqU,EAAW,SAAAlZ,GAAA,OAAAA,EAAG6T,WAAgDzR,EAAQrD,KAEtEma,EACJkS,OAAQzgB,GAAcD,MAG1B8a,aAAkD,CAChD89D,YAAa,SAAA/uE,GAAA,IAAG6W,EAAH7W,EAAG6W,OAAH,OAAgB,SAACroB,GAAD,SAAA7D,OACxB6D,EAAM,aAAA7D,OAAcksB,IADI,KAAAlsB,OACS6D,EAAM,YAAA7D,OAAaksB,SAE3Dg3D,GACA17D,IAGkCm9D,CAzDE,SAAA/+E,GAAA,IACzB65D,EADyB75D,EACpClC,QAAW+7D,gBACX2kB,EAFoCx+E,EAEpCw+E,YACAf,EAHoCz9E,EAGpCy9E,iBACAoB,EAJoC7+E,EAIpC6+E,YACAd,EALoC/9E,EAKpC+9E,gBACAvgE,EANoCxd,EAMpCwd,KANoC,OAQpCwD,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KACErD,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,yBACbF,EAAA7K,EAAA8K,cAAA,MAAIC,UAAU,sBACXviB,KAAIkgF,EAAa,SAAA1vE,GAAA,IAAarN,EAAbqN,EAAGJ,SAAiC9Q,EAApCkR,EAAuB2E,YAAvB,OAChBkN,EAAA7K,EAAA8K,cAAA,MACEC,UAAWu8D,EAAgB,GAAArjF,OAAI0H,EAAJ,YAC3B/G,IAAK+G,EACLiiB,QAAS,kBAAM81C,EAAe,GAAAz/D,OAAI0H,EAAJ,WAAuB0b,KAErDwD,EAAA7K,EAAA8K,cAAA,YAAOu9D,EAAYvgF,EAAO,UAKlC+iB,EAAA7K,EAAA8K,cAAA,UAAQC,UAAU,0BAA0B6C,QAASg6D,GAArD,SChBSiB,WAJchmE,aACzB6H,eAGwBo+D,CAnBE,SAAAj/E,GAAA,IAAGwd,EAAHxd,EAAGwd,KAASxiB,EAAZQ,OAAA8Z,GAAA,EAAA9Z,CAAAwE,EAAA,iBAC1BghB,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,mBACH,qBAAT1D,GAA+BwD,EAAA7K,EAAA8K,cAAC48D,GAAiB7iF,GACxC,mBAATwiB,GAA6BwD,EAAA7K,EAAA8K,cAAC+8D,GAAehjF,GACpC,gBAATwiB,GAA0BwD,EAAA7K,EAAA8K,cAACq9D,GAAgBtjF,GAClC,qBAATwiB,GACCwD,EAAA7K,EAAA8K,cAACs9D,GAAD/iF,OAAAsW,OAAA,CAAkB0L,KAAMA,GAAUxiB,IAE1B,yBAATwiB,GAECwD,EAAA7K,EAAA8K,cAAC69D,GAADtjF,OAAAsW,OAAA,CAAsB0L,KAAMA,GAAUxiB,QC2C/BkkF,GAlBiBlmE,aAC5B8L,YAAO,UACPpE,aAAqD,CACnD89D,YAAa,SAAApvE,GAAA,IACX+vE,EADW/vE,EACX+vE,eACUv5E,EAFCwJ,EAEXtS,OAAU8I,KAFC,OAGP,SAAC9D,GACL,IAAMwkB,EAASzgB,GAAcD,GACvB3H,EAAkBiR,KAAKiwE,EAAgB,CAAEp9E,UAAWD,KAAe,GAIzE,MAHc,GAAA1H,OAAM6D,EAAM,aAAA7D,OAAcksB,IAA1B,KAAAlsB,OACZ6D,EAAM,YAAA7D,OAAaksB,SAKzB1E,IAG2Bw9D,CA1CE,SAAAp/E,GAAA,IAC7Bm/E,EAD6Bn/E,EAC7Bm/E,eACAX,EAF6Bx+E,EAE7Bw+E,YACApkB,EAH6Bp6D,EAG7Bo6D,cAH6B,OAK7Bp5C,EAAA7K,EAAA8K,cAAA,MAAIC,UAAU,gBACXviB,KAAIwgF,EAAgB,SAAAhwE,GAAA,IAAGlV,EAAHkV,EAAGlV,GAAI8H,EAAPoN,EAAOpN,UAAP,OACnBif,EAAA7K,EAAA8K,cAAA,MAAIC,UAAU,qBAAqBnmB,IAAKd,GAAM8H,GAC3CA,EACCif,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,2BACbs9D,EAAYz8E,IAGfif,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAKP,UAAU,0BAA0BrW,EAAGuoE,GAAM7zD,OAAOtlB,MAE3D+mB,EAAA7K,EAAA8K,cAAA,KACEC,UAAU,4BACV6C,QAAS,kBAAMq2C,EAAcngE,GAAE,GAAAG,OAAO2H,EAAP,qBCwF5Bs9E,GA9DcrmE,aACzB8L,YACE,UACA,WACA,cAEFC,aAAU,aAAc,cAAc,GACtCrE,aAAqD,CACnDC,aAAc,SAAAxR,GAAA,IACDyqD,EADCzqD,EACZrR,QAAW87D,eACX0lB,EAFYnwE,EAEZmwE,WACAC,EAHYpwE,EAGZowE,WAHY,OAIR,WACJA,GAAYD,GACZ1lB,EAAe,WAEjB4lB,iBAAkB,SAAApwE,GAAA,IAAGkwE,EAAHlwE,EAAGkwE,WAAH,OAAoB,kBAAMn+D,KAC1C,mBACA,CAAEs+D,0BAA2BH,MAE/BvB,gBAAiB,SAAA7iF,GAAA,IACJ0+D,EADI1+D,EACf4C,QAAW87D,eACX0lB,EAFepkF,EAEfokF,WACAC,EAHerkF,EAGfqkF,WAHe,OAIX,WACJA,GAAYD,GACZ1lB,QAGJh4C,IACAC,aAA4C,SAAApS,GAMtC,IALEiwE,EAKFjwE,EALJ/Q,KACWmP,EAIP4B,EAJJ3R,QAAW+P,QACXvK,EAGImM,EAHJnM,SACAC,EAEIkM,EAFJlM,WACAia,EACI/N,EADJ+N,KAaMmiE,EnQskB8B,SAACjhF,EAAW8e,GAClD,IAIMoiE,EAAU,kBAAMlhF,GAUtB,MARc,CACZmhF,iBAP2B,kBAAMp5B,KACjC9nD,KAAID,EAAM,SAAAohF,GAAA,OAAAA,EAAGnuB,QAObouB,eAL0B,kBAAMphF,KAAID,EAAM,WAM1CshF,YAAaJ,EACbK,iBAAkBL,EAClBM,qBAAsBN,GAGXpiE,KmQrlBM2iE,CAXF,WACb,OAAQ3iE,GACN,IAAK,mBACH,OAAOla,EAAS88E,WAClB,IAAK,uBACH,OAAO78E,EAAW68E,WACpB,QACE,OAAOV,GAGDW,GACmC7iE,GAS/C,MAAO,CAAE2hE,eAHcp/E,KAAO8N,EAAS,SAACwC,EAAOtV,GAAR,OACrCoN,KAASw3E,EANW,SAAC5kF,GAAD,OACpBoN,KAAS,CAAC,mBAAoB,wBAAyBqV,GACnDziB,EACAwkB,OAAOxkB,GAGQulF,CAAcvlF,SAIrC6mB,IAGwB2+D,CAnGE,SAAAvgF,GAAA,IAC1Bm/E,EAD0Bn/E,EAC1Bm/E,eACAx+D,EAF0B3gB,EAE1B2gB,aACAjiB,EAH0BsB,EAG1BtB,KAEE07D,EALwBp6D,EAI1BlC,QACEs8D,cAEFolB,EAP0Bx/E,EAO1Bw/E,iBACAF,EAR0Bt/E,EAQ1Bs/E,WACA3xD,EAT0B3tB,EAS1B2tB,MACA2pC,EAV0Bt3D,EAU1Bs3D,MACAymB,EAX0B/9E,EAW1B+9E,gBACAvgE,EAZ0Bxd,EAY1Bwd,KAZ0B,OAc1BwD,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,0BACbF,EAAA7K,EAAA8K,cAAA,QAAMC,UAAWs+D,IAAoBz7D,QAASg6D,GAC5C/8D,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAGysD,KAETgoB,GAGKt+D,EAAA7K,EAAA8K,cAAC+9D,GAAD,CACExhE,KAAMA,EACN9e,KAAMA,EACNivB,MAAOA,EACPhN,aAAcA,EACdo9D,gBAAiBA,IAIzB/8D,EAAA7K,EAAA8K,cAACi+D,GAAD,CACEC,eAAgBA,EAChB/kB,cAAeA,OCSRomB,GAzBcxnE,aACzB8L,YACE,OACA,UACA,UAEFjD,aAA4C,SAAAzS,GAAA,IAChClS,EADgCkS,EAC1CtS,OAAUI,KACFW,EAFkCuR,EAE1CvT,KAAQgC,OAFkC,MAGrC,CACL4iF,YAAsB,WAATvjF,EACTi2E,GAA0Bt1E,GAC1Bk1E,GAAiBl1E,MAEvBg/C,aAA0B,CACxBC,kBADwB,WACJ,IAAA4jC,EACQhlF,KAAKV,MAAM8C,QAA7BsD,EADUs/E,EACVt/E,MADUs/E,EACHrtE,QAEbjS,OAINwgB,IAGwB++D,CAhDE,SAAA3gF,GAAA,IAAGygF,EAAHzgF,EAAGygF,YAAH,OAC1Bz/D,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KACG1lB,KACC8hF,EACA,SAAAtxE,GAAA,IACEzQ,EADFyQ,EACEzQ,KACAivB,EAFFxe,EAEEwe,MACA2pC,EAHFnoD,EAGEmoD,MACA95C,EAJFrO,EAIEqO,KAJF,OAOEwD,EAAA7K,EAAA8K,cAACo+D,GAAD,CACEtkF,IAAKu8D,EACL95C,KAAMA,EACN85C,MAAOA,EACP54D,KAAMA,EACNivB,MAAOA,SC3BV,SAASizD,GAAT5gF,GASI,IART4F,EAQS5F,EART4F,KACAi7E,EAOS7gF,EAPT6gF,KACA5iF,EAMS+B,EANT/B,OAOMqoB,EAASu6D,EAAOh7E,GAAcD,GAAQD,GAAUC,GAChD2gB,EAAY1nB,KAAIZ,EAAD,aAAA7D,OAAsBksB,GAAU,IAC/CE,EAAW3nB,KAAIZ,EAAD,YAAA7D,OAAqBksB,GAAU,IAEnD,SAAAlsB,OAAUmsB,EAAV,KAAAnsB,OAAuBosB,GCVzB,IAUa+mC,GANcv0C,aACzB8L,YAAO,UACPlD,IAIwBwnD,CAVE,SAAAppE,GAAA,IAAa4F,EAAb5F,EAAGlD,OAAU8I,KAAQ3H,EAArB+B,EAAqB/B,OAArB,OAC1B+iB,EAAA7K,EAAA8K,cAAA,YAAO2/D,GAAkB,CAAE3iF,SAAQ2H,OAAMi7E,MAAM,OCsHpCC,GAhEiB9nE,aAC5B8L,YAAO,SAAU,uBAAwB,aAAc,gBACvDlD,IAEAC,aAAU,SAAA1S,GAAA,MAA2B,CAAEvJ,KAA7BuJ,EAAGrS,OAAU8I,QAEvB8a,aAAa,CACXqgE,gBAAiB,SAAA3xE,GAAA,IACD6+C,EADC7+C,EACfswC,WAAcuO,WADC,OAGX,SAACnsD,GACL,IAAM4G,EAAUysB,KACdxxB,KACA8iD,KAFctxB,CAGd84B,GAGF,OAAOpvD,KAAIqQ,KAAKxG,EAAS,CAAEqG,SAAUjN,GAAY,IAAK,MAAO,MAE/Dk/E,aAAc,SAAA9lF,GAAA,IACF0K,EADE1K,EACZ4B,OAAU8I,KACMqgB,EAFJ/qB,EAEZokD,aAAgBr5B,QAFJg7D,EAAA/lF,EAGZqoE,qBAAwBzS,EAHZmwB,EAGYnwB,gBAAiBJ,EAH7BuwB,EAG6BvwB,sBAH7B,OAKR,SAAAzyD,GAAM,OAAI,WACTkK,KAASxE,KAAOmtD,GAAkB7yD,EAAO8Q,WAC5C2hD,EAAsB,CACpB9qD,OACAqgB,UACAvd,QAAS,CAACzK,UAMlByiB,aAAa,CACXwgE,eAAgB,SAAAzxE,GAAA,IAAiBw+C,EAAjBx+C,EAAGiwC,WAAcuO,WAAjB,OACd,SACA/vD,GAAI,OAAIW,KAAIovD,EAAD,GAAA7zD,OAAgB8D,GAAQ,MACrCijF,eAAgB,SAAAzxE,GAAA,IACdqxE,EADcrxE,EACdqxE,gBACUn7E,EAFI8J,EAEd5S,OAAU8I,KAFI,OAIV,SAAC8C,GACL,IAAM04E,EAAgBrjB,KAAKr1D,IAAY,GACjCygE,EAAWyX,GAAkB,CAEjC3iF,OAAQmjF,EACRx7E,OACAi7E,MAAM,IAEF/7B,EAASi8B,EAAgBliF,KAAIuiF,EAAe,aAClD,OACEpgE,EAAA7K,EAAA8K,cAAA,OAAKlmB,IAAK+pD,GACR9jC,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,yBAAyB4jC,GACzC9jC,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,0BAA0BioD,QAKlDvnD,IAI2By/D,CAjGE,SAAArhF,GAAA,IAC7BmhF,EAD6BnhF,EAC7BmhF,eACAJ,EAF6B/gF,EAE7B+gF,gBACAG,EAH6BlhF,EAG7BkhF,eACAF,EAJ6BhhF,EAI7BghF,aACAxlB,EAL6Bx7D,EAK7Bw7D,MACAC,EAN6Bz7D,EAM7By7D,MAN6B,OAQ7Bz6C,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,oBACZviB,KAAI,CAAC68D,EAAOC,GAAQ,SAAAv9D,GAAI,OACvB8iB,EAAA7K,EAAA8K,cAAA,OAAKlmB,IAAKmD,EAAMgjB,UAAU,qBAGxBF,EAAA7K,EAAA8K,cAACQ,EAAA,eAAD,CAAgBqC,YAAaq9D,EAAeD,EAAehjF,KACxDS,KAAIuiF,EAAehjF,GAAO,SAAAD,GAAM,OAE/B+iB,EAAA7K,EAAA8K,cAAA,OAAKlmB,IAAKkD,EAAO8Q,SAAUgV,QAASi9D,EAAa/iF,IAC/C+iB,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,yBACb6/D,EAAgB9iF,EAAO8Q,WAE1BiS,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,0BAGdF,EAAA7K,EAAA8K,cAACqgE,GAAD,CAAYrjF,OAAQA,eCQrBsjF,GA7Ca,SAAAvhF,GAAA,IAC1B2jB,EAD0B3jB,EAC1B2jB,aACAC,EAF0B5jB,EAE1B4jB,WACAgB,EAH0B5kB,EAG1B4kB,aACAksC,EAJ0B9wD,EAI1B8wD,gBACAxlD,EAL0BtL,EAK1BsL,MACAkwD,EAN0Bx7D,EAM1Bw7D,MACAC,EAP0Bz7D,EAO1By7D,MAP0B,OAS1Bz6C,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,8BACZ5V,EAAM3M,IAAI,SAAAwQ,EAIRgd,GAJQ,IACTpN,EADS5P,EACT4P,MACAipC,EAFS74C,EAET64C,WACA8J,EAHS3iD,EAGT2iD,iBAHS,OAKT9wC,EAAA7K,EAAA8K,cAAA,OACElmB,IAAG,GAAAX,OAAK2kB,EAAL,KAAA3kB,OAAc03D,EAAd,KAAA13D,OAAkC+xB,GACrCjL,UAAU,wBAEVF,EAAA7K,EAAA8K,cAAA,QAEEC,UAAWyC,EAAa5E,EAAO+xC,EAAgB0K,IAE/Cz3C,QAAS,kBAAMH,EAAW7E,EAAOipC,EAAY8I,EAAgB0K,MAI5D52C,EAAa7F,EAAO+xC,EAAgB0K,KAEvCx6C,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,yBAAyB8mC,GACzChnC,EAAA7K,EAAA8K,cAAA,QAEEC,UAAWyC,EAAa5E,EAAO+xC,EAAgB2K,IAE/C13C,QAAS,kBAAMH,EAAW7E,EAAOipC,EAAY8I,EAAgB2K,MAI5D72C,EAAa7F,EAAO+xC,EAAgB2K,UC7ClC+lB,GAAsBxoE,aACjC8L,YACE,SACA,YACA,cACA,aACA,wBAGFpE,aAAa,CACX+gE,gBAAiB,SAAAzhF,GAAA,IACSixD,EADTjxD,EACfujE,qBAAwBtS,YADT,OAGX,SAAAnvD,GAAQ,OAAIjD,KAAIoyD,EAAa,CAACnvD,EAAU,UAAW,QAG3D4e,aAAa,CACXi7C,SAAU,SAAAxsD,GAAA,IACgB8hD,EADhB9hD,EACRo0D,qBAAwBtS,YADhB,OAGJ,SAAAnvD,GAAQ,OAAI,SAAA/G,GAAG,OAAI8D,KAAIoyD,EAAa,CAACnvD,EAAU/G,GAAM,OAE3D6pB,aAAc,SAAAxV,GAAA,IAAGqyE,EAAHryE,EAAGqyE,gBAAH,OAAyB,SAAC1iE,EAAOjd,GAC7C,IAAMuO,EAAQxR,KACZqQ,KAAKuyE,EAAgB3/E,GAAW,CAAEid,UAAU,SAE9C,OAAO1O,EAAQA,EAAMpK,UAAY,MAGnC0d,aAAc,SAAAzoB,GAAA,IAAGumF,EAAHvmF,EAAGumF,gBAAH,OAAyB,SAAC1iE,EAAOjd,GAC7C,IAAMk6D,EAAWn9D,KACfqQ,KAAKuyE,EAAgB3/E,GAAW,CAAEid,UAClC,qBAGF,OAAOoC,KACL,uBACA,CAAE86C,4BAA6BD,MAInCp4C,WAAY,SAAAnU,GAAA,IACVgyE,EADUhyE,EACVgyE,gBACU77E,EAFA6J,EAEV3S,OAAU8I,KACcqoD,EAHdx+C,EAGV8zD,qBAAwBtV,WACxBjpC,EAJUvV,EAIVuV,YACaE,EALHzV,EAKV0V,UAAaD,QALH,OAMN,SAEJnG,EAEAipC,EAEAlmD,GAGA,IAAMqZ,EAAqBtc,KACzBqQ,KAAKuyE,EAAgB3/E,GAAW,CAAEid,UAClC,qBAEI9gB,EAASY,KACbqQ,KAAK++C,EAAY,CAAEl/C,SAAUjN,IAC7B,iBACA,IAEIwkB,EAASzgB,GAAcD,GAEzBuV,GACF+J,EAAQ,CACN/J,SACAV,MAAOuK,EACPpf,OACArC,WAAU,GAAAnJ,OAAK6D,EAAM,aAAA7D,OAAcksB,IAAzB,KAAAlsB,OAAsC6D,EAAM,YAAA7D,OAAaksB,KACnEnT,gBAAiB60C,EACjBxqC,KAAM,UACNk6C,WAAY,uBAKpB91C,KCtFWyrC,GACTvsD,QADFgsD,QAAWO,oBAmEAq0B,GAAcF,GAhEE,SAAAxhF,GAAA,IAC3B2jB,EAD2B3jB,EAC3B2jB,aACAC,EAF2B5jB,EAE3B4jB,WACA+3C,EAH2B37D,EAG3B27D,SACA/2C,EAJ2B5kB,EAI3B4kB,aACwB8sC,EALG1xD,EAK3BujE,qBAAwB7R,YACxBZ,EAN2B9wD,EAM3B8wD,gBACA0K,EAP2Bx7D,EAO3Bw7D,MACAC,EAR2Bz7D,EAQ3By7D,MAR2B,OAU3Bz6C,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KACErD,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,0BACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,8DACbF,EAAA7K,EAAA8K,cAAA,OACEC,UAAU,yCAEVksC,IAAKuO,EAAS7K,EAAgB0K,GAAzBG,CAAiC,cACtCC,IAAI,WACJ16D,QAAS,SAAAxH,GAAC,OAAI2zD,GAAoB3zD,EAAG,WAEvCsnB,EAAA7K,EAAA8K,cAAA,OACEC,UAAU,kBAEVksC,IAAKuO,EAAS7K,EAAgB0K,GAAzBG,CAAiC,gBACtCC,IAAI,aACJ16D,QAASmsD,MAIbrsC,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,kDACbF,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAKP,UAAU,qBAAqBrW,EAAE,WAGxCmW,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,8DACbF,EAAA7K,EAAA8K,cAAA,OACEC,UAAU,sEAEVksC,IAAKuO,EAAS7K,EAAgB2K,GAAzBE,CAAiC,cACtCC,IAAI,WACJ16D,QAAS,SAAAxH,GAAC,OAAI2zD,GAAoB3zD,EAAG,WAEvCsnB,EAAA7K,EAAA8K,cAAA,OACEC,UAAU,kBAEVksC,IAAKuO,EAAS7K,EAAgB2K,GAAzBE,CAAiC,gBACtCC,IAAI,aACJ16D,QAASmsD,OAKfrsC,EAAA7K,EAAA8K,cAAC0gE,GAAD,CAEEr2E,MAAOomD,EACP8J,MAAOA,EACPC,MAAOA,EACP72C,aAAcA,EACdjB,aAAcA,EACdC,WAAYA,EACZktC,gBAAiBA,OCNV8wB,GC7C8B5oE,aAIzC8L,YACE,eACA,cACA,aACA,SACA,uBACA,kBAGFpE,aAAa,CAQX07B,QAAS,SAAAp8C,GAAA,IACW4pB,EADX5pB,EACPknB,eAAkB0C,aAClB6yB,EAFOz8C,EAEPy8C,kBACU72C,EAHH5F,EAGPlD,OAAU8I,KACMqgB,EAJTjmB,EAIPs/C,aAAgBr5B,QACQs2B,EALjBv8C,EAKPujE,qBAAwBhnB,eALjB,OAMH,WACJA,EAAe,CACb32C,OACAqgB,UACArlB,OAAQgpB,IAEV6yB,MAQFG,QAAS,SAAAztC,GAAA,IACWqtC,EADXrtC,EACP+X,eAAkBs1B,kBAClBC,EAFOttC,EAEPstC,kBAFO,OAGH,WACJD,IACAC,QAGJI,aAAU,CACRC,kBADQ,WACY,IAAAC,EAMdrhD,KAAKV,OACTizB,EAPkB8uB,EAGhB71B,eAAkB+G,kBAHF8uB,EAKhBwmB,qBAAwBpkD,mBAK9ByC,IDfiCigE,CAhDS,SAAA7hF,GAAA,IAChCwe,EADgCxe,EAC1ClD,OAAU0hB,UACV49B,EAF0Cp8C,EAE1Co8C,QACAQ,EAH0C58C,EAG1C48C,QACA2mB,EAJ0CvjE,EAI1CujE,qBAJ0C,OAM1CviD,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,qEACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,eACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,oBACbF,EAAA7K,EAAA8K,cAAA,MAAIC,UAAU,eACZF,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAE,qBAITmW,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,cAAc6C,QAAS64B,KAGzC57B,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,uBACbF,EAAA7K,EAAA8K,cAACsI,GAAD,CACEvB,aAAcu7C,EACd/5C,SAAU,KAGdxI,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,sBACbF,EAAA7K,EAAA8K,cAACmN,GAAD,OAEFpN,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,oBACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,iBACbF,EAAA7K,EAAA8K,cAAA,SAEE8C,QAAS64B,EACTp/B,KAAK,SACLnN,MAAOmO,EAAU,UACjB0C,UAAU,iBAEZF,EAAA7K,EAAA8K,cAAA,SACE8C,QAASq4B,EACT5+B,KAAK,SACLnN,MAAOmO,EAAU,MACjB0C,UAAU,uBEjBP4gE,GAZqB9oE,aAClC8L,YAAO,SAAU,YAAa,cAAe,cAC7CC,aAAU,cAAe,aAAa,GAEtCrE,aAAa,CAEX+7B,kBAAmB,SAAAttC,GAAA,IAAG+yC,EAAH/yC,EAAG+yC,UAAH,OAAmB,kBAAMA,EAAU,SAAA/5B,GAAC,OAAKA,QAE9DvG,IARkC5I,CAZR,SAAAhZ,GAAA,IAAGy8C,EAAHz8C,EAAGy8C,kBAAmB0T,EAAtBnwD,EAAsBmwD,YAAtB,OAC1BnvC,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,qBACbF,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAKP,UAAU,mBAAmBrW,EAAE,kBACpCmW,EAAA7K,EAAA8K,cAAA,KAAGC,UAAU,0BAA0B6C,QAAS04B,GAC9Cz7B,EAAA7K,EAAA8K,cAAA,KAAGC,UAAU,mBAEdivC,GACCnvC,EAAA7K,EAAA8K,cAAC2gE,GAAD,CAAqBnlC,kBAAmBA,OCtBjC4J,GAAgB,CAC3B,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KCoFW0L,GA/CkB/4C,aAC7B8L,YAAO,SAAU,uBAAwB,gBACzClD,IAEAC,aAAU,SAAA1S,GAAA,MAA2B,CACnCvJ,KADQuJ,EAAGrS,OAAU8I,QAGvBi3C,aAAU,CACRC,kBADQ,WACY,IAAAC,EAQdrhD,KAAKV,MALP4K,EAHgBm3C,EAGhBn3C,KAEgBqgB,EALA82B,EAKhBuC,aAAgBr5B,SAKlBxP,EAVkBsmC,EAOhBwmB,qBAAwB9sD,YAGf,CACT7Q,OACAqgB,UACArlB,OAAQylD,MAGZwW,mBAjBQ,SAiBWC,GAAW,IAAAC,EAQxBrhE,KAAKV,MALP4K,EAH0Bm3D,EAG1Bn3D,KAEgBqgB,EALU82C,EAK1Bzd,aAAgBr5B,QALU87D,EAAAhlB,EAO1BwG,qBAAwBniE,EAPE2gF,EAOF3gF,MAAOmwD,EAPLwwB,EAOKxwB,aAI7BuL,EAAUl3D,OAASA,GACrBxE,EAAM,CACJwE,OACAqgB,UACArlB,OAAQ2wD,OAKhB3vC,IAG4BogE,CAxES,SAAAhiF,GAAA,IAAAuuD,EAAAvuD,EACrCs/C,aACE5gD,KAAQmhB,EAF2B0uC,EAE3B1uC,SAAUC,EAFiByuC,EAEjBzuC,SAFiBmiE,EAAAjiF,EAIrCujE,qBAAwB5c,EAJas7B,EAIbt7B,SAAUmK,EAJGmxB,EAIHnxB,gBAJG,OAMrC9vC,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,aACbF,EAAA7K,EAAA8K,cAACihE,GAAD,MACAlhE,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,wBAGbF,EAAA7K,EAAA8K,cAAC6/D,GAAD,CAAetlB,MAAO37C,EAAU47C,MAAO37C,IACtC6mC,EACC3lC,EAAA7K,EAAA8K,cAACygE,GAAD,CACElmB,MAAO37C,EACP47C,MAAO37C,EACPgxC,gBAAiBA,IAGnB9vC,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,gBCpCVihE,GAAe,kBAC1BnhE,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KACErD,EAAA7K,EAAA8K,cAACmhE,GAAD,MACAphE,EAAA7K,EAAA8K,cAACohE,GAAD,QCDSC,GAAU,SAAAtiF,GAAA,IAAG9C,EAAH8C,EAAG9C,KAAH,OACrB8jB,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,sBACH,UAAThkB,GAAoB8jB,EAAA7K,EAAA8K,cAACshE,GAAD,QC+DZC,WAhCexpE,aAC1B8L,YAAO,SAAU,UAAW,kBAAmB,OAAQ,WAAY,SACnE+3B,aAAU,CACRC,kBADQ,WACY,IAAAC,EAgBdrhD,KAAKV,MAbGkC,EAHM6/C,EAGhBjgD,OAAUI,KAEVqK,EALgBw1C,EAKhBx1C,QAEA0e,EAPgB82B,EAOhB92B,QAEA1nB,EATgBw+C,EAShBx+C,OAEAgN,EAXgBwxC,EAWhBxxC,gBAEAc,EAbgB0wC,EAahB1wC,SAEAzH,EAfgBm4C,EAehBn4C,MAEImqD,EAAc9oC,EAChB,CAACA,GACDpnB,KAAI0M,EAAiB,CAACrO,EAAMqB,IAChCgJ,EAAQnG,MAAM7C,EAAQwwD,GACtBnqD,EAAMxD,MAAM7C,EAAQwwD,GACpB1iD,EAASjL,WAGbwgB,IAIyB6gE,CAvDE,SAAAziF,GAAA,IACjB9C,EADiB8C,EAC3BlD,OAAUI,KACFW,EAFmBmC,EAE3BnE,KAAQgC,OACL7C,EAHwBQ,OAAA8Z,GAAA,EAAA9Z,CAAAwE,EAAA,0BAK3BghB,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,mBACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,sBAGbF,EAAA7K,EAAA8K,cAACyhE,GAAW1nF,GACZgmB,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,mBACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,8BACbF,EAAA7K,EAAA8K,cAACu/D,GAAD,OAIFx/D,EAAA7K,EAAA8K,cAACoxD,GAAD72E,OAAAsW,OAAA,CAAUnU,IAAKE,GAAY7C,MAG/BgmB,EAAA7K,EAAA8K,cAAC0hE,GAAD,CAASzlF,KAAMA,QCXJ0lF,GApBA,SAAA5iF,GAAqB,IAAlB6iF,EAAkB7iF,EAAlB6iF,MAAO54E,EAAWjK,EAAXiK,KAEjB64E,EAAU74E,EAAO7D,GAAS6D,GAAQ7D,GAASnI,OACjD,OACE+iB,EAAA7K,EAAA8K,cAAA,OACEmsC,IAAKy1B,EACL3hF,QAAS,SAACxH,GAERA,EAAE4nB,OAAO8rC,IAAM01B,GAEjBlnB,IAAK3xD,KCYI6a,eAAO,WAAPA,CAAmBlD,YAvBjB,SAAC5mB,GAAU,IAClB8oE,EAAoC9oE,EAApC8oE,SAAUj5D,EAA0B7P,EAA1B6P,EAAGwB,EAAuBrR,EAAvBqR,SAAU02E,EAAa/nF,EAAb+nF,SACvBx2E,EAA0Bu3D,EAA1Bv3D,SAAUy2E,EAAgBlf,EAAhBkf,YAClB,OACEhiE,EAAA7K,EAAA8K,cAAA,QACE8C,QAAS,SAAArqB,GAAC,OAAIspF,EAAYtpF,EAAG2S,IAC7B6U,UAAU,gCAET6hE,EAASx2E,GAJZ,IAIuByU,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAGA,EAAE0B,KAC/ByU,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,iBACbF,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAGwB,EAASE,UCmGZ02E,GATcjqE,aACzB8L,YAAO,gBAAiB,UACxBlD,IACAC,aACE,SAAA1S,GAAA,MAA2B,CAAEmX,OAAQzgB,GAArCsJ,EAAGrS,OAAU8I,SAEfgc,IAGwBshE,CA7FE,SAAAljF,GAAA,IrRuZAmjF,EqRvZAC,EAAApjF,EAC1B08C,cACEr/C,EAFwB+lF,EAExB/lF,WACAC,EAHwB8lF,EAGxB9lF,QAEFgpB,EAL0BtmB,EAK1BsmB,OAL0B,OAO1BtF,EAAA7K,EAAA8K,cAAA,OACEC,UAAWC,KACT,mBACA,CAAEkiE,0BAA2BhmF,KAG/B2jB,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,sCACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,sBAGZ5jB,GAAW0jB,EAAA7K,EAAA8K,cAACqiE,GAAD,CAAQT,MAAOvlF,EAAQimF,UAGtCjmF,GACC0jB,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,oCACbF,EAAA7K,EAAA8K,cAAA,MAAIC,UAAU,qBACZF,EAAA7K,EAAA8K,cAAA,YAAO3jB,EAAO,cAAAlD,OAAeksB,MAE/BtF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,oBACZ5jB,EAAQY,KAAKjE,IACZ+mB,EAAA7K,EAAA8K,cAACS,GAAA,EAAD,CAAMJ,OAAO,SAAS3kB,GAAE,UAAAvC,OAAYkD,EAAQY,KAAKjE,KAC9CqD,EAAQY,KAAR,QAAA9D,OAAqBksB,KAGzBhpB,EAAQY,KAAKjE,IAAMqD,EAAQkmF,cAAcvpF,IAAM,KAC/CqD,EAAQkmF,cAAcvpF,IACrB+mB,EAAA7K,EAAA8K,cAACS,GAAA,EAAD,CAAMJ,OAAO,SAAS3kB,GAAE,UAAAvC,OAAYkD,EAAQkmF,cAAcvpF,KACvDqD,EAAQkmF,cAAR,QAAAppF,OAA8BksB,MAIrCtF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,sBACZ5jB,EAAQmmF,YAAY5sD,OACnB7V,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,gCACdF,EAAA7K,EAAA8K,cAAA,KACEC,UAAS,uCAAA9mB,OAAyCkD,EAAQmmF,YAAY5sD,MAAM6sD,iBAE9E1iE,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,iBACbF,EAAA7K,EAAA8K,cAAA,YAAO3jB,EAAQmmF,YAAR,QAAArpF,OAA4BksB,OAIxChpB,EAAQqmF,KACP3iE,EAAA7K,EAAA8K,cAAC2iE,GAAD,CACEb,SAAU,CAACzlF,EAAQqmF,IAAKrmF,EAAQumF,UAChCx3E,SAAU,CAAC,kBAAmB,0BAC9BxB,EAAG,CAAC,YAAa,MAGpBvN,EAAQs0E,QACP5wD,EAAA7K,EAAA8K,cAAC2iE,GAAD,CACEb,SAAU,CAACzlF,EAAQs0E,OAAQ9rE,GAAOxI,EAAQs0E,SAC1CvlE,SAAU,CAAC,oBAAqB,uBAChCxB,EAAG,CAAC,UAAW,MAGlBvN,EAAQ6lF,QACPniE,EAAA7K,EAAA8K,cAAC2iE,GAAD,CACEb,SAAU,CAACzlF,EAAQ6lF,QrRsVLA,EqRtVwB7lF,EAAQ6lF,SrRsVXA,EAAS,MAAOl9E,QAAQ,KqRrV3DoG,SAAU,CAAC,mBAAoB,qBAC/BxB,EAAG,CAAC,UAAW,gBAGlBvN,EAAQwmF,aACP9iE,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,gBAAgB5jB,EAAQwmF,YAAxC,KAEDxmF,EAAQC,OAAOtD,IACd+mB,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,gBACb5jB,EAAQC,OAAR,QAAAnD,OAAuBksB,UCtFvB+iD,GANC,kBACdroD,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,8BACbF,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAGstC,GAAWgB,wBCgGV4qC,WA9CmB/qE,aAC9B8L,YAAO,SAAU,YAAa,eAC9BC,aAAU,mBAAoB,iBAAiB,GAC/CA,aAAU,kBAAmB,aAAa,GAC1CnD,IACAC,aAA4C,SAAA1S,GAAA,IAC1C/M,EAD0C+M,EAC1C/M,QACA4hF,EAF0C70E,EAE1C60E,gBACAC,EAH0C90E,EAG1C80E,iBAH0C,MAIrC,CACLC,cAAe/iE,KAAG,oBAAqB,CACrCgjE,8BAA+BF,IAAqBD,EACpDI,4BAA6BJ,IAE/BK,oBAAqBljE,KAAG,2BAA4B,CAClDmjE,sCAAuCliF,OAG3Cse,aAAqD,CACnDkD,WAAY,SAAAxU,GAAA,IACAxJ,EADAwJ,EACVtS,OAAU8I,KACV2+E,EAFUn1E,EAEVm1E,UACAv/D,EAHU5V,EAGV4V,YACaE,EAJH9V,EAIV+V,UAAaD,QAJH,OAKN,SAAC/J,EAAQqpE,GAAT,OAAqB,WACpBt2E,KAAQiN,KACXopE,GAAU,GACVr/D,EAAQ,CACN/J,SACAvV,OACAuN,gBAAiBqxE,EACjB/pE,MAAOuK,EACPxH,KAAM,gBACL6C,KAAK,kBAAMkkE,GAAU,SAG5BE,cAAe,SAAAvpF,GAAA,IACbigB,EADajgB,EACbigB,OACAupE,EAFaxpF,EAEbwpF,cACAT,EAHa/oF,EAGb+oF,iBAHa,OAIT,WACA9oE,EAAOvgB,QAAQ8pF,GAAeT,OAKTU,CA5ES,SAAA3kF,GAAA,IACtCmb,EADsCnb,EACtCmb,OACAyI,EAFsC5jB,EAEtC4jB,WACAsgE,EAHsClkF,EAGtCkkF,cACAM,EAJsCxkF,EAItCwkF,QACAR,EALsChkF,EAKtCgkF,gBACAY,EANsC5kF,EAMtC4kF,UACAH,EAPsCzkF,EAOtCykF,cACAR,EARsCjkF,EAQtCikF,iBACAI,EATsCrkF,EAStCqkF,oBATsC,OAWtCrjE,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,6BACbF,EAAA7K,EAAA8K,cAAA,OACE8C,QAASH,EAAWzI,EAAQqpE,GAC5BK,aAAcJ,EACdK,aAAcL,EACdvjE,UAAWgjE,GAEXljE,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,4BACbF,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAG25E,KAEVxjE,EAAA7K,EAAA8K,cAAA,OAAKC,UAAWmjE,GACdrjE,EAAA7K,EAAA8K,cAAA,YAAO2jE,IAERZ,GAAmBhjE,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,8BAClC+iE,IAAqBD,GAAmBhjE,EAAA7K,EAAA8K,cAAC8jE,GAAD,WCgBlCC,GAjBmBhsE,aAC9B0H,aAA8C,CAC5CukE,UAAW,SAAA71E,GAAA,IAAG9D,EAAH8D,EAAG9D,MAAH,OAAe,SAAAnJ,GAAQ,OAChC2X,KACExO,EACA,SAACyO,EAAoBqJ,GACnB,OAAIA,EAAKzZ,UAAYxH,GAAYihB,EAAKkC,uBAC7BlrB,KAAO2f,EAAKqJ,EAAKkC,wBAEnBvL,GACN,QAIT6H,IAG6BsjE,CA3CE,SAAAllF,GAAA,IAC/BilF,EAD+BjlF,EAC/BilF,UACArkF,EAF+BZ,EAE/BY,OACA0K,EAH+BtL,EAG/BsL,MAH+B,OAK/B0V,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KACG1lB,KACCiC,EACA,SAAAuO,GAAA,IACEjN,EADFiN,EACEjN,SACAC,EAFFgN,EAEEhN,SACAC,EAHF+M,EAGE/M,QAHF,OAKE4e,EAAA7K,EAAA8K,cAAC8iE,GAAD,CACEhpF,IAAKoH,EACLud,QAASvd,EACTqiF,QAAStiF,EACTE,QAASA,EACT+Y,OAAQ8pE,EAAU9iF,GAClByiF,UAAW3hE,GAAoB9gB,EAAUmJ,EAAO,4BC2B7C65E,GA7BensE,aAC1B8L,YACE,gBACA,cACA,mBAEF+3B,aAAuB,CACrBC,kBADqB,WACD,IAAAC,EAWdrhD,KAAKV,MATPkC,EAFgB6/C,EAEhB7/C,KACAqB,EAHgBw+C,EAGhBx+C,OAGctE,EANE8iD,EAIhBL,cACEp/C,QACEC,OAAUtD,GAGCmH,EATC27C,EAShB8X,YAAezzD,MACfmK,EAVgBwxC,EAUhBxxC,gBAEFnK,EACE7C,EACAM,KAAI0M,EAAiB,CAACrO,EAAMqB,GAAS,IACrCtE,MAIN2nB,IAGgCwjE,CAlDS,SAAAplF,GAAA,IAEvC1C,EAFuC0C,EACzC08C,cACEp/C,QAFuC+nF,EAAArlF,EAIzC60D,YACEx3D,EALuCgoF,EAKvChoF,WACAiO,EANuC+5E,EAMvC/5E,MANuC,OASzC0V,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,0BACZ7jB,EACC2jB,EAAA7K,EAAA8K,cAAC0D,GAAD,MAEA3D,EAAA7K,EAAA8K,cAAC+jE,GAAD,CACEpkF,OAAQoB,GAAmB1E,EAAQC,OAAOtD,IAC1CqR,MAAOA,4BC7Bf,SAASg6E,GAAQ9vB,EAAW+vB,GAC1B,OAAO/vB,EAAOr1D,OAAIsF,OAAS8/E,EAAaplF,OAAIsF,OCR9C,IAQe+/E,GARM,CACnBlS,EAAG,iBACH/wE,EAAG,iBACHixE,GAAI,kBACJ7V,OAAQ,0BACRl4D,KAAM,0BCeOggF,GAdK,SAAAzlF,GAAA,IAAA0lF,EAAA1lF,EAAGg0D,gBAAH,IAAA0xB,EAAcC,GAAM,GAApBD,EAAA,OACjBt6D,KAAQ4oC,GACPhzC,EAAA7K,EAAA8K,cAAA,YACED,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAE,mBADT,KAC+BmpD,EAASp5D,QAIxComB,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAG86E,GAAM3xB,MCEL4xB,GAAgB,SAAA5lF,GAAA,IAAG4F,EAAH5F,EAAG4F,KAAMwf,EAATplB,EAASolB,MAAT,OAC3BpE,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KACErD,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,SACbkE,EAAM8pC,WADT,IACsB9pC,EAAK,iBAAAhrB,OAAkBuL,GAAUC,MAEvDob,EAAA7K,EAAA8K,cAAA,QAAMC,UAAWC,KACf,eACA,CAAE0kE,kBAAmBzgE,EAAMikC,eAAiBjkC,EAAMkkC,OAClD,CAAEw8B,iBAAkB1gE,EAAMikC,eAAiBjkC,EAAMkkC,SAEjDlkC,EAAMkkC,MAAO,IALf,MAKuBlkC,EAAMikC,kBCvBpB08B,GAAe,kBAC1B/kE,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,iBACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,cCwFN8kE,GAXmBhtE,aAC9B8L,YAAO,UAAW,UAClBlD,IACAC,aAA4C,SAAA1S,GAAA,IAC/BjQ,EAD+BiQ,EAC1CnQ,QAAWE,KACXX,EAF0C4Q,EAE1C5Q,OAF0C,MAGrC,CACLwwD,YAAalwD,KAAIK,EAAKX,GAAS,UAAW,OAIf0nF,CA7ES,SAAAjmF,GAAA,IAC5B4F,EAD4B5F,EACtClD,OAAU8I,KACCvI,EAF2B2C,EAEtChB,QAAW3B,WACX0xD,EAHsC/uD,EAGtC+uD,YACAiF,EAJsCh0D,EAItCg0D,SACAkyB,EALsClmF,EAKtCkmF,WALsC,OAOtCllE,EAAA7K,EAAA8K,cAAA,MACEC,UAAWC,KACT,kCACA,mCACA,0CAGD4tC,EAAYpwD,IAAI,SAAAwB,GAAC,OAChB6gB,EAAA7K,EAAA8K,cAAA,MACElmB,IAAKoF,EAAE4gB,QACPG,UAAWC,KAAG,GAAI,CAChBtjB,OAAQutB,KAAQ4oC,IAAaA,EAAS7rD,SAAShI,EAAE4gB,WAEnDgD,QAAS,SAAArqB,GAAC,OAAIwsF,EAAWxsF,EAAGyG,EAAE4gB,WAE9BC,EAAA7K,EAAA8K,cAACklE,GAAD,CAAevgF,KAAMA,EAAMwf,MAAOjlB,IAClC6gB,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,QAAQ3b,GAAapF,EAAED,gBAG1C7C,GAAc2jB,EAAA7K,EAAA8K,cAACmlE,GAAD,SCkENC,GAxBwBrtE,aACnC8L,YACE,SACA,UACA,mBAEFjE,eACAH,aAAqD,CACnD4lE,YAAa,SAAAn3E,GAAA,IACDjS,EADCiS,EACXrS,OAAUI,KACVqB,EAFW4Q,EAEX5Q,OACAgN,EAHW4D,EAGX5D,gBAHW,OAIP,WACJ,IAAMyoD,EAAWzoD,EAAgB8oD,OAC7B9oD,EAAgBqe,aAChBre,EAAgB4oD,gBACft1D,KAAI0M,EAAgBrO,GAAjB,GAAA9C,OAA2BmE,GAAU,IAE7C,OAAOy1D,EAAWA,EAAS3sD,QAAU,OAGzCua,IAGkC2kE,CApFE,SAAAvmF,GAAA,IACpCwmF,EADoCxmF,EACpCwmF,cACAC,EAFoCzmF,EAEpCymF,mBACAH,EAHoCtmF,EAGpCsmF,YACWjpF,EAJyB2C,EAIpChB,QAAW3B,WACXkB,EALoCyB,EAKpCzB,OACAmoF,EANoC1mF,EAMpC0mF,aACAn7E,EAPoCvL,EAOpCuL,gBACA26E,EARoClmF,EAQpCkmF,WARoC,OAUpCllE,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,8BACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,wBACbF,EAAA7K,EAAA8K,cAAA,KACEC,UAAU,+BAEVwG,SAAS,IACT4vC,MAAM,GACNvzC,QAASyiE,GAETxlE,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,mBAGdF,EAAA7K,EAAA8K,cAAC0lE,GAAD,CAAa3yB,SAAUsyB,OAEzBtlE,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,qBAEjB3V,EAAgB8oD,QACfrzC,EAAA7K,EAAA8K,cAAA,OACE2lE,SAAUF,EACVxlE,UAAWC,KAAG,mCAAoC,iBAAkB,CAClE0lE,wBAAyBxpF,KAG3B2jB,EAAA7K,EAAA8K,cAAA,MACEC,UAAWC,KACT,kCACA,mCACA,0CAGDxiB,KAAIgnF,GAAO,SAAC17E,EAAMlP,GAAP,OACVimB,EAAA7K,EAAA8K,cAAA,MAAIlmB,IAAKA,EAAKgpB,QAAS,SAAArqB,GAAC,OAAI+sF,EAAmB/sF,EAAGqB,KAGhDimB,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAG86E,GAAM5qF,SAIpBimB,EAAA7K,EAAA8K,cAAA,MAAIC,UAAU,uCACdF,EAAA7K,EAAA8K,cAAC+kE,GAAD,CACEznF,OAAQA,EACR2nF,WAAYA,EACZlyB,SAAUsyB,WC8EPQ,GAtGa9tE,aAC1B8L,YAAO,SAAU,UAAW,mBAC5B+3B,aAAU,CACRC,kBADQ,WACY,IAAAC,EASdrhD,KAAKV,MALIkE,EAJK69C,EAIhB/9C,QAAWE,KAEXX,EANgBw+C,EAMhBx+C,OAEAgN,EARgBwxC,EAQhBxxC,gBAEIvM,EAAUH,KAAIK,EAAM,CAACX,EAAQ,WAAY,IACzCipD,EAAa7oD,KAAIK,EAAS,WAChCuM,EAAgBwoD,YAAY1sD,KAAMmgD,EAAY,EAAG,GAAIjpD,MAIzDmiB,aAAa,CACXqmE,mBAAoB,SAAA53E,GAAA,IAAGnQ,EAAHmQ,EAAGnQ,QAAST,EAAZ4Q,EAAY5Q,OAAZ,OAAyB,kBAAMS,EAAQ+nD,UAAUxoD,OAGvEmiB,aAAa,CAEXgmE,aAAc,SAAAt3E,GAAA,IAAG23E,EAAH33E,EAAG23E,mBAAH,OAA4B,SAACrtF,GAAM,IAAAwvB,EACGxvB,EAAE4nB,OAA5C0lE,EADuC99D,EACvC89D,aAAcC,EADyB/9D,EACzB+9D,aADyB/9D,EACXg+D,UACpBD,EAAeD,IAAiB,GAC9CD,MAIJP,cAAe,SAAAtrF,GAAA,IAAGqD,EAAHrD,EAAGqD,OAAQgN,EAAXrQ,EAAWqQ,gBAAX,OAAiC,SAAC7R,GAC/CA,EAAE4S,iBACFf,EAAgB9M,UAAUF,KAE5BoiB,aAAc,SAAAlR,GAAA,IAAGlR,EAAHkR,EAAGlR,OAAQgN,EAAXkE,EAAWlE,gBAAX,OAAiC,WACzCA,EAAgB8oD,QAClB9oD,EAAgB9M,UAAUF,KAK9B2nF,WAAY,SAAAx2E,GAAA,IAAG5S,EAAH4S,EAAG5S,OAAQyB,EAAXmR,EAAWnR,OAAQgN,EAAnBmE,EAAmBnE,gBAAnB,OAAyC,SAAC7R,EAAGO,GACvDP,EAAE4S,iBACFf,EAAgB0oD,UAAU,MAC1B,IAAItC,EAAqBpmD,EAAgB8oD,OACrC9oD,EAAgBqe,aAChB/qB,KAAI0M,EAAgBzO,EAAOI,MAAxB,GAAA9C,OAAkCmE,GAAU,IAGnDozD,GADAA,EAAMxpD,KAAS,CAAC,OAAQ,UAAWwpD,GAAO,GAAKA,GACnCA,EAAItqD,QAAU,GAErBc,KAASwpD,EAAK13D,GAGjB03D,EAAM5xD,KAAO4xD,EAAK,SAAAxqD,GAAI,OAAIA,IAASlN,IAFnC03D,EAAI9oD,KAAK5O,GAIXsR,EAAgB/M,gBAAgBmzD,EAAKpzD,KAEvCkoF,mBAAoB,SAAAv1E,GAAA,IACRhU,EADQgU,EAClBpU,OAAUI,KADQiqF,EAAAj2E,EAElBlS,QAAWoC,EAFO+lF,EAEP/lF,MAAOlC,EAFAioF,EAEAjoF,KAClBX,EAHkB2S,EAGlB3S,OAHkB6oF,EAAAl2E,EAIlB3F,gBAAmB9M,EAJD2oF,EAIC3oF,UAAWw1D,EAJZmzB,EAIYnzB,UAAWz1D,EAJvB4oF,EAIuB5oF,gBAJvB,OAOd,SAAC9E,EAAGw6D,GACRx6D,EAAE4S,iBACF,IPjGuB5G,EOiGjB1G,EAAsCH,KAAIK,EAAKX,GAAS,WAC9D,GAAI4J,KAAS,CAAC,OAAQ,UAAW+rD,GAAS,CACxC,IAAMmzB,EAA6B,SAAXnzB,EAClBx0D,EAAmB2nF,EPnGxBlnF,KAAE,CAACA,OAAIsF,OAAQ,EAAG,IAAIC,OAAOA,GAO/B,SAAwBA,GAE7B,OAAOvF,KAAE,CAACmlF,GAAQnlF,OAAImnF,QAAU,GAAI,GAAI,EAAG,IAAI5hF,OAAOA,GO0FG6hF,GAC7C1nF,EAAiBwnF,EP7GxB,SAAgB3hF,GACrB,OAAOvF,OAAIuF,OAAOA,GO4GoB8hF,GPpFjC,SAAwB9hF,GAE7B,OAAOvF,KAAE,CAACmlF,GAAQnlF,OAAImnF,QAAU,EAAG,GAAI,EAAG,KAAK5hF,OAAOA,GOkFL+hF,GAC3CxzB,EAAUC,GACV9yD,EACElE,EACAqB,EACA,EACA,KACAmB,EACAG,EACArB,EACAC,OAEG,CACL,IAAMkzD,EAAM3yD,EAAQ8a,OAAO,SAAC7I,EAADtJ,EAAsB0jE,GAAQ,IAAnBtqD,EAAmBpZ,EAAnBoZ,QAKpC,OAJIsqD,EAAMnX,GAERjjD,EAAOpI,KAAKkY,GAEP9P,GACN,IACHgjD,IACAz1D,EAAgBmzD,EAAKpzD,GACrBE,EAAUF,QAIhBqjB,IAnG0B5I,CAlBR,SAAAhZ,GAAA,IAClB2gB,EADkB3gB,EAClB2gB,aACA6lE,EAFkBxmF,EAElBwmF,cACAC,EAHkBzmF,EAGlBymF,mBACAloF,EAJkByB,EAIlBzB,OACAmoF,EALkB1mF,EAKlB0mF,aACAR,EANkBlmF,EAMlBkmF,WANkB,OAQlBllE,EAAA7K,EAAA8K,cAAColE,GAAD,CACE9nF,OAAQA,EACRoiB,aAAcA,EACd6lE,cAAeA,EACfN,WAAYA,EACZO,mBAAoBA,EACpBC,aAAcA,MCKHgB,GA1BgB1uE,aAC7B8L,YAAO,YAAa,WACpBC,aAAU,WAAY,kBAAkB,GAExClD,aAAU,SAAA1S,GAAA,IAAGw4E,EAAHx4E,EAAGw4E,SAAH,MAA6B,CACrCC,eADQpsF,OAAA8Z,GAAA,EAAA9Z,CAAA2T,EAAA,cACa,GAAA/U,OAAIutF,EAAJ,UAGvBjnE,aAAa,CAEXiD,aAAc,kBAAM,SAAA9V,GAAO,OAAIsT,KAAG,CAAEtjB,OAAQgQ,MAC5Cg6E,aAAc,SAAAz4E,GAAA,IAAGrP,EAAHqP,EAAGrP,OAAQ+nF,EAAX14E,EAAW04E,UAAX,OAA2B,kBAAMA,EAAU/nF,OAE3D6hB,IAb6B5I,CAlBR,SAAAhZ,GAAA,IAErB6nF,EAFqB7nF,EAErB6nF,aAFqBE,EAAA/nF,EAIrBD,OAEE8N,EANmBk6E,EAMnBl6E,QAEAsF,EARmB40E,EAQnB50E,gBAGFwQ,EAXqB3jB,EAWrB2jB,aAXqB,OAarB3C,EAAA7K,EAAA8K,cAAA,MAAI8C,QAAS8jE,EAAc3mE,UAAWyC,EAAa9V,IACjDmT,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAG3E,KAASiN,QCiBN60E,GANahvE,aAC1B6H,eACAe,IAF0B5I,CA1BR,SAAAhZ,GAAA,IAGhB8nF,EAHgB9nF,EAClB6c,OAEEirE,UAGFjrE,EANkB7c,EAMlB6c,OAEA8qE,EARkB3nF,EAQlB2nF,SARkB,OAUlB3mE,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,+BACbF,EAAA7K,EAAA8K,cAAA,yBAEGpE,EAAOZ,WAAWtd,IAAI,SAACoB,EAAQsrE,GAAT,OAErBrqD,EAAA7K,EAAA8K,cAACgnE,GAAD,CACEltF,IAAKswE,EACLyc,UAAWA,EACX/nF,OAAQA,EACR4nF,SAAUA,UCSL/lE,eA5BC,SAAA5hB,GAAA,IAGZoO,EAHYpO,EACd6c,OAEEzO,eAHY,OAMd4S,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,QACZhT,KAAQE,GAUR4S,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,SAThB9S,EAAexT,OAAS,EAEtBwT,EAAezP,IAAI,SAACoB,EAAQsrE,GAAT,OACjBrqD,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK1mB,IAAKswE,EAAKxgE,EAAG3E,KAASnG,EAAO0b,oBAGpCuF,EAAA7K,EAAA8K,cAAA,YAAO7S,EAAexT,OAAtB,aC6COstF,GAzBelvE,aAC5B8L,YAAO,YAAa,WACpBC,aAAU,WAAY,kBAAkB,GAExCrE,aAAa,CACXiD,aAAc,SAAA3jB,GAAA,IAAaoO,EAAbpO,EAAG6c,OAAUzO,eAAb,OAAoC,kBAChD+S,KAAG,wBAAyB,CAAEtjB,QAASqQ,KAAQE,OACjDuX,YAAa,SAAAxW,GAAA,IAAGoL,EAAHpL,EAAGoL,SAAU4tE,EAAbh5E,EAAag5E,eAAb,OAAkC,kBAC7CA,GAAgB5tE,OAEpBqH,IAV4B5I,CA3BR,SAAChe,GAAU,IAEnBmY,EAMRnY,EANF6hB,OAAU1J,gBACV0J,EAKE7hB,EALF6hB,OACA8G,EAIE3oB,EAJF2oB,aACAgC,EAGE3qB,EAHF2qB,YACApL,EAEEvf,EAFFuf,SACA4tE,EACEntF,EADFmtF,eAEF,OACEnnE,EAAA7K,EAAA8K,cAAA,MAAIC,UAAWyC,KACb3C,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CACE5W,EAAG3E,KAASiN,GACZ+N,UAAU,QACV6C,QAAS,kBAAM4B,OAEjB3E,EAAA7K,EAAA8K,cAACmnE,GAAD,CAASvrE,OAAQA,IAChBtC,GACCyG,EAAA7K,EAAA8K,cAAConE,GAAD7sF,OAAAsW,OAAA,CACE6O,aAAc,kBAAMwnE,GAAgB5tE,KAChCvf,OC8BC4mB,eA/CM,SAAA5hB,GAAA,IAEnB6N,EAFmB7N,EAEnB6N,QAEAqT,EAJmBlhB,EAInBkhB,UAEAe,EANmBjiB,EAMnBiiB,QAEA0lE,EARmB3nF,EAQnB2nF,SAEA7lF,EAVmB9B,EAUnB8B,SAEAw1D,EAZmBt3D,EAYnBs3D,MAEAgxB,EAdmBtoF,EAcnBsoF,kBAdmB,OAgBnBtnE,EAAA7K,EAAA8K,cAAA,OAAKC,UAAS,yBAAA9mB,OAA2B8mB,IACvCF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,+BACbF,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAGysD,KAEVt2C,EAAA7K,EAAA8K,cAAA,UACGsnE,KAActmE,EAAS,CAAC,cAAe,CAAC,QAAQtjB,IAAI,SAAC6pF,EAAKnd,GAAN,OAEnDrqD,EAAA7K,EAAA8K,cAACwnE,GAAD,CACE1tF,IAAKswE,EACLxuD,OAAQ2rE,EACR1mF,SAAUA,EACV+L,QAASA,EACTy6E,kBAAmBA,EACnBX,SAAUA,UC2KLe,GAxFU1vE,aACvB8L,YAAO,YAAa,UAAW,cAAe,SAAU,WAExDjD,aAAU,SAAA1S,GAAsC,IAAnCw4E,EAAmCx4E,EAAnCw4E,SAAU7lF,EAAyBqN,EAAzBrN,SACf8lF,EADwCpsF,OAAA8Z,GAAA,EAAA9Z,CAAA2T,EAAA,yBAClB,GAAA/U,OAAIutF,EAAJ,OACtBgB,EAAU9pF,KAAI+oF,EAAgB,CAAC,WAAY,YAC3CgB,EAAU/pF,KAAI+oF,EAAgB,CAAC,WAAY,YAC3CiB,GAAa36E,KAAQ05E,EAAezsE,SAAxB,GAAA/gB,OACVuuF,IADU,KAAAvuF,OACGwuF,IAAY,EAAIA,IAAhB,IAAAxuF,OAAgCwuF,MACrD,MAAO,CACLE,eAAgBjqF,KAAI+oF,EAAgB,CAAC,UAAW,mBAChDl/E,QAASk/E,EAAel/E,QACxBnK,OAAQuD,EACRwmF,kBAAmB,kBAAMV,EAAel/E,QAAQyU,cAChDyqE,iBACAiB,eAIJnoE,aAAa,CAEXqoE,cAAe,SAAA35E,GAAA,IAAGw4E,EAAHx4E,EAAGw4E,eAAH,OAAwB,WAAM,IACnC9sE,EAAY8sE,EAAZ9sE,QAER,OAAO/a,KAAO+a,EAAS,SAAA5f,GAAA,IAAGkT,EAAHlT,EAAGkT,eAAH,OAAyBF,KAAQE,SAI5DsS,aAAa,CAEXsoE,eAAgB,SAAAv5E,GAAA,IAAGm4E,EAAHn4E,EAAGm4E,eAAH,OAAwB,WAAM,IACpC9sE,EAAoB8sE,EAApB9sE,QAASnK,EAAWi3E,EAAXj3E,OAEjB,OAAOhS,KAAInD,OAAOmI,OAAOgN,GAAS,SAAAjB,GAAA,IAAGhM,EAAHgM,EAAGhM,MAAH,MAAuC,CACvExB,SADgCwN,EAAUi1C,sBAE1C7pC,QAAS/a,KAAO+a,EAAS,CAAC,QAASpX,SAIvCspE,oBAAqB,SAAA97D,GAAA,IACTtL,EADSsL,EACnBpU,OAAU8I,KACVof,EAFmB9T,EAEnB8T,YACA4iE,EAHmB12E,EAGnB02E,eAHmB,OAIf,WACJ,IAAMzsE,EAASxc,KAAIipF,EAAezsE,OAAQ,MAC1C,GAAIjN,KAAQiN,GAAS,OAAO,KAE5BysE,EAAe1iE,QAAQ,CACrBzK,MAAOuK,EACP7J,SACAvV,aAINi3C,aAAU,CACRosC,qBADQ,WACe,IAEbrB,EAAmBlsF,KAAKV,MAAxB4sF,eACRA,EAAesB,eACftB,EAAeuB,YAAY,IAG7BrsC,kBARQ,WAUqBphD,KAAKV,MAAxB4sF,eACOwB,kBAGnBxnE,IApEuB5I,CApGP,SAAChe,GAAU,IAEzB+tF,EAaE/tF,EAbF+tF,cACAC,EAYEhuF,EAZFguF,eACAhc,EAWEhyE,EAXFgyE,oBACAhZ,EAUEh5D,EAVFg5D,SACA60B,EASE7tF,EATF6tF,UANyBQ,EAevBruF,EARF4sF,eACEvqF,EARuBgsF,EAQvBhsF,WACWyrF,EATYO,EASvB3gF,QAAWogF,eACXruE,EAVuB4uE,EAUvB5uE,MACA6uE,EAXuBD,EAWvBC,YACAJ,EAZuBG,EAYvBH,aAEFtB,EACE5sF,EADF4sF,eAEF,OACE5mE,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,0BACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,kBACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,yBACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,+BACbF,EAAA7K,EAAA8K,cAAA,KACE8C,QAAS,kBAAMulE,EAAYt1B,IAC3B9yC,UAAU,0BAEVF,EAAA7K,EAAA8K,cAAA,KAAGC,UAAU,gBACbF,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAKP,UAAU,uBAAuBrW,EAAE,kBAE1CmW,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,+BACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,oCACbF,EAAA7K,EAAA8K,cAAA,OACE0M,MAAO,CAAE47D,OAAQ,WACjBroE,UAAWC,KAAG,mCAAoC,CAChDqoE,0CAA2CnsF,IAE7C0mB,QAASipD,GAEThsD,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,SAChBF,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,oCACbriB,KAAI+oF,EAAgB,CAAC,SAAU,UAAW,KAG/C5mE,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,2EACb2nE,KAIP7nE,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,iCACbF,EAAA7K,EAAA8K,cAAA,KAAG8C,QAASmlE,EAAchoE,UAAU,yBAClCF,EAAA7K,EAAA8K,cAAA,KAAGC,UAAU,eACbF,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAKP,UAAU,uBAAuBrW,EAAE,yBAE1CmW,EAAA7K,EAAA8K,cAACQ,EAAA,MAAD,CAAOhH,MAAOA,OAIpBuG,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,6BACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,mCACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,gCACbF,EAAA7K,EAAA8K,cAAA,MAAIC,UAAU,kCACZF,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAE,mBAETmW,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CACEP,UAAU,oCACVrW,EAAE,8BAGLm+E,KAEIrqF,KAAIqqF,IAAkB,SAAAhpF,EAAwBqrE,GAAxB,IAAGvwD,EAAH9a,EAAG8a,QAAS5Y,EAAZlC,EAAYkC,SAAZ,OACvB8e,EAAA7K,EAAA8K,cAACwoE,GAADjuF,OAAAsW,OAAA,CACE/W,IAAKswE,EACLppD,QAASnH,EACToG,UAAU,8BACVo2C,MAAOpxD,KAAShE,GAChB2L,QAASk7E,KACL/tF,OAIZgmB,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,2BACbF,EAAA7K,EAAA8K,cAACQ,EAAA,gBAADjmB,OAAAsW,OAAA,CACE7H,KAAK,UACLy/E,aAAc7qF,KAAIiqF,EAAgB,CAAC,WAAY,WAC/Cj7E,QAASk7E,KACL/tF,IAENgmB,EAAA7K,EAAA8K,cAACQ,EAAA,gBAADjmB,OAAAsW,OAAA,CACE7H,KAAK,WACLy/E,aAAc7qF,KAAIiqF,EAAgB,CAAC,YAAa,WAChDj7E,QAASk7E,KACL/tF,UCxEH2uF,WAlBW3wE,aACxB8L,YAAO,SAAU,kBAAmB,WAEpCpE,aAAa,CACXkpE,mBAAoB,SAAA5pF,GAAA,IAClBimB,EADkBjmB,EAClBimB,QACA/oB,EAFkB8C,EAElB9C,KACA4E,EAHkB9B,EAGlB8B,SACAyJ,EAJkBvL,EAIlBuL,gBAJkB,OAKd,WACJ,MAAa,UAATrO,EAAyB,CAAC+oB,GAEvB03B,aAAK9+C,KAAI0M,EAAiB,CAACrO,EAAM4E,SAG5C8f,IAfwB5I,CAjBC,SAAChe,GAAU,IAElC4uF,EAGE5uF,EAHF4uF,mBACWvsF,EAETrC,EAFFgE,QAAW3B,WAGb,MAAa,UADTrC,EADFkC,MAEsBG,EAAmB2jB,EAAA7K,EAAA8K,cAAC0D,GAAD,MACpC3D,EAAA7K,EAAA8K,cAAC4oE,GAADruF,OAAAsW,OAAA,CAAWkiD,SAAU41B,KAA0B5uF,OC6D3C8uF,GA3BqB9wE,aAChC8L,YACE,cACA,kBACA,iBAEF+3B,aAA8B,CAC5BC,kBAD4B,WACR,IAAAC,EAMdrhD,KAAKV,MAJPuD,EAFgBw+C,EAEhBx+C,OACAm+C,EAHgBK,EAGhBL,cACe2lB,EAJCtlB,EAIhBqE,YAAeihB,mBACf92D,EALgBwxC,EAKhBxxC,gBAEIvM,EAAUH,KAAI0M,EAAiB,CAAC,SAAUhN,IAGhD8jE,EAAmB,CACjB74C,SAHe3qB,KAAI69C,EAAe,CAAC,UAAW,SAAU,OAIxD19C,UACA8C,SAAUvD,OAIhBqjB,IAG+BmoE,CA/CE,SAAA/pF,GAAA,IACjCzB,EADiCyB,EACjCzB,OADiCyrF,EAAAhqF,EAEjCohD,YACEuF,EAH+BqjC,EAG/BrjC,SACAz8C,EAJ+B8/E,EAI/B9/E,OAJ+B,OAOjC8W,EAAA7K,EAAA8K,cAAA,WACG0lC,EAEG3lC,EAAA7K,EAAA8K,cAACqnC,GAAD,CACE3qC,UAAWsgC,GACX/zC,OAAQA,EACR3L,OAAQA,IAGVyiB,EAAA7K,EAAA8K,cAAC0D,GAAD,SChCKslE,GAAqBjxE,aAChC8L,YACE,SACA,UACA,gBACA,kBACA,eAGFpE,aAAa,CAEXwpE,iBAAkB,SAAAlqF,GAAA,IAAG08C,EAAH18C,EAAG08C,cAAH,OAAuB,SAACziD,GACxCyiD,EAAct7C,MAAMnH,KAGtBkwF,cAAe,SAAAh7E,GAAA,IAAGiyC,EAAHjyC,EAAGiyC,YAAH,OAAqB,SAACnnD,GACnCmnD,EAAYgR,YAAYn4D,OAG5B4iD,aACE,CACEC,kBADF,WACsB,IAAAC,EAQdrhD,KAAKV,MANPkvF,EAFgBntC,EAEhBmtC,iBACAptF,EAHgBigD,EAGhBjgD,OAEYgF,EALIi7C,EAIhB33B,MACExkB,OAAUkB,SAEDV,EAPK27C,EAOhB/9C,QAAWoC,MAEbtE,EAAOmpE,QAAU,CACf/oE,KAAM,SACN8f,QAAQxhB,OAAAuI,EAAA,EAAAvI,CAAA,GACH28C,GACAiyC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,KAGPR,EAAiBpoF,GACjBV,EAAM,SAAUU,EAAU,EAAG,MAIjC,CAEE+6D,mBAFF,SAEqBC,GAAW,IAAAC,EAMxBrhE,KAAKV,MAJPkvF,EAF0BntB,EAE1BmtB,iBAEYpoF,EAJci7D,EAG1B33C,MACExkB,OAAUkB,SAGVg7D,EAAUh7D,WAAaA,GACzBooF,EAAiBpoF,MAKzB8f,KCmDW+oE,0EAAaV,GApFE,SAAAjqF,GAAA,IAEd8B,EAFc9B,EAC1BolB,MACExkB,OAAUkB,SAEZsjB,EAJ0BplB,EAI1BolB,MACW9lB,EALeU,EAK1BhB,QAAWM,UACMhC,EANS0C,EAM1B08C,cAAiBp/C,QACjBiO,EAP0BvL,EAO1BuL,gBAP0B,OAS1ByV,EAAA7K,EAAA8K,cAAA,WAASC,UAAU,qBAGjBF,EAAA7K,EAAA8K,cAACQ,EAAA,MAAD,KAGET,EAAA7K,EAAA8K,cAACQ,EAAA,YAAD,CAAampE,QAAQ,gBAEvB5pE,EAAA7K,EAAA8K,cAAA,WAASC,UAAU,eACjBF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,mBACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,uBACZ5jB,GAAW0jB,EAAA7K,EAAA8K,cAACgiE,GAAD,MACZjiE,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,0BACX5hB,EAQA0hB,EAAA7K,EAAA8K,cAAC0D,GAAD,MANA3D,EAAA7K,EAAA8K,cAAC4pE,GAAD,CACE3tF,KAAK,SACLqB,OAAQuD,EACRyJ,gBAAiBA,KAMvByV,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,qBACXhT,KAAQ5Q,IAAagC,EAGrB0hB,EAAA7K,EAAA8K,cAAC0D,GAAD,MAFA3D,EAAA7K,EAAA8K,cAACkkE,GAAD,CAAoBjoF,KAAK,SAASqB,OAAQuD,QAQpDkf,EAAA7K,EAAA8K,cAAA,WAASC,UAAU,sBAGf5hB,EAAgD0hB,EAAA7K,EAAA8K,cAAC0D,GAAD,MAApC3D,EAAA7K,EAAA8K,cAAC6pE,GAAD,CAAavsF,OAAQuD,IACnCkf,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,yBACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,sBACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,6BACbF,EAAA7K,EAAA8K,cAACgmD,GAAD,CAAW7hD,MAAOA,EAAO2hD,SAAO,KAIlC/lD,EAAA7K,EAAA8K,cAAC8pE,GAAA,EAAD,KACGtrE,QAAQlU,EAAgBtN,OAAO6D,IAC7BxE,IAED0jB,EAAA7K,EAAA8K,cAAC+pE,EAAA,EAAD,CACEplB,KAAK,sBACL/oE,OAAK,EACLouF,OAAQ,kBAAMjqE,EAAA7K,EAAA8K,cAAC6oE,GAAD,CAAmBvrF,OAAQuD,OAI7Ckf,EAAA7K,EAAA8K,cAAC+pE,EAAA,EAAD,CACEplB,KAAK,2BACLqlB,OAAQ,kBAENjqE,EAAA7K,EAAA8K,cAACiqE,GAAD,CACEhuF,KAAK,SACLyqF,SAAS,UACT7lF,SAAUA,eCtCbqpF,GAnEUnyE,aACvB8L,YACE,YACA,SACA,cACA,aACA,cACA,cACA,kBACA,eAEF4jC,GAEA7mC,aAAU,SAAA7hB,GAA8B,IAAjB+O,EAAiB/O,EAA3B/B,OAAU8Q,SAQrB,MAAO,CAAE89C,WAJSE,EADdjsD,QADFgsD,QAAWC,SAEa,CACxBvvC,KAAM,qBACNvjB,GAAI8U,OAKR2R,aAAa,CACXiF,YAAa,SAAAxW,GAAA,IAAAs8D,EAAAt8D,EACXrS,OAAU8I,EADC6lE,EACD7lE,KAAM1I,EADLuuE,EACKvuE,KAChBqO,EAFW4D,EAEX5D,gBACAyZ,EAHW7V,EAGX6V,YACe2tC,EAJJxjD,EAIXmyC,YAAeqR,YAEF14D,EANFkV,EAKXkzC,YACE/kD,QAAWrD,GAEAirB,EARF/V,EAQXgW,UAAaD,QARF,OASP,SAEJxF,EAEAvM,EAEArR,GANI,OAOD6wD,EACH/sD,EACAuN,EACArR,EACA4d,EACAwF,EACA3Z,EAAgBrO,GAAMjD,GACtB+qB,KAEFomE,cAAe,SAAAh8E,GAAA,IACHxO,EADGwO,EACbnR,OAAU2C,OACKsJ,EAFFkF,EAEbkyC,YAAep3C,OAFF,OAIT,SAAAhP,EAAe0P,GAAa,IAAzBzI,EAAyBjH,EAAzBiH,SACDkpF,EAAcn8E,KAAKtO,EAAQ,CAAEme,MAAO5c,IACpCkO,EAAmD,sBAA3CxR,KAAIqL,EAAD,GAAA9P,OAAYwQ,EAAZ,iBACb/L,KAAIwsF,EAAa,gBACjBxsF,KAAIwsF,EAAa,SAErB,OAAIh7E,EAAcA,EAAMpK,UACjB,aAGX2b,KC7CWkE,GApBM9M,aACjB+L,aAAU,iBAAkB,wBAAwB,GACpDrE,aAAqD,CACnDiF,YAAa,SAAA3lB,GAAA,IACX2lB,EADW3lB,EACX2lB,YACA5G,EAFW/e,EAEX+e,MACA9gB,EAHW+B,EAGX/B,OACAgnB,EAJWjlB,EAIXilB,qBAJW,OAKP,WACJA,GAAqB,GACrBU,EACE5G,EAAM5c,SACN4c,EAAM5L,gBACNlV,EAAO8Q,UAENsR,KAAK,kBAAM4E,GAAqB,SAKvByB,CAAWhB,ICchB2nC,GACTvsD,QADFgsD,QAAWO,oBAiEE89B,MA9DS,SAAAnrF,GAAA,IACtB6e,EADsB7e,EACtB6e,SACA6/B,EAFsB1+C,EAEtB0+C,gBACAmO,EAHsB7sD,EAGtB6sD,UACAlpC,EAJsB3jB,EAItB2jB,aACAynE,EALsBprF,EAKtBorF,cACAzlE,EANsB3lB,EAMtB2lB,YACU/f,EAPY5F,EAOtBlD,OAAU8I,KACV3H,EARsB+B,EAQtB/B,OACA2M,EATsB5K,EAStB4K,SACAuU,EAVsBnf,EAUtBmf,eAVsB,OAYtB6B,EAAA7K,EAAA8K,cAAA,MAAIC,UAAU,0BACZF,EAAA7K,EAAA8K,cAAA,MAAIC,UAAU,gBACZF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,cACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,sBACZw9B,GACC19B,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,mBACbF,EAAA7K,EAAA8K,cAAA,OACE26C,IAAI,OACJ16C,UAAU,sBACVksC,IAAKP,EACL3rD,QAASmsD,MAIfrsC,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,8BAA8BjjB,EAAOguD,WACpDjrC,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,4BACbF,EAAA7K,EAAA8K,cAAA,KACEK,OAAO,SACPC,IAAI,sBACJC,KAAI,YAAApnB,OAAcyE,KAAIZ,EAAQ,WAAY,MAEzCY,KAAIZ,EAAD,cAAA7D,OAAuByL,GAAcD,IAAS,SAM3DjH,KAAIwgB,EAAgB,SAAAJ,GAAK,OACxBiC,EAAA7K,EAAA8K,cAAA,MACElmB,IAAG,GAAAX,OAAK2kB,EAAM5c,SAAX,KAAA/H,OAAuB2kB,EAAMiF,eAChC9C,UAAWyC,EAAa5E,EAAOF,IAE/BmC,EAAA7K,EAAA8K,cAAA,aACED,EAAA7K,EAAA8K,cAAA,aACED,EAAA7K,EAAA8K,cAAA,UACED,EAAA7K,EAAA8K,cAACqqE,GAAD,CACEvsE,MAAOA,EACP1O,MAAO+6E,EAAcrsE,EAAOnU,GAC5B+a,YAAaA,EACb1nB,OAAQA,aC7BTstF,GA5BavyE,aAC1B8L,YAAO,eAEPpE,aAAa,CAKXitC,eAAgB,SAAAx+C,GAAA,IAAAq8E,EAAAr8E,EAAGmyC,YAAe54C,EAAlB8iF,EAAkB9iF,QAASwB,EAA3BshF,EAA2BthF,OAA3B,OAA0C,SACxD0U,EACAC,EACAjU,GAEA,IAAKiU,EAAU,OAAOnW,EACtB,IAAMhC,EAA2D,sBAA3C7H,KAAIqL,EAAD,GAAA9P,OAAYwQ,EAAZ,iBACrB,eACA,QACE3Q,EAAa4kB,EAAS1Y,MAAM,KAAK,GAIjC4b,EAAWnD,EAAU,MAAQ,OACnC,OAAOqD,KAAQvZ,EAHD,SAAAzK,GAAM,OAClBY,KAAIqQ,KAAKjR,EAAO2C,OAAQ,CAAEme,MAAOQ,OAAOtlB,KAAQyM,EAAO,IAE1Bqb,OAGnCH,IAzB0B5I,CAtBR,SAAAhZ,GAAA,IAClB6e,EADkB7e,EAClB6e,SACA6/B,EAFkB1+C,EAElB0+C,gBACAiP,EAHkB3tD,EAGlB2tD,eACA/iD,EAJkB5K,EAIlB4K,SACAuU,EALkBnf,EAKlBmf,eACAP,EANkB5e,EAMlB4e,QANkB,OAQlBoC,EAAA7K,EAAA8K,cAAA,aACG0sC,EAAe/uC,EAASC,EAAUjU,GAAUjM,IAAI,SAAAV,GAAM,OACrD+iB,EAAA7K,EAAA8K,cAACwqE,GAAD,CACE1wF,IAAKkD,EAAO8Q,SACZ9Q,OAAQA,EACR4gB,SAAUA,EACVM,eAAgBA,EAChBu/B,gBAAiBA,EACjB9zC,SAAUA,SCbL8gF,GAAuB1yE,aAClC8L,YAAO,SAAU,cAAe,mBAChCC,aAAU,cAAe,aAAa,GACtCA,aAAU,iBAAkB,gBAAgB,GAE5Cq7B,GACAx+B,IAEAC,aAEE,SAAA7hB,GAAA,IAAAqgD,EAAArgD,EACE+e,MAASiF,EADXq8B,EACWr8B,cAAe7hB,EAD1Bk+C,EAC0Bl+C,SAD1BwpF,EAAA3rF,EAEEwjE,gBAAmB3hB,EAFrB8pC,EAEqB9pC,cAAeC,EAFpC6pC,EAEoC7pC,cAFpC,MAGO,CACLjjC,SAAQ,GAAAzkB,OAAK+H,EAAL,KAAA/H,OAAiB4pB,GAEzB1G,MAAO,CAAC,CAAEykC,IAAKD,GAAiB,CAAEE,IAAKH,OAI3CnhC,aAAa,CAEX+7B,kBAAmB,SAAAttC,GAAA,IAAG+yC,EAAH/yC,EAAG+yC,UAAH,OAAmB,kBAAMA,EAAU,SAAA/5B,GAAC,OAAKA,MAE5Dnd,qBAAsB,SAAAoE,GAAA,IAAG6yC,EAAH7yC,EAAG6yC,aAAH,OAAsB,kBAAMA,EAAa,SAAA95B,GAAC,OAAKA,MAGrEyjE,qBAAsB,SAAA1wF,GAAA,IACpBqlD,EADoBrlD,EACpBqlD,kBACAp2C,EAFoBjP,EAEpBiP,MACe+4C,EAHKhoD,EAGpBomD,YAAe4B,eAHK,OAKhB,SAACnkC,GAELwhC,EAAkB,CAChBC,SAAUzhC,EACV0hC,YAAayC,EACb/4C,cAINyX,KCgDWiqE,GCrG6B7yE,aACxC8L,YACE,SACA,cACA,kBACA,kBACA,eAGFpE,aAAa,CAEXiD,aAAc,kBAAM,SAAA9V,GAAO,OAAIsT,KAAG,yBAA0B,CAAEtT,cAC9DnD,YAAa,SAAA1K,GAAA,IACF4K,EADE5K,EACXmK,MAASS,SACMF,EAFJ1K,EAEXshD,YAAe52C,YAFJ,OAGP,kBAAMA,EAAYE,KAIxBK,YAAa,SAAAkE,GAAA,IACFvE,EADEuE,EACXhF,MAASS,SACM24C,EAFJp0C,EAEXmyC,YAAeiC,UAFJ,OAGP,WACJ,OAAiB,IAAb34C,EAAuB,KACpB24C,EAAU34C,EAAU,QAK7BM,cAAe,SAAAkE,GAAA,IACJxE,EADIwE,EACbjF,MAASS,SACM24C,EAFFn0C,EAEbkyC,YAAeiC,UAFF,OAGT,kBAAMA,EAAU34C,EAAU,UAIhCO,WAAY,SAAAjQ,GAAA,IAAY0P,EAAZ1P,EAAGiP,MAASS,SAA2BO,EAAvCjQ,EAAwBomD,YAAen2C,WAAvC,OAA0D,kBACpEA,EAAWP,KACbwoD,iBAAkB,SAAA3jD,GAAA,IAAkB2jD,EAAlB3jD,EAAG6xC,YAAe8R,iBAAlB,OAChB,SACAxoD,GAAQ,OAAIwoD,EAAiBxoD,KAC/B4Y,QAAS,SAAA9T,GAAA,IAAkBovC,EAAlBpvC,EAAG4xC,YAAexC,gBAAlB,OAA0C,SACjDthC,EACA5S,GAFiD,OAG9C,WACHk0C,EAAgBthC,EAAM5S,MAExBu3C,WAAY,SAAAjxC,GAAA,IAAA46E,EAAA56E,EACVpU,OAAU0hB,EADAstE,EACAttE,UAAW5Y,EADXkmF,EACWlmF,KACF1H,EAFTgT,EAEV3F,gBAAmBrN,KACAo3D,EAHTpkD,EAGVsyD,gBAAmBlO,UACnBhU,EAJUpwC,EAIVowC,YACehkD,EALL4T,EAKVmxC,YAAe/kD,QALL,OAQN,SAAC5D,EAAGqB,GAAQ,IACRd,EAAiBqD,EAAjBrD,GAAIkyD,EAAa7uD,EAAb6uD,SACNjiD,EAAS4P,KACbnW,KAAO29C,EAAYp3C,QACnB,SACE6P,EADFpS,GAAA,IAGIkX,EAHJlX,EAGIkX,SACA6/B,EAJJ/2C,EAII+2C,gBACAv/B,EALJxX,EAKIwX,eACAP,EANJjX,EAMIiX,QACAQ,EAPJzX,EAOIyX,YACAC,EARJ1X,EAQI0X,UARJ,SAAAjlB,OAAAoB,OAAAgW,GAAA,EAAAhW,CAcOue,GAdP,CAeI,CACE9P,KAAMuU,EAAUa,IAAcA,EAC9Bze,OAAQjC,KAAIwgB,EAAgB,YAC5BK,SAAUD,OAAuB,UAAhBH,GACjB2sE,UAAWxsE,OAAOm/B,GAA2B,QAAR3jD,GACrC6kB,OAAQ,CACNb,MAAOF,EACPC,KAAMF,EAAU,MAAQ,YAIhC,IAEI22C,EAAU,CACdr2C,QAAStZ,EACT1H,KAAMjE,EACN+E,QAASd,EAAKjE,GACdiQ,UAEForD,EAAU57D,EAAGqB,EAAKw6D,GAEfl1C,KAAK,SAACC,GACL,GAAIA,EAAU,CACZ,IAAMvjB,EAAYylD,SAASC,eAAe,iBAC1C1lD,EAAKykB,KAAOmhC,IAAIC,gBAAgBtiC,GAChCvjB,EAAK8lD,SAAL,GAAAzoD,OAAmB+F,OAAIuF,OACrB,YADF,KAAAtL,OAEK+xD,EAFL,aAAA/xD,OAEyBW,GACzBgC,EAAKkmD,eAMf3E,GACA18B,IDRgCoqE,CAvEE,SAAAhsF,GAAA,IAClC0K,EADkC1K,EAClC0K,YACAiZ,EAFkC3jB,EAElC2jB,aACA46B,EAHkCv+C,EAGlCu+C,gBACAvzC,EAJkChL,EAIlCgL,qBACAyxC,EALkCz8C,EAKlCy8C,kBACAn/B,EANkCtd,EAMlCsd,MACApS,EAPkClL,EAOlCkL,cACAD,EARkCjL,EAQlCiL,YACAE,EATkCnL,EASlCmL,WACAg3C,EAVkCniD,EAUlCmiD,WACA3+B,EAXkCxjB,EAWlCwjB,QACA4vC,EAZkCpzD,EAYlCozD,iBACAjpD,EAbkCnK,EAalCmK,MAbkC0Z,EAAA7jB,EAclCmK,MAASu0C,EAdyB76B,EAczB66B,gBAAiB9zC,EAdQiZ,EAcRjZ,SAAUwU,EAdFyE,EAcEzE,YACpCkiC,EAfkCthD,EAelCshD,YAfkC,OAiBlCtgC,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,uBACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,4BAGbF,EAAA7K,EAAA8K,cAACQ,EAAA,eAAD,CAAgBqC,YAAa9C,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAE,uBAGjC0zC,EAAgB,CACfn/B,cACAxU,WACAmZ,QAASP,KAGbxC,EAAA7K,EAAA8K,cAAA,KACEC,UAAWyC,EAAa+6B,GACxB36B,QAAS,kBAAMqvC,EAAiBxoD,KAEhCoW,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAE,iBAGXmW,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,qBACbF,EAAA7K,EAAA8K,cAAC2G,GAAD,CACEzd,MAAOA,EACPwT,UAAWsgC,GACXj2B,aAAcs5B,KAGlBtgC,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,wBAGbF,EAAA7K,EAAA8K,cAACQ,EAAA,uBAAD,CAAwBnE,MAAOA,EAAO8yC,aAAcjO,IACnDp3C,GACCC,EACAN,EACAO,EACAC,EACAC,EACAm2C,EAAYp3C,QACZvL,IAAI,SAAAwQ,GAAA,IAAGzR,EAAHyR,EAAGzR,OAAQoN,EAAXqE,EAAWrE,WAAYD,EAAvBsE,EAAuBtE,EAAvB,OACJmW,EAAA7K,EAAA8K,cAACQ,EAAA,0BAAD,CACEsC,QAASrmB,EACToN,WAAYA,EACZ/P,IAAK8P,GAELmW,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAGA,OAGZmW,EAAA7K,EAAA8K,cAAA,KAAGC,UAAU,2BAA2B6C,QAAS04B,GAC/Cz7B,EAAA7K,EAAA8K,cAAA,KAAGC,UAAU,uBEDR+qE,GAAeP,GAzDE,SAAA1rF,GAAA,IAC5B6e,EAD4B7e,EAC5B6e,SACA7T,EAF4BhL,EAE5BgL,qBACAyxC,EAH4Bz8C,EAG5By8C,kBACAmvC,EAJ4B5rF,EAI5B4rF,qBACAtuE,EAL4Btd,EAK5Bsd,MACA4yC,EAN4BlwD,EAM5BkwD,eACAC,EAP4BnwD,EAO5BmwD,YACAvxC,EAR4B5e,EAQ5B4e,QAR4BiF,EAAA7jB,EAS5BmK,MAASu0C,EATmB76B,EASnB66B,gBAAiB9zC,EATEiZ,EASFjZ,SAAUuU,EATR0E,EASQ1E,eACpChV,EAV4BnK,EAU5BmK,MACAm3C,EAX4BthD,EAW5BshD,YACejkD,EAZa2C,EAY5BshD,YAAejkD,WAZa,OAc5B2jB,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,eACbF,EAAA7K,EAAA8K,cAAC4qE,GAAD,CACE1hF,MAAOA,EACPmT,MAAOA,EACPm/B,kBAAmBA,EACnBzxC,qBAAsBA,KAEtBmlD,GAAeD,IACflvC,EAAA7K,EAAA8K,cAAC+7B,GAAD,CACE7yC,MAAOA,EACPsyC,kBAAmBA,EACnBzxC,qBAAsBA,EACtBmlD,YAAaA,EACbD,eAAgBA,EAChBloC,aAAcs5B,EACdl6B,SAAU8oC,IAGdlvC,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,wBACbF,EAAA7K,EAAA8K,cAAA,SAAOC,UAAU,sBACfF,EAAA7K,EAAA8K,cAACQ,EAAA,QAAQ2pC,MAAT,KAGEpqC,EAAA7K,EAAA8K,cAACiD,GAAD,CAAO/Z,MAAOA,EAAOga,YAAaynE,KAEnCvuF,EACG2jB,EAAA7K,EAAA8K,cAAA,SAAOC,UAAU,YAEjBF,EAAA7K,EAAA8K,cAACirE,GAAD,CACE/sE,eAAgBA,EAEhBN,SAAUA,EACVD,QAASA,EACT8/B,gBAAiBA,EACjB9zC,SAAUA,SCxDTuhF,GApBanzE,aAC1B8L,YAAO,cAAe,cAAe,mBACrC+3B,aAAU,CACRC,kBADQ,WACY,IAAAC,EAUdrhD,KAAKV,MAPPuQ,EAHgBwxC,EAGhBxxC,iBAQF6mD,EAXkBrV,EAKhBuE,YAAe8Q,aALCrV,EAOhBsF,YACE/kD,QAAWrD,GAGCsR,MAGpBqW,IAjB0B5I,CAXR,SAAAhZ,GAAA,IAAkBkK,EAAlBlK,EAAGshD,YAAep3C,OAAlB,OAClB8W,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KACG7oB,OAAOmI,OAAOuG,GACZkiF,KAAK,SAACj2E,EAAQk2E,GAAT,OAAoBl2E,EAAEvL,SAAWyhF,EAAEzhF,WACxCjM,IAAI,SAACwL,GAAD,OAEH6W,EAAA7K,EAAA8K,cAACgrE,GAAD,CAAclxF,IAAKoP,EAAMS,SAAUT,MAAOA,SCJrCmiF,GAAmBtzE,aAC9B8L,YACE,SACA,UACA,cACA,YACA,mBAGFpE,aAAa,CAEX6rE,eAAgB,SAAAvsF,GAAA,IAAkBoB,EAAlBpB,EAAGqiD,YAAejhD,MAAlB,OAAgC,SAACnH,GAC/CmH,EAAMnH,OAGV4iD,aACE,CACEC,kBADF,WACsB,IAAAC,EAQdrhD,KAAKV,MANPuxF,EAFgBxvC,EAEhBwvC,eACAzvF,EAHgBigD,EAGhBjgD,OAEYkP,EALI+wC,EAIhB33B,MACExkB,OAAUoL,OAEZhN,EAPgB+9C,EAOhB/9C,QAEFlC,EAAOmpE,QAAU,CACf/oE,KAAM,OACN8f,QAAQxhB,OAAAuI,EAAA,EAAAvI,CAAA,GACH28C,GACAq0C,GACAnC,GACAC,GACAC,GACAC,GACAC,GACAC,KAGP6B,EAAevgF,GACfhN,EAAQoC,MAAM,OAAQ4K,EAAQ,EAAG,MAKrC,CAEE6wD,mBAFF,SAEqBC,GAAW,IAAAC,EAMxBrhE,KAAKV,MAJPuxF,EAF0BxvB,EAE1BwvB,eAEYvgF,EAJc+wD,EAG1B33C,MACExkB,OAAUoL,OAGV8wD,EAAU9wD,SAAWA,GACvBugF,EAAevgF,MAKvB4V,KCHa6qE,GAVUzzE,aACvB8L,YAAO,cAAe,UACtBlD,IAEAC,aAAU,SAAA1S,GAAA,MAA2B,CACnCmX,OAAQzgB,GADAsJ,EAAGrS,OAAU8I,SAJAoT,CAvCD,SAAAhZ,GAGV,ItTqrBiB0sF,EsTvrB7BpmE,EAEYtmB,EAFZsmB,OAEYqmE,EAAA3sF,EADZqiD,YAAesE,EACHgmC,EADGhmC,SAAUrpD,EACbqvF,EADarvF,QAEjBsvF,EAAiCtvF,EAAjCsvF,WAAYrJ,EAAqBjmF,EAArBimF,MAAOsJ,EAAcvvF,EAAduvF,UAC3B,OACE7rE,EAAA7K,EAAA8K,cAAA,OACEC,UAAWC,KAAG,CACZ2rE,mBAAoBnmC,EACpBomC,4CAA6CpmC,KAG/C3lC,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,sCACbF,EAAA7K,EAAA8K,cAAA,OACEC,UAAWC,KAAG,qBAAsB,CAClC6rE,+BtTyqBmBN,EsTzqB2BG,EtTyqBO,IAAbH,MsTtqB1C1rE,EAAA7K,EAAA8K,cAACqiE,GAAD,CAAQT,MAAOU,EAAOt5E,KAAK,WAG/B+W,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,oCACbF,EAAA7K,EAAA8K,cAAA,MAAIC,UAAU,qBACZF,EAAA7K,EAAA8K,cAAA,YAGG3jB,EAAO,cAAAlD,OAAeksB,KAAahpB,EAAO,QAAAlD,OAASksB,MAGxDtF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,oBAGZ0rE,GAAc5rE,EAAA7K,EAAA8K,cAAA,SAAI3jB,EAAO,gBAAAlD,OAAiBksB,UCOxC2mE,GArBaj0E,aACxB8L,YAAO,YAAa,mBACpB+3B,aAA0B,CACxBC,kBADwB,WACJ,IAAAC,EAMdrhD,KAAKV,MAJPkC,EAFgB6/C,EAEhB7/C,KACAqB,EAHgBw+C,EAGhBx+C,OACAgN,EAJgBwxC,EAIhBxxC,iBAQFnK,EAZkB27C,EAKhBgY,UAAa3zD,OAOT7C,EAAQM,KAAI0M,EAAiB,CAACrO,EAAMqB,GAAS,QAGvDqjB,IAG8BsrE,CAvCS,SAAAltF,GAAA,IAAAmtF,EAAAntF,EACvC+0D,UACE13D,EAFqC8vF,EAErC9vF,WACAiO,EAHqC6hF,EAGrC7hF,MAHqC,OAMvC0V,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,0BACZ7jB,EACC2jB,EAAA7K,EAAA8K,cAAC0D,GAAD,MAEA3D,EAAA7K,EAAA8K,cAAC+jE,GAAD,CACEpkF,OAAQ8B,GACR4I,MAAOA,OCtBF8hF,GAAiB,SAAAptF,GAAA,IAC5BV,EAD4BU,EAC5BV,UACAhC,EAF4B0C,EAE5B1C,QACA0O,EAH4BhM,EAG5BgM,OAH4B,OAK5BgV,EAAA7K,EAAA8K,cAAA,WAASC,UAAU,eACjBF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,mBACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,uBACZ5jB,GAAW0jB,EAAA7K,EAAA8K,cAACosE,GAAD,MACZrsE,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,0BACX5hB,EAQE0hB,EAAA7K,EAAA8K,cAAC0D,GAAD,MALA3D,EAAA7K,EAAA8K,cAAC4pE,GAAD,CACE3tF,KAAK,OACLqB,OAAQyN,KAKhBgV,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,qBACZ5jB,IAAYgC,EAET0hB,EAAA7K,EAAA8K,cAACgsE,GAAD,CACE/vF,KAAK,OACLqB,OAAQyN,IAGVgV,EAAA7K,EAAA8K,cAAC0D,GAAD,WCuFD2oE,GAAWhB,GA7ES,SAAAtsF,GAAA,IAG3BgM,EAH2BhM,EAC/BolB,MACExkB,OACEoL,OAGJoZ,EAN+BplB,EAM/BolB,MACW9lB,EAPoBU,EAO/BhB,QAAWM,UACXiM,EAR+BvL,EAQ/BuL,gBACejO,EATgB0C,EAS/BqiD,YAAe/kD,QATgB,OAW/B0jB,EAAA7K,EAAA8K,cAAA,WAASC,UAAU,qBAGjBF,EAAA7K,EAAA8K,cAACQ,EAAA,MAAD,KAGET,EAAA7K,EAAA8K,cAACQ,EAAA,YAAD,CACEmpE,QAAQ,gBAGZ5pE,EAAA7K,EAAA8K,cAACssE,GAAD,CACEjwF,QAASA,EACTgC,UAAWA,EACX0M,OAAQA,IAEVgV,EAAA7K,EAAA8K,cAAA,WAASC,UAAU,sBACf5hB,EAGE0hB,EAAA7K,EAAA8K,cAAC0D,GAAD,MADA3D,EAAA7K,EAAA8K,cAAC6pE,GAAD,CAAavsF,OAAQyN,IAGzBgV,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,yBACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,sBACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,6BACbF,EAAA7K,EAAA8K,cAACgmD,GAAD,CACE7hD,MAAOA,EACP2hD,SAAO,KAGX/lD,EAAA7K,EAAA8K,cAAC8pE,GAAA,EAAD,KACE/pE,EAAA7K,EAAA8K,cAAC+pE,EAAA,EAAD,CACEplB,KAAK,kBACL/oE,OAAK,EACLouF,OAAQ,kBAAMjqE,EAAA7K,EAAA8K,cAACyhD,GAAD,CAAiBnkE,OAAQyN,OAEzCgV,EAAA7K,EAAA8K,cAAC+pE,EAAA,EAAD,CACEplB,KAAK,uBACLqlB,OAAQ,SAAAjwF,GAAK,OAEXgmB,EAAA7K,EAAA8K,cAACiqE,GAAD1vF,OAAAsW,OAAA,CACE5U,KAAK,OACLyqF,SAAS,QACT7lF,SAAUkK,GACNhR,OAIVgmB,EAAA7K,EAAA8K,cAAC+pE,EAAA,EAAD,CACEplB,KAAK,yBACL/oE,OAAK,EACLouF,OAAQ,kBACNjqE,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KAGG/mB,GAAWiO,GAAmByV,EAAA7K,EAAA8K,cAACusE,GAAD,iBC5FlCC,GAVI,SAAAztF,GAAA,IAAG0tF,EAAH1tF,EAAG0tF,mBAAH,OACjB1sE,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KACG1lB,KAAI+uF,EAAoB,SAAAv+E,GAAA,IAAGlV,EAAHkV,EAAGlV,GAAI8C,EAAPoS,EAAOpS,KAAM8N,EAAbsE,EAAatE,EAAb,OACvBmW,EAAA7K,EAAA8K,cAAA,KAAGlmB,IAAKd,EAAIunB,KAAMzkB,EAAMmkB,UAAU,6BAChCF,EAAA7K,EAAA8K,cAACQ,EAAA,IAAD,CAAK5W,EAAGA,SC0BD8iF,GAdY30E,aACzB0H,aAAa,CAIXktE,kBAAmB,kBAAM,SAAC15B,EAAQr0C,EAAUC,GAC1C,IAAM+tE,EAAYhvF,KAAIqQ,KAAKglD,EAAQ,CAAEh2D,KAAM2hB,IAAa,SAClDiuE,EAAejvF,KAAIqQ,KAAKglD,EAAQ,CAAEh2D,KAAM4hB,IAAa,SAC3D,SAAA1lB,OAAUyzF,EAAV,OAAAzzF,OAAyB0zF,OAMhBH,CA7BW,SAAA3tF,GAAA,IACxB4tF,EADwB5tF,EACxB4tF,kBACA73B,EAFwB/1D,EAExB+1D,QACAl2C,EAHwB7f,EAGxB6f,SACAC,EAJwB9f,EAIxB8f,SAJwB,OAMxBkB,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,iCACZ60C,EAAQp3D,IAAI,SAAAu1D,GAAM,OACjBlzC,EAAA7K,EAAA8K,cAAA,QAAMlmB,IAAKm5D,EAAO,GAAGA,OAAQhzC,UAAU,yBACpC0sE,EAAkB15B,EAAQr0C,EAAUC,SCqD9BiuE,GArDG,SAAA/tF,GAAA,IAAAguF,EAAAhuF,EAChBs/C,aACE5gD,EAFcsvF,EAEdtvF,KAFc6vD,EAAAy/B,EAGdtvF,KAEEwB,EALYquD,EAKZruD,WAEAq4D,EAPYhK,EAOZgK,YAEAC,EATYjK,EASZiK,YAEA34C,EAXY0uC,EAWZ1uC,SAEAC,EAbYyuC,EAaZzuC,SAEFi2C,EAfci4B,EAedj4B,QAEFzvC,EAjBgBtmB,EAiBhBsmB,OAjBgB,OAmBhBtF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,sBACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,uBACbF,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,sBAAsBhhB,IAExC8gB,EAAA7K,EAAA8K,cAAA,MAAIC,UAAU,uBACZF,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,sBACdF,EAAA7K,EAAA8K,cAACS,GAAA,EAAD,CAAMJ,OAAO,SAAS3kB,GAAE,UAAAvC,OAAYylB,IAGjCnhB,EAAI,cAAAtE,OAAeksB,MAGxBtF,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,uBACbq3C,EADH,IACiBC,GAEjBx3C,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,sBACdF,EAAA7K,EAAA8K,cAACS,GAAA,EAAD,CAAMJ,OAAO,SAAS3kB,GAAE,UAAAvC,OAAY0lB,IAGjCphB,EAAI,cAAAtE,OAAeksB,OAI1BtF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,uBACbF,EAAA7K,EAAA8K,cAAA,QAAMC,UAAU,uBAGbxiB,EAAI,mBAAAtE,OAAoBksB,MAG7BtF,EAAA7K,EAAA8K,cAACgtE,GAAD,CAAYl4B,QAASA,EAASl2C,SAAUA,EAAUC,SAAUA,MCEnD8kD,GAtBU5rD,aACrB8L,YAAO,SAAU,gBACjBlD,IAEAC,aAAU,SAAA1S,GAAA,IAAavJ,EAAbuJ,EAAGrS,OAAU8I,KAAwBswD,EAArC/mD,EAAqBmwC,aAAgB4W,WAArC,MAAyD,CACjE5vC,OAAQ3gB,GAAUC,GAClB8nF,mBAAoB,CAClB,CACEzzF,GAAI,YACJ8C,KAAM8B,KAAIq3D,EAAY,iBAAkB,IACxCrrD,EAAG,yBAEL,CACE5Q,GAAI,eACJ8C,KAAM8B,KAAIq3D,EAAY,oBAAqB,IAC3CrrD,EAAG,gCAOWqjF,CAvCS,SAAAluF,GAAA,IAC7B0tF,EAD6B1tF,EAC7B0tF,mBACApuC,EAF6Bt/C,EAE7Bs/C,aACAh5B,EAH6BtmB,EAG7BsmB,OAH6B,OAK7BtF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,gBACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,2BACbF,EAAA7K,EAAA8K,cAACktE,GAAD,CAAW7uC,aAAcA,EAAch5B,OAAQA,IAC/CtF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,sBACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,sBACbF,EAAA7K,EAAA8K,cAACmtE,GAAD,CAAYV,mBAAoBA,UC2B3BW,GAxDWr1E,aACxB8L,YAAO,SAAU,gBAEjBpE,aAAa,CAEX4tE,gBAAiB,SAAAtuF,GAAA,IAAmBoB,EAAnBpB,EAAGs/C,aAAgBl+C,MAAnB,OAAiC,SAAC6kB,GACjD7kB,EAAM6kB,KAKR+sC,iBAAkB,SAAA7jD,GAAA,IAAiB6jD,EAAjB7jD,EAAGuwC,WAAcsT,iBAAjB,OAA0C,SAE1Dt1D,EAEAqhB,GAEAi0C,EAAiBt1D,EAAQqhB,OAI7B8C,aAAU,SAAAzS,GAAe,IAAZgW,EAAYhW,EAAZgW,MAEX,MAAO,CACLa,QAFcpnB,KAAIumB,EAAO,qBAK7By3B,aAAU,CACRC,kBADQ,WACY,IAAAC,EAQdrhD,KAAKV,MALPszF,EAHgBvxC,EAGhBuxC,gBAEAxxF,EALgBigD,EAKhBjgD,OAEAmpB,EAPgB82B,EAOhB92B,QAEFnpB,EAAOmpE,QAAU,CACf/oE,KAAM,QACN8f,QAAQxhB,OAAAuI,EAAA,EAAAvI,CAAA,GACH28C,GACAo2C,GACAlE,GACAC,GACAC,GACAC,GACAC,GACAC,KAGP4D,EAAgBroE,MAGpBrE,KCIW4sE,GClEsBx1E,aACjC8L,YAAO,SAAU,eAAgB,UAAW,cAC5ClD,IAEAC,aAAU,SAAA7hB,GAA2C,IAA7BnC,EAA6BmC,EAAxChB,QAAWnB,OAAUyhD,EAAmBt/C,EAAnBs/C,aAEhC,MAAO,CACL/gD,OAFaM,KAAIygD,EAAD,QAAAllD,OAAuByD,EAAvB,WAKpBg/C,aAAU,CACRC,kBADQ,WACY,IAAAC,EAMdrhD,KAAKV,MAHSirB,EAHA82B,EAGhBuC,aAAgBr5B,SAIlBk4C,EAPkBphB,EAKhB2C,WAAcye,mBAEEl4C,MAGtBrE,ID6CyB6sE,CA5DS,SAAAzuF,KAElClD,OAAUI,KAFwB,IAIlCkoB,EAJkCplB,EAIlColB,MAEAa,EANkCjmB,EAMlCimB,QANkC+nC,EAAAhuD,EAOlC0/C,WAEEiH,EATgCqH,EAShCrH,SAEAz8C,EAXgC8jD,EAWhC9jD,OAGF3L,EAdkCyB,EAclCzB,OAdkC,OAgBlCyiB,EAAA7K,EAAA8K,cAAA,WAASC,UAAU,sBAGjBF,EAAA7K,EAAA8K,cAAC6pE,GAAD,CAAavsF,OAAQA,EAAQ0nB,QAASA,IACtCjF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,yBACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,sBACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,6BACbF,EAAA7K,EAAA8K,cAACgmD,GAAD,CAAW7hD,MAAOA,EAAO2hD,SAAO,KAElC/lD,EAAA7K,EAAA8K,cAAC8pE,GAAA,EAAD,KACE/pE,EAAA7K,EAAA8K,cAAC+pE,EAAA,EAAD,CACEplB,KAAK,qBACL/oE,OAAK,EACLouF,OAAQ,kBACLtkC,EACC3lC,EAAA7K,EAAA8K,cAACqnC,GAAD,CACE3qC,UAAWsgC,GACX/zC,OAAQA,EACR3L,OAAQ0nB,IAGVjF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,eAIrBF,EAAA7K,EAAA8K,cAAC+pE,EAAA,EAAD,CACEplB,KAAK,0BACLqlB,OAAQ,SAAAjwF,GAAK,OAEXgmB,EAAA7K,EAAA8K,cAACiqE,GAAD1vF,OAAAsW,OAAA,CACE5U,KAAK,QACLyqF,SAAS,QACT7lF,SAAUvD,GACNvD,aETLqzF,cA3BS,SAAAruF,GAAA,IACtBolB,EADsBplB,EACtBolB,MACAa,EAFsBjmB,EAEtBimB,QACgB5oB,EAHM2C,EAGtBs/C,aAAgBjiD,WAHM,OAKtB2jB,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,mBAGbF,EAAA7K,EAAA8K,cAACQ,EAAA,MAAD,KAGET,EAAA7K,EAAA8K,cAACQ,EAAA,YAAD,CAAampE,QAAQ,gBAEtBvtF,EACC2jB,EAAA7K,EAAA8K,cAAC0D,GAAD,MAEA3D,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KACErD,EAAA7K,EAAA8K,cAACytE,GAAD,MAGA1tE,EAAA7K,EAAA8K,cAACutE,GAAD,CAAappE,MAAOA,EAAOa,QAASA,SCT7B0oE,WAjBc31E,aAC3B+L,aAAU,YAAa,eAAe,GAEtCrE,aAAa,CAEXkuE,iBAAkB,SAAAz/E,GAAA,IAAG0/E,EAAH1/E,EAAG0/E,YAAH,OAAqB,kBAAMA,EAAY,SAAA1mE,GAAC,OAAKA,QAGjEtG,aAAU,SAAAzS,GAAA,IAAG0/E,EAAH1/E,EAAG0/E,UAAWC,EAAd3/E,EAAc2/E,aAAd,MAAkC,CAC1CC,cAAe,CACbC,gBAAiBH,EAAYC,EAAe,OAC5CG,QAAS,eAXcl2E,CAVR,SAAAhZ,GAAA,IAAGguE,EAAHhuE,EAAGguE,MAAO4gB,EAAV5uF,EAAU4uF,iBAAkBI,EAA5BhvF,EAA4BgvF,cAA5B,OACnBhuE,EAAA7K,EAAA8K,cAAA,OACE4jE,aAAc+J,EACd9J,aAAc8J,EACdjhE,MAAOqhE,GAENhhB,MC4GUmhB,GApCgBn2E,aAC7B+L,aAAU,WAAY,cAAc,GACpCA,aAAU,mBAAoB,oBAAqB,IAEnDrE,aAAa,CAEXiF,YAAa,SAAAxW,GAAA,IAAGigF,EAAHjgF,EAAGigF,WAAH,OAAoB,kBAAMA,EAAW,SAAAjnE,GAAC,OAAKA,MACxDxH,aAAc,SAAAvR,GAAA,IAAGggF,EAAHhgF,EAAGggF,WAAH,OAAoB,kBAAMA,GAAW,KAEnDC,UAAW,SAAAn0F,GAAA,IAAGo0F,EAAHp0F,EAAGo0F,kBAAmBvrE,EAAtB7oB,EAAsB6oB,QAAtB,OAAoC,SAAAiqD,GAAK,OAAI,WACtDshB,EAAkBC,eAAmBvhB,EAAO,CAAEjqD,QAAS,QACnDiqD,EAAMhzE,MAAM+oB,SAASiqD,EAAMhzE,MAAM+oB,UACjCA,GAASA,SAIjBlC,aAAU,SAAApS,GAAA,IAAA+/E,EAAA//E,EAAGggF,gBAAH,IAAAD,EAAc,GAAdA,EAAA,MAAwB,CAEhCT,aAAcU,EAASV,cAAgB,UACvCW,aAAc,CACZC,SAAU,CAERC,SAAUH,EAASG,UAAY,QAE/BC,SAAUJ,EAASI,UAAY,QAEjCC,YAAa,CAEXC,YAAaN,EAASP,SAAW,YAIvCruE,eAhC6B7H,CA3CR,SAAAhZ,GAAA,IACrB8tE,EADqB9tE,EACrB8tE,SACAnoD,EAFqB3lB,EAErB2lB,YACA+pE,EAHqB1vF,EAGrB0vF,aACAn1E,EAJqBva,EAIrBua,SACA80E,EALqBrvF,EAKrBqvF,UACAvrE,EANqB9jB,EAMrB8jB,YACAirE,EAPqB/uF,EAOrB+uF,aACAiB,EARqBhwF,EAQrBgwF,iBARqB,OAUrB3rE,EAAA,qBACEnD,UAAWC,KAAG,qBAAsB,CAClC8uE,6BAA8B11E,KAG/BuzD,GACCzpD,EAAA,qBAAKnD,UAAU,mBAAmB6C,QAAS4B,GACzCtB,EAAA,sBAAMsJ,MAAO+hE,EAAaI,aACvBE,GAAoBlsE,GAEvBO,EAAA,oBACEnD,UAAWC,KAAG,gBAAiB,CAC7B+uE,yBAA0B31E,KAG3Bg1E,WAAe5wF,IAAImvE,EAAU,SAACE,EAAOC,GAAR,OAC5B5pD,EAAA,oBACEtpB,IAAKkzE,EACL/sD,UAAU,sBACVyM,MAAO+hE,EAAaC,SACpB5rE,QAASsrE,EAAUrhB,IAInB3pD,EAAA,cAAC8rE,GAAD,CAAcpB,aAAcA,EAAc/gB,MAAOA,YCsBhDoiB,WA5Bcp3E,aAC3B8L,YAAO,SAAU,yBAA0B,yBAE3CpE,aAAa,CACX2vE,eAAgB,SAAAjhF,GAAA,IAA6B4uD,EAA7B5uD,EAAGo9C,uBAA0BwR,mBAA7B,OACd,SACC5V,EAAcsE,GAAf,OAA6B,kBAAMsR,EAAmB5V,EAAcsE,QAExE7qC,aAAU,iBAAO,CACf4tE,SAAU,CACRV,alVnF2B,ckVsF/BlyC,aAAU,CACRC,kBADQ,WACY,IAAAC,EAMdrhD,KAAKV,MAHPotD,EAHgBrL,EAGhBqL,cAIFqV,EAPkB1gB,EAKhByP,uBAA0BiR,cAEfrV,MAGjBxmC,IAxB2B5I,CAvCD,SAAAhZ,GAAA,IAC1BqwF,EAD0BrwF,EAC1BqwF,eACAZ,EAF0BzvF,EAE1ByvF,SACArnC,EAH0BpoD,EAG1BooD,aAH0BkoC,EAAAtwF,EAI1BwsD,uBACE7F,EALwB2pC,EAKxB3pC,SACAyX,EANwBkyB,EAMxBlyB,YANwB,OAS1Bp9C,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KACErD,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,2BACZylC,EAGG3lC,EAAA7K,EAAA8K,cAACsvE,GAAD,CAEEzsE,YAAai6C,KAAKK,GAAaE,YAC/BmxB,SAAUA,GAET9wF,KACCy/D,EAEA,SAAAjvD,GAAA,IAAGu9C,EAAHv9C,EAAGu9C,UAAW4R,EAAdnvD,EAAcmvD,YAAd,OACEt9C,EAAA7K,EAAA8K,cAAA,OACElmB,IAAK2xD,EACL3oC,QAASssE,EAAejoC,EAAcsE,IAErC4R,MAMTt9C,EAAA7K,EAAA8K,cAAC0D,GAAD,WCOK6rE,ICxEAntB,GAA4BnR,OAAO,CAChD7yD,MAAO,KACPsnD,UAAU,WD4C0B3tC,aACpC8L,YAAO,wBAAyB,0BAChClD,IAEAlB,aAAa,CACX8sC,QAAS,SAAAp+C,GAAA,IAA4BsyD,EAA5BtyD,EAAGk0D,sBAAyB5B,sBAA5B,OACP,SACAv/D,GAAQ,OAAItD,KAAI6iE,EAAuBv/D,EAAU,GAAG8D,QAAQ,KAE9Dg/E,UAAW,SAAA/pF,GAAA,IAA4BoQ,EAA5BpQ,EAAGooE,sBAAyBh4D,MAA5B,OACT,SACAnJ,GAAQ,OAAItD,KAAIyM,EAAMnJ,GAAW,SAAU,QAE/C06C,aAAU,CACRC,kBADQ,YAMNskB,EADI1lE,KAAKV,MADPsoE,sBAAyBlC,wBAK/Bx/C,IAtBoC5I,CAzBR,SAAAhZ,GAAA,IAC5BilF,EAD4BjlF,EAC5BilF,UACAz3B,EAF4BxtD,EAE5BwtD,QACyBn6C,EAHGrT,EAG5BsjE,sBAAyBjwD,OAHG,OAK5B2N,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KACGhR,EACC2N,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,0BACZviB,KAAI+D,GAAa,SAAAyM,GAAA,IAAGjN,EAAHiN,EAAGjN,SAAUC,EAAbgN,EAAahN,SAAUC,EAAvB+M,EAAuB/M,QAAvB,OAChB4e,EAAA7K,EAAA8K,cAAC8iE,GAAD,CACEhpF,IAAKoH,EACLud,QAASvd,EACTqiF,QAAStiF,EACTE,QAASA,EACT+Y,OAAQ8pE,EAAU9iF,GAClByiF,UAAWp3B,EAAQrrD,QAKzB6e,EAAA7K,EAAA8K,cAAC0D,GAAD,UEiBS8rE,IC1DA5uB,GAA2B3P,OAAO,CAC/C7+C,QAAQ,EACRhU,MAAO,OD0C0B2Z,aACjC8L,YAAO,UACPlD,IAEAC,aAAU,SAAA1S,GAAmC,IAAtBvJ,EAAsBuJ,EAAhCrS,OAAU8I,KAAQtI,EAAc6R,EAAd7R,QACvBgpB,EAASzgB,GAAcD,GAC7B,MAAO,CACL0gB,SACAoqE,YAAa7xF,KAAIvB,EAAD,gBAAAlD,OAA0BksB,OARbtN,CA7BR,SAAAhZ,GAAA,IACzB0wF,EADyB1wF,EACzB0wF,YADyBC,EAAA3wF,EAEzB1C,QACEimF,EAHuBoN,EAGvBpN,MACGjmF,EAJoB9B,OAAA8Z,GAAA,EAAA9Z,CAAAm1F,EAAA,WAMzBrqE,EANyBtmB,EAMzBsmB,OANyB,OAQzBtF,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KACErD,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,0BACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,qBACbF,EAAA7K,EAAA8K,cAACqiE,GAAD,CAAQT,MAAOU,EAAOt5E,KAAK,gBAE7B+W,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,mBACbF,EAAA7K,EAAA8K,cAAA,MAAIC,UAAU,2BACZF,EAAA7K,EAAA8K,cAAA,YAGG3jB,EAAO,QAAAlD,OAASksB,MAGrBtF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,0BACbF,EAAA7K,EAAA8K,cAAA,SAAIyvE,UEJCE,GApBc,SAAA5wF,GAAA,IAAG2mD,EAAH3mD,EAAG2mD,SAAUrpD,EAAb0C,EAAa1C,QAAS8qD,EAAtBpoD,EAAsBooD,aAAtB,OAC3BpnC,EAAA7K,EAAA8K,cAAA,WAASC,UAAU,qBACjBF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,6BACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,mCAGbF,EAAA7K,EAAA8K,cAAC4vE,GAAD,CAAoBvzF,QAASA,KAE/B0jB,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,oCAGZ5jB,GAAW0jB,EAAA7K,EAAA8K,cAAC6vE,GAAD,CAAc1oC,aAAcA,KAE1CpnC,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,4BACZylC,EAAW3lC,EAAA7K,EAAA8K,cAAC8vE,GAAD,MAA4B/vE,EAAA7K,EAAA8K,cAAC0D,GAAD,UCjBjCqsE,GAAAx1F,OAAAuI,EAAA,MACVo0C,GACAq0C,GACAnC,GACAC,GACAC,GACAC,GACAC,GACAC,ICfQuG,GAAyBj4E,aACpC8L,YACE,SACA,qBACA,yBACA,qBAEF+3B,aAAU,CACRC,kBADQ,WACY,IAAAC,EAQdrhD,KAAKV,MALP8B,EAHgBigD,EAGhBjgD,OAES8D,EALOm8C,EAKhB33B,MAASxkB,OAEa89D,EAPN3hB,EAOhBuF,mBAAsBoc,uBAExB5hE,EAAOmpE,QAAU,CACf/oE,KAAM,cACN8f,QAASk0E,IAEXxyB,EAAuBn/C,OAAO3e,EAAOwnD,kBAGzCxmC,KCiEW+8C,WAAiBsyB,GAjEE,SAAAjxF,GAAA,IAAAiqD,EAAAjqD,EAC9BolB,MAASxkB,EADqBqpD,EACrBrpD,OAAWwkB,EADU5pB,OAAA8Z,GAAA,EAAA9Z,CAAAyuD,EAAA,YAETtD,EAFS3mD,EAE9Boe,kBAAqBuoC,SAFSwqC,EAAAnxF,EAG9BsiD,mBAAgC8uC,EAHFD,EAGRxqC,SAAyBrpD,EAHjB6zF,EAGiB7zF,QAHjB,OAK9B0jB,EAAA7K,EAAA8K,cAACoD,EAAA,SAAD,KACG+sE,EACCpwE,EAAA7K,EAAA8K,cAACowE,GAAD,CACEjpC,aAAc7oC,OAAO3e,EAAOwnD,cAC5B9qD,QAASA,EACTqpD,SAAUA,IAGZ3lC,EAAA7K,EAAA8K,cAAC0D,GAAD,MAEF3D,EAAA7K,EAAA8K,cAAA,WAASC,UAAU,sBACjBF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,yBACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,sBACbF,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,6BACbF,EAAA7K,EAAA8K,cAACgmD,GAAD,CAAW7hD,MAAOA,EAAO2hD,SAAO,KAElC/lD,EAAA7K,EAAA8K,cAAC8pE,GAAA,EAAD,KACE/pE,EAAA7K,EAAA8K,cAAC+pE,EAAA,EAAD,CACEplB,KAAK,8BACL/oE,OAAK,EACLouF,OAAQ,kBACNjqE,EAAA7K,EAAA8K,cAACqwE,EAAA,EAAD,CAAU30F,GAAE,gBAAAvC,OAAkBwG,EAAOwnD,aAAzB,iBAGhBpnC,EAAA7K,EAAA8K,cAAC+pE,EAAA,EAAD,CACEplB,KAAK,qCACL/oE,OAAK,EACLouF,OAAQ,kBACLtkC,EAEC3lC,EAAA7K,EAAA8K,cAACknC,GAAD,CACEC,aAAc7oC,OAAO3e,EAAOwnD,gBAG9BpnC,EAAA7K,EAAA8K,cAAC0D,GAAD,SAIN3D,EAAA7K,EAAA8K,cAAC+pE,EAAA,EAAD,CACEplB,KAAK,qCACL/oE,OAAK,EACLouF,OAAQ,kBACLtkC,EAEC3lC,EAAA7K,EAAA8K,cAAC0rC,GAAD,CACEvE,aAAc7oC,OAAO3e,EAAOwnD,gBAG9BpnC,EAAA7K,EAAA8K,cAAC0D,GAAD,iBC9BH4sE,IClDA3yB,GAAoB1M,OAAO,CACxC50D,QAAS,GACTqpD,UAAU,EACVtnD,MAAO,cDwCW2Z,aAClB8L,YAAO,QACP0sE,2BAAgBC,MAChB7vE,IAHkB5I,CAfR,SAAAhZ,GAAA,IAAW0xF,EAAX1xF,EAAGklE,KAAQwsB,OAAsBC,EAAjC3xF,EAAqB4xF,SAAYD,SAAjC,OACV3wE,EAAA7K,EAAA8K,cAAA,OAAKC,UAAU,OACZwwE,GAAuB,MAAbC,GAAoB3wE,EAAA7K,EAAA8K,cAAC4wE,GAAD,MAC/B7wE,EAAA7K,EAAA8K,cAAC+pE,EAAA,EAAD,CAAOnuF,OAAK,EAAC+oE,KAAK,IAAI35C,UAAW+5C,KACjChlD,EAAA7K,EAAA8K,cAAC+pE,EAAA,EAAD,CAAOplB,KAAK,SAASqlB,OAAQ,kBAAMjqE,EAAA7K,EAAA8K,cAACQ,EAAA,MAAD,CAAOqwE,YAAaC,QACvD/wE,EAAA7K,EAAA8K,cAAC+pE,EAAA,EAAD,CAAOplB,KAAK,qBAAqB35C,UAAW0+D,KAC5C3pE,EAAA7K,EAAA8K,cAAC+pE,EAAA,EAAD,CAAOplB,KAAK,iBAAiB35C,UAAWqhE,KACxCtsE,EAAA7K,EAAA8K,cAAC+pE,EAAA,EAAD,CAAOplB,KAAK,oBAAoB35C,UAAW+lE,KAC3ChxE,EAAA7K,EAAA8K,cAAC+pE,EAAA,EAAD,CAAOplB,KAAK,6BAA6B35C,UAAW0yC,KACpD39C,EAAA7K,EAAA8K,cAAA,KAAGC,UAAU,qCAAqCjnB,GAAG,iBACnD+mB,EAAA7K,EAAA8K,cAAA,kBEJSgxE,GAVE,kBACfjxE,EAAA7K,EAAA8K,cAACixE,EAAA,EAAD,CAAQ9sB,QAASA,GACfpkD,EAAA7K,EAAA8K,cAACkxE,EAAA,EAAa52F,GACZylB,EAAA7K,EAAA8K,cAAA,WACED,EAAA7K,EAAA8K,cAAC+pE,EAAA,EAAD,CAAOplB,KAAK,IAAIqlB,OAAQ,SAAAjwF,GAAK,OAnBrB,SAACA,GACf,OAC8C,OAA5CqP,OAAOC,aAAaC,QAAQ,aACG,WAA5BvP,EAAM42F,SAASD,UAElBrnF,aAAaE,QAAQ,eAAgBxP,EAAM42F,SAASD,UAC7C3wE,EAAA7K,EAAA8K,cAACqwE,EAAA,EAAD,CAAU30F,GAAG,YAEfqkB,EAAA7K,EAAA8K,cAACmxE,GAAQp3F,GAWuBq3F,CAAQr3F,UCzBjDs3F,IAASrH,OAAOjqE,EAAA7K,EAAA8K,cAACsxE,GAAD,MAAS/vC,SAASC,eAAe","file":"static/js/main.6273ebe6.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 261;","const API_ROOT = 'https://api-volleyball.instatscout.com'\n\nexport const dataURL = `${API_ROOT}/data`\nexport const beta = 'https://new.instatscout.com'\n\nexport default {\n  // API_ROOT: 'https://api-volleyball.instatscout.com',\n  API_ROOT,\n  // API_ROOT: 'http://localhost:3080'\n}\n","export const primarySportColor = '#dbf0ef'\n\nexport const profilePaths = {\n  // пока оставляем комментарии\n  // header_my_profile: '/profile',\n  // header_my_video: '/video/my',\n  // header_playlists: '/video/my/playlists',\n  // header_shared_episodes: '/video/my/shared-episodes',\n  header_upload_video: 'matches/video_uploads/new', // загрузить видео\n}\n\nexport const langsList = [\n  { locale: 'ru', title: 'Русский', className: 'ru' },\n  { locale: 'en', title: 'English', className: 'gb' },\n  { locale: 'pt', title: 'Português', className: 'pt' },\n  // {locale: 'pt', title: 'Brazil', className: 'br'}, // localStorage.lang = 'pt'\n  // {locale: 'uk', title: 'Українська', className: 'ua'},\n  // {locale: 'it', title: 'Italiano', className: 'it'},\n  // {locale: 'nl', title: 'Nederlands', className: 'nl'},\n  // {locale: 'ro', title: 'Română', className: 'ro'},\n  // {locale: 'fr', title: 'Français', className: 'fr'},\n  // {locale: 'de', title: 'Deutsch', className: 'de'},\n  { locale: 'es', title: 'Español', className: 'es' },\n  // {locale: 'tr', title: 'Türkçe', className: 'tr'},\n  // {locale: 'sr', title: 'Српски', className: 'rs'},\n  // {locale: 'pl', title: 'Polska', className: 'pl'},\n  // {locale: 'cs', title: 'Čeština', className: 'cz'},\n  // {locale: 'hu', title: 'Magyar', className: 'hu'},\n  // {locale: 'bg', title: 'Български', className: 'bg'},\n  // {locale: 'sl', title: 'Slovenščina', className: 'si'},\n  // {locale: 'mk', title: 'Македонски', className: 'mk'},\n  { locale: 'zh', title: '中文(简体)', className: 'cn' },\n  // {locale: 'lv', title: 'Latviešu', className: 'lv'},\n  // {locale: 'he', title: 'עברית', className: 'il'},\n  // {locale: 'ja', title: '日本語', className: 'jp'},\n  // {locale: 'el', title: 'Ελληνικά', className: 'gr'},\n  // {locale: 'sq', title: 'Shqip', className: 'al'},\n  // {locale: 'hr', title: 'Hrvatski', className: 'hr'},\n  // {locale: 'bs', title: 'Bosanski', className: 'ba'},\n  // {locale: 'sv', title: 'Svenska', className: 'se'},\n  // {locale: 'fi', title: 'Suomi', className: 'fi'},\n  // {locale: 'lt', title: 'Lietuvių', className: 'lt'},\n  // {locale: 'th', title: 'ภาษาไทย', className: 'th'},\n  // {locale: 'ka', title: 'ქართული', className: 'ge'},\n  // {locale: 'id', title: 'Bahasa Indonesia', className: 'id'},\n  // {locale: 'ar', title: 'العربية', className: 'sa'},\n  // {locale: 'ko', title: '한국어', className: 'kr'},\n  // {locale: 'ms', title: 'Bahasa Melayu', className: 'my'},\n  // {locale: 'sk', title: 'Slovenčina', className: 'sk'},\n  // {locale: 'fa', title: 'فارسی', className: 'tg'},\n  // {locale: 'vi', title: 'Tiếng Việt', className: 'vn'},\n  // {locale: 'az', title: 'Azərbaycan dili', className: 'az'},\n  // {locale: 'uz', title: 'O‘zbek tili', className: 'uz'},\n]\n\nexport const fieldSize = {\n  STANDART: {\n    width: 9,\n    length: 18,\n    area: 9,\n  },\n}\n\ntype TActions = { c_action: any };\n\nexport const actionTypes = {\n  pass: ({ c_action }: TActions) => c_action === 400100,\n  attack: ({ c_action }: TActions) => c_action === 500100,\n  block: ({ c_action }: TActions) => c_action === 600100,\n  serve: ({ c_action }: TActions) => c_action === 200100,\n  attack_reception: ({ c_action }: TActions) => c_action === 300100,\n  serve_reception: ({ c_action }: TActions) => c_action === 30010,\n}\n\nexport const markersWithoutOpponentSide: Array<number | {}> = [\n  200,\n  169,\n  170,\n  171,\n  119,\n  {\n    key: 15,\n    props: [162, 166],\n    checkTab: actionTypes.serve,\n  },\n]\n\nexport const ownSideMarkers: Array<number> = [120, 118]\n","import createHistory from 'history/createBrowserHistory'\n\nexport default createHistory()\n","export default class BasicStore {\n  //@ts-ignore\n  constructor(stores) {\n    //@ts-ignore\n    this.allStores = stores\n  }\n\n  //@ts-ignore\n  getStore(storeName) {\n    //@ts-ignore\n    return this.allStores[storeName]\n  }\n}\n","/* Табы */\n// по умолчанию\nexport const tabs = [\n  'serve',\n  'serve_reception',\n  'pass',\n  'attack',\n  'block',\n  'attack_reception',\n]\n\n// для центрального блокирующего\nexport const tabsForAmplua5 = ['serve', 'attack', 'block', 'attack_reception']\n// для связующего\nexport const tabsForAmplua6 = [\n  'serve',\n  'pass',\n  'attack',\n  'block',\n  'attack_reception',\n]\n\n// Для либеро\nexport const tabsForAmplua7 = ['serve_reception', 'attack_reception']\n\n// для доигровщика\nexport const tabsForAmplua8 = [\n  'serve',\n  'serve_reception',\n  'attack',\n  'block',\n  'attack_reception',\n]\n\nexport const actions = {\n  attack: 500100, //- Атака\n  attack_reception: 300100, //- Прием\n  block: 600100, //- Блок\n  pass: 400100, //- Передача\n  serve: 200100, //- Подача\n  serve_reception: 300100, //- Прием\n}\n\n//Направление маркеров для каждой вкладки по-умолчанию когда нет выбранных зон\n// @ts-ignore\nexport const directionBtns = (tab) => {\n  switch (tab) {\n    case 'attack_reception':\n    case 'serve_reception':\n      return { from: true, to: false }\n    default:\n      return { from: true, to: true }\n  }\n}\n\nexport const defaultDirections = {\n  attack: { from: false, to: true },\n  attack_reception: { from: true, to: false },\n  block: { from: true, to: false },\n  pass: { from: false, to: true },\n  serve: { from: false, to: true },\n  serve_reception: { from: true, to: false },\n}\n\n/**\n * Массив вкладок для основной страницы\n * pages - страницы, на которых нужно отображать вкладку\n * link - часть url страницы для react-router\n * lexics - название вкладки\n * exact - проп для react-router (для точного совпадения url)\n */\nexport const mainPageTabs = [\n  {\n    // Временно отключаем этот таб (пока не до конца реализован функционал)\n    exact: false,\n    lexics: 2862,\n    link: '/video',\n    pages: [],\n  },\n  {\n    exact: true,\n    lexics: 682,\n    link: '',\n    pages: ['player', 'team'],\n  },\n  {\n    exact: true,\n    lexics: 682,\n    link: '/matches',\n    pages: ['tournaments'],\n  },\n  {\n    exact: true,\n    lexics: 9457,\n    link: '/players',\n    pages: ['team', 'tournaments'],\n  },\n  {\n    exact: true,\n    lexics: 9457,\n    link: '',\n    pages: ['match'],\n  },\n]\n","import { observable, action, computed } from 'mobx'\nimport {\n  tabs,\n  tabsForAmplua5,\n  tabsForAmplua6,\n  tabsForAmplua7,\n  tabsForAmplua8,\n  //@ts-ignore\n} from 'config/tabsConfig'\n// @ts-ignore\nimport stores from 'features/stores'\nimport BasicStore from './BasicStore'\n\nexport default class Tabs extends BasicStore {\n  @observable active = 'serve';\n\n  @observable tabs = tabs;\n\n  @computed get list() {\n    const { page } = this.getStore('lexics')\n    const { isFetching, profile } = this.getStore('playerProfile')\n\n    if (page === 'player') {\n      if (!isFetching && profile) {\n        switch (profile.amplua.id) {\n          case 4:\n          case 5:\n            return tabsForAmplua5\n          case 8:\n            return tabsForAmplua8\n          case 6:\n            return tabsForAmplua6\n          case 7:\n            return tabsForAmplua7\n          default:\n            return this.tabs\n        }\n      }\n    }\n\n    return this.tabs\n  }\n\n  //@ts-ignore\n  @action changeActive = (tab) => {\n    this.active = tab\n    // Очищаем выбранные фильтры\n    //@ts-ignore\n    stores.filters.clear()\n  };\n}\n","import { utils } from 'react-sport'\nimport { action } from 'mobx'\nimport routes from 'config/routes'\nimport get from 'lodash/get'\nimport map from 'lodash/map'\nimport filter from 'lodash/filter'\nimport uniqBy from 'lodash/uniqBy'\nimport concat from 'lodash/concat'\n\n\nimport m from 'moment'\n\nimport BasicStore from 'features/stores/BasicStore'\n\nconst procedures = {\n  player: 'scout_player_matches_list',\n  team: 'scout_team_match_period_1',\n}\n\nconst fields = {\n  player: '_p_player_id',\n  team: '_p_team_id',\n}\n\ninterface IMatchesApiStore {\n  fetch: (\n    page: string,\n    pageId: string | number,\n    offset: number,\n    limit: number,\n    //@ts-ignore\n    dateFrom?: string,\n    //@ts-ignore\n    dateTo?: string,\n    //@ts-ignore\n    setTempSelected?: (filteredMatches: Array<number>) => void,\n    //@ts-ignore\n    setOpened?: (pageId: string | number) => void,\n  ) => void | null,\n  addOffset: (pageId: string | number) => void,\n  changeActive: () => void,\n}\n\n// Стор для загруженных матчей\nexport default class MatchesApiStore extends BasicStore\n  implements IMatchesApiStore {\n  //@ts-ignore\n  @action fetch = (\n    //@ts-ignore\n    page,\n    //@ts-ignore\n    pageId,\n    //@ts-ignore\n    offset,\n    //@ts-ignore\n    limit,\n    // При выборе всего года или сезона в выпадающем меню\n    dateFrom = null,\n    dateTo = null,\n    setTempSelected = null,\n    setOpened = null,\n  ) => {\n    //@ts-ignore\n    if (get(this.list[pageId], 'next') === false) {\n      // Если загружены все матчи, то не делаем запрос далее,\n      // просто выбираем из общего списка матчи за год или за сезон\n      // и закрываем меню\n      if (dateFrom && setTempSelected && setOpened) {\n        //@ts-ignore\n        const checkPeriod = matchDate => m(matchDate).isBetween(dateFrom, dateTo)\n        // фильтруем матчи, даты которых входят в нужный диапазон\n        const filteredMatches = map(\n          //@ts-ignore\n          filter(this.list[pageId].matches, ({ match_date }) => checkPeriod(match_date)),\n          'f_match',\n        )\n        //@ts-ignore\n        setTempSelected(filteredMatches)\n        //@ts-ignore\n        setOpened(pageId)\n      }\n      return null\n    }\n    const url = `${routes.API_ROOT}/data`\n    const config = {\n      method: 'POST',\n      body: JSON.stringify({\n        //@ts-ignore\n        proc: procedures[page],\n        params: {\n          //@ts-ignore\n          [fields[page]]: pageId,\n          _p_date_from: dateFrom,\n          _p_date_to: dateTo,\n          _p_offset: offset,\n          _p_limit: limit,\n        },\n      }),\n    }\n    utils.callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        this.isFetching = true\n      },\n      onSuccess: json => this._onSuccess(\n        json,\n        page,\n        pageId,\n        //@ts-ignore\n        setTempSelected,\n        //@ts-ignore\n        setOpened,\n      ),\n      onError: this._onError,\n    })\n  }\n\n  _onSuccess = (\n    json: {\n      data: Array<any>,\n    },\n    page: string,\n    pageId: string | number,\n    //@ts-ignore\n    setTempSelected?: (filteredMatches: Array<number>) => void,\n    //@ts-ignore\n    setOpened?: (pageId: string | number) => void,\n  ) => {\n    //@ts-ignore\n    const data = json.data[0] ? json.data[0][procedures[page]] : []\n\n    if (setTempSelected && setOpened) {\n      setTempSelected(map(data, 'f_match'))\n      setOpened(pageId)\n    }\n\n    const pageProfile = get(this, ['list', pageId])\n    const matches = get(pageProfile, 'matches', [])\n    const offset = get(pageProfile, 'offset', 0)\n    //@ts-ignore\n    this.list[pageId] = {\n      matches: data ? uniqBy(concat(matches, data), 'f_match') : matches,\n      offset: data\n        ? offset + 20\n        : offset,\n      next: !!data,\n    }\n    //@ts-ignore\n    this.error = null\n    //@ts-ignore\n    this.isFetching = false\n    //@ts-ignore\n    if (this.firstLoad) {\n      //@ts-ignore\n      this.firstLoad = false\n    }\n  }\n\n  _onError = (error: any) => {\n    //@ts-ignore\n    this.isFetching = false\n    //@ts-ignore\n    this.error = error\n  }\n\n  //@ts-ignore\n  @action addOffset = (pageId, limit = 20) => {\n    //@ts-ignore\n    const offset = this.list[pageId] ? this.list[pageId].offset : 0\n    this.fetch(this.getStore('lexics').page, pageId, offset, limit)\n  }\n\n  //@ts-ignore\n  @action changeActive = (active) => {\n    //@ts-ignore\n    this.active = active\n  }\n}\n","import { observable } from 'mobx'\n// @ts-ignore\nimport MatchesApiStore from 'features/stores/Matches/MatchesApiStore'\n\nexport default class MatchesStore extends MatchesApiStore {\n  @observable list = {};\n\n  @observable isFetching = true;\n\n  @observable offset = 0;\n\n  @observable firstLoad = true;\n\n  @observable error = false;\n\n  @observable active = 'team1';\n}\n","export const amplua = {\n  team: 0,\n  opposite: 4,\n  wingSpiker: 8,\n  middleBlocker: 5,\n  setter: 6,\n  libero: 7,\n}\n","import { observable } from 'mobx'\n// @ts-ignore\nimport PlayerProfileApiStore from 'features/stores/PlayerProfile/PlayerProfileApiStore'\n\nexport default class PlayerProfileStore extends PlayerProfileApiStore {\n  @observable profile = null;\n\n  @observable isFetching = true;\n\n  @observable error = false;\n}\n","import { action } from 'mobx'\n\nimport { utils } from 'react-sport'\n\nimport get from 'lodash/get'\n\nimport routes from 'config/routes'\nimport BasicStore from 'features/stores/BasicStore'\nimport { amplua } from 'config/amplua'\n\nexport default class PlayerProfileApiStore extends BasicStore {\n  @action fetch = (playerId: string | number) => {\n    const url = `${routes.API_ROOT}/data`\n    const config = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'scout_player_inf',\n        params: {\n          player_id: playerId,\n        },\n      }),\n    }\n    utils.callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        this.profile = null\n        //@ts-ignore\n        this.isFetching = true\n      },\n      onSuccess: json => this._onSuccess(json),\n      onError: this._onError,\n    })\n  }\n\n  _onSuccess = (json: {data: {}}) => {\n    //@ts-ignore\n    this.isFetching = false\n    //@ts-ignore\n    this.profile = get(json, 'data', null)\n    const ampluaId = get(this, 'profile.amplua.id')\n    if (ampluaId === amplua.libero) {\n      this.getStore('tabs').changeActive('serve_reception')\n      this.getStore('markers').setDefaultDirections()\n    }\n\n    //@ts-ignore\n    this.error = null\n  }\n\n  //@ts-ignore\n  _onError = (error: {}) => {\n    //@ts-ignore\n    this.isFetching = false\n    //@ts-ignore\n    this.error = error\n  }\n}\n","type TAmpluaStats = {\n  lexic_id: string,\n  param_id: number,\n  percent: boolean,\n}\n// Параметры, которые отображаются в шапке страницы. Статистика игрока в зависимости от амплуа\nexport const headerPlayerParams: {\n  [key: string]: Array<TAmpluaStats>,\n} = {\n  //Диагональный\n  4: [\n    { lexic_id: '8025', param_id: 175, percent: true },\n    { lexic_id: '7962', param_id: 102, percent: false },\n    { lexic_id: '7788', param_id: 101, percent: false },\n    { lexic_id: '8029', param_id: 103, percent: false },\n    { lexic_id: '8532', param_id: 124, percent: false },\n    { lexic_id: '9472', param_id: 236, percent: true },\n  ],\n  // Доигровщик\n  8: [\n    { lexic_id: '8025', param_id: 175, percent: true },\n    { lexic_id: '7962', param_id: 102, percent: false },\n    { lexic_id: '7788', param_id: 101, percent: false },\n    { lexic_id: '8029', param_id: 103, percent: false },\n    { lexic_id: '7957', param_id: 158, percent: true },\n    { lexic_id: '8532', param_id: 124, percent: false },\n  ],\n  // Связующий\n  6: [\n    { lexic_id: '8068', param_id: 183, percent: false },\n    { lexic_id: '8640', param_id: 184, percent: true },\n    { lexic_id: '7788', param_id: 101, percent: false },\n    { lexic_id: '8029', param_id: 103, percent: false },\n    { lexic_id: '8532', param_id: 124, percent: false },\n    { lexic_id: '9473', param_id: 223, percent: true },\n    { lexic_id: '9470', param_id: 222, percent: true },\n    { lexic_id: '8859', param_id: 224, percent: true },\n  ],\n  // Центральный блокирующий\n  5: [\n    { lexic_id: '8025', param_id: 175, percent: true },\n    { lexic_id: '7962', param_id: 102, percent: false },\n    { lexic_id: '7788', param_id: 101, percent: false },\n    { lexic_id: '8029', param_id: 103, percent: false },\n    { lexic_id: '8605', param_id: 181, percent: false },\n    { lexic_id: '8054', param_id: 148, percent: true },\n    { lexic_id: '8532', param_id: 124, percent: false },\n  ],\n  // Либеро\n  7: [\n    { lexic_id: '7957', param_id: 158, percent: true },\n    { lexic_id: '8095', param_id: 161, percent: true },\n    { lexic_id: '8532', param_id: 124, percent: false },\n  ],\n}\n\nexport const additional_params = [102, 130, 132, 190, 186, 115]\n\n// Параметры, которые отображаются в шапке страницы. Статистика\nexport const team_params = [\n  { lexic_id: '8025', param_id: 175, percent: true },\n  { lexic_id: '7962', param_id: 102, percent: false },\n  { lexic_id: '7788', param_id: 101, percent: false },\n  { lexic_id: '8029', param_id: 103, percent: false },\n  { lexic_id: '7957', param_id: 158, percent: true },\n  { lexic_id: '8532', param_id: 124, percent: false },\n]\n\nexport const zone_params = {\n  attack: [\n    { param_id: 175, percent: true },\n    { param_id: 102, percent: false },\n    { param_id: 104, percent: false },\n  ],\n  block: [\n    { param_id: 144, percent: true },\n    { param_id: 103, percent: false },\n    { param_id: 116, percent: false },\n  ],\n  pass: [\n    { param_id: 191, percent: true },\n    { param_id: 190, percent: false },\n    { param_id: 183, percent: false },\n  ],\n  serve: [\n    { param_id: 154, percent: true },\n    { param_id: 101, percent: false },\n    { param_id: 134, percent: false },\n  ],\n  attack_reception: [\n    { param_id: 161, percent: true },\n    { param_id: 130, percent: false },\n    { param_id: 131, percent: false },\n  ],\n  serve_reception: [\n    { param_id: 158, percent: true },\n    { param_id: 132, percent: false },\n    { param_id: 132, percent: false },\n  ],\n}\n","type TMarker = {\n  [key: string]: {\n    group: Array<number>,\n    values: Array<number> | null,\n  },\n}\n\nconst from_x = 34\nconst from_y = 33\nconst to_x = 36\nconst to_y = 35\n\nexport const middleOptions = [97, 175, 96]\n\nexport const positions = {\n  attack: {\n    from_x: 112,\n    from_y: 111,\n    to_x,\n    to_y,\n  },\n  attack_reception: {\n    from_x,\n    from_y,\n    to_x,\n    to_y,\n  },\n  attack_with_middle_point: {\n    from_x: 112,\n    from_y: 111,\n    middle_x: 141,\n    middle_y: 140,\n    to_x,\n    to_y,\n  },\n  block: {\n    from_x,\n    from_y,\n    to_x,\n    to_y,\n  },\n  pass: {\n    from_x,\n    from_y,\n    to_x,\n    to_y,\n  },\n  serve: {\n    from_x,\n    from_y,\n    to_x,\n    to_y,\n  },\n  serve_reception: {\n    from_x,\n    from_y,\n    to_x,\n    to_y,\n  },\n}\n\nexport const fetchProps = {\n  attack: {\n    mapShoot: [92, 105, 106],\n    playerInfo: [107],\n  },\n  attack_reception: {\n    mapShoot: [107],\n    playerInfo: [107],\n  },\n  block: {\n    playerInfo: [39, 40, 41],\n  },\n  pass: {\n    playerInfo: [67],\n  },\n  serve: {\n    mapShoot: [67],\n    playerInfo: [67],\n  },\n  serve_reception: {\n    mapShoot: [107],\n    playerInfo: [107],\n  },\n}\n\n// объекты с уточняющими значениями для доп. фильтрации маркеров на карте ударов\n// ключ - айди фильтра\n// значение - объект с группой и значением.\n// Проверяем по группе и значению\n// если массив значений (values) null, то проверка идет по айди игрока\n\n//дополнительная проверка маркеров (общая для игрока и команды)\nconst commonExtraCheckMarkers: TMarker = {\n  // Подача в 2 зону\n  157: {\n    group: [15],\n    values: [40, 162],\n  },\n  // Подача в 3 зону\n  158: {\n    group: [15],\n    values: [40, 162],\n  },\n  // Подача в 4 зону\n  159: {\n    group: [15],\n    values: [40, 162],\n  },\n}\n\n//дополнительная проверка маркеров для игроков\nexport const playerExtraCheckMarkers: TMarker = {\n  // Ассисты на блоке\n  231: {\n    group: [118, 119],\n    values: null,\n  },\n  //Заработанные очки на блоке\n  51: {\n    group: [39],\n    values: null,\n  },\n  ...commonExtraCheckMarkers,\n}\n\n//дополнительная проверка маркеров для команды\nexport const teamExtraCheckMarkers = {\n  ...commonExtraCheckMarkers,\n}\n","// attackZone - список параметров, для которых используется\n// в БД f_variant_zone = 125. Относятся только к атаке.\nexport const attackZone = [\n  102,\n  175,\n  105,\n  104,\n  102,\n  175,\n  105,\n  138,\n  137,\n  139,\n  226,\n  227,\n  235,\n  229,\n  233,\n  231,\n  237,\n  225,\n  228,\n  236,\n  230,\n  234,\n  232,\n  238,\n]\n\n// attackZoneSpecial - список специальных параметров, для которых используется\n// в БД f_variant_zone = 127.\nexport const attackZoneSpecial = [\n  210,\n  211,\n  212,\n  213,\n]\n\n// список параметров, для которых f_option_3 = 57, только передняя линия\nexport const frontLineParams = [\n  226,\n  227,\n  235,\n  229,\n  233,\n  231,\n  237,\n  211,\n  213,\n  218,\n]\n\n// список параметров, для которых f_option_3 = 58, только задняя линия\nexport const backLineParams = [\n  225,\n  228,\n  236,\n  230,\n  234,\n  232,\n  238,\n  210,\n  212,\n  217,\n]\n\n// список параметров, для которых f_option_5 = 70, только блоки\nexport const allBlocks = [103, 113, 181, 116, 103, 144, 113, 146, 115, 148]\n\n// Линии поля\nexport const fieldLines = {\n  ALL_LINES: 39, // Все поле\n  BACK_LINE: 58, // Задняя линия\n  FRONT_LINE: 57, // Передняя линия\n}\n\n// Зоны на поле (для атаки или подачи)\nexport const zones = {\n  ATTACK_ZONE: 125, // Зона атаки\n  ATTACK_ZONE_SPECIAL: 127, //особая зона\n  SERVE_ZONE: 123, // Зона подачи\n}\n\n// типы блоков\nexport const blockTypes = {\n  ALL_BLOCKS: 70, // Все блоки\n}\n","const sets = {\n  ALL_SETS: 0,\n  FIRST_SET: 1,\n  SECOND_SET: 2,\n  THIRD_SET: 3,\n}\n\nexport default sets\n","import React from 'react'\nimport m from 'moment'\nimport isPlainObject from 'lodash/isPlainObject'\nimport isArray from 'lodash/isArray'\nimport clamp from 'lodash/clamp'\nimport includes from 'lodash/includes'\nimport filter from 'lodash/filter'\nimport size from 'lodash/size'\nimport compact from 'lodash/compact'\nimport keys from 'lodash/keys'\nimport map from 'lodash/map'\nimport find from 'lodash/find'\nimport flatten from 'lodash/flatten'\n\nimport { getRoot } from 'mobx-state-tree'\nimport {\n  fieldSize,\n  markersWithoutOpponentSide,\n  ownSideMarkers,\n} from 'config/common'\nimport { positions } from 'config/markers'\nimport {\n  zones,\n  fieldLines,\n  blockTypes,\n  attackZone,\n  attackZoneSpecial,\n  frontLineParams,\n  backLineParams,\n  allBlocks,\n} from 'config/FieldZones'\n\nimport sets from 'config/matchSetsConfig'\n\n/**\n * Получение фильтров для маркеров\n * @param {array} filters - массив id фильтров, необходимых для отображения в блоке\n * @param {object || array || number} elem - возвращенное значение от сервера.\n * @param {string} name - если elem объект, то для ключа используем name.\n * Это будет слово для заголовка фильтра в компоненте.\n */\nexport function getFilters(\n  elem: any,\n  filters: Array<any>,\n  name: string = 'items',\n) {\n  const rootObj = {}\n  if (isPlainObject(elem)) {\n    objFilters(rootObj, elem, filters, name)\n  } else if (isArray(elem)) {\n    //@ts-ignore\n    rootObj[name] = arrFilters(elem, filters)\n  } else {\n    //@ts-ignore\n    rootObj[name] = filters.find(({ id }) => id === elem) || elem\n  }\n  return rootObj\n}\n\n/**\n * Обработка значения elem. В случае если от серера пришел объект.\n * @param {object} rootObj - пустой объект по умолчанию, заполняем его парами ключ-значение rootObj[name] = ...\n * @param {object || array || number} elem - возвращенное значение от сервера.\n * @param {array} filters - массив id фильтров, необходимых для отображения в блоке\n * @param {string} name - имя для ключа для нового объекта rootObj\n */\nconst objFilters = (\n  rootObj: {},\n  //@ts-ignore\n  elem: { id: number | string | null, items?: Array<any> },\n  filters: Array<{ id: number }>,\n  name: string,\n) => {\n  if ('id' in elem) {\n    //@ts-ignore\n    rootObj[name] = {\n      info: filters.find(({ id }) => id === elem.id) || elem.id,\n    }\n    if ('items' in elem) {\n      //@ts-ignore\n      rootObj[name] = {\n        //@ts-ignore\n        ...rootObj[name],\n        ...getFilters(elem.items, filters),\n      }\n    }\n  } else {\n    Object.entries(elem).forEach(([groupName, groupElements]) => {\n      //@ts-ignore\n      rootObj[name] = {\n        //@ts-ignore\n        ...rootObj[name],\n        ...getFilters(groupElements, filters, groupName),\n      }\n    })\n  }\n  return rootObj\n}\n/**\n * Обработка значения elem. В случае если от серера пришел массив.\n * @param {array} elem - вовращенное значение от сервера.\n * @param {array} filters - массив id фильтров, необходимых для отображения в блоке.\n */\nconst arrFilters = (elem: any, filters: Array<{ id: number }>) => {\n  //@ts-ignore\n  let arr = []\n  //@ts-ignore\n  elem.forEach((item) => {\n    if (isPlainObject(item)) {\n      let list = {}\n      Object.entries(item).forEach(([groupName, groupElements]) => {\n        list = {\n          ...list,\n          ...getFilters(groupElements, filters, groupName),\n        }\n      })\n      //@ts-ignore\n      arr = [...arr, list]\n    } else {\n      //@ts-ignore\n      arr = [...arr, filters.find(({ id }) => id === item) || item]\n    }\n  })\n  //@ts-ignore\n  return arr\n}\n\n/**\n * Показ даты с годом или без\n * @param {string} date - дата, которая приходит от сервера.\n */\nexport function dateWithYear(date: string) {\n  if (m(date).year() !== m().year()) return m(date).format('DD/MM/YY')\n  return m(date).format('DD/MM')\n}\n\n/**\n * Функция, которая нужна для отображения имени или слова на нужном языке.\n * @param {string} lang - параметр языка\n */\n//@ts-ignore\nexport function getSuffix(lang: string | null) {\n  return lang === 'ru' ? 'ru' : 'en'\n}\n\n/**\n * Функция, которая нужна для отображения длинного имени или длинного слова на нужном языке.\n * @param {string} lang - параметр языка\n */\nexport function getLongSuffix(lang: string) {\n  return lang === 'ru' ? 'rus' : 'eng'\n}\n\n/**\n * Перевод мер измерения в случае англоязычной версии\n * @param {number} cm - число, которе будем менять\n */\nexport function cmToFt(cm: number) {\n  const resArr = (cm / 30.48).toFixed(2).toString().split('.')\n  return `${resArr[0]}' ${resArr[1]}'' `\n}\n\n/**\n * Если нет аватара\n */\nexport const noImages = {\n  player: 'https://instatscout.com/images/players/96/no-photo.png',\n  team: 'https://volleyball.instatscout.com/images/team-no-photo.png',\n  tournament: 'https://volleyball.instatscout.com/images/team-no-photo.png',\n}\n\n/**\n * Получение id матчей из ответа сервера\n * @param {array} array - массив матчей из которых будем выдергивать id\n */\nexport const getMatchesIds = (array: Array<{ f_match: number }>) => {\n  //@ts-ignore\n  const newArray = []\n  array.forEach(elem => newArray.push(elem.f_match))\n  //@ts-ignore\n  return newArray\n}\n\n/**\n * получение изображения\n  TODO. В разработке\n */\nexport const getPic = (ent: string, size: number, id: number) => `https://instatscout.com/images/${ent}/${size}/${id}.png`\n\n/**\n * прелоадер для страницы\n  TODO. В разработке\n */\nexport const pagePreloader = (lexics: {}) => (\n  <img\n    src='http://volleyball.instatscout.com/images/page_preloader.gif'\n    //@ts-ignore\n    alt={lexics}\n    className='t-compare__preloader'\n  />\n)\n\n/**\n * Расчет координат для маркеров, используется для отображения карты ударов (со стралками)\n * @param {number} pos_x - позиция маркера по Х\n * @param {number} pos_y - позиция маркера по Y\n * @param {boolean} opponentSide - для какой стороны поля считаем.\n * @param {string} field - тип поля (для правильно расчета размера для формулы)\n */\nexport const setCoord = (\n  //@ts-ignore\n  pos_x: number | null,\n  //@ts-ignore\n  pos_y: number | null,\n  opponentSide: boolean = false,\n  field: string = 'STANDART',\n) => {\n  if (!pos_x && !pos_y) {\n    return {\n      pos_x: null,\n      pos_y: null,\n    }\n  }\n  //@ts-ignore\n  const { length, width } = fieldSize[field]\n  //@ts-ignore\n  const x = ((width - pos_x) * 100) / width\n  //@ts-ignore\n  const y = ((opponentSide ? pos_y : length - pos_y) * 100) / length\n  return {\n    pos_x: clamp(x, -9, 106),\n    pos_y: clamp(y, -3, 104),\n  }\n}\n\n/**\n * Расчет координат для маркеров, используется для отображения карты ударов (со стралками)\n * @param {string} tab - табы для страницы с маркерами (АТАКА, БЛОК, ПОДАЧА и тд)\n * @param {object} point - данные маркера(точки на поле)\n * @param {boolean} middle - центр\n */\nexport const getPoints = (\n  tab: string,\n  point: { prop: Array<{}> },\n  middle: Array<any> | boolean = false,\n) => {\n  const coordintaions = ['from_x', 'from_y', 'to_x', 'to_y', 'middle_x', 'middle_y']\n  //@ts-ignore\n  const points = positions[middle && tab === 'attack' ? `${tab}_with_middle_point` : tab]\n  const marker = {}\n  coordintaions.forEach((coord) => {\n    if (coord.includes('middle') && !middle) return null\n    //@ts-ignore\n    marker[`pos_${coord}`] = point.prop.find(p => p[0] === points[coord]) || []\n    //@ts-ignore\n  })\n  return marker\n}\n\n/**\n * Конвертация массива в объект\n * @param {array} arr - массив, с которым совершаются действия\n */\n//@ts-ignore\nexport const convertArrToObj = (arr: Array<{ slice: (number) => void }>) => {\n  const obj = {}\n  arr.forEach((item) => {\n    const shifted = item.slice(1)\n    //@ts-ignore\n    if (item[0]) obj[item[0]] = shifted\n  })\n  return obj\n}\n\n/**\n * Запись в стор данных посчитанных\n * @param {array} markers - массив маркеров\n * @param {number} types - тип маркера (из стора shootTypes, тип удара)\n */\nexport const applyMarkersState = (\n  markers: Array<{\n    prop: Array<any>,\n    //@ts-ignore\n    action_type?: string | null,\n    c_action: string | number,\n    ownSide?: boolean,\n    dontShowOpponentSide?: boolean,\n  }>,\n  types: Array<{\n    c_action: string | number,\n    c_match_event_prop: string | number,\n    c_match_event_prop_value: number | Array<number>,\n    //@ts-ignore\n    action_type?: string | null,\n  }>,\n) => {\n  markers.forEach((marker) => {\n    const actionTypes = types.filter(({ c_action }) => c_action === marker.c_action)\n    const convertedProps = convertArrToObj(marker.prop)\n    actionTypes.forEach(({\n      action_type,\n      c_match_event_prop,\n      c_match_event_prop_value,\n    }) => {\n      if (c_match_event_prop in convertedProps) {\n        //@ts-ignore\n        const currentProp = convertedProps[c_match_event_prop]\n        //@ts-ignore\n        if (includes(c_match_event_prop_value, currentProp[1])) {\n          marker.action_type = action_type\n        }\n      }\n\n      // Маркеры с данными ключами должны показываться на левой стороне\n      marker.ownSide = ownSideMarkers.some(key => key in convertedProps)\n\n      // У этих маркеров не должны отображаться точки КУДА\n      marker.dontShowOpponentSide = markersWithoutOpponentSide.some((item) => {\n        //@ts-ignore\n        const { checkTab, key, props } = item\n        if (isPlainObject(item)) {\n          return (\n            key in convertedProps\n            //@ts-ignore\n            && props.includes(convertedProps[key])\n            && checkTab(marker.c_action)\n          )\n        }\n        //@ts-ignore\n        return item in convertedProps\n      })\n    })\n  })\n  return markers\n}\n\nexport const checkArrayElements = (arr: Array<{}>, condition: (item: {}) => void) => {\n  let matchCondition = false\n  arr.forEach((item) => {\n    //@ts-ignore\n    if (condition(item)) return (matchCondition = true)\n  })\n  return matchCondition\n}\n\n/**\n * Формирование списка id игроков для запроса к серверу.\n * @param {array} data - массив маркеров\n * @param {array} propList - массив маркеров только для определенной вкладки (таб, АТАКА, БЛОК, ПОДАЧА и тд)\n */\nexport const getPlayers = (data: Array<{ prop: Array<any> }>, propList: Array<number>) => {\n  //@ts-ignore\n  const players = []\n\n  data.forEach(({ prop }) => {\n    const convertedProp = convertArrToObj(prop)\n    propList.forEach((id) => {\n      //@ts-ignore\n      if (id in convertedProp && !players.includes(convertedProp[id][1])) {\n        //@ts-ignore\n        players.push(convertedProp[id][1])\n      }\n    })\n  })\n  //@ts-ignore\n  return players\n}\n\n/**\n * Расчет процентов для значения статистики, если необходимо\n * @param {number} numerator - id фильтра по которому считаем статистику\n * @param {number} denominator - id фильтра, который нам нужен для расчета %\n * @param {array} stats - статистика по всем параметрам\n */\nexport const getPercents = (\n  numerator: number,\n  denominator: number,\n  stats: Array<{ f_param: number, value: number }>,\n  type?: string,\n) => {\n  const numeratorValue = stats\n    .filter(({ f_param }) => f_param === numerator)\n    .map(({ value }) => value)\n  const denominatorValue = stats\n    .filter(({ f_param }) => f_param === denominator)\n    .map(({ value }) => value)\n  if (numeratorValue.length && denominatorValue.length) {\n    const result = numeratorValue.reduce(\n      (prev, current, index) => prev + current / denominatorValue[index],\n      0,\n    )\n    switch (type) {\n      case 'total':\n        return Math.round((result * 100))\n      default:\n        // По умолчанию берем среднее значение\n        return Math.round((result * 100) / numeratorValue.length)\n    }\n  }\n  return '—'\n}\n\n/**\n * @param {object || array} filters - фильтры\n */\nexport const groupFilters = (filters: any) => {\n  const groups = {}\n  if (isPlainObject(filters)) {\n    filters = Object.values(filters)\n  }\n  //@ts-ignore\n  filters.forEach((filter) => {\n    const key = filter.groupName\n      || filter.c_match_event_prop2\n      || filter.c_match_event_prop\n    if (key in groups) {\n      //@ts-ignore\n      groups[key].push(filter)\n    } else {\n      //@ts-ignore\n      groups[key] = [filter]\n    }\n  })\n  return groups\n}\n\n/** Перевод из кг в фунты\n * @param {number} weight - вес в кг\n */\nexport const kgToPounds = ((weight: number) => +(weight / 0.455).toFixed(0))\n\n/** Получение аббревиатуры\n * @param {string} string - название команды\n */\nexport function getAbbr(string: string) {\n  if (!string) return ''\n  const strArr = string.split(' ')\n  if (strArr.length > 1) {\n    return strArr.map(word => word.charAt(0)).join('').toUpperCase()\n  }\n  return string.substring(0, 3).toUpperCase()\n}\n\n/** Фильтрация входящих параметров со статистикой с бэка (json)\n * @param {array} params - массив с параметрами, из json.data из ответа\n */\n\nexport function filterDBStats(params: Array<any>) {\n  return filter(params, ({\n    f_option_0,\n    f_option_3,\n    f_option_5,\n    f_param,\n    f_variant_zone,\n  }) => {\n    const {\n      ALL_LINES,\n      BACK_LINE,\n      FRONT_LINE,\n    } = fieldLines\n    const { ALL_SETS } = sets\n    const {\n      ATTACK_ZONE,\n      ATTACK_ZONE_SPECIAL,\n      SERVE_ZONE,\n    } = zones\n    const { ALL_BLOCKS } = blockTypes\n\n    // Для блоков фильтруем еще по свойству f_option_5\n    if (includes(allBlocks, f_param)) {\n      return (\n        f_option_0 === ALL_SETS\n        && f_variant_zone === SERVE_ZONE\n        && f_option_3 === ALL_LINES\n        && f_option_5 === ALL_BLOCKS\n      )\n    }\n    // По умолчанию берем статистику по всему полю ALL_LINES\n    // По умолчанию берем статистику по зоне подачи SERVE_ZONE\n    let fieldLine: number = ALL_LINES\n    let zone: number = SERVE_ZONE\n    // Если параметр относится к передней линии, меняем опцию на 57 - передняя линия\n    if (includes(frontLineParams, f_param)) {\n      fieldLine = FRONT_LINE\n    }\n    // Если параметр относится к задней линии, меняем опцию на 58 - задняя линия\n    if (includes(backLineParams, f_param)) {\n      fieldLine = BACK_LINE\n    }\n    // Если параметр относится к атакующему типу, меняем зону на зону атаки\n    if (includes(attackZone, f_param)) {\n      zone = ATTACK_ZONE\n    }\n    // Если параметр относится к специальному атакующему типу,\n    // меняем зону на зону специальную атаки\n    if (includes(attackZoneSpecial, f_param)) {\n      zone = ATTACK_ZONE_SPECIAL\n    }\n\n    return (\n      f_option_0 === ALL_SETS\n      && f_variant_zone === zone\n      && f_option_3 === fieldLine\n    )\n  })\n}\n/** Сохранение таблиц в localStorage\n * @param {string} tableName - имя таблицы для стора\n * @param {string} tables - сам объект таблицы в виде строки\n * @param {number} id - id амплуа игрока.\n */\nexport function saveTablesToLocalStorage(\n  {\n    id,\n    name,\n    tables,\n  }: {\n    name: string,\n    tables: {},\n    id?: number,\n  },\n) {\n  // id передаем, если сохраняем в localStorage таблицу для игрока\n  // Для каждого амплуа идет индивидуальная запись\n  if (id) {\n    //@ts-ignore\n    const table = JSON.parse(window.localStorage.getItem(name)) || {}\n    table[id] = tables\n    window.localStorage.setItem(name, JSON.stringify(table))\n  } else {\n    window.localStorage.setItem(name, JSON.stringify(tables))\n  }\n}\n\n/** Изменение окончания в русском слове в зависимости от числа\n * @param {number} number - число\n * @param {Array} textForms - массив слов, которые применяются ['матч', 'матча', 'матчей'])\n */\nexport function num2str(number: number, textForms: Array<string>) {\n  number = Math.abs(number) % 100\n  const dividedBy10: number = number % 10\n\n  if (number > 10 && number < 20) {\n    return textForms[2]\n  }\n  if (dividedBy10 > 1 && dividedBy10 < 5) {\n    return textForms[1]\n  }\n  if (dividedBy10 === 1) {\n    return textForms[0]\n  }\n  return textForms[2]\n}\n\n/**\n  * Функция, возвращающая объект кнопки удаления таблицы\n  * @param {object} tables - таблицы со статистикой\n  * @param {func} deleteTable - функция удаления таблицы\n  */\nconst getDeleteBtn = (\n  tables: {},\n  deleteTable: (position: number) => void,\n) => {\n  if (size(tables) > 1) {\n    return ({\n      //@ts-ignore\n      action: position => deleteTable(position),\n      t: 'remove_table',\n      buttonType: 'button_remove',\n    })\n  }\n  return false\n}\n\n\n/**\n  * Функция, возвращающая массив кнопок с действиями с таблицей\n  * @param {func} handleNewPopupAction - добавить новую таблицу\n  * @param {func} deleteTable - удалить таблицу\n  * @param {func} moveTableUp - переместить таблицу вверх\n  * @param {func} moveTableDown - переместить таблицу вниз\n  * @param {func} resetTable - возврат к таблицам по-умолчанию\n  * @param {object} tables - список всех таблиц на странице\n  */\ntype TBtnAction = (position: number) => void\n\nexport const tableHeaderButtons = (\n  handleNewPopupAction: () => void,\n  deleteTable: TBtnAction,\n  moveTableUp: TBtnAction,\n  moveTableDown: TBtnAction,\n  resetTable: TBtnAction,\n  tables: {},\n) => compact([\n  {\n    action: () => handleNewPopupAction(),\n    t: 'add_table',\n    buttonType: 'button_add',\n  },\n  getDeleteBtn(tables, deleteTable),\n  {\n    action: position => moveTableUp(position),\n    t: 'move_table_up',\n    buttonType: 'button_up',\n  },\n  {\n    action: position => moveTableDown(position),\n    t: 'move_table_down',\n    buttonType: 'button_down',\n  },\n  {\n    action: position => resetTable(position),\n    t: 'reset_tables',\n    buttonType: 'button_reset',\n  },\n])\n\n/**\n  * Функция, возвращающая количество выбранных чекбоксов в группе\n  * @param {Array} checkboxes - список всех чекбоксов для выпадающего меню\n  * @param {Object} checked - выбранные чекбоксы\n  * @param {String} groupName - название группы\n  */\nexport const getCheckedFiltersNumber = ({\n  checkboxes,\n  checked,\n  groupName,\n}: {\n  checkboxes: Array<any> | {},\n  checked: {},\n  groupName?: string,\n}) => {\n  const filtersCount = size(\n    filter(checkboxes, ({\n      f_player,\n      id,\n      player_id,\n    }) => {\n      const key = id\n        || f_player\n        || player_id\n      const checkedArray = keys(checked)\n      const checkedFilters = groupName\n        ? map(checkedArray, (id) => {\n          const newId = id.match(/(\\d+|\\D+)/g)\n          return newId\n        })\n        : checkedArray\n\n      return groupName\n        //@ts-ignore\n        ? find(checkedFilters, ([id, group]) => (\n          String(key) === id && groupName === group\n        ))\n        //@ts-ignore\n        : includes(checkedFilters, String(key))\n    }),\n  )\n  return filtersCount || null\n}\n\n/**\n  * Оборачиваем любое число в круглые скобки\n  * @param {number || null} number - число\n  */\nexport const addParenthesesToNumber = (number: number | null) => (\n  number ? `(${number})` : null\n)\n\n/**\n  * Получаем число выбранных фильтров в группе и оборачиваем в круглые скобки\n  * @param {Array} checkboxes - список всех чекбоксов для выпадающего меню\n  * @param {Object} checked - выбранные чекбоксы\n  * @param {String} groupName - название группы\n  */\nexport const checkedFiltersCount = ({\n  checkboxes,\n  checked,\n  groupName,\n}: {\n  checkboxes: Array<any> | {},\n  checked: {},\n  groupName?: string,\n}) => {\n  const number = getCheckedFiltersNumber({\n    checkboxes,\n    checked,\n    groupName,\n  })\n  return addParenthesesToNumber(number)\n}\n\n/** Возвращаем список айди выбранных фильтров.\n * В зависимости от типа применяем нужную функцию преобразования\n*/\nexport const getCheckedFiltersSubMenu = (data: any, type: string) => {\n  const getFiltersWithHeader = () => flatten(\n    map(data, ({ ids }) => ids),\n  )\n  const getFiltersWithZones = () => map(data, 'zoneId')\n  const getData = () => data\n\n  const types = {\n    popupWithColumns: getFiltersWithHeader,\n    popupWithZones: getFiltersWithZones,\n    popupSimple: getData,\n    popupWithPlayers: getData,\n    popupWithHomePlayers: getData,\n  }\n  //@ts-ignore\n  return types[type]()\n}\n\n/**\n  * Проверка на тип команды\n  * @param {number} teamType - тип команды\n    тип 2 - сборная\n  */\nexport const isNationalTeam = (teamType: number) => teamType === 2\n//@ts-ignore\nexport const getStore = (self, Store) => getRoot(self)[Store]\n","import { utils } from 'react-sport'\nimport { action } from 'mobx'\nimport routes from 'config/routes'\nimport map from 'lodash/map'\nimport get from 'lodash/get'\n\nimport BasicStore from 'features/stores/BasicStore'\nimport { headerPlayerParams } from 'config/params'\n\nimport { filterDBStats } from 'module/utils/helpers'\n\ntype TConfig = {\n  method: string,\n  body: string,\n}\n\ninterface IPlayerStatsApiStore {\n  fetch: (\n    playerId: number | string,\n    //@ts-ignore\n    selectedMatches: Array<number> | string | null,\n    playerTypeId: number,\n  ) => void,\n  eraseHeaderStats: () => void,\n}\n\n// Действия со стором статистики, получение от БД данных по статистике игрока.\nexport default class PlayerStatsApiStore extends BasicStore\n  implements IPlayerStatsApiStore {\n  @action\n  //@ts-ignore\n  fetch = (playerId, selectedMatches, playerTypeId) => {\n    const url: string = `${routes.API_ROOT}/data`\n    const playerParams: Array<number> = map(get(headerPlayerParams, playerTypeId), 'param_id')\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'ask_player_param_view',\n        params: {\n          _v_match_id: selectedMatches,\n          _v_player_id: [playerId],\n          _v_param_id: playerParams,\n        },\n      }),\n    }\n    utils.callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        this.stats = []\n        //@ts-ignore\n        this.isFetching = true\n      },\n      onSuccess: json => this._onSuccess(json),\n      onError: error => this._onError(error),\n    })\n  }\n\n  //@ts-ignore\n  _onSuccess = (json: { data?: Array<{}> }) => {\n    //@ts-ignore\n    this.isFetching = false\n    //@ts-ignore\n    this.stats = filterDBStats(json.data)\n    //@ts-ignore\n    this.error = null\n  }\n\n  //@ts-ignore\n  _onError = (error: {}) => {\n    //@ts-ignore\n    this.isFetching = false\n    //@ts-ignore\n    this.error = error\n  }\n\n  @action eraseHeaderStats = () => {\n    //@ts-ignore\n    this.stats = []\n  }\n}\n","import { observable } from 'mobx'\n// @ts-ignore\nimport PlayerStatsHeaderApiStore from 'features/stores/PlayerStatsHeader/PlayerStatsHeaderApiStore'\n\nexport default class PlayerStatsHeaderStore extends PlayerStatsHeaderApiStore {\n  @observable stats = [];\n\n  @observable isFetching = true;\n\n  @observable error = false;\n}\n","import { utils } from 'react-sport'\nimport { action } from 'mobx'\nimport routes from 'config/routes'\nimport concat from 'lodash/concat'\nimport map from 'lodash/map'\nimport BasicStore from 'features/stores/BasicStore'\nimport { team_params, additional_params } from 'config/params'\n\nimport { filterDBStats } from 'module/utils/helpers'\n\n\ninterface ITeamStatsApiStore {\n  fetch: (\n    teamId: number | string,\n    //@ts-ignore\n    selectedMatches: Array<number> | string | null,\n  ) => void,\n  eraseHeaderStats: () => void,\n}\n\n// Действия со стором статистики, получение от БД данных по статистике команды.\nexport default class TeamStatsApiStore extends BasicStore\n  implements ITeamStatsApiStore {\n  @action\n  //@ts-ignore\n  fetch = (teamId, selectedMatches) => {\n    const url: string = `${routes.API_ROOT}/data`\n    const teamParams: Array<number> = map(team_params, 'param_id')\n    const config: {\n      method: string,\n      body: string,\n    } = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'ask_team_param_view',\n        params: {\n          _v_match_id: selectedMatches,\n          _v_team_id: [teamId],\n          _v_param_id: concat(teamParams, additional_params),\n        },\n      }),\n    }\n    utils.callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        this.stats = []\n        //@ts-ignore\n        this.isFetching = true\n      },\n      //@ts-ignore\n      onSuccess: (json: { data?: Array<{}> }) => this._onSuccess(json, teamId),\n      onError: (error: any) => this._onError(error),\n    })\n  }\n\n  //@ts-ignore\n  _onSuccess = (json: { data?: Array<{}> }) => {\n    //@ts-ignore\n    this.isFetching = false\n    // Нужна статистика только по целому матчу f_option_0 = 0\n    // Фильтруем ответ от сервера, удаляем ненужные значения и записываем в стор\n    //@ts-ignore\n    this.stats = filterDBStats(json.data)\n    //@ts-ignore\n    this.error = null\n  }\n\n  //@ts-ignore\n  _onError = (error: {}) => {\n    //@ts-ignore\n    this.isFetching = false\n    //@ts-ignore\n    this.error = error\n  }\n\n  @action eraseHeaderStats = () => {\n    //@ts-ignore\n    this.stats = []\n  }\n}\n","import { observable } from 'mobx'\n// @ts-ignore\nimport TeamStatsApiStore from 'features/stores/TeamStatsHeader/TeamStatsHeaderApiStore'\n\nexport default class TeamStatsHeaderStore extends TeamStatsApiStore {\n  @observable stats = [];\n\n  @observable isFetching = false;\n\n  @observable error = false;\n}\n","import { observable, action } from 'mobx'\n\nexport default class InfoItem {\n  @observable clickCnt = 0;\n\n  //@ts-ignore\n  //@ts-ignore\n  @action clickHandle = (e, tooltips) => {\n    e.preventDefault()\n    this.clickCnt = this.clickCnt < tooltips.length - 1 ? this.clickCnt + 1 : 0\n  };\n}\n","// @ts-ignore\nimport { observable, computed } from 'mobx'\nimport isEmpty from 'lodash/isEmpty'\nimport filter from 'lodash/filter'\n\n// @ts-ignore\nimport stores from 'features/stores'\n\n// @ts-ignore\nconst Markers = superclass =>\n  class extends superclass {\n    //@ts-ignore\n    @observable loaded = false;\n\n    //@ts-ignore\n    @observable error = null;\n\n    //@ts-ignore\n    @observable data = [];\n\n    //@ts-ignore\n    @observable select = false;\n\n    //@ts-ignore\n    @observable directions = {\n      to: true,\n      from: true,\n    };\n\n    //@ts-ignore\n    @computed get list() {\n      //@ts-ignore\n      const { checked } = stores.filters\n      const store = this.getStore.bind(this)\n      const markers = this.select\n        //@ts-ignore\n        ? filter(this.data, marker => marker.visible)\n        : this.data\n      if (isEmpty(checked)) return markers\n      return this.getMarkers({\n        checkedFilters: checked,\n        markers,\n        store,\n      })\n    }\n  }\n\nexport default Markers\n","// @ts-ignore\nimport { action } from 'mobx'\nimport isPlainObject from 'lodash/isPlainObject'\nimport get from 'lodash/get'\nimport isEmpty from 'lodash/isEmpty'\nimport uniq from 'lodash/uniq'\nimport pickBy from 'lodash/pickBy'\nimport some from 'lodash/some'\nimport filter from 'lodash/filter'\n\nimport { groupFilters } from 'module/utils/helpers'\n\nimport { fetchProps } from 'config/markers'\n\nimport {\n  TCheckMarkerArgs,\n  TGetMarkersArgs,\n  TFilter,\n} from './types'\nimport { doubleKeyFiltration, singleKeyFiltration } from './KeysFiltration'\n\n//TODO Переписать функции фильтрации\n/**\n * checkMarker - проверка маркеров на соответствие фильтрам\n * @property {object} filter - добавление\n * @property {object} prop - параметры маркера, по которым будет проходить проверка\n * @property {number} player_id - id игрока, нужен в случае если нету 4х параметров ниже\n * @property {array} c_match_event_prop - основной ключ маркера, по которому будет поиск\n * @property {array} c_match_event_prop2 - дополнительный ключ, если есть,\n * то проверяется на соответствие обоим ключам\n * @property {array} c_match_event_prop_value - параметр поиска для первого ключа\n * @property {array} c_match_event_prop_value2 - параметр поиска для второго ключа\n *\n * возврощает значение bool\n */\n\nconst checkMarker = ({\n  c_match_event_prop,\n  c_match_event_prop_value,\n  c_match_event_prop_value2,\n  c_match_event_prop2,\n  f_player,\n  filter,\n  filterId,\n  player_id,\n  prop,\n  store,\n}: TCheckMarkerArgs) => {\n  if (!isPlainObject(filter)) return null\n  if (c_match_event_prop && c_match_event_prop2) {\n    return doubleKeyFiltration({\n      c_match_event_prop,\n      c_match_event_prop_value,\n      c_match_event_prop_value2,\n      c_match_event_prop2,\n      filterId,\n      prop,\n    })\n  }\n  if (c_match_event_prop) {\n    return singleKeyFiltration({\n      c_match_event_prop,\n      c_match_event_prop_value,\n      f_player,\n      filterId,\n      prop,\n    })\n  }\n  if (filter.fetchProps === 'mapShoot') {\n    const mapShoot = get(fetchProps, [store('tabs').active, 'mapShoot'])\n    const mapForCheck = prop.filter(property => mapShoot.includes(property[0]))\n    return (\n      mapForCheck && mapForCheck.some(property => property[2] === player_id)\n    )\n  }\n  if (\n    store('lexics').page === 'player'\n    || store('tabs').active === 'block'\n    || (store('tabs').active === 'attack' && filter.fetchProps === 'playerInfo')\n  ) {\n    const playerInfo = get(fetchProps, [store('tabs').active, 'playerInfo'])\n    const mapForCheck = prop.filter(property =>\n      playerInfo.includes(property[0]))\n    return (\n      mapForCheck && mapForCheck.some(property => property[2] === player_id)\n    )\n  }\n  return player_id === f_player\n}\n\n/**\n * Логика фильтрации следующая:\n * Приходят несколько фильтров и маркеры, если маркеры в одной группе,\n * то надо отдавать маркеры которые совпадают хотя бы с одним фильтром,\n * Если же маркеры из разных групп, то надо отдавать маркеры которые соответствуют всем фильтрам.\n * Но есть момент когда приходят маркеры из одной и из разных групп,\n * в этом случае маркеры разбиваются по группам,\n * и сначала делаем фильтрацию по группам, а после между группами\n */\nconst getMarkers = ({\n  checkedFilters,\n  markers,\n  store,\n}: TGetMarkersArgs) => {\n  const groupedFilters: {\n    [key: string]: Array<{}>,\n  } = groupFilters(checkedFilters)\n  const markersFilteredByGroup: {[key: string]: {}} = {}\n\n  /**\n   * Выше группируем фильтры и в данном цикле отфильтровываем маркеры, после\n   * забиваем тоже по группам.\n   * Здесь фильтрация происходит внутри одной группы, то есть как описал выше\n   * возвращаются маркера соответствующие любому фильтру из списка.\n   */\n  Object.entries(groupedFilters).forEach(([groupName, filters]) => {\n    markersFilteredByGroup[groupName] = filter(markers, ({ f_player, prop }) =>\n      some(filters, (filter: TFilter) => {\n        const {\n          c_match_event_prop,\n          c_match_event_prop_value,\n          c_match_event_prop_value2,\n          c_match_event_prop2,\n          id: filterId,\n          player_id,\n        }: TFilter = filter\n\n        return checkMarker({\n          c_match_event_prop,\n          c_match_event_prop_value,\n          c_match_event_prop_value2,\n          c_match_event_prop2,\n          f_player,\n          filter,\n          filterId,\n          player_id,\n          prop,\n          store,\n        })\n      }))\n  })\n\n  const markersToArray = Object.entries(markersFilteredByGroup)\n\n  /**\n   * если групп меньше 2х, то фильтрации между групп не требуется, поэтому возвращаем\n   * отфильтрованные выше маркеры\n   */\n  if (markersToArray.length < 2) {\n    return !isEmpty(markersFilteredByGroup) ? markersToArray[0][1] : []\n  }\n\n  /**\n   * Здесь делаем фильтрацию маркеров между разных групп.\n   */\n  let result: Array<number> = []\n  markersToArray.forEach(([markersGroup, markers]) => {\n    /**\n     * Отбираем фильтры, из других групп\n     */\n    const neededFilters = pickBy(\n      groupedFilters,\n      (group: Array<{}>) => ('c_match_event_prop' in group[0]\n        //@ts-ignore\n        ? !group[0].c_match_event_prop.includes(parseInt(markersGroup, 10))\n        //@ts-ignore\n        : group[0].groupName !== markersGroup),\n    )\n    /**\n     * Здесь делаем фильтрацию маркеров, на соответствие фильтрам из других групп\n     */\n    const linkedMarkers = filter(markers, ({ f_player, prop }) =>\n      Object.values(neededFilters).every(filters =>\n      //@ts-ignore\n        some(filters, (filter: TFilter) => {\n          const {\n            c_match_event_prop,\n            c_match_event_prop_value,\n            c_match_event_prop_value2,\n            c_match_event_prop2,\n            id: filterId,\n            player_id,\n          }: TFilter = filter\n\n          return checkMarker({\n            c_match_event_prop,\n            c_match_event_prop_value,\n            c_match_event_prop_value2,\n            c_match_event_prop2,\n            f_player,\n            filter,\n            filterId,\n            player_id,\n            prop,\n            store,\n          })\n        })))\n\n    result = [...result, ...linkedMarkers]\n  })\n  // Убираем дубли, если появились в процессе добавления нескольких фильтров\n  // Маркер может совпадать с несколькими фильтрами и добавиться несколько раз\n  return uniq(result)\n}\n\nconst MarkersFiltration = (superclass: any) =>\n  class extends superclass {\n    //@ts-ignore\n    @action getMarkers = (props: TGetMarkersArgs) => getMarkers(props);\n  }\n\nexport default MarkersFiltration\n","import find from 'lodash/find'\nimport size from 'lodash/size'\nimport every from 'lodash/every'\nimport includes from 'lodash/includes'\nimport some from 'lodash/some'\n\nimport {\n  playerExtraCheckMarkers,\n  teamExtraCheckMarkers,\n} from 'config/markers'\n\ntype TKeyFiltration = {\n  c_match_event_prop: Array<number>,\n  c_match_event_prop2?: Array<number> | null,\n  c_match_event_prop_value: Array<number>,\n  c_match_event_prop_value2?: Array<number> | null,\n  f_player?: number,\n  filterId: number,\n  prop: Array<Array<number>>,\n}\n\nexport const doubleKeyFiltration = ({\n  c_match_event_prop,\n  c_match_event_prop_value,\n  c_match_event_prop_value2,\n  c_match_event_prop2,\n  prop,\n}: TKeyFiltration) => {\n  /**\n   * Находим маркеры по группе и ключам, из списка выбранных фильтров,\n   * достаем пропсы и из списка маркеров достаем маркеры со схожими пропсами\n   * c_match_event_prop - группа из фильтра\n   * c_match_event_prop_value - значения из фильтра\n   * propGroup - группа\n   * propValue - значения\n   */\n  if (c_match_event_prop_value && c_match_event_prop_value2) {\n    const property1IsTrue = find(\n      prop,\n      ([propGroup, , propValue]) =>\n        includes(c_match_event_prop, propGroup)\n        && includes(c_match_event_prop_value, propValue),\n    )\n\n    const property2IsTrue = find(\n      prop,\n      ([propGroup, , propValue]) =>\n        includes(c_match_event_prop2, propGroup)\n        && includes(c_match_event_prop_value2, propValue),\n    )\n    return property1IsTrue && property2IsTrue\n  }\n\n  const property1IsTrue = find(prop, ([propGroup]) =>\n    includes(c_match_event_prop, propGroup))\n\n  const property2IsTrue = find(prop, ([propGroup]) =>\n    includes(c_match_event_prop2, propGroup))\n  return property1IsTrue && property2IsTrue\n}\n\nexport const singleKeyFiltration = ({\n  c_match_event_prop,\n  c_match_event_prop_value,\n  f_player,\n  filterId,\n  prop,\n}: TKeyFiltration) => {\n  /**\n   * Функция, которая осуществляет доп. фильтрацию маркера\n   * Работает так: если маркер не нуждается в доп. фильтрации, то возвращаем true\n   * Фильтруем от обратного - если наше условие выполнилось, то маркер НЕ показываем\n   * (не оставляем маркеры, которые подошли, а удаляем, которые не подошли)\n   * Это сделано для того, чтобы была возможность исключать маркеры (напр. с ошибкой)\n   * и наоборот оставлять подходящие под условие в одной функции\n   */\n  const additionalCheck = () => {\n    // Для команды у нас всегда 4 элемента в prop[0], а для игрока по 3 элемента\n    const extraCheckMarkers = size(prop[0]) === 4\n      ? teamExtraCheckMarkers\n      : playerExtraCheckMarkers\n    if (!extraCheckMarkers[filterId]) return true\n    const { group, values } = extraCheckMarkers[filterId]\n    return !every(\n      group,\n      groupItem =>\n        find(\n          prop,\n          ([propGroup, , propValue]) => {\n            // если есть массив values, то проверяем по нему, иначе проверка идет по айди игрока\n            const valueCheck = values\n              ? includes(values, propValue)\n              : propValue !== f_player\n\n            return groupItem === propGroup && valueCheck\n          },\n        ) || !find(prop, ([propGroup]) => propGroup === groupItem),\n    )\n  }\n\n  if (c_match_event_prop_value) {\n    return (\n      !!find(\n        prop,\n        ([propGroup, , propValue]) =>\n          c_match_event_prop.includes(propGroup)\n          && c_match_event_prop_value.includes(propValue),\n      ) && additionalCheck()\n    )\n  }\n\n  /**\n   * Находим маркеры только по группе\n   * c_match_event_prop - группа из фильтра\n   * propGroup - айди группы маркера\n   */\n  return (\n    some(c_match_event_prop, value =>\n      find(prop, ([propGroup]) => propGroup === value)) && additionalCheck()\n  )\n}\n","import { observable, action } from 'mobx'\n// @ts-ignore\nimport { middleOptions } from 'config/markers'\n// @ts-ignore\nimport { setCoord, getPoints } from 'module/utils/helpers'\n\n//функция проверки наличия точки по середине\n// @ts-ignore\n// @ts-ignore\n// @ts-ignore\nconst getMiddlePoint = ({ prop }) =>\n  prop.find(\n    //@ts-ignore\n    //@ts-ignore\n    ([key, property]) => key === 24 && middleOptions.includes(property),\n  )\n\nclass Marker {\n  @observable visible = true;\n\n  //@ts-ignore\n  //@ts-ignore\n  constructor(props, store) {\n    Object.assign(this, props)\n    const { active } = store('tabs')\n    //@ts-ignore\n    const withMiddlePoint = getMiddlePoint(this)\n    //получаем позицию маркера\n    const {\n      //@ts-ignore\n      pos_from_x,\n      //@ts-ignore\n      pos_from_y,\n      //@ts-ignore\n      pos_middle_x,\n      //@ts-ignore\n      pos_middle_y,\n      //@ts-ignore\n      pos_to_x,\n      //@ts-ignore\n      pos_to_y,\n      //@ts-ignore\n    } = getPoints(active, this, withMiddlePoint)\n    //устанавливаем координаты для точек откуда, куда и блок, если есть точка по середине\n    //@ts-ignore\n    this.from = setCoord(pos_from_x[2], pos_from_y[2])\n    //@ts-ignore\n    this.middle = withMiddlePoint && setCoord(pos_middle_x[2], pos_middle_y[2])\n    //@ts-ignore\n    this.to = setCoord(pos_to_x[2], pos_to_y[2])\n  }\n\n  //@ts-ignore\n  @action setVisible = (value) => {\n    this.visible = value\n  };\n}\n\nexport default Marker\n","// @ts-ignore\nimport { action } from 'mobx'\nimport { utils as remoteUtils } from 'react-sport'\nimport get from 'lodash/get'\n\n// @ts-ignore\nimport routes from 'config/routes'\n\n// @ts-ignore\n// @ts-ignore\nexport const getToolTipResult = (markers, resultList) => {\n  //@ts-ignore\n  const markersWithResult = []\n  //@ts-ignore\n  markers.forEach((marker) => {\n    const { prop } = marker\n    const result = resultList.find((\n      {\n        //@ts-ignore\n        //@ts-ignore\n        //@ts-ignore\n        prop_id,\n        //@ts-ignore\n        prop_value_id,\n      }, //@ts-ignore\n    ) =>\n      //@ts-ignore\n      prop.find(\n        //@ts-ignore\n        property => property[0] === prop_id && property[2] === prop_value_id,\n      ))\n    if (result) {\n      marker.result_lexic = result.lexical_formula\n      markersWithResult.push(marker)\n    } else {\n      markersWithResult.push(marker)\n    }\n  })\n  //@ts-ignore\n  return markersWithResult\n}\n\n// @ts-ignore\nconst ToolTipActions = superclass =>\n  class extends superclass {\n    //@ts-ignore\n    @action fetch = () => {\n      const url = `${routes.API_ROOT}/data`\n      const config = {\n        method: 'POST',\n        body: JSON.stringify({\n          proc: 'scout_event_prop_action_result',\n          params: {\n            _p_action_result: true,\n          },\n        }),\n      }\n\n      remoteUtils.callApi({\n        url,\n        config,\n        onRequest: this._onRequest.bind(this),\n        onSuccess: this._onSuccess.bind(this),\n        onError: this._onError.bind(this),\n      })\n    };\n\n    //@ts-ignore\n    _onSuccess({ data }) {\n      //@ts-ignore\n      this.loaded = true\n      //@ts-ignore\n      this.error = false\n      //@ts-ignore\n      this.data = get(data, '[0].scout_event_prop_action_result', [])\n    }\n\n    _onRequest() {\n      //@ts-ignore\n      this.loaded = false\n      //@ts-ignore\n      this.error = false\n    }\n\n    //@ts-ignore\n    _onError(error) {\n      //@ts-ignore\n      this.error = error\n      //@ts-ignore\n      this.loaded = false\n    }\n  }\n\nexport default ToolTipActions\n","// @ts-ignore\nimport { action } from 'mobx'\nimport { utils as remoteUtils } from 'react-sport'\nimport remove from 'lodash/remove'\n\n// @ts-ignore\nimport { getPlayers, getLongSuffix } from 'module/utils/helpers'\n// @ts-ignore\nimport { getFilteredMarkers } from 'features/stores/Markers/FetchMarkerActions'\n// @ts-ignore\nimport routes from 'config/routes'\n\nconst setMarkerPlayer = ({\n  //@ts-ignore\n  isBlock,\n  //@ts-ignore\n  marker,\n  //@ts-ignore\n  markersWithName,\n  //@ts-ignore\n  players,\n  //@ts-ignore\n  playerSource,\n}) => {\n  //@ts-ignore\n  const player = players.find(\n    //@ts-ignore\n    ({ f_player }) => f_player === (isBlock ? playerSource[2] : playerSource),\n  )\n  if (!player) {\n    return markersWithName.push(marker)\n  }\n\n  const currentPlayerName = player.prop_player[0]\n\n  if (marker.playerName) {\n    marker.playerName.push(currentPlayerName)\n  } else {\n    marker.playerName = [currentPlayerName]\n  }\n  return markersWithName.push(marker)\n}\n\n// @ts-ignore\n// @ts-ignore\n// @ts-ignore\nconst getPlayersIdList = (data, playerIdList, players) =>\n  //@ts-ignore\n  data.forEach(({ prop }) =>\n    // из маркеров достаем игроков по ключу\n    //@ts-ignore\n    playerIdList.forEach((id) => {\n      //@ts-ignore\n      const player = prop.find(property => property[0] === id)\n      if (player) {\n        players.push(player[2])\n      }\n    }))\n\n// @ts-ignore\n// @ts-ignore\n// @ts-ignore\n// @ts-ignore\nexport const getToolTipName = (markers, players, tab) => {\n  //@ts-ignore\n  const markersWithName = []\n  const playerIdList = [39, 40, 41]\n\n  if (tab === 'block') {\n    //@ts-ignore\n    markers.forEach((marker) => {\n      const { prop } = marker\n      // из маркеров достаем игроков по ключу\n      playerIdList.forEach((id) => {\n        //@ts-ignore\n        const player = prop.find(property => property[0] === id)\n        if (player) {\n          setMarkerPlayer({\n            players,\n            playerSource: player,\n            marker,\n            //@ts-ignore\n            markersWithName,\n            isBlock: true,\n          })\n        }\n      })\n    })\n  } else {\n    //@ts-ignore\n    markers.forEach((marker) => {\n      const { f_player } = marker\n\n      //@ts-ignore\n      setMarkerPlayer({\n        players,\n        playerSource: f_player,\n        marker,\n        //@ts-ignore\n        markersWithName,\n      })\n    })\n  }\n  //@ts-ignore\n  return markersWithName\n}\n\n// @ts-ignore\nconst FetchPlayerInfo = superclass =>\n  class extends superclass {\n    //@ts-ignore\n    @action basicFetch = () => {\n      const promise = new Promise((resolve, reject) => {\n        const url = `${routes.API_ROOT}/data`\n        let { data } = this.getStore('markers')\n        //@ts-ignore\n        const players = []\n        if (this.getStore('tabs').active === 'block') {\n          const playerIdList = [39, 40, 41]\n          //@ts-ignore\n          getPlayersIdList(data, playerIdList, players)\n        } else {\n          if (this.getStore('tabs').active === 'serve_reception') {\n            data = getFilteredMarkers(data, 70, 195)\n          } else if (this.getStore('tabs').active === 'attack_reception') {\n            data = getFilteredMarkers(data, 70, 196)\n          }\n          //@ts-ignore\n          data.forEach(({ f_player }) => players.push(f_player))\n        }\n        const config = {\n          method: 'POST',\n          body: JSON.stringify({\n            proc: 'scout_players_info',\n            params: {\n              //@ts-ignore\n              _p_player_id: players,\n            },\n          }),\n        }\n\n        remoteUtils.callApi({\n          url,\n          config,\n          onRequest: this._basicRequest.bind(this),\n          onError: error => this._basicError(error, reject),\n          onSuccess: json => this._basicSuccess(json, resolve),\n        })\n      })\n\n      return promise\n    };\n\n    //@ts-ignore\n    //@ts-ignore\n    //@ts-ignore\n    @action fetch = (markers, propsList, excludePlayer = false) => {\n      const url = `${routes.API_ROOT}/data`\n      const players = getPlayers(markers, propsList)\n      if (excludePlayer) {\n        remove(players, player => player === excludePlayer)\n      }\n      const config = {\n        method: 'POST',\n        body: JSON.stringify({\n          proc: 'scout_players_info',\n          params: {\n            _p_player_id: players,\n          },\n        }),\n      }\n\n      remoteUtils.callApi({\n        url,\n        config,\n        onRequest: this._onRequest.bind(this),\n        onSuccess: this._onSuccess.bind(this),\n        onError: this._onError.bind(this),\n      })\n    };\n\n    _basicRequest() {\n      //@ts-ignore\n      this.basicLoaded = false\n    }\n\n    //@ts-ignore\n    //@ts-ignore\n    _basicSuccess({ data }, resolve) {\n      resolve(data)\n      //@ts-ignore\n      this.basicData = data\n      //@ts-ignore\n      this.basicLoaded = true\n    }\n\n    //@ts-ignore\n    //@ts-ignore\n    _basicError(error, reject) {\n      reject(error)\n      //@ts-ignore\n      this.basicLoaded = false\n    }\n\n    //@ts-ignore\n    _onSuccess({ data }) {\n      //@ts-ignore\n      this.data = data\n      //@ts-ignore\n      this.loaded = true\n      //@ts-ignore\n      this.error = false\n    }\n\n    _onRequest() {\n      //@ts-ignore\n      this.loaded = false\n      //@ts-ignore\n      this.error = false\n    }\n\n    //@ts-ignore\n    _onError(error) {\n      //@ts-ignore\n      this.error = error\n      //@ts-ignore\n      this.loaded = false\n    }\n  }\n\nexport default FetchPlayerInfo\n","//@ts-ignore\nimport { action } from 'mobx'\nimport map from 'lodash/map'\nimport uniqBy from 'lodash/uniqBy'\n\nimport { utils as remoteUtils } from 'react-sport'\n\nimport { getPlayers } from 'module/utils/helpers'\n\nimport routes from 'config/routes'\n\nexport const getToolTipOpponentTeam = (\n  markers: Array<{\n    f_team_opponent: number,\n    opponentTeam: string,\n  }>,\n  teams: Array<{\n    f_player: number,\n    prop_player: Array<string>,\n  }>,\n) => {\n  const markersWithOpponentTeam: Array<{}> = []\n  markers.forEach((marker) => {\n    const { f_team_opponent } = marker\n    const team = teams.find(({ f_player }) => f_player === f_team_opponent)\n    if (team) {\n      const name = team.prop_player[0]\n      marker.opponentTeam = name\n      markersWithOpponentTeam.push(marker)\n    } else {\n      markersWithOpponentTeam.push(marker)\n    }\n  })\n\n  return markersWithOpponentTeam\n}\n\n// @ts-ignore\nconst FetchMapShoot = superclass =>\n  class extends superclass {\n    //@ts-ignore\n    @action basicFetch = () => {\n      const promise = new Promise((resolve, reject) => {\n        const url = `${routes.API_ROOT}/data`\n        //@ts-ignore\n        const teams = []\n        //@ts-ignore\n        this.getStore('markers').data.forEach(({ f_team_opponent }) => {\n          //@ts-ignore\n          if (teams.includes(f_team_opponent)) return null\n          return teams.push(f_team_opponent)\n        })\n        const config = {\n          method: 'POST',\n          body: JSON.stringify({\n            proc: 'scout_teams_info',\n            params: {\n              //@ts-ignore\n              _p_team_id: teams,\n            },\n          }),\n        }\n\n        remoteUtils.callApi({\n          url,\n          config,\n          onRequest: this._basicRequest.bind(this),\n          onError: error => this._basicError(error, reject),\n          onSuccess: json => this._basicSuccess(json, resolve),\n        })\n      })\n\n      return promise\n    };\n\n    //@ts-ignore\n    //@ts-ignore\n    //@ts-ignore\n    //@ts-ignore\n    @action fetch = (markers, propsList, matches) => {\n      const url = `${routes.API_ROOT}/data`\n      const players = getPlayers(markers, propsList)\n      const config = {\n        method: 'POST',\n        body: JSON.stringify({\n          proc: 'scout_teams_players_info',\n          params: {\n            _p_match_id: matches,\n            _p_player_id: players,\n          },\n        }),\n      }\n\n      remoteUtils.callApi({\n        url,\n        config,\n        onRequest: this._onRequest.bind(this),\n        onSuccess: this._onSuccess.bind(this),\n        onError: this._onError.bind(this),\n      })\n    };\n\n    _basicRequest() {\n      //@ts-ignore\n      this.basicLoaded = false\n    }\n\n    //@ts-ignore\n    //@ts-ignore\n    _basicSuccess({ data }, resolve) {\n      resolve(data)\n      //@ts-ignore\n      this.basicData = data\n      //@ts-ignore\n      this.basicLoaded = true\n    }\n\n    //@ts-ignore\n    //@ts-ignore\n    _basicError(error, reject) {\n      reject(error)\n      //@ts-ignore\n      this.basicLoaded = false\n    }\n\n    //@ts-ignore\n    _onSuccess({ data }) {\n      //@ts-ignore\n      //@ts-ignore\n      this.data = map(data, ({ prop_player, ...item }) => ({\n        ...item,\n        //@ts-ignore\n        //@ts-ignore\n        prop_player: uniqBy(\n          //@ts-ignore\n          map(prop_player, player => ({\n            ...player,\n            // добавляем поля для полученных игроков\n            groupName: 'who_served',\n            fetchProps: 'mapShoot',\n          })),\n          'player_id',\n        ),\n      }))\n      //@ts-ignore\n      this.loaded = true\n      //@ts-ignore\n      this.error = false\n    }\n\n    _onRequest() {\n      //@ts-ignore\n      this.loaded = false\n      //@ts-ignore\n      this.error = false\n    }\n\n    //@ts-ignore\n    _onError(error) {\n      //@ts-ignore\n      this.error = error\n      //@ts-ignore\n      this.loaded = false\n    }\n  }\n\nexport default FetchMapShoot\n","// @ts-ignore\nimport { action } from 'mobx'\nimport { utils as remoteUtils } from 'react-sport'\nimport uniq from 'lodash/uniq'\nimport find from 'lodash/find'\nimport map from 'lodash/map'\n\n// @ts-ignore\nimport routes from 'config/routes'\n// @ts-ignore\nimport Marker from 'features/stores/Markers/Marker'\n// @ts-ignore\nimport { actions } from 'config/tabsConfig'\n// @ts-ignore\nimport { fetchProps } from 'config/markers'\n// @ts-ignore\nimport { getToolTipResult } from 'features/stores/ToolTips/ToolTipActions'\n// @ts-ignore\nimport { getToolTipName } from 'features/stores/PlayerInfo/FetchPlayerInfo'\n// @ts-ignore\nimport { getToolTipOpponentTeam } from 'features/stores/MapShoot/FetchMapShoot'\n// @ts-ignore\nimport { applyMarkersState } from 'module/utils/helpers'\n\n// @ts-ignore\n// @ts-ignore\n// @ts-ignore\nconst getBody = (getStore, matches, id) => {\n  const tab = getStore('tabs').active\n  const { page } = getStore('lexics')\n  const proc = page === 'player' ? 'scout_player_map_shoot' : 'scout_team_map_shoot'\n  const pageId = page === 'player' ? '_p_player_id' : '_p_team_id'\n  return {\n    proc,\n    params: {\n      _p_match_arr: matches,\n      _p_date_from: null,\n      _p_date_to: null,\n      //@ts-ignore\n      _p_c_action_arr: [actions[tab]],\n      [pageId]: id,\n    },\n  }\n}\n\n// @ts-ignore\n// @ts-ignore\n// @ts-ignore\nexport const getFilteredMarkers = (data, id, value) =>\n  //@ts-ignore\n  data.filter(({ prop }) =>\n    find(prop, property => property[0] === id && property[2] === value))\n\n// @ts-ignore\nconst FetchMarkers = superclass =>\n  class extends superclass {\n    //@ts-ignore\n    //@ts-ignore\n    //@ts-ignore\n    @action fetch = (id, matches) => {\n      const url = `${routes.API_ROOT}/data`\n      const getStore = this.getStore.bind(this)\n      getStore('shotTypes').fetch()\n\n      const config = {\n        method: 'POST',\n        body: JSON.stringify(getBody(getStore, matches, id)),\n      }\n\n      remoteUtils.callApi({\n        url,\n        config,\n        onRequest: this._onRequest.bind(this),\n        onSuccess: this._onSuccess.bind(this, matches),\n        onError: this._onError.bind(this),\n      })\n    };\n\n    //@ts-ignore\n    //@ts-ignore\n    setMarkers = (data, matches) => {\n      const tab = this.getStore('tabs').active\n      let tooltips = this.getStore('tooltips').data\n      switch (tab) {\n        case 'attack':\n          this.getStore('mapShoot').fetch(\n            data,\n            //@ts-ignore\n            fetchProps[tab].mapShoot,\n            matches,\n          )\n          //@ts-ignore\n          this.getStore('playerInfo').fetch(data, fetchProps[tab].playerInfo)\n          //@ts-ignore\n          tooltips = tooltips.filter(({ prop_id }) => prop_id === 24)\n          //@ts-ignore\n          this.data = getToolTipResult(data, tooltips)\n          break\n        case 'block':\n          if (this.getStore('lexics').page === 'player') {\n            const { profile } = this.getStore('playerProfile')\n            this.getStore('playerInfo').fetch(\n              data,\n              //@ts-ignore\n              fetchProps[tab].playerInfo,\n              profile.id,\n            )\n          }\n          //@ts-ignore\n          tooltips = tooltips.filter(({ prop_id }) => prop_id === 27)\n          //@ts-ignore\n          this.data = getToolTipResult(data, tooltips)\n          break\n        case 'pass':\n          //@ts-ignore\n          this.getStore('playerInfo').fetch(data, fetchProps[tab].playerInfo)\n          //@ts-ignore\n          tooltips = tooltips.filter(({ prop_id }) => prop_id === 21)\n          //@ts-ignore\n          this.data = getToolTipResult(data, tooltips)\n          break\n        case 'serve':\n          this.getStore('mapShoot').fetch(\n            data,\n            //@ts-ignore\n            fetchProps[tab].mapShoot,\n            matches,\n          )\n          //@ts-ignore\n          this.getStore('playerInfo').fetch(data, fetchProps[tab].playerInfo)\n          //@ts-ignore\n          tooltips = tooltips.filter(({ prop_id }) => prop_id === 15)\n          //@ts-ignore\n          this.data = getToolTipResult(data, tooltips)\n          break\n        case 'attack_reception':\n          data = getFilteredMarkers(data, 70, 196)\n          //@ts-ignore\n          this.getStore('playerInfo').fetch(data, fetchProps[tab].playerInfo)\n          this.getStore('mapShoot').fetch(\n            data,\n            //@ts-ignore\n            fetchProps[tab].mapShoot,\n            matches,\n          )\n          //@ts-ignore\n          tooltips = tooltips.filter(({ prop_id }) => prop_id === 18)\n          //@ts-ignore\n          this.data = getToolTipResult(data, tooltips)\n          break\n        case 'serve_reception':\n          data = getFilteredMarkers(data, 70, 195)\n          //@ts-ignore\n          this.getStore('playerInfo').fetch(data, fetchProps[tab].playerInfo)\n          this.getStore('mapShoot').fetch(\n            data,\n            //@ts-ignore\n            fetchProps[tab].mapShoot,\n            matches,\n          )\n          //@ts-ignore\n          tooltips = tooltips.filter(({ prop_id }) => prop_id === 18)\n          //@ts-ignore\n          this.data = getToolTipResult(data, tooltips)\n          break\n        default:\n          //@ts-ignore\n          this.data = data\n      }\n    };\n\n    //@ts-ignore\n    //@ts-ignore\n    async _onSuccess(matches, { data }) {\n      const store = this.getStore.bind(this)\n      const markers = map(data, marker => new Marker(marker, store))\n      //@ts-ignore\n      this.data = markers\n      await this.getStore('playerInfo').basicFetch()\n      await this.getStore('mapShoot').basicFetch()\n      const types = this.getStore('shotTypes').data\n      const players = this.getStore('playerInfo').basicData\n      const teams = this.getStore('mapShoot').basicData\n      //@ts-ignore\n      data = applyMarkersState(markers, types)\n      data = getToolTipOpponentTeam(data, teams)\n      if (this.getStore('tabs').active === 'block') {\n        data = getToolTipName(data, players, 'block')\n      } else {\n        //@ts-ignore\n        data = getToolTipName(data, players)\n      }\n      this.setMarkers(uniq(data), matches)\n      //@ts-ignore\n      this.loaded = true\n      //@ts-ignore\n      this.error = false\n    }\n\n    _onRequest() {\n      //@ts-ignore\n      this.loaded = false\n      //@ts-ignore\n      this.error = false\n    }\n\n    //@ts-ignore\n    _onError(error) {\n      //@ts-ignore\n      this.error = error\n      //@ts-ignore\n      this.loaded = false\n    }\n  }\n\nexport default FetchMarkers\n","// @ts-ignore\nimport { action, toJS } from 'mobx'\n\nimport forIn from 'lodash/forIn'\nimport find from 'lodash/find'\nimport min from 'lodash/min'\nimport max from 'lodash/max'\nimport inRange from 'lodash/inRange'\nimport get from 'lodash/get'\nimport toPairs from 'lodash/toPairs'\n\nimport { defaultDirections } from 'config/tabsConfig'\n\ntype TMarker = {\n  setVisible: (arg: boolean) => void,\n}\n\ntype TRect = {\n  x1: number,\n  x2: number,\n  y1: number,\n  y2 : number,\n}\n\nconst Actions = (superclass: any) =>\n  class extends superclass {\n    //@ts-ignore\n    @action handleDirection = (name, value) => {\n      this.directions[name] = value\n    };\n\n    setDefaultDirections = () => {\n      const { active }: {active: string} = this.getStore('tabs')\n      const defaultDirectionsActive: {from: boolean, to: boolean } = get(\n        defaultDirections,\n        active,\n      )\n\n      return forIn(defaultDirectionsActive, (value, key) =>\n        this.handleDirection(key, value))\n    };\n\n    //@ts-ignore\n    @action selectToggle = (value: boolean) => {\n      //@ts-ignore\n      this.select = value\n    };\n\n    //@ts-ignore\n    @action setAllVisible = () => {\n      this.data.forEach(({ setVisible }: TMarker) => setVisible(true))\n    }\n\n    setRect = (\n      {\n        x1,\n        x2,\n        y1,\n        y2,\n      } : TRect,\n      rectWidth: number,\n      rectLength: number,\n      fieldWidth: number,\n      fieldLength: number,\n    ) => {\n      if (x1 === x2 || y1 === y2) {\n        return this.setAllVisible()\n      }\n      const xStart = min([x1, x2]) || 0\n      const xEnd = max([x1, x2]) || 0\n      const yStart = min([y1, y2]) || 0\n      const yEnd = max([y1, y2]) || 0\n      // для корректного подсчета нужно перевести в абсолютные значения\n      const xStartAbs = (xStart * rectWidth) / 100\n      const xEndInAbs = (xEnd * rectWidth) / 100\n      const yStartInAbs = (yStart * rectLength) / 100\n      const yEndInAbs = (yEnd * rectLength) / 100\n\n      const markersType = find(\n        toPairs(this.directions),\n        (direction: Array<string | boolean>) => direction[1] === true,\n      ) || ['to', true]\n\n      this.data.forEach((marker: TMarker) => {\n        const { pos_x, pos_y } = get(marker, get(markersType, '[0]'))\n        // координаты переводим в абсолютные значения\n        // (24 и 30 - это отступы у поля, которые необходимо учитывать)\n        const xCoordAbs = (pos_x * fieldWidth) / 100 + 24\n        const yCoordAbs = (pos_y * fieldLength) / 100 + 30\n        if (\n          !inRange(xCoordAbs, xStartAbs, xEndInAbs)\n          || !inRange(yCoordAbs, yStartInAbs, yEndInAbs)\n        ) {\n          marker.setVisible(false)\n        }\n      })\n    };\n\n    //@ts-ignore\n    @action deleteMarkers = () => {\n      //@ts-ignore\n      this.data = []\n    };\n  }\n\nexport default Actions\n","import { compose } from 'recompose'\n\n// @ts-ignore\nimport MarkersStore from 'features/stores/Markers/MarkersStore'\n// @ts-ignore\nimport MarkersFiltration from 'features/stores/Markers/MarkersFiltration/MarkersFiltration'\n// @ts-ignore\nimport FetchMarkers from 'features/stores/Markers/FetchMarkerActions'\n// @ts-ignore\nimport Actions from 'features/stores/Markers/Actions'\n\n// @ts-ignore\nconst ComposeMarkers = superclass =>\n  compose(\n    MarkersStore,\n    MarkersFiltration,\n    FetchMarkers,\n    Actions,\n  )(superclass)\n\nexport default ComposeMarkers\n","import { utils } from 'react-sport'\n// @ts-ignore\nimport { action } from 'mobx'\n\nimport forIn from 'lodash/forIn'\nimport includes from 'lodash/includes'\nimport get from 'lodash/get'\nimport map from 'lodash/map'\nimport filter from 'lodash/filter'\n\nimport routes from 'config/routes'\nimport { zone_params } from 'config/params'\nimport { defaultDirections } from 'config/tabsConfig'\n\ntype TCommonObjOptions = {\n  [key: string]: string,\n}\n\nconst procedures: TCommonObjOptions = {\n  player: 'ask_player_param_view',\n  team: 'ask_team_param_view',\n}\n\nconst fields: TCommonObjOptions = {\n  player: '_v_player_id',\n  team: '_v_team_id',\n}\n\n// @ts-ignore\nconst ZoneActionsMixin = superclass =>\n  class extends superclass {\n    // Ставим активную зону и меняем направления маркеров для этой зоны\n    //@ts-ignore\n    @action setChecked = (name) => {\n      //@ts-ignore\n      this.checked = name\n      const { active } = this.getStore('tabs')\n      const { handleDirection } = this.getStore('markers')\n      // Случай, если пользователь выбирает показывать зоны\n      // Для АТАК, БЛОК, ПЕРЕДАЧА показываем точки откуда, в остальных случаях точки куда\n      if (includes(['attack', 'pass'], active)) {\n        return forIn({ from: false, to: true }, (value, key) =>\n          handleDirection(key, value))\n      }\n      return forIn({ from: true, to: false }, (value, key) =>\n        handleDirection(key, value))\n    }\n\n    //@ts-ignore\n    @action resetToDefaultDirections = () => {\n      const { active } = this.getStore('tabs')\n      const { handleDirection } = this.getStore('markers')\n\n      const defaultDirectionsActive = get(defaultDirections, active)\n      return forIn(defaultDirectionsActive, (value, key) =>\n        handleDirection(key, value))\n    }\n\n    //@ts-ignore\n    @action setZone = (value) => {\n      //@ts-ignore\n      this.checked = value\n    };\n\n    //@ts-ignore\n    @action setTotal = (value) => {\n      //@ts-ignore\n      this.total = value\n    };\n\n    //@ts-ignore\n    @action fetch = (pageId, matches) => {\n      const url = `${routes.API_ROOT}/data`\n      const tab = this.getStore('tabs').active\n      const page: string = get(this.getStore('lexics'), 'page')\n      const params = map(zone_params, [tab, 'param_id'])\n      const config = {\n        body: JSON.stringify({\n          proc: procedures[page],\n          params: {\n            _v_match_id: matches,\n            [fields[page]]: [pageId],\n            _v_param_id: [params],\n          },\n        }),\n        method: 'POST',\n      }\n      utils.callApi({\n        config,\n        onError: error => this._onError(error),\n        onRequest: () => {\n          //@ts-ignore\n          this.stats = []\n          //@ts-ignore\n          this.loaded = null\n        },\n        onSuccess: json => this._onSuccess(json),\n        url,\n      })\n    };\n\n    //@ts-ignore\n    _onSuccess = ({ data }) => {\n      //@ts-ignore\n      this.loaded = true\n      // Нужна статистика только по целому матчу f_option_0 = 0\n      //@ts-ignore\n      this.stats = filter(data, ({ f_option_0 }) => f_option_0 === 0) || null\n\n      //@ts-ignore\n      this.error = null\n    };\n\n    //@ts-ignore\n    _onError = (error) => {\n      //@ts-ignore\n      this.loaded = true\n      //@ts-ignore\n      this.error = error\n    };\n  }\n\nexport default ZoneActionsMixin\n","import { observable, computed } from 'mobx'\n\n// @ts-ignore\nimport BasicStore from 'features/stores/BasicStore'\n// @ts-ignore\nimport ZoneActions from 'features/stores/Zones/ZoneActionsMixin'\n// @ts-ignore\nimport { zone_params } from 'config/params'\n\n// @ts-ignore\n// @ts-ignore\n// @ts-ignore\nconst setParam = (data, tab, key) =>\n  //@ts-ignore\n  data.filter(({ f_param }) => f_param === zone_params[tab][key].param_id)\n\nclass Zones extends ZoneActions(BasicStore) {\n  @observable checked = 'without_zone';\n\n  @observable total = false;\n\n  @observable stats = null;\n\n  @observable loaded = false;\n\n  //@ts-ignore\n  @observable error;\n\n  @observable basic = {\n    left: {},\n    right: {},\n  };\n\n  @observable advanced = {\n    left: {},\n    right: {},\n  };\n\n  @computed get activeStats() {\n    //@ts-ignore\n    const { active } = this.getStore('tabs')\n    const zoneStats = this.checked === 'advanced_zones'\n    //@ts-ignore\n      ? this.stats.filter(({ f_variant_zone }) => f_variant_zone === 124)\n    //@ts-ignore\n      : this.stats.filter(({ f_variant_zone }) => f_variant_zone !== 124)\n    return {\n      percent: setParam(zoneStats, active, 0),\n      successActions: setParam(zoneStats, active, 1),\n      totalActions: setParam(zoneStats, active, 2),\n    }\n  }\n}\n\nexport default Zones\n","import { observable } from 'mobx'\nimport BasicStore from '../BasicStore'\nimport FetchShotType from './FetchShotType'\n\nclass Markers extends FetchShotType(BasicStore) {\n  @observable loaded = false;\n\n  @observable error = null;\n\n  @observable data = [];\n}\n\nexport default Markers\n","// @ts-ignore\nimport { action } from 'mobx'\nimport { utils as remoteUtils } from 'react-sport'\n\n// @ts-ignore\nimport routes from 'config/routes'\n\n// @ts-ignore\nconst FetchShotType = superclass =>\n  class extends superclass {\n    //@ts-ignore\n    @action fetch = () => {\n      const url = `${routes.API_ROOT}/data`\n      const config = {\n        method: 'POST',\n        body: JSON.stringify({\n          proc: 'ask_type_of_actions_view',\n        }),\n      }\n\n      remoteUtils.callApi({\n        url,\n        config,\n        onRequest: this._onRequest.bind(this),\n        onSuccess: this._onSuccess.bind(this),\n        onError: this._onError.bind(this),\n      })\n    };\n\n    //@ts-ignore\n    _onSuccess({ data }) {\n      //@ts-ignore\n      this.data = data\n      //@ts-ignore\n      this.loaded = true\n      //@ts-ignore\n      this.error = false\n    }\n\n    _onRequest() {\n      //@ts-ignore\n      this.loaded = false\n      //@ts-ignore\n      this.error = false\n    }\n\n    //@ts-ignore\n    _onError(error) {\n      //@ts-ignore\n      this.error = error\n      //@ts-ignore\n      this.loaded = false\n    }\n  }\n\nexport default FetchShotType\n","import { observable, computed } from 'mobx'\nimport reduce from 'lodash/reduce'\n// @ts-ignore\nimport BasicStore from 'features/stores/BasicStore'\nimport FetchMapShoot from './FetchMapShoot'\n\nclass MapShootStore extends FetchMapShoot(BasicStore) {\n  @observable error = null;\n\n  @observable loaded = false;\n\n  @observable data = {};\n\n  @observable basicData = [];\n\n  @observable basicLoaded = false;\n\n  @computed get playersIds() {\n    //@ts-ignore\n    return reduce(\n      this.data,\n      (acc, { prop_player }) => {\n        //@ts-ignore\n        //@ts-ignore\n        //@ts-ignore\n        prop_player.forEach(({ player_id }) => acc.push(`${player_id}_player`))\n        return acc\n      },\n      [],\n    )\n  }\n}\n\nexport default MapShootStore\n","import { observable, computed } from 'mobx'\nimport map from 'lodash/map'\n// @ts-ignore\nimport BasicStore from 'features/stores/BasicStore'\nimport FetchPlayerInfo from './FetchPlayerInfo'\n\nclass PlayerInfoStore extends FetchPlayerInfo(BasicStore) {\n  @observable error = null;\n\n  @observable loaded = false;\n\n  @observable data = [];\n\n  @observable basicLoaded = false;\n\n  @observable basicData = [];\n\n  @computed get playersIds() {\n    //@ts-ignore\n    return map(this.basicData, ({ f_player }) => `${f_player}_player`)\n  }\n}\n\nexport default PlayerInfoStore\n","import { observable } from 'mobx'\n\n// @ts-ignore\nimport BasicStore from 'features/stores/BasicStore'\n// @ts-ignore\nimport ToolTipActions from 'features/stores/ToolTips/ToolTipActions'\n\nclass ToolTipStore extends ToolTipActions(BasicStore) {\n  //@ts-ignore\n  @observable loaded;\n\n  //@ts-ignore\n  @observable error;\n\n  @observable data = [];\n}\n\nexport default ToolTipStore\n","import { observable } from 'mobx'\n\n// @ts-ignore\nimport BasicStore from 'features/stores/BasicStore'\n// @ts-ignore\nimport RangeActions from 'features/stores/ShootsRange/RangeActions'\n\nclass ShootsRangeStore extends RangeActions(BasicStore) {\n  @observable before = 6;\n\n  @observable after = 6;\n\n  @observable allPossession = false;\n\n  @observable range = true;\n\n  @observable isOpened = false;\n}\n\nexport default ShootsRangeStore\n","\n// @ts-ignore\nimport { action, computed } from 'mobx'\n\ninterface IRangeActions {\n  rangePopup: () => void,\n  setAllPossession: () => void,\n  setRange: () => void,\n  setBefore: (value: number) => number | void,\n  setAfter: (value: number) => number | void,\n}\n\n// @ts-ignore\nconst RangeActions = (superclass: Class<any>) =>\n  class extends superclass implements IRangeActions {\n    /** Функция закрытия попап окна\n     */\n    //@ts-ignore\n    @action rangePopup = () => {\n      //@ts-ignore\n      //@ts-ignore\n      if (this.before === '' || this.before < 1) {\n        this.setBefore(6)\n      }\n      //@ts-ignore\n      //@ts-ignore\n      if (this.after === '' || this.after < 1) {\n        this.setAfter(6)\n      }\n      //@ts-ignore\n      //@ts-ignore\n      this.isOpened = !this.isOpened\n    };\n\n    /** Показать все владение (чекбокс)\n     */\n    //@ts-ignore\n    @action setAllPossession = () => {\n      //@ts-ignore\n      //@ts-ignore\n      this.allPossession = !this.allPossession\n    };\n\n    /** Показать диапазон (чекбокс)\n     */\n    //@ts-ignore\n    @action setRange = () => {\n      //@ts-ignore\n      //@ts-ignore\n      this.range = !this.range\n    };\n\n    /** Выставить секунды до события\n     * @param {number} before - секунды до момента\n     */\n    //@ts-ignore\n    @action setBefore = (before: number | string) => {\n      //@ts-ignore\n      this.before = before\n      // TODO переписать на общий\n      // Выставляем секунды во внутреннем плеере тоже\n      //@ts-ignore\n      this.getStore('videoPlayer').range.setVideoStart(before)\n    };\n\n    /** Выставить секунды после события\n     * @param {number} after - секунды до момента\n     */\n    //@ts-ignore\n    @action setAfter = (after: number | string) => {\n      //@ts-ignore\n      this.after = after\n      // TODO переписать на общий\n      // Выставляем секунды во внутреннем плеере тоже\n      //@ts-ignore\n      this.getStore('videoPlayer').range.setVideoEnd(after)\n    };\n\n    /** Считаем всю длительность владения\n     */\n    //@ts-ignore\n    @computed get possessionLength() {\n      //@ts-ignore\n      //@ts-ignore\n      return this.after + this.before\n    }\n  }\n\nexport default RangeActions\n","// @ts-ignore\nimport { observable, computed } from 'mobx'\nimport toString from 'lodash/toString'\nimport isEmpty from 'lodash/isEmpty'\n\nimport moment from 'moment'\n\n/**\n * Стор для видеонарезок, наследуется от стора видеонарезок из спорта\n */\n// @ts-ignore\n// @ts-ignore\nconst VideoCuts = markers => superclass =>\n  class extends superclass {\n    //@ts-ignore\n    @observable groups = {};\n\n    //@ts-ignore\n    @observable markers = markers;\n\n    /** получаем список событий, соответствующий фильтрам **/\n    //@ts-ignore\n    @computed get events() {\n      //@ts-ignore\n      const checked = []\n\n      //@ts-ignore\n      this.buttons.forEach(({ checkedFilters }) => {\n        if (!isEmpty(checkedFilters)) {\n          //@ts-ignore\n          checkedFilters.forEach(filter => checked.push(filter))\n        }\n      })\n\n      //@ts-ignore\n      return this.markers.data.filter(({ prop }) =>\n        //@ts-ignore\n        //@ts-ignore\n        prop.some(property =>\n          //@ts-ignore\n          checked.some(({ event_prop, event_value }) => {\n            const value = event_value.split(',')\n            return (\n              parseInt(event_prop, 10) === property[0]\n              && value.includes(toString(property[2]))\n            )\n          })))\n    }\n\n    /** Получаем общую длительность видео **/\n    //@ts-ignore\n    @computed get duration() {\n      return moment.duration(\n        this.events.length * this.range.sumRange,\n        'seconds',\n      )\n    }\n  }\n\nexport default VideoCuts\n","import { observable, computed, action } from 'mobx'\n\n/**\n * Класс попап-элементов в кнопках из видеонарезок\n */\nclass PopupItem {\n  @observable checked = false;\n\n  @observable items = [];\n\n  //@ts-ignore\n  constructor(props) {\n    Object.assign(this, props)\n  }\n\n  /** Если на попап-элемент активен, то достаем свойства, по которым далее фильтруем **/\n  @computed get checkedFilters() {\n    const filters = []\n    if (this.checked) {\n      filters.push({\n        //@ts-ignore\n        event_prop: this.c_match_event_prop,\n        //@ts-ignore\n        event_value: this.c_match_event_prop_value,\n        //@ts-ignore\n        lexicalFormula: this.lexical_formula,\n      })\n    }\n    return filters\n  }\n\n  //@ts-ignore\n  @action setChecked = value => (this.checked = value);\n}\n\nexport default PopupItem\n","import { observable, computed, action } from 'mobx'\nimport find from 'lodash/find'\nimport isEmpty from 'lodash/isEmpty'\n\nimport PopupItem from './PopupItem'\n\n/**\n * Класс кнопок из видеонарезок, через который задаются нужные параметры для кнопок\n *\n * @property {string} group - имя группы, к которой принадлежит кнопка\n *\n */\nclass Button {\n  @observable checked = false;\n\n  @observable popupItems = [];\n\n  /** Дополнительно передается название группы, к которой принадлежит кнопка **/\n  //@ts-ignore\n  //@ts-ignore\n  constructor(props, group) {\n    Object.assign(this, props)\n    //@ts-ignore\n    this.group = group\n\n    /** Здесь достаются id лексики кнопки и попап кнопок **/\n    //@ts-ignore\n    //@ts-ignore\n    this.popup.forEach((popup) => {\n      popup.lexical_formula = popup.popup_lexic\n    })\n    //@ts-ignore\n    //@ts-ignore\n    this.popupItems = this.popup.map(item => new PopupItem(item))\n  }\n\n  /** Кнопка активна, если хотя бы один из элементов относящихся к этой кнопке активен **/\n  @computed get activeItem() {\n    const active = find(this.popupItems, { checked: true })\n    return active || null\n  }\n\n  /** Получаем активные элементы из кнопки **/\n  @computed get activeItems() {\n    //@ts-ignore\n    return this.popupItems.filter(item => item.checked)\n  }\n\n  /** Получаем все активные фильтры **/\n  @computed get checkedFilters() {\n    //@ts-ignore\n    const filters = []\n\n    if (!isEmpty(this.activeItems)) {\n      this.activeItems.forEach(({ checkedFilters }) => {\n        //@ts-ignore\n        //@ts-ignore\n        checkedFilters.forEach(filter => filters.push(filter))\n      })\n    }\n\n    //@ts-ignore\n    return filters\n  }\n\n  //@ts-ignore\n  @action setActive = item => (this.activeItem = item);\n\n  /** Проходим по всем элементам и делаем их не активными **/\n  @action uncheckAll = () => {\n    this.popupItems.forEach((popupItem) => {\n      //@ts-ignore\n      popupItem.setChecked(false)\n    })\n  };\n\n  /** Устанавлием активную кнопку **/\n  //@ts-ignore\n  //@ts-ignore\n  //@ts-ignore\n  set activeItem({ c_match_event_prop, c_match_event_prop_value, popup }) {\n    const oldActive = find(this.popupItems, { checked: true })\n    const currentBtn = find(this.popupItems, { popup })\n\n    /** если кнопка, на которую нажали уже активна, то делаем её не активной **/\n    //@ts-ignore\n    //@ts-ignore\n    //@ts-ignore\n    //@ts-ignore\n    //@ts-ignore\n    if (currentBtn.checked) return currentBtn.setChecked(false)\n\n    /** Делаем не активным, все другие кнопки **/\n    //@ts-ignore\n    if (oldActive) {\n      //@ts-ignore\n      oldActive.checked = false\n    }\n\n    const newActive = find(this.popupItems, {\n      c_match_event_prop,\n      c_match_event_prop_value,\n    })\n\n    //@ts-ignore\n    //@ts-ignore\n    newActive.setChecked(true)\n  }\n}\nexport default Button\n","// @ts-ignore\nimport { action } from 'mobx'\nimport { utils as remoteUtils } from 'react-sport'\n\nimport Button from './Button'\n\n// @ts-ignore\nconst VideoCutsMixin = superclass =>\n  class extends superclass {\n    /** Получение кнопок **/\n    //@ts-ignore\n    @action fetchButtons = () => {\n      const url = `${this.rootUrl}/data`\n      const config = {\n        method: 'POST',\n        body: JSON.stringify({\n          proc: 'ask_filters_video_cutting_view',\n        }),\n      }\n\n      remoteUtils.callApi({\n        url,\n        config,\n        //@ts-ignore\n        onRequest: () => {\n          //@ts-ignore\n          this.isFetching = true\n        },\n        onSuccess: json => this._onSuccessButtons(json),\n        //@ts-ignore\n        onError: (error) => {\n          //@ts-ignore\n          this.error = error\n        },\n      })\n    };\n\n    //@ts-ignore\n    _onSuccessButtons = ({ data }) => {\n      //@ts-ignore\n      const newButtons = []\n      //@ts-ignore\n      const lexicIds = []\n\n      /** Собираем лексику из кнопок и создаем для каждой кнопки класс **/\n      //@ts-ignore\n      data.forEach(({ value }) => {\n        const { button, group } = value[0]\n        //@ts-ignore\n        //@ts-ignore\n        button.forEach(({ button_lexic, ...buttonInfo }) => {\n          buttonInfo.lexical_formula = button_lexic\n          newButtons.push(new Button(buttonInfo, group))\n          lexicIds.push(button_lexic)\n          //@ts-ignore\n          buttonInfo.popup.forEach(({ popup_lexic }) =>\n            lexicIds.push(popup_lexic))\n        })\n        this.groups[group] = value[0]\n      })\n      //@ts-ignore\n      this.isFetching = false\n\n      //если объект лексики передан\n      //то вытаскиваем всю лексику из кнопок и передаем ее\n      //для запроса в объект лексики\n      if (this.lexics) {\n        const phrases = {}\n        //@ts-ignore\n        //@ts-ignore\n        lexicIds.forEach((id) => { phrases[id] = id })\n        this.lexics.lexicFetch(phrases)\n      }\n\n      //@ts-ignore\n      //@ts-ignore\n      this.buttons = newButtons\n    };\n\n    //@ts-ignore\n    @action resetFilters = () => {\n      //@ts-ignore\n      this.buttons.forEach((button) => {\n        button.uncheckAll()\n      })\n    };\n  }\n\nexport default VideoCutsMixin\n","import { compose } from 'recompose'\n\n// @ts-ignore\nimport VideoCuts from 'features/stores/VideoCuts/VideoCuts'\n// @ts-ignore\nimport VideoCutsMixin from 'features/stores/VideoCuts/VideoCutsMixin'\n\n// @ts-ignore\n// @ts-ignore\nconst ComposeVideoCuts = (superclass, markers) =>\n  compose(\n    VideoCuts(markers),\n    VideoCutsMixin,\n  )(superclass)\n\nexport default ComposeVideoCuts\n","\nimport { observable } from 'mobx'\n// @ts-ignore\nimport MatchLinksApiStore from 'features/stores/MatchLinks/MatchLinksApiStore'\n\ninterface IMatchLinksStore {\n  links: Array<any>,\n  isFetching: boolean,\n  error: {} | null,\n}\n\nexport default class MatchLinksStore extends MatchLinksApiStore\n  implements IMatchLinksStore {\n  @observable links = [];\n\n  @observable isFetching = false;\n\n  @observable error = null;\n}\n","import { action } from 'mobx'\nimport { utils } from 'react-sport'\n\n// @ts-ignore\nimport routes from 'config/routes'\n// @ts-ignore\nimport BasicStore from 'features/stores/BasicStore'\n\ntype TParams = {\n  proc: string,\n  match_id: number,\n  team_id?: number,\n  player_id?: number,\n};\n\ntype TConfig = {\n  method: string,\n  body: string,\n};\n\ninterface IMatchLinksApi {\n  fetch: (match_id: number, id: number, type: string) => void,\n}\nexport default class MatchLinksApiStore extends BasicStore\n  implements IMatchLinksApi {\n  @action fetch = (\n    //@ts-ignore\n    match_id,\n    //@ts-ignore\n    pageId,\n    //@ts-ignore\n    type,\n  ) => {\n    const url = `${routes.API_ROOT}/video/match`\n    const id_type = type === 'team' ? 'team_id' : 'player_id'\n    const proc = type === 'team' ? 'scout_team_match_pop_up' : 'scout_match_pop_up'\n    const params: TParams = {\n      proc,\n      match_id,\n    }\n    params[id_type] = pageId\n\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify(params),\n    }\n\n    utils.callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        this.links = []\n        //@ts-ignore\n        this.isFetching = true\n      },\n      onSuccess: (json: { links: {} | Array<any> | void | null }) =>\n        this._onSuccess(json),\n      onError: (error: any) => this._onError(error),\n    })\n  };\n\n  _onSuccess = ({ links }: { links: {} | Array<any> | null | void }) => {\n    //@ts-ignore\n    this.links = links\n    //@ts-ignore\n    this.isFetching = false\n    //@ts-ignore\n    this.error = null\n  };\n\n  _onError = (error: {}) => {\n    //@ts-ignore\n    this.error = error\n    //@ts-ignore\n    this.isFetching = false\n  };\n}\n","import includes from 'lodash/includes'\n\nimport {\n  attackZone,\n  attackZoneSpecial,\n  frontLineParams,\n  backLineParams,\n  allBlocks,\n  fieldLines,\n  zones,\n  blockTypes,\n} from 'config/FieldZones'\n\nconst { BACK_LINE, FRONT_LINE } = fieldLines\nconst { ATTACK_ZONE, ATTACK_ZONE_SPECIAL } = zones\nconst { ALL_BLOCKS } = blockTypes\n\n// Формирование объекта с параметров для запроса отчета\nexport const getParamObj = (paramId: number) => {\n  const params: {\n    [key: string]: number | null,\n  } = {\n    param_id: paramId,\n  }\n  // Для некоторых параметров считается не вся площадка, добавляем f_option_3\n  if (includes(frontLineParams, paramId)) {\n    params.f_option_3 = FRONT_LINE\n  }\n  // Для некоторых параметров считается не вся площадка, добавляем f_option_3\n  if (includes(backLineParams, paramId)) {\n    params.f_option_3 = BACK_LINE\n  }\n  // Для блоков считается общее количество (без разновидностей), добавляем f_option_5\n  if (includes(allBlocks, paramId)) {\n    params.f_option_5 = ALL_BLOCKS\n  }\n  // для параметров атак, добавляем variant_zone\n  if (includes(attackZone, paramId)) {\n    params.f_variant_zone = ATTACK_ZONE\n  }\n  // Если параметр относится к специальному атакующему типу,\n  // меняем зону на зону специальную атаки\n  if (includes(attackZoneSpecial, paramId)) {\n    params.f_variant_zone = ATTACK_ZONE_SPECIAL\n  }\n\n  return params\n}\n","import { observable } from 'mobx'\n// @ts-ignore\nimport TableReportsApiStore from 'features/stores/TableReports/TableReportsApiStore'\n\nexport default class TableReportsStore extends TableReportsApiStore {\n  @observable pdfIsFetching = false;\n\n  @observable xlsIsFetching = false;\n\n  @observable error = null;\n}\n","import { action } from 'mobx'\n\nimport get from 'lodash/get'\nimport values from 'lodash/values'\nimport map from 'lodash/map'\nimport size from 'lodash/size'\n\nimport routes from 'config/routes'\nimport BasicStore from 'features/stores/BasicStore'\nimport stores from 'features/stores'\n\nimport { getParamObj } from './filterParams'\n\ninterface ITableReportsApiStore {\n  getReport: (\n    e: {},\n    key: string,\n    tableType?: string\n  ) => Promise<void | null>,\n}\n\n//TODO переписать на MST и декомпозировать\nexport default class TableReportsApiStore extends BasicStore\n  implements ITableReportsApiStore {\n  //@ts-ignore\n  getReportInfo = (tableType?: string, page: string, pageId: number) => {\n    // Общие методы для доступа к информации об игроке, команде или матче\n    const commonTable = get(this.getStore(`${page}Table`), 'tables')\n    const commonMatches = get(this.getStore('selectedMatches'), [page, pageId])\n    const commonShowOpponentStats = get(\n      this.getStore(`${page}Table`), 'showOpponentStats',\n    )\n\n    const tableReportOptions = {\n      matchPlayersTable: {\n        matches: [pageId],\n        tables: commonTable,\n      },\n      playerMatches: {\n        matches: commonMatches,\n        showOpponentStats: commonShowOpponentStats,\n        tables: commonTable,\n      },\n      teamMatches: {\n        matches: commonMatches,\n        showOpponentStats: commonShowOpponentStats,\n        tables: commonTable,\n      },\n\n      tournamentMatches: {\n        matches: map(get(stores, 'tournamentMatches.matches', []), 'f_match'),\n        showOpponentStats: get(stores, 'tournamentMatchesTableStore.tables'),\n        tables: get(stores, 'tournamentMatchesTableStore.tables'),\n      },\n      tournamentPlayers: {}, //тут пока заглушки TODO\n      tournamentTeams: {}, //тут пока заглушки TODO\n    }\n    //@ts-ignore\n    return get(tableReportOptions, tableType, {})\n  }\n\n  //@ts-ignore\n  @action getReport = (e: {}, key: string, tableType?: string) => {\n    const url: string = `${routes.API_ROOT}/report/tables_report`\n    const {\n      getLexics,\n      lang,\n      page,\n    }: {\n      getLexics: (tableName: string | number) => string | null,\n      lang: string,\n      page: string,\n    } = this.getStore('lexics')\n    const currentProfile: string = `${page}Profile`\n\n    const pageId: number = get(this.getStore(currentProfile).profile, 'id')\n      || +get(this.getStore(currentProfile), 'matchId')\n\n    const {\n      matches,\n      showOpponentStats,\n      tables,\n    } = this.getReportInfo(tableType, page, pageId)\n\n    // Если матчей не выбрано, то не делаем запрос на отчет\n    if (!matches.length) return null\n\n    const setSortBy = (sortAsc: boolean, activeId: number) => ({\n      flag: sortAsc ? 'ASC' : 'DESC',\n      param: activeId,\n    })\n\n    const prepareMatchPlayersTable = () => {\n      const { team1_id, team2_id } = get(this.getStore('matchProfile'), 'data', {})\n      const preparedTables = map(values(tables), ({\n        activeId,\n        selectedParams,\n        sortAsc,\n        tableName,\n        team,\n      }) => {\n        const table: {\n          name: string,\n          params: Array<number>,\n          sortby: {},\n          team?: number,\n        } = {\n          name: getLexics(tableName) || tableName,\n          params: map(selectedParams, 'param_id'),\n          sortby: setSortBy(sortAsc, activeId),\n        }\n        // Передаем в отчет поле team только в случае если выбрана одна команда\n        if (size(team) === 1) {\n          const teamsSelection: {\n            [key: string]: number,\n          } = {\n            showHomeTeam: team1_id,\n            showOppTeam: team2_id,\n          }\n\n          table.team = teamsSelection[team[0]]\n        }\n\n        return table\n      })\n\n      return {\n        lang_id: lang,\n        matches,\n        tables: preparedTables,\n        teams: [team1_id, team2_id],\n        type: key,\n        [`${page}_id`]: pageId,\n      }\n    }\n\n    const prepareDefaultTable = () => ({\n      lang_id: lang,\n      matches,\n      tables: map(values(tables), ({\n        activeId,\n        selectedParams,\n        sortAsc,\n        summaryType,\n        tableName,\n      }: any) => ({\n        is_show_opponent: Number(showOpponentStats),\n        is_total: Boolean(summaryType === 'total'),\n        name: getLexics(tableName) || tableName,\n        params: map(selectedParams, ({ param_id }) => getParamObj(param_id)),\n        sortby: setSortBy(sortAsc, activeId),\n      })),\n      type: key,\n      [`${page}_id`]: pageId,\n    })\n\n    // Для отчета по матчу нужна другая структура,\n    // в зависимости от типа таблицы вызываем нужную\n    // функцию для формирования конфига для запроса\n    const prepareConfig = {\n      default: prepareDefaultTable,\n      matchPlayersTable: prepareMatchPlayersTable,\n    }\n\n    const getConfig = (tableType: string = '') => (\n      get(prepareConfig, tableType)\n      || get(prepareConfig, 'default')\n    )\n\n    const config: {\n      params: {},\n      uri: string,\n    } = {\n      params: getConfig(tableType)(),\n      uri: `request_${page}_stat_scout`,\n    }\n\n    //@ts-ignore\n    this[`${key}IsFetching`] = true\n\n    return fetch(url, {\n      body: JSON.stringify(config),\n      method: 'POST',\n    })\n      .then((response: any) => {\n        //@ts-ignore\n        this[`${key}IsFetching`] = false\n        return response.blob()\n      })\n      .catch((error: {}) => {\n        //@ts-ignore\n        this.error = error\n        //@ts-ignore\n        this[`${key}IsFetching`] = false\n      })\n  }\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport { compose, withHandlers } from 'recompose'\nimport cx from 'classnames'\nimport map from 'lodash/map'\n\nimport { T9n, OutsideClick } from 'react-sport'\n\ntype TProps = {\n  isFetching: boolean,\n  links: {} | Array<any>,\n  f_match: number,\n};\n\nconst MatchPopupComponent = ({ f_match, isFetching, links }: TProps) => (\n  <div\n    className={cx(\n      'popup-container',\n      'popup-matches-episodes',\n      'popup-matches-episodes__position-bottom',\n      { 'popup-container__loading': isFetching },\n    )}\n  >\n    {map(links, ({ link }, k) => (\n      <a\n        className='ui-button'\n        target='_blank'\n        rel='noopener noreferrer'\n        href={link}\n        key={k}\n      >\n        <i className='icon-play_volleyball_circle' />\n        <T9n className='ui-button__text' t={`match_popup_${k}`} />\n      </a>\n    ))}\n    <Link className='ui-button' target='_blank' to={`/matches/${f_match}`}>\n      <i className='icon-play_volleyball_circle' />\n      <T9n t='match_popup_details' />\n    </Link>\n  </div>\n)\n\nconst MatchPopupComposed = compose(\n  //@ts-ignore\n  withHandlers({\n    clickOutside: ({ toggleClose }) => () => {\n      toggleClose()\n    },\n  }),\n  OutsideClick,\n)\n\n// @ts-ignore\nexport const MatchPopup = MatchPopupComposed(MatchPopupComponent)\n","import React from 'react'\n\nimport { tBodyComposed } from './composed'\n\nimport { TPropsInner } from './types'\n\n// Основной блок таблицы со статистикой\nexport const TBodyComponent = ({\n  activeId,\n  pageId,\n  rowsList,\n  selectedParams,\n  showOpponentStats,\n  tableStats,\n  Tr,\n}: TPropsInner) => (\n  <tbody>\n    {rowsList\n      .map((trItem: { f_match?: number, f_player?: number }) => (\n        <Tr\n          key={trItem.f_player || trItem.f_match}\n          rowInfo={trItem}\n          pageId={pageId}\n          selectedParams={selectedParams}\n          tableStats={tableStats}\n          activeId={activeId}\n          showOpponentStats={showOpponentStats}\n        />\n      ))\n    }\n  </tbody>\n)\n\nexport const TBody = tBodyComposed(TBodyComponent)\n","import { observer } from 'mobx-react'\nimport { compose, withProps } from 'recompose'\n\nimport orderBy from 'lodash/orderBy'\n\nimport {\n  TPropsOuter,\n  TWithPropsInner,\n  TWithPropsOuter,\n  TPropsInner,\n} from './types'\n\nexport const tBodyComposed = compose<TPropsInner, TPropsOuter>(\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(({ rows, sortAsc }) => {\n    const sortType = sortAsc ? 'asc' : 'desc'\n\n    return {\n      rowsList: orderBy(\n        rows,\n        [row => Number(row.sortBy)],\n        sortType,\n      ),\n    }\n  }),\n)\n","// Файл конфигурации для правильного позиционирования параметров в шестеренке\n\n// Список параметров в шестеренке - последние в подгруппе параметров\nexport const lastElemsInGear = {\n  team: [219, 186, 174, 139, 194, 198, 237, 155, 157, 156, 166, 190],\n  rest: [\n    219,\n    186,\n    174,\n    139,\n    194,\n    198,\n    237,\n    155,\n    157,\n    156,\n    166,\n    190,\n    184,\n    203,\n    214,\n    215,\n    216,\n    217,\n  ],\n}\n\nexport const percentageParams = [\n  175,\n  161,\n  158,\n  184,\n  186,\n  174,\n  173,\n  175,\n  138,\n  139,\n  169,\n  188,\n  190,\n  142,\n  192,\n  194,\n  235,\n  233,\n  237,\n  143,\n  196,\n  198,\n  236,\n  234,\n  238,\n  154,\n  155,\n  157,\n  156,\n  166,\n  167,\n  159,\n  160,\n  158,\n  163,\n  161,\n  162,\n  144,\n  146,\n  148,\n  184,\n  222,\n  223,\n  224,\n  214,\n  215,\n  216,\n  217,\n  218,\n]\n\n// Список колонок для шестеренки.\n// Каждая колонка отображает группу параметров в соответствии с макетом\nexport const gearColumnsList: {\n  [key: string]: Array<{\n    className: string,\n    num: number,\n  }>,\n} = {\n  0: [\n    { num: 0, className: 'narrow' },\n    { num: 2, className: 'wide' },\n    { num: 1, className: 'narrow' },\n    { num: 3, className: 'narrow' },\n    { num: 4, className: 'narrow' },\n    { num: 5, className: 'narrow' },\n  ],\n  4: [\n    { num: 0, className: 'narrow' },\n    { num: 2, className: 'wide' },\n    { num: 1, className: 'narrow' },\n    { num: 3, className: 'narrow' },\n    { num: 5, className: 'narrow' },\n  ],\n  5: [\n    { num: 0, className: 'narrow' },\n    { num: 2, className: 'wide' },\n    { num: 1, className: 'narrow' },\n    { num: 3, className: 'narrow' },\n    { num: 5, className: 'narrow' },\n  ],\n  6: [\n    { num: 0, className: 'narrow' },\n    { num: 6, className: 'wide' },\n    { num: 1, className: 'narrow' },\n    { num: 3, className: 'narrow' },\n    { num: 5, className: 'narrow' },\n  ],\n  7: [\n    { num: 0, className: 'narrow' },\n    { num: 1, className: 'narrow' },\n    { num: 4, className: 'narrow' },\n  ],\n  8: [\n    { num: 0, className: 'narrow' },\n    { num: 2, className: 'wide' },\n    { num: 1, className: 'narrow' },\n    { num: 3, className: 'narrow' },\n    { num: 4, className: 'narrow' },\n    { num: 5, className: 'narrow' },\n  ],\n}\n","// Число знаков после запятой\nexport const getDigits = (paramId: number) => (paramId === 219 ? 1 : 0)\n","import filter from 'lodash/filter'\n\nexport const getFilteredStatsByParamId = (\n  stats: Array<{}>,\n  //@ts-ignore\n  paramId: number | null,\n) => filter(stats, { f_param: paramId })\n","import includes from 'lodash/includes'\nimport size from 'lodash/size'\nimport reduce from 'lodash/reduce'\n\nimport { percentageParams } from 'config/teamPopupParams'\nimport { getDigits } from 'module/utils/helpers/getDigits'\nimport { getFilteredStatsByParamId } from 'module/utils/helpers/getFilteredStatsByParamId'\n\n/**\n * Получение значения статистики в итоговой строке в таблице\n * @param {number} param_id - id фильтра по которому считаем статистику\n * @param {array} stats - статистика по всем параметрам\n * @param {string} type - тип итоговой строки, среднее значение или сумма всех значений в столбце\n */\nexport const getSummaryStatValue = (\n  param_id: number,\n  stats: Array<{\n    f_match_event_ids_json: Array<number> | null,\n    f_param: number,\n    value: number,\n  }> = [],\n  type: string,\n) => {\n  const filteredStats = getFilteredStatsByParamId(stats, param_id)\n\n  const filteredStatsCount = size(\n    reduce(filteredStats, (acc, curr) => {\n      //@ts-ignore\n\n      if (acc[curr.f_match]) return acc\n      //@ts-ignore\n\n      acc[curr.f_match] = curr\n      return acc\n    }, {}),\n  )\n\n  if (!filteredStatsCount) return '—'\n  //@ts-ignore\n\n  const value = reduce(filteredStats, (prev, { value }) => prev + value, 0)\n\n  if (includes(percentageParams, param_id)) {\n    return Number((value / filteredStatsCount).toFixed(getDigits(param_id)))\n  }\n\n  const types: {\n    [key: string]: () => number,\n  } = {\n    average_for_match: () => (\n      Number((value / filteredStatsCount)\n        .toFixed(getDigits(param_id)))\n    ),\n    total: () => Number(value.toFixed(getDigits(param_id))),\n  }\n\n  return types[type]() || '—'\n}\n","import React from 'react'\nimport { observer } from 'mobx-react'\n\nimport map from 'lodash/map'\nimport get from 'lodash/get'\n\nimport { compose, withHandlers } from 'recompose'\n\nimport { T9n, SimpleDropdown } from 'react-sport'\n\nimport { getSummaryStatValue } from 'module/utils/helpers/getSummaryStatValue'\n\ntype TProps = {\n  activeId?: string,\n  getActualMatchesList: (params: {\n    pageId: string,\n    forOpps?: boolean,\n  }) => Array<any>,\n  getClassName: (param: {}, activeId: string) => void,\n  getExtLink: (\n    param: {},\n    id: number,\n    forOpp: boolean,\n  ) => void,\n  //@ts-ignore\n  param?: { param1_id: {}, param2_id: {} },\n  showOpponentStats?: boolean,\n  page?: string,\n  pageId: string,\n  selectedMatches?: {},\n  setSummaryType: (summaryType: string, position: number) => () => void,\n  table: {\n    selectedParams: Array<{\n      param_id: number,\n      gear_group_id: number,\n      param1_id?: {},\n      param2_id?: {},\n    }>,\n    position: number,\n    summaryType?: string,\n  },\n}\n\n// Футер с выбранными параметрами в таблице статистики\nexport const TFootComponent = ({\n  activeId,\n  getActualMatchesList,\n  getClassName,\n  getExtLink,\n  page,\n  pageId,\n  selectedMatches,\n  setSummaryType,\n  showOpponentStats,\n  table: {\n    position,\n    selectedParams,\n    summaryType,\n  },\n}: TProps) => (\n  <tfoot>\n    <tr className='overall'>\n      <td className='overall__summary'>\n        <div>\n          {/*\n            //@ts-ignore */}\n          <SimpleDropdown placeholder={<T9n t='average_for_match' />}>\n            {map(['average_for_match', 'total'], summaryType => (\n              <T9n\n                key={summaryType}\n                t={summaryType}\n                onClick={setSummaryType(summaryType, position)}\n              />\n            ))}\n          </SimpleDropdown>\n        </div>\n      </td>\n      {get(selectedMatches, `${page}.${pageId}`, [])\n          && map(selectedParams, param => (\n            <td\n              //@ts-ignore\n              className={getClassName(param, activeId)}\n              key={`${param.param_id}_${param.gear_group_id}`}\n            >\n              <table>\n                <tbody>\n                  <tr onClick={() =>\n                    getExtLink(\n                      param,\n                      +pageId,\n                      false,\n                    )}\n                  >\n                    <td>\n                      {getSummaryStatValue(\n                        param.param_id,\n                        getActualMatchesList({\n                          pageId,\n                          forOpps: false,\n                        }),\n                        //@ts-ignore\n                        summaryType,\n                      )}\n                    </td>\n                  </tr>\n                  {showOpponentStats && page === 'team'\n                    && (\n                      <tr onClick={() =>\n                        getExtLink(\n                          param,\n                          +pageId,\n                          true,\n                        )}\n                      >\n                        <td>\n                          {getSummaryStatValue(\n                            param.param_id,\n                            getActualMatchesList({\n                              pageId,\n                              forOpps: true,\n                            }),\n                            //@ts-ignore\n                            summaryType,\n                          )}\n                        </td>\n                      </tr>\n                    )\n                  }\n                </tbody>\n              </table>\n            </td>\n          ))}\n    </tr>\n  </tfoot>\n)\n\nconst tFootComposed = compose(\n  //@ts-ignore\n  withHandlers({\n    setSummaryType: ({ setType }) => (\n      summaryType: string, position: number,\n    ) => () => setType(summaryType, position),\n  }),\n  observer,\n)\n\n//@ts-ignore\nexport const TFoot = tFootComposed(TFootComponent)\n","import React, { Fragment } from 'react'\nimport map from 'lodash/map'\nimport { compose, withHandlers } from 'recompose'\n\nimport { T9n } from 'react-sport'\n\ntype TParam = {\n  param_id: number,\n  gear_group_id: number,\n  full_lexical_formula: string,\n  short_lexical_formula: string,\n}\n\ntype TProps = {\n  table: { selectedParams: Array<TParam> },\n  onClick: (param: TParam) => void,\n}\n\n// Шапка с выбранными параметрами в таблице статистики\nexport const THeadComponent = ({\n  onClick,\n  table: { selectedParams },\n}: TProps) => (\n  <Fragment>\n    <th />\n    {map(selectedParams, param => (\n      <th\n        key={`${param.param_id}_${param.gear_group_id}`}\n          //@ts-ignore\n        onClick={onClick(param)}\n      >\n        <div>\n          <span className='th-tooltip'>\n            <T9n t={param.full_lexical_formula} />\n          </span>\n          <T9n t={param.short_lexical_formula} />\n        </div>\n      </th>\n    ))}\n  </Fragment>\n)\n\nconst THeadComposed = compose(\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    onClick: ({ setSortedId }) => param => () => setSortedId(param),\n  }),\n)\n\n// @ts-ignore\nexport const THead = THeadComposed(THeadComponent)\n","import React from 'react'\n\nimport cx from 'classnames'\n\nimport './Loader.scss'\n\ntype TProps = {\n  className?: string,\n}\n\nconst Loader = ({ className }: TProps) => (\n  <div className={cx(\n    'loader-wrapper',\n    className,\n  )}\n  />\n)\n\nexport default Loader\n","import React from 'react'\n\nimport Loader from 'features/components/common/loader/Loader'\n\ntype TProps = {\n  className?: string,\n}\n\nexport const TdLoader = ({ className = 'loader-wrapper_cell' }: TProps) => (\n  <td className='td-loader'>\n    <Loader className={className} />\n  </td>\n)\n","import get from 'lodash/get'\nimport size from 'lodash/size'\n\nimport { getDigits } from 'module/utils/helpers/getDigits'\nimport { getFilteredStatsByParamId } from 'module/utils/helpers/getFilteredStatsByParamId'\n/**\n * Получение значения статистики\n * @param {number} param_id - id фильтра по которому считаем статистику\n * @param {array} stats - статистика по всем параметрам\n */\nexport const getStatValue = (\n  { param_id }: { param_id: number },\n  stats: Array<{ f_param: number, value: number }> = [],\n) => {\n  const filteredStats = getFilteredStatsByParamId(stats, param_id)\n  if (size(filteredStats) === 1) {\n    const value = get(filteredStats, '[0].value')\n    return value.toFixed(getDigits(param_id)).toString()\n  }\n\n  return '—'\n}\n","import { observer, inject } from 'mobx-react'\n\nimport {\n  compose,\n  withHandlers,\n  withState,\n} from 'recompose'\nimport isEmpty from 'lodash/isEmpty'\nimport reduce from 'lodash/reduce'\n\nimport {\n  TWithHandlersOuter,\n  TWithHandlersInner,\n} from './types'\n\nexport const getExtLinkHOC = compose(\n  inject(\n    'lexics',\n    'videoLink',\n    'shootsRange',\n  ),\n  withState(\n    'linkIsFetching',\n    'toggleLinkIsFetching',\n    false,\n  ),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    getExtLink: ({\n      lexics: { lang },\n      shootsRange,\n      toggleLinkIsFetching,\n      videoLink: { request },\n    }) => ({\n      match,\n      param: { lexical_formula },\n      playerInfo,\n      playListType,\n      stats,\n    }) => () => {\n      const events = reduce(\n        stats,\n        (acc: Array<number>, { f_match_event_ids_json }) => {\n          if (f_match_event_ids_json) {\n            f_match_event_ids_json.forEach(event => acc.push(event))\n          }\n          return acc\n        },\n        [],\n      )\n\n      if (!isEmpty(events)) {\n        toggleLinkIsFetching(true)\n        request({\n          events,\n          lang,\n          lexical_formula,\n          matchInfo: match,\n          playerInfo,\n          range: shootsRange,\n          type: playListType,\n        }).then(() => toggleLinkIsFetching(false))\n      }\n    },\n  }),\n  observer,\n)\n","export const playListTypes = {\n  tournamentMatches: 'tournamentMatches',\n  matches: 'matches',\n}\n","import React, { Fragment } from 'react'\n\nimport { TableUI } from 'react-sport'\n\nimport { TdLoader } from 'features/TdLoader'\n\nimport { tdComposed } from './composed'\n\ntype Props = {\n  handleClick: () => void,\n  linkIsFetching: boolean,\n  value: string,\n}\nexport const TdComponent = ({\n  handleClick,\n  linkIsFetching,\n  value,\n}: Props) => (\n  <Fragment>\n    {linkIsFetching && <TdLoader />}\n    <TableUI.Td\n      onClick={handleClick}\n      value={value}\n      className=''\n    />\n  </Fragment>\n)\n\nexport const Td = tdComposed(TdComponent)\n","import { observer } from 'mobx-react'\n\nimport filter from 'lodash/filter'\nimport includes from 'lodash/includes'\nimport { compose, withProps } from 'recompose'\n\nimport { getStatValue } from 'module/utils/helpers/getStatValue'\nimport { getSummaryStatValue } from 'module/utils/helpers/getSummaryStatValue'\nimport { getLongSuffix } from 'module/utils/helpers'\n\nimport { getExtLinkHOC } from 'hocs/getExtLinkHOC'\n\nimport { playListTypes } from 'config/playListTypes'\n\nimport {\n  TPropsInner,\n  TPropsOuter,\n  TWithPropsInner,\n  TWithPropsOuter,\n  TStat,\n} from './types'\n\nimport { getStatsFilterOptions } from '../../helpers/getStatsFilterOptions'\n\nexport const tdComposed = compose<TPropsInner, TPropsOuter>(\n  getExtLinkHOC,\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(({\n    getExtLink,\n    id,\n    lexics: { lang },\n    param,\n    rowInfo,\n    tableStats,\n    tableType,\n    type = 'average_for_match',\n  }) => {\n    const preparedStats = filter<TStat>(\n      tableStats,\n      getStatsFilterOptions({\n        matchId: rowInfo.f_match,\n        param,\n        playerId: id,\n        tableType,\n      }),\n    )\n    const prepareExtLinkArgs = (lang: string) => {\n      const defaultOptions: {} = {\n        id,\n        match: rowInfo,\n        param,\n        playListType: playListTypes.matches,\n        stats: preparedStats,\n      }\n\n      if (includes(['playerMatches', 'matchPlayersTable'], tableType)) {\n        const suffix = getLongSuffix(lang)\n        const firstName = rowInfo[`firstname_${suffix}`]\n        const lastName = rowInfo[`lastname_${suffix}`]\n        const playerName = `${firstName} ${lastName}`\n\n        return {\n          ...defaultOptions,\n          playerInfo: playerName,\n        }\n      }\n\n      return defaultOptions\n    }\n\n    return {\n      handleClick: getExtLink(prepareExtLinkArgs(lang)),\n      value: type === 'total'\n        ? getSummaryStatValue(param.param_id, preparedStats, 'total')\n        : getStatValue(param, preparedStats),\n    }\n  }),\n  observer,\n)\n","type TArgs = {\n  matchId: number,\n  param: {\n    param_id: number,\n  },\n  playerId: number,\n  tableType: string,\n}\n\nexport const getStatsFilterOptions = ({\n  matchId,\n  param,\n  playerId,\n  tableType,\n}: TArgs) => {\n  const options: {[key: string]: {}} = {\n    matchPlayersTable: {\n      f_param: param.param_id,\n      f_player: playerId,\n    },\n    playerMatches: {\n      f_match: matchId,\n      f_param: param.param_id,\n      f_player: playerId,\n    },\n    teamMatches: {\n      f_match: matchId,\n      f_param: param.param_id,\n      f_team: playerId,\n    },\n    tournamentMatches: {\n      f_match: matchId,\n      f_param: param.param_id,\n      f_team: playerId,\n    },\n    tournamentMatchesTotal: {\n      f_match: matchId,\n      f_param: param.param_id,\n    },\n  }\n\n  return options[tableType]\n}\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withHandlers,\n  withStateHandlers,\n} from 'recompose'\n\nimport { OutsideClick } from 'react-sport'\n\nimport {\n  TPropsInner,\n  TPropsOuter,\n  TWithStateInner,\n  TWithStateHandlers,\n  TWithStateOuter,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n  TWithHandlersFixationOuter,\n  TWithHandlersFixationInner,\n} from './types'\n\n// Input для редактирования названия таблицы\nconst EditableInputComponent = ({\n  changeTableName,\n  enterPress,\n  handleFocus,\n  newName,\n}: TPropsInner) => (\n  <input\n    type='text'\n    onFocus={handleFocus}\n    onKeyPress={enterPress}\n    tabIndex={0}\n    value={newName}\n    onChange={changeTableName}\n  />\n)\n\nconst editableInputComposed = compose<TPropsInner, TPropsOuter>(\n  inject('gearPopupStore'),\n  withStateHandlers<TWithStateInner, TWithStateHandlers, TWithStateOuter>(\n    ({ tableName }) => ({\n      newName: tableName,\n    }),\n    {\n      changeTableName: () => e => ({\n        newName: e.target.value,\n      }),\n    },\n  ),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    /**\n     * Функция сохранения нового имени таблицы\n     * @param {func} handleShowInput - показываем ли инпут вместо блока\n     * @param {func} editTableName - функция редактирования названия таблицы\n     * @param {string} newName - название таблицы, новое\n     * @param {number} position - номер таблицы\n     * @param {string} tableName - название таблицы, изначальное\n     * @param {string} tableType - тип таблицы внутри основной страницы (прим. team/573/players)\n     */\n    handleFixName: ({\n      editTableName,\n      gearPopupStore: { editTempTableName },\n      handleShowInput,\n      newName,\n      newPopup,\n      position,\n      tableName,\n    }) => () => {\n      // Изменяем название таблицы только если название поменялось на новое\n      if (tableName !== newName && !newPopup) {\n        editTableName(position, newName)\n      }\n      if (newPopup) {\n        editTempTableName(newName)\n      }\n      return handleShowInput()\n    },\n  }),\n  withHandlers<TWithHandlersFixationOuter, TWithHandlersFixationInner>({\n    clickOutside: ({\n      handleFixName,\n    }) => () => handleFixName(),\n\n    enterPress: ({\n      handleFixName,\n    }) => (e) => {\n      if (e.key === 'Enter') {\n        handleFixName()\n      }\n    },\n  }),\n  observer,\n  OutsideClick,\n)\n\nexport const EditableInput = editableInputComposed(EditableInputComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withHandlers,\n  withState,\n\n} from 'recompose'\n\nimport { T9n } from 'react-sport'\n\nimport { EditableInput } from './EditableInput'\n\ntype TProps = {\n  editTableName: () => void,\n  //@ts-ignore\n  getTableName: (newPopup: string | null) => string,\n  handleFocus: () => void,\n  handleShowInput: () => boolean,\n  handleTranslateName: (tableName: string | number) => string,\n  newPopup?: boolean,\n  showInput: boolean,\n  table: {\n    tableName: string | number,\n    position: number,\n  },\n  currentStore: {},\n}\n\n// Компонент названия таблицы статистики\nconst EditTableNameComponent = ({\n  currentStore,\n  editTableName,\n  getTableName,\n  handleFocus,\n  handleShowInput,\n  handleTranslateName,\n  newPopup,\n  showInput,\n  table,\n}: TProps) => (\n  <div>\n    {showInput\n      ? (\n    //@ts-ignore\n        <EditableInput\n          tableName={handleTranslateName(table.tableName)}\n          handleFocus={handleFocus}\n          handleShowInput={handleShowInput}\n          editTableName={editTableName}\n          position={table.position}\n          newPopup={newPopup}\n          currentStore={currentStore}\n        />\n      )\n        //@ts-ignore\n      : <T9n t={getTableName(newPopup)} onClick={handleShowInput} />\n    }\n  </div>\n)\n\nconst EditTableNameComposed = compose<TProps, any>(\n  inject(\n    'lexics',\n    'teamTable',\n    'playerTable',\n    'teamPlayers',\n    'matchTable',\n    'tournamentMatchesTableStore',\n    'gearPopupStore',\n  ),\n  withState('showInput', 'setShowInput', false),\n  //@ts-ignore\n  withHandlers({\n    getTableName: ({\n      gearPopupStore: { tempTableName },\n      table: { tableName },\n      //@ts-ignore\n    }) => (newPopup) => {\n      if (!newPopup) return tableName\n      return tempTableName\n    },\n    /**\n    * Функция редактирования имени таблицы\n    * @param {number} position - номер таблицы\n    * @param {string} tableName - название таблицы\n    */\n    editTableName: ({\n      currentStore: {\n        editTable,\n        storeName,\n      },\n      gearPopupStore: { editTempTableName },\n      newPopup,\n      //@ts-ignore\n    }) => (position, tableName) => {\n      if (newPopup) {\n        return editTempTableName(tableName)\n      }\n      return editTable(position, tableName, storeName)\n    },\n    // Показываем или input или блок с названием\n    //@ts-ignore\n    handleShowInput: ({ setShowInput }) => () => setShowInput(n => !n),\n    // При фокусе выбираем весь текст в инпуте сразу\n    //@ts-ignore\n    handleFocus: () => e => e.target.select(),\n    // Переводим на нужный язык value в инпуте при фокусе\n    handleTranslateName: ({ lexics: { getLexics } }) => (\n      //@ts-ignore\n      tableName => getLexics(tableName) || tableName\n    ),\n  }),\n  observer,\n)\nexport const EditTableName = EditTableNameComposed(EditTableNameComponent)\n","\nimport React from 'react'\n\nimport { T9n } from 'react-sport'\n\nimport { TComposeInner } from './types'\n\nexport const RangeSettings = ({\n  onBlurHandler,\n  onChangeHandler,\n  rangeAfter,\n  rangeBefore,\n}: TComposeInner) => (\n  <div className='main-page__range-checkboxes'>\n    <div className='main-page__range-fieldset'>\n      <span>\n        <T9n t='boxscore_sec_before' />\n        <input\n          type='number'\n          name='start'\n          className='main-page__range-short-input in'\n          value={rangeBefore}\n          onChange={onChangeHandler}\n          onBlur={onBlurHandler}\n        />\n        <T9n t='boxscore_sec_after' />\n        <input\n          type='number'\n          name='end'\n          className='main-page__range-short-input out'\n          value={rangeAfter}\n          onChange={onChangeHandler}\n          onBlur={onBlurHandler}\n        />\n      </span>\n    </div>\n  </div>\n)\n","import { observer, inject } from 'mobx-react'\n\nimport {\n  compose,\n  withState,\n  withHandlers,\n} from 'recompose'\n\nimport {\n  TRangeSettingsHocInner,\n  TWithHandlersOuter1,\n  TWithHandlersInner1,\n  TWithHandlersOuter2,\n  TWithHandlersInner2,\n} from './types'\n\nexport const rangeSettingsHoc = compose<TRangeSettingsHocInner, any>(\n  inject('shootsRange'),\n  withState(\n    'rangeBefore',\n    'setRangeBefore',\n    ({ shootsRange: { before } }) => before,\n  ),\n  withState(\n    'rangeAfter',\n    'setRangeAfter',\n    ({ shootsRange: { after } }) => after,\n  ),\n  withHandlers<TWithHandlersOuter1, TWithHandlersInner1>({\n    setRangeState: ({\n      setRangeAfter,\n      setRangeBefore,\n    }) => (name, value) => {\n      const setNewStateRange = name === 'start' ? setRangeBefore : setRangeAfter\n      setNewStateRange(value)\n    },\n  }),\n  withHandlers<TWithHandlersOuter2, TWithHandlersInner2>({\n    onBlurHandler: ({\n      rangeAfter,\n      rangeBefore,\n      shootsRange: { setAfter, setBefore },\n    }) => () => {\n    // Записываем в стор выбранный диапазон\n      setBefore(rangeBefore)\n      setAfter(rangeAfter)\n    },\n    onChangeHandler: ({ setRangeState }) => (e) => {\n      const { name, value } = e.target\n      const newValue = value === '' ? value : parseInt(value, 10)\n      setRangeState(name, newValue)\n    },\n  }),\n  observer,\n)\n","import React from 'react'\nimport { observer } from 'mobx-react'\n\nimport { compose } from 'recompose'\n\nimport { RangeSettings } from 'features/components/common/map/RangeSettings'\n\nimport { rangeSettingsHoc } from 'hocs/rangeSettingsHoc'\nimport { TRangeSettingsHocInner } from 'hocs/rangeSettingsHoc/types'\n\nexport const RangeSelectorComponent = ({\n  onBlurHandler,\n  onChangeHandler,\n  rangeAfter,\n  rangeBefore,\n}: TRangeSettingsHocInner) => (\n  <RangeSettings\n    onBlurHandler={onBlurHandler}\n    onChangeHandler={onChangeHandler}\n    rangeAfter={rangeAfter}\n    rangeBefore={rangeBefore}\n  />\n)\n\nconst rangeSelectorEnhanced = compose<TRangeSettingsHocInner, {}>(\n  rangeSettingsHoc,\n  observer,\n)\n\nexport const RangeSelector = rangeSelectorEnhanced(RangeSelectorComponent)\n","import React, { Fragment } from 'react'\n\nimport cx from 'classnames'\nimport map from 'lodash/map'\nimport get from 'lodash/get'\nimport includes from 'lodash/includes'\n\nimport { T9n } from 'react-sport'\n\nimport { gearColumnsList } from 'config/teamPopupParams'\n\nimport { PopupItem } from 'features/GearPopup'\nimport { gearTableComposed } from './composed'\n\nimport { TComposeInner } from './types'\n\n/**\n * Компонент внутри попапа. Основной список чекбоксов\n */\nconst GearTableComponent = ({\n  ampluaId,\n  getCurrentGroupInfo,\n  isActive,\n  lastElemsInGear,\n  massCheck,\n}: TComposeInner) => (\n  <Fragment>\n    {map(gearColumnsList[ampluaId], ({ className, num }) => (\n      <div key={num} className={`popup-column-${className}`}>\n        <div className='popup-col-title' onClick={massCheck(num)}>\n          <T9n\n            className={cx(\n              'checkbox-label',\n              { 'checkbox-label_active': isActive(num) },\n            )}\n            t={get(getCurrentGroupInfo(num), 'groupName', '')}\n          />\n        </div>\n        <div className={`popup-column-${className}-table`}>\n          {map(\n            get(getCurrentGroupInfo(num), 'params'), param => (\n              <PopupItem\n                key={param.param_id}\n                last={includes(lastElemsInGear, param.param_id)}\n                param={param}\n              />\n            ),\n          )}\n        </div>\n      </div>\n    ))}\n  </Fragment>\n)\n\nexport const GearTable = gearTableComposed(GearTableComponent)\n","import { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers, withProps } from 'recompose'\nimport get from 'lodash/get'\nimport find from 'lodash/find'\nimport size from 'lodash/size'\nimport filter from 'lodash/filter'\n\nimport { lastElemsInGear } from 'config/teamPopupParams'\nimport { amplua } from 'config/amplua'\n\nimport {\n  TComposeInner,\n  TPropsOuter,\n  TWithPropsInner,\n  TWithPropsOuter,\n  TWithHandlersOuter1,\n  TWithHandlersInner1,\n  TWithHandlersOuter2,\n  TWithHandlersInner2,\n  TParam,\n} from './types'\n\nexport const gearTableComposed = compose<TComposeInner, TPropsOuter>(\n  inject('gearPopupStore'),\n  withProps<TWithPropsInner, TWithPropsOuter>(({ ampluaId }) => {\n    // Id последних параметров в подгруппе\n    const lastElemsIds = ampluaId === amplua.team\n      ? lastElemsInGear.team\n      : lastElemsInGear.rest\n\n    return {\n      lastElemsInGear: lastElemsIds,\n    }\n  }),\n  withHandlers<TWithHandlersOuter1, TWithHandlersInner1>({\n    getCurrentGroupInfo: ({ currentStore: { gearParams } }) => num =>\n      get(gearParams, num, {}),\n\n    getGroupTempSelected: ({ gearPopupStore: { tempSelected } }) => (\n      groupParams: Array<{}>,\n    ) =>\n      filter(\n        tempSelected,\n        ({ gear_group_id }) =>\n          gear_group_id === get(groupParams, '[0].gear_group_id'),\n      ),\n  }),\n  withHandlers<TWithHandlersOuter2, TWithHandlersInner2>({\n    /**\n     * Проверка активного класса для выбранного чекбокса заголовка групп параметров\n     * @param {array} tempSelected - массив выбранных параметров (не сохраненные в сторе)\n     */\n    isActive: ({\n      getCurrentGroupInfo,\n      getGroupTempSelected,\n    }) => (num) => {\n      const groupParams = get(getCurrentGroupInfo(num), 'params')\n\n      return size(getGroupTempSelected(groupParams)) === size(groupParams)\n    },\n    massCheck: ({\n      gearPopupStore: {\n        addToTempSelected,\n        removeFromTempSelected,\n        tempSelected,\n      },\n      getCurrentGroupInfo,\n      getGroupTempSelected,\n    }) => num => () => {\n      const groupParams: Array<TParam> = get(getCurrentGroupInfo(num), 'params')\n      // Если выбраны все чекбоксы в группе, то снимаем с каждого галочку\n      if (size(getGroupTempSelected(groupParams)) === size(groupParams)) {\n        groupParams.forEach((param) => {\n          removeFromTempSelected(param)\n        })\n        // Если нет, то выбираем все чекбоксы в группе\n      } else {\n        groupParams.forEach((param) => {\n          const {\n            gear_group_id,\n            param_id,\n            short_lexical_formula,\n          } = param\n\n          if (\n            find(tempSelected, {\n              gear_group_id,\n              param_id,\n              short_lexical_formula,\n            })\n          ) {\n            // Удаляем из временно выбранных, чтобы не было дублей\n            removeFromTempSelected(param)\n          }\n          addToTempSelected(param)\n        })\n      }\n    },\n  }),\n  observer,\n)\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport _assign from 'object-assign'\nimport invariant from 'fbjs/lib/invariant'\nimport isPlainObject from 'lodash/isPlainObject'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\nfunction shallowCopy(x) {\n  if (Array.isArray(x)) {\n    return x.concat()\n  } if (x && typeof x === 'object') {\n    return _assign(new x.constructor(), x)\n  }\n  return x\n}\n\nconst COMMAND_PUSH = '$push'\nconst COMMAND_UNSHIFT = '$unshift'\nconst COMMAND_SPLICE = '$splice'\nconst COMMAND_SET = '$set'\nconst COMMAND_MERGE = '$merge'\nconst COMMAND_APPLY = '$apply'\n\nconst ALL_COMMANDS_LIST = [\n  COMMAND_PUSH,\n  COMMAND_UNSHIFT,\n  COMMAND_SPLICE,\n  COMMAND_SET,\n  COMMAND_MERGE,\n  COMMAND_APPLY,\n]\n\nconst ALL_COMMANDS_SET = {}\n\nALL_COMMANDS_LIST.forEach((command) => {\n  ALL_COMMANDS_SET[command] = true\n})\n\nfunction invariantArrayCase(value, spec, command) {\n  invariant(\n    Array.isArray(value),\n    'update(): expected target of %s to be an array got %s.',\n    command,\n    value,\n  )\n  const specValue = spec[command]\n  invariant(\n    Array.isArray(specValue),\n    'update(): expected spec of %s to be an array got %s. '\n      + 'Did you forget to wrap your parameter in an array?',\n    command,\n    specValue,\n  )\n}\n\n/**\n * Returns a updated shallow copy of an object without mutating the original.\n * See https://facebook.github.io/react/docs/update.html for details.\n */\nfunction update(value, spec) {\n  invariant(\n    isPlainObject(spec),\n    'update(): You provided a key path to update() that did not contain one '\n      + 'of %s. Did you forget to include {%s: ...}?',\n    ALL_COMMANDS_LIST.join(', '),\n    COMMAND_SET,\n  )\n\n  if (hasOwnProperty.call(spec, COMMAND_SET)) {\n    invariant(\n      Object.keys(spec).length === 1,\n      'Cannot have more than one key in an object with %s',\n      COMMAND_SET,\n    )\n\n    return spec[COMMAND_SET]\n  }\n\n  let nextValue = shallowCopy(value)\n\n  if (hasOwnProperty.call(spec, COMMAND_MERGE)) {\n    const mergeObj = spec[COMMAND_MERGE]\n    invariant(\n      mergeObj && typeof mergeObj === 'object',\n      \"update(): %s expects a spec of type 'object' got %s\",\n      COMMAND_MERGE,\n      mergeObj,\n    )\n    invariant(\n      nextValue && typeof nextValue === 'object',\n      \"update(): %s expects a target of type 'object' got %s\",\n      COMMAND_MERGE,\n      nextValue,\n    )\n    _assign(nextValue, spec[COMMAND_MERGE])\n  }\n\n  if (hasOwnProperty.call(spec, COMMAND_PUSH)) {\n    invariantArrayCase(value, spec, COMMAND_PUSH)\n    spec[COMMAND_PUSH].forEach((item) => {\n      nextValue.push(item)\n    })\n  }\n\n  if (hasOwnProperty.call(spec, COMMAND_UNSHIFT)) {\n    invariantArrayCase(value, spec, COMMAND_UNSHIFT)\n    spec[COMMAND_UNSHIFT].forEach((item) => {\n      nextValue.unshift(item)\n    })\n  }\n\n  if (hasOwnProperty.call(spec, COMMAND_SPLICE)) {\n    invariant(\n      Array.isArray(value),\n      'Expected %s target to be an array got %s',\n      COMMAND_SPLICE,\n      value,\n    )\n    invariant(\n      Array.isArray(spec[COMMAND_SPLICE]),\n      'update(): expected spec of %s to be an array of arrays got %s. '\n        + 'Did you forget to wrap your parameters in an array?',\n      COMMAND_SPLICE,\n      spec[COMMAND_SPLICE],\n    )\n    spec[COMMAND_SPLICE].forEach((args) => {\n      invariant(\n        Array.isArray(args),\n        'update(): expected spec of %s to be an array of arrays got %s. '\n          + 'Did you forget to wrap your parameters in an array?',\n        COMMAND_SPLICE,\n        spec[COMMAND_SPLICE],\n      )\n      nextValue.splice(...args)\n    })\n  }\n\n  if (hasOwnProperty.call(spec, COMMAND_APPLY)) {\n    invariant(\n      typeof spec[COMMAND_APPLY] === 'function',\n      'update(): expected spec of %s to be a function got %s.',\n      COMMAND_APPLY,\n      spec[COMMAND_APPLY],\n    )\n    nextValue = spec[COMMAND_APPLY](nextValue)\n  }\n\n  for (const k in spec) {\n    if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {\n      nextValue[k] = update(value[k], spec[k])\n    }\n  }\n\n  return nextValue\n}\n\nexport default update\n","import React from 'react'\nimport { DragSource, DropTarget } from 'react-dnd'\nimport { compose, pure, withHandlers } from 'recompose'\nimport { findDOMNode } from 'react-dom'\n\nimport { T9n } from 'react-sport'\n\nimport {\n  THover,\n  TTargetProps,\n  TMonitor,\n  TComposedInner,\n  TPropsOuter,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n  TConnectDropTarget,\n  TConnectDragSource,\n  TMonitorDragSource,\n} from './types'\n\nconst cardSource = {\n  beginDrag({ id, index }: { id: number | string, index: number }) {\n    return { id, index }\n  },\n}\n\nconst cardTarget: THover = {\n  hover(\n    props: TTargetProps,\n    monitor: TMonitor,\n    component: React.ReactNode,\n  ): number | boolean {\n    // Это будущий индекс той карточки, которую перетягиваем\n    const dragIndex = monitor.getItem().index\n    // Это индекс той карточки, над которой находимся\n    const hoverIndex = props.index\n\n    // Если карточка находится над самой собой (над бывшим своим расположением),\n    // то ничего не высчитываем\n    if (dragIndex === hoverIndex) return false\n\n    const hoverBoundingRect: { bottom: number, top: number } = findDOMNode(\n      //@ts-ignore\n      component,\n    ).getBoundingClientRect()\n    const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\n    const clientOffset = monitor.getClientOffset()\n    const hoverClientY = clientOffset.y - hoverBoundingRect.top\n\n    // Меняем расположение карточек, только если перетаскиваемая пересекла половину следующей\n    if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) return false\n    if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) return false\n    // Меняем расположение карточек\n    props.moveCard(dragIndex, hoverIndex)\n    monitor.getItem().index = hoverIndex\n    return monitor.getItem().index\n  },\n}\n\nconst DndItemComponent = ({\n  connectDragSource,\n  connectDropTarget,\n  isDragging,\n  item,\n  removeParam,\n}: TComposedInner) =>\n  connectDragSource(\n    connectDropTarget(\n      <li style={{ opacity: Number(!isDragging) }}>\n        <T9n t={item.full_lexical_formula} />\n        <span className='remover' onClick={removeParam(item)}>\n          &times;\n        </span>\n      </li>,\n    ),\n  )\n\nconst dndItemComposed = compose<TComposedInner, TPropsOuter>(\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    removeParam: ({ removeFromTempSelected }) => param => () => {\n      removeFromTempSelected(param)\n    },\n  }),\n  pure,\n\n  DropTarget(\n    'item',\n    //@ts-ignore\n    cardTarget,\n    (connect: TConnectDropTarget) => ({\n      connectDropTarget: connect.dropTarget(),\n    }),\n  ),\n\n  DragSource(\n    'item',\n    cardSource,\n    (connect: TConnectDragSource, monitor: TMonitorDragSource) => ({\n      connectDragSource: connect.dragSource(),\n      isDragging: monitor.isDragging(),\n    }),\n  ),\n)\n\nexport const DndItem = dndItemComposed(DndItemComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers } from 'recompose'\n\nimport map from 'lodash/map'\n\nimport { T9n } from 'react-sport'\n\nimport update from 'module/utils/update'\nimport { DndItem } from '../DndItem'\n\nimport {\n  TComposeInner,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n} from './types'\n\nexport const DndParamsComponent = ({\n  gearPopupStore: { removeFromTempSelected, tempSelected },\n  getId,\n  moveHandler,\n}: TComposeInner) => (\n  <div className='popup-col-inner'>\n    <div className='popup-col-title'>\n      <T9n t='boxscore_selected_params' />\n      <span className='found-param-counter'>\n        {tempSelected && tempSelected.length}\n      </span>\n    </div>\n    <div className='popup-col-comment' />\n    <div className='ul-checked-wrapper'>\n      <ul>\n        {map(tempSelected, (item, index) => (\n          <DndItem\n            index={index}\n            id={getId(item)}\n            key={getId(item)}\n            item={item}\n            removeFromTempSelected={removeFromTempSelected}\n            moveCard={moveHandler}\n          />\n        ))}\n      </ul>\n    </div>\n  </div>\n)\n\nexport const DndParamsComposed = compose<TComposeInner, {}>(\n  inject('gearPopupStore'),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    getId: () => ({\n      gear_group_id,\n      short_lexical_formula,\n    }) => `${short_lexical_formula}_${gear_group_id}`,\n\n    moveHandler: ({\n      gearPopupStore: { fillTempSelected, tempSelected },\n    }) => (dragIndex, hoverIndex) => {\n      // Заменяем обновленный (после перестановки) список карточек с параметрами в правом меню\n      const updatedTempParamsList = update(tempSelected, {\n        $splice: [[dragIndex, 1], [hoverIndex, 0, tempSelected[dragIndex]]],\n      })\n      fillTempSelected(updatedTempParamsList)\n    },\n  }),\n  observer,\n)\n\nexport const DndParams = DndParamsComposed(DndParamsComponent)\n","export default {\n  ace: 7788,\n  ace_1: 10585,\n  ace_for_lose: 7789,\n  ace_from_grid: 7791,\n  ace_with_touch: 7790,\n  advanced_zones: 4311,\n  alignment_mistake: 7795,\n  all_assistance: 8868,\n  all_attack_receptions: 8087,\n  all_attacks: 967,\n  all_blocks: 8551,\n  all_passes: 8552,\n  all_serve_receptions: 8554,\n  all_serves: 8555,\n  amplua_who_blocked: 10666,\n  amplua_who_is_attacking: 10656,\n  amplua_who_passed: 10646,\n  amplua_who_served: 10643,\n  assist: 7783,\n  attack: 223,\n  attack_direction: 10658,\n  attack_receive_in_zone: 8363,\n  attack_reception: 8550,\n  attack_reception_result: 10669,\n  attack_type: 10668,\n  attack_which_receipt: 8348,\n  attacks_from_zone: 8344,\n  attacks_on_amplua: 8580,\n  attacks_to_zone: 8345,\n  bad: 7765,\n  bad_pass: 7780,\n  ball_on_own_side: 8576,\n  basic_zones: 4310,\n  binding_player: 7779,\n  binding_player_attack: 8584,\n  block: 7804,\n  block_assists: 7766,\n  block_attempt: 10659,\n  block_earned_points: 8029,\n  block_out: 7774,\n  block_out_or_in_your_own_area: 7728,\n  block_played_by_striker: 7773,\n  block_property: 8343,\n  block_type: 10668,\n  blocked_players: 8351,\n  blocked_second_pass: 7772,\n  blocked_shot: 7731,\n  bottom_side: 7785,\n  bounced_back_from_the_block: 7750,\n  center_player: 7777,\n  center_player_amplua: 8672,\n  central_player_attack: 8583,\n  characteristic: 10596,\n  coasting: 8371,\n  combination: 8556,\n  cover: 10671,\n  cross: 7743,\n  deceptive_shot: 7748,\n  deep: 8374,\n  deep_serve: 7798,\n  defender_out: 7729,\n  dense: 8373,\n  diagonal_player: 7778,\n  diagonal_player_attack: 8582,\n  difference: 8370,\n  difference_of_attacks: 8341,\n  differences: 8361,\n  dig: 10670,\n  direction: 8882,\n  double_back: 8383,\n  double_front: 8384,\n  filter: 8385,\n  finishing_player_attack: 8581,\n  first_ball_attackers_home: 10657,\n  first_ball_attackers_opp: 10602,\n  foot_fault: 8711,\n  for_1_block: 7753,\n  for_2_blocks: 7754,\n  for_3_blocks: 7755,\n  four_hits: 10653,\n  free_shot: 7751,\n  from_zone: 8358,\n  good: 7764,\n  good_pass: 7781,\n  grid_touch: 7733,\n  half_power_shot: 7742,\n  libero: 7887,\n  line_overstep: 7771,\n  lose_point: 7730,\n  mistake: 737,\n  mistake_while_pass: 7782,\n  mistake_while_serve: 8360,\n  negative_reception: 7787,\n  net_touching: 10654,\n  no_value_attacks: 7735,\n  on_clean_grid: 7752,\n  on_court: 8353,\n  opponent: 422,\n  opponent_court: 7727,\n  opponent_finished: 8577,\n  opponent_side_play: 10663,\n  opponents_count: 8342,\n  opponents_out_shots: 7768,\n  organized: 7756,\n  other_body_side: 7803,\n  other_players: 8673,\n  outside_player: 7776,\n  part: 8684,\n  pass: 8750,\n  pass_direction: 10648,\n  pass_from: 8347,\n  pass_to: 8359,\n  pass_type: 10647,\n  pass_types: 8356,\n  pass_zone: 10649,\n  pipe: 7736,\n  pipe_5: 7737,\n  planned_attack: 8369,\n  planning: 7800,\n  position_1: 9862,\n  position_2: 9863,\n  position_3: 9864,\n  position_4: 9865,\n  position_5: 9866,\n  position_6: 9867,\n  positioning: 10591,\n  positive_reception: 7786,\n  power: 7799,\n  power_attack: 7747,\n  power_attack_1: 8368,\n  power_shot: 7741,\n  receive_type: 8375,\n  receiver_mistake: 7801,\n  result: 10584,\n  reverse_cross: 7744,\n  rise: 7739,\n  rise_over_head: 7738,\n  roll_forward: 7749,\n  run_forward: 7745,\n  serve: 7805,\n  serve_receive_zone: 8376,\n  serve_reception: 7807,\n  serve_type: 8367,\n  serving: 10518,\n  short: 8372,\n  short_serve: 7796,\n  shot_out: 7732,\n  simple: 7746,\n  soften: 8575,\n  softening: 9880,\n  splited: 7757,\n  step_over: 7734,\n  team: 8364,\n  technique_difference: 8378,\n  temp: 9884,\n  temp1: 8541,\n  temp2: 8542,\n  to_grid: 7792,\n  to_out: 7793,\n  to_whom: 8362,\n  to_zone: 8357,\n  top_side: 7784,\n  touched_grid_by_blocker: 7770,\n  tough: 7797,\n  type: 8366,\n  unforced_opponent_mistakes: 7769,\n  wave: 7740,\n  which_pass: 8346,\n  which_receipt: 8380,\n  while_falling: 7802,\n  who_attacked: 8350,\n  who_attacking: 8351,\n  who_blocked: 8831,\n  who_blocking: 8349,\n  who_else_on_court: 8354,\n  who_gave_pass: 8832,\n  who_is_attacking: 10655,\n  who_is_blocking: 10665,\n  who_is_passing: 10645,\n  who_is_serving: 10642,\n  who_received: 8579,\n  who_received_amplua: 8578,\n  who_served: 8377,\n  who_served_list: 8833,\n  with_block_touching: 10650,\n  with_blocker_touching: 10651,\n  with_step_out: 7794,\n  without_zone: 4312,\n  won_point: 7726,\n  zero_attack: 10644,\n  zero_block: 8574,\n  zero_block_1: 10664,\n  zero_serve: 10785,\n  zone: 966,\n  zone_1: 7758,\n  zone_2: 7759,\n  zone_3: 7760,\n  zone_4: 7761,\n  zone_5: 7762,\n  zone_6: 7763,\n}\n","export default {\n  //лексика для формы авторизации\n  contact_us: 2497, //Свяжитесь с нами любым удобным вам способом, и мы вам поможем.\n  enter_email: 2498, //Введите ваш e-mail\n  enter_pass: 902, //Введите пароль для входа\n  force_aware: 655, //Кнопка все равно войти разлогинит другого пользователя...\n  force_submit: 553, //Все равно войти\n  force_text: 640, //Извините, вы уже вошли\n  log_in: 554,\n  problems_with_sign_in: 2501, //Проблемы со входом?\n  server_error: 952, //Нет связи с сервером\n  sign_in: 2500, //Войти\n  sign_in_pro: 4308, //Войти в pro версию\n  terms_and_conditions: 8900,\n  terms_must_be_accepted: 8901, //Вам необходимо принять наши условия\n  try_instat: 1493, //I want to try InStat,\n  wrong_sign_in: 712, //Wrong email or password\n}\n","export default {\n  //tabs\n  tabs_matches: 682, //Матчи\n  //heder\n  header_my_video: 688, //мои видео\n  header_my_profile: 690, //мой профиль\n  header_quit: 1924, //выход\n  header_team: 658, //Команда\n  header_nationality: 583, //Национальность\n  header_league: 675, //Лига\n  header_team_level: 855, //Уровень команды\n  header_age: 542, //Возраст\n  header_contract: 665, //Контракт\n  header_bodyPart: 3994, //Рука\n  header_position: 768, //позиция\n  header_goals: 2932, //очки\n  header_skills: 811, //навыки\n  header_instat_index: 113, //InStat Index\n  header_statistics: 1587, //Статистика\n  header_playlists: 2544,\n  header_shared_episodes: 3949,\n  f_goals: 3173,\n\n  //match select\n  match_show_opponent: 3376, //показать статистику соперника\n  average_for_match_opp: 2787, //Среднее для команд оппонентов\n  total: 416, // всего\n  home: 6609,\n  visitors: 6610,\n\n  //Cтатистика в шапке\n  total_attack_eff: 8025, //Реализация атак, %\n  attack_points: 7926, //Выполненные задачи\n  positive_def_receiption: 8095, //Позит. прием в защите, %\n  positive_serve_receiptions: 7957, //Ошибки\n  setting_assist: 8068, //Ассисты на передачах\n  setting_assist_percents: 8640, //Ассисты на передачах, %\n  good_bad_sets: 8539, //Плохие/Хорошие передачи\n  block_touch_for_own_rally: 8054, //Смягчения на блоке, %\n  positive_receiption: 8104, //Позитивный прием, %\n\n  //параметры таблиц матчей\n  ////дефолтные параметры\n  // params_matches_minutes: 4361, //- Минуты\n  params_matches_points: 3558, //- Набранные очки\n  params_matches_rebounds: 3570, // Подбор\n  params_matches_assist: 3174, // - Голевая передача\n  params_matches_steals: 3564, // = перехват\n  params_matches_turnover: 3565,\n  average_for_match: 426, //В среднем за матч\n  average_for_90: 1238,\n  //группы параметров\n  group_param_picking_up: 412, //подборы\n  group_param_boxscore: 2929, //протокол\n  group_param_combinations_and_iso: 3602, //комбинации и изоляции\n  group_param_shots_types: 4120, //типы бросков\n  group_param_add_data: 3604, //дополнительные показатели\n\n  //амплуа\n  amplua_center_short: 4809,\n  amplua_pforward_short: 4003,\n  amplua_lforward_short: 4002,\n  amplua_sguard_short: 4807,\n  amplua_pguard_short: 4808,\n\n  //Параметры в шапке\n  header_field_goals_percent: 5237,\n  header_3pt_shots_percent: 5238,\n  header_free_throws_percent: 5239,\n\n  //параметры\n  header_card_age: 542, //возраст\n  header_card_birth_data: 1045, //дата рождения\n  stat_year: 673, //лет\n  stat_sm: 817, //см\n  stat_foot: 6488, //футы\n  stat_pound: 6511, //фунты\n  stat_kg: 652, //кг\n  tp_stat_height_sm: 1563, //рост см\n  tp_stat_height_foot: 6509, //рост футы\n  tp_stat_weght_lbs: 6510, // вес фунты\n  tp_stat_weght_kg: 1564, // вес кг\n\n  //match select\n  match_select_3: 777, // последние 3\n  match_select_5: 778, // последние 5\n  match_select_10: 2471, // последние 10\n  match_select_all_season: 4805, //все матчи текущего сезона\n  match_select_this_year: 4806, //все матчи этого года\n  match_selected: 5638, // выбрано матчей\n  match_select_this_season: 2511, // текущий сезон\n\n  //tables Boxscore\n  boxscore_selected_params: 5639, // выбранные параметры\n  boxscore_sec_before: 4779, //сек до\n  boxscore_sec_after: 4780, //сек после\n  boxscore_all_range: 4781, //показать все владения\n  boxscore_setting_all_ep: 5640, //настройка показа всех эпизодов\n  boxscore_protocol: 3605, // протокол\n  boxscore_efficiency: 5229, // Показатели эффективности\n  boxscore_combinations: 5233, // комбинации\n  boxscore_with_fouls: 5252, // с учетом фолов\n  boxscore_deff_combine: 5234, // защита против комбинаций\n  boxscore_date: 473, // дата\n  boxscore_main_statistics: 4269,\n  boxscore_pass: 3180,\n  boxscore_challenges: 3187,\n  boxscore_lost: 6265,\n  boxscore_press: 5478,\n\n  //shoots map\n  shoots_goals_opponent: 7484, //броски соперника\n  shoots_goals: 3559, //Свои броски\n  shoots_without_zones: 4312, //без зон\n  shoots_basic_zones: 4310, //основные\n  shoots_extend_zones: 4311, //основные\n  shoots_2x_goals: 3560, //2х очковые\n  shoots_3x_goals: 3561, //3х очковые\n  shoots_opened: 5208, //Открытый\n  shoots_closed: 5209, //закрытый\n\n  //match popup\n  table_popup_dnd_info: 5725, //Drag params up or down to reorder\n  match_popup_full_game: 1295, // полный матч\n  match_popup_ball_in_play: 2489, // Мяч в игре\n  match_popup_all_time_player: 9477, //Все игровое время\n  match_popup_rifling_attack: 9577, // все розыгрыши с игроком\n  match_popup_rifling_defense: 2947, //Время в атаке\n}\n","export default {\n  //амплуа\n  amplua_center_short: 4809,\n  amplua_pforward_short: 4003,\n  amplua_lforward_short: 4002,\n  amplua_sguard_short: 4807,\n  amplua_pguard_short: 4808,\n  //heder\n  header_playlists: 2544,\n  header_shared_episodes: 3949,\n\n  show_photo: 7507, // Показать фото игрока\n\n  //Табы основные\n  matches_table: 682, // Матчи\n  players_table: 9457, //Игроки\n\n  //match select\n  match_select_3: 777, // последние 3\n  match_select_5: 778, // последние 5\n  match_select_10: 2471, // последние 10\n  match_select_all_season: 4805, //все матчи текущего сезона\n  match_select_this_year: 4806, //все матчи этого года\n  match_selected: 5638, // выбрано матчей\n  match_select_this_season: 2511, // текущий сезон\n  match_show_opponent: 3376, //показать статистику соперника\n  match_show_all_teams: 2867, //показать статистику команд\n  average_for_match: 426, //В среднем за матч\n  average_for_match_opp: 2787, //Среднее для команд оппонентов\n  total: 416, // всего\n  home: 6609,\n  visitors: 6610,\n\n  team_leaders: 449,\n\n  //stats\n  439: 439, //Голы забитые\n  441: 441, //голы пропущенные\n  3178: 3178, //удары\n  1327: 1327, //Удары соперника\n  92: 92, //Владения мячом\n  594: 594, // Единоборства, %\n  755: 755, // Передачи %\n  653: 653, //Ключевые передачи\n\n  total_attack_eff: 8025, // Реализация атаки, %\n  total_attack_points: 7962, //Очки в атаке\n  positive_serve_receiptions: 7957, //Позитивный прием подач, %\n\n  //tables Boxscore\n  boxscore_selected_params: 5639, // выбранные параметры\n  boxscore_sec_before: 4779, //сек до\n  boxscore_sec_after: 4780, //сек после\n  boxscore_all_range: 4781, //показать все владения\n  boxscore_setting_all_ep: 5640, //настройка показа всех эпизодов\n  boxscore_protocol: 3605, // протокол\n  boxscore_efficiency: 5229, // Показатели эффективности\n  boxscore_combinations: 5233, // комбинации\n  boxscore_with_fouls: 5252, // с учетом фолов\n  boxscore_deff_combine: 5234, // защита против комбинаций\n  boxscore_date: 473, // дата\n  boxscore_on_average: 1247, //среднее значение\n  boxscore_main_statistics: 4269, // протокол\n  boxscore_pass: 3180, // протокол\n  boxscore_challenges: 3187,\n  boxscore_lost: 6265,\n  boxscore_press: 5478,\n  boxscore_attack: 4092,\n  boxscore_flangs: 1992,\n  boxscore_type_attack: 6274,\n\n  //shoots map\n  shoots_goals_opponent: 7484, //броски соперника\n  shoots_goals: 3559, //Свои броски\n  shoots_without_zones: 4312, //без зон\n  shoots_basic_zones: 4310, //основные\n  shoots_extend_zones: 4311, //основные\n  shoots_2x_goals: 3560, //2х очковые\n  shoots_3x_goals: 3561, //3х очковые\n  average_assists: 3563,\n  shoots: 6416,\n  shoots_opponent: 1327,\n  shoots_gate: 6038,\n  shoots_field: 6612,\n  shoots_opened: 5208, //Открытый\n  shoots_closed: 5209, //закрытый\n  tabs_matches: 682, //матчи\n  tabs_players: 637, // игроки\n  tabs_lineups: 6175, // лайнапы\n\n  //match popup\n  table_popup_dnd_info: 5725, //Drag params up or down to reorder\n  match_popup_full_game: 1295, //полный матч\n  match_popup_ball_in_play: 2489, //Ball in play\n  match_popup_all_time_player: 5225, //Все игровое время\n  match_popup_rifling_attack: 2946, //Время в атаке\n  match_popup_rifling_defense: 2947, //Время в защите\n}\n","export default {\n  //амплуа\n  amplua_center_short: 4809,\n  amplua_pforward_short: 4003,\n  amplua_lforward_short: 4002,\n  amplua_sguard_short: 4807,\n  amplua_pguard_short: 4808,\n  //heder\n  header_playlists: 2544,\n  header_shared_episodes: 3949,\n\n  //Табы в виджетах\n  matches_table: 682, // Матчи\n  players_table: 9457, //Игроки\n  match: 9680, //Матч\n  teams_statistic: 2, // Статистика команд\n\n  //match select\n  match_select_3: 777, // последние 3\n  match_select_5: 778, // последние 5\n  match_select_10: 2471, // последние 10\n  match_select_all_season: 4805, //все матчи текущего сезона\n  match_select_this_year: 4806, //все матчи этого года\n  match_selected: 5638, // выбрано матчей\n  match_select_this_season: 2511, // текущий сезон\n  match_show_opponent: 3376, //показать статистику соперника\n  average_for_match: 426, //В среднем за матч\n  average_for_match_opp: 2787, //Среднее для команд оппонентов\n  total: 416, // всего\n  home: 6609,\n  visitors: 6610,\n\n  team_leaders: 449,\n\n  //stats\n  439: 439, //Голы забитые\n  441: 441, //голы пропущенные\n  3178: 3178, //удары\n  1327: 1327, //Удары соперника\n  92: 92, //Владения мячом\n  594: 594, // Единоборства, %\n  755: 755, // Передачи %\n  653: 653, //Ключевые передачи\n\n  total_attack_eff: 8025, // Реализация атаки, %\n  total_attack_points: 7962, //Очки в атаке\n  positive_serve_receiptions: 7957, //Позитивный прием подач, %\n\n  //tables Boxscore\n  boxscore_selected_params: 5639, // выбранные параметры\n  boxscore_sec_before: 4779, //сек до\n  boxscore_sec_after: 4780, //сек после\n  boxscore_all_range: 4781, //показать все владения\n  boxscore_setting_all_ep: 5640, //настройка показа всех эпизодов\n  boxscore_protocol: 3605, // протокол\n  boxscore_efficiency: 5229, // Показатели эффективности\n  boxscore_combinations: 5233, // комбинации\n  boxscore_with_fouls: 5252, // с учетом фолов\n  boxscore_deff_combine: 5234, // защита против комбинаций\n  boxscore_date: 473, // дата\n  boxscore_on_average: 1247, //среднее значение\n  boxscore_main_statistics: 4269, // протокол\n  boxscore_pass: 3180, // протокол\n  boxscore_challenges: 3187,\n  boxscore_lost: 6265,\n  boxscore_press: 5478,\n  boxscore_attack: 4092,\n  boxscore_flangs: 1992,\n  boxscore_type_attack: 6274,\n\n  //shoots map\n  shoots_goals_opponent: 7484, //броски соперника\n  shoots_goals: 3559, //Свои броски\n  shoots_without_zones: 4312, //без зон\n  shoots_basic_zones: 4310, //основные\n  shoots_extend_zones: 4311, //основные\n  shoots_2x_goals: 3560, //2х очковые\n  shoots_3x_goals: 3561, //3х очковые\n  average_assists: 3563,\n  shoots: 6416,\n  shoots_opponent: 1327,\n  shoots_gate: 6038,\n  shoots_field: 6612,\n  shoots_opened: 5208, //Открытый\n  shoots_closed: 5209, //закрытый\n  tabs_matches: 682, //матчи\n  tabs_players: 637, // игроки\n  tabs_lineups: 6175, // лайнапы\n\n  //match popup\n  table_popup_dnd_info: 5725, //Drag params up or down to reorder\n  match_popup_full_game: 1295, //полный матч\n  match_popup_ball_in_play: 2489, //Ball in play\n  match_popup_all_time_player: 5225, //Все игровое время\n  match_popup_rifling_attack: 2946, //Время в атаке\n  match_popup_rifling_defense: 2947, //Время в защите\n}\n","export default {\n  tooltip_fault: 8532,\n  tooltip_opponent_side_receive: 8649,\n  tooltip_positive_receive: 7786,\n  tooltip_handled_by_attacker: 7773,\n  tooltip_ace: 7789,\n  tooltip_ace_player: 7790,\n  tooltip_ace_from_grid: 7791,\n  tooltip_arrangement_mistake_receive: 7795,\n  tooltip_arrangement_mistake: 8650,\n  tooltip_good_pass: 7781,\n  tooltip_bad_pass: 7780,\n  tooltip_point_area: 8652,\n  tooltip_lost_point: 7732,\n  tooltip_lost_point_out: 7774,\n  tooltip_lost_point_block: 8654,\n  tooltip_point_block: 7728,\n  tooltip_useless_opponent_attack: 8577,\n  tooltip_lost_point_overstep: 7771,\n  tooltip_point_deffender: 7729,\n  tooltip_own_useless_attack: 8653,\n  tooltip_lost_point_grid: 8655,\n  tooltip_lost_point_grid_touch: 7733,\n  tooltip_block_area: 8656,\n  tooltip_useless_block_softed: 8575,\n  tooltip_lost_point_second_pass: 7772,\n  tooltip_lost_point_attack: 8660,\n  tooltip_useless_opponent_block: 8657,\n  tooltip_out_lost_point: 8659,\n  tooltip_overstep_lost_point: 8658,\n  tooltip_grid_lost_point: 7770,\n  tooltip_serve_fault: 8709,\n  tooltip_serve_another_fault: 8710,\n}\n","export default {\n  // Полное название параметра\n  // TODO Дописать недостающие ключи на англ. + комментарии\n  main_statisctic: 8479,\n  total_points_won: 8668,\n  attack_points: 7926,\n  attack_realisation: 8025,\n  block_points: 8029,\n  aces: 7788,\n  back_row_attack_eff: 9472,\n  block_touch_for_own_rally: 8054,\n  positive_attack_receiption: 7957,\n  positive_defence_receiption: 8095,\n  all_mistakes: 8600,\n  attack_mistakes: 7963,\n  block_mistakes: 8031,\n  serve_mistakes: 7890,\n  attack_receiption_mistakes: 7943,\n  defence_receiption_mistakes: 8090,\n  receive_mistakes: 8102,\n  block_assists: 7766,\n  pass_assist: 8068,\n  pass_assist_percents: 8640,\n  plus_minus_title: 8669,\n  plus_minus: 8669,\n  attack_play: 8529,\n  attacks: 967,\n  attack_points_percents: 8617,\n  attack_mistakes_percents: 8617,\n  blocked_attacks: 8728,\n  blocked_attacks_percents: 8617,\n  first_serve_attacks: 8729,\n  first_serve_attacks_points: 7962,\n  first_serve_attacks_points_percents: 8617,\n  first_serve_attacks_mistakes: 7963,\n  first_serve_attacks_mistakes_percents: 8617,\n  first_serve_attacks_blocked: 8728,\n  first_serve_attacks_blocked_percents: 8617,\n  positive_receiption_attacks: 8756,\n  positive_receiption_attacks_points: 7962,\n  positive_receiption_attacks_points_percents: 8617,\n  positive_receiption_attacks_mistakes: 7963,\n  positive_receiption_attacks_mistakes_percents: 8617,\n  positive_receiption_attacks_blocked: 8728,\n  positive_receiption_attacks_blocked_percents: 8617,\n  first_line_attacks: 7970,\n  first_line_attacks_points: 7962,\n  first_line_attacks_points_percents: 8617,\n  first_line_attacks_mistakes: 7963,\n  first_line_attacks_mistakes_percents: 8617,\n  first_line_attacks_blocked: 8728,\n  first_line_attacks_blocked_percents: 8617,\n  negative_receiption_attacks: 7990,\n  negative_receiption_attacks_points: 7962,\n  negative_receiption_attacks_points_percents: 8617,\n  negative_receiption_attacks_mistakes: 7963,\n  negative_receiption_attacks_mistakes_percents: 8617,\n  negative_receiption_attacks_blocked: 8728,\n  negative_receiption_attacks_blocked_percents: 8617,\n  back_line_attacks: 7965,\n  back_line_attacks_points: 7962,\n  back_line_attacks_points_percents: 8617,\n  back_line_attacks_mistakes: 7963,\n  back_line_attacks_mistakes_percents: 8617,\n  back_line_attacks_blocked: 8728,\n  back_line_attacks_blocked_percents: 8617,\n  serves: 8513,\n  all_serves: 7888,\n  negative_receiption_serves: 7897,\n  positive_receiption_serves: 7909,\n  force_serves: 7895,\n  force_serves_eff: 7929,\n  planned_serves: 7893,\n  planned_serves_eff: 7928,\n  serve_play: 8523,\n  serves_receiption: 7807,\n  negative_serves_receiption: 7945,\n  positive_serves_receiption: 7944,\n  defence_serve: 8087,\n  positive_defence_serve: 8488,\n  negative_defence_serve: 8553,\n  block_play: 8501,\n  all_blocks: 8028,\n  passes: 8847,\n  all_passes: 8804,\n  assists: 8605,\n  assists_mistakes: 8651,\n  positive_passes: 8063,\n  negative_passes: 8062,\n  to_back_line_passes: 8824,\n  to_first_line_passes: 8825,\n  rallies_won: 9469,\n  points_difference: 9773,\n}\n","export default {\n  // Короткое название параметра\n  // TODO переписать ключи на названия на англ.\n  8731: 8731,\n  8140: 8140,\n  8204: 8204,\n  8732: 8732,\n  7892: 7892,\n  8128: 8128,\n  8272: 8272,\n  8733: 8733,\n  8141: 8141,\n  8208: 8208,\n  7891: 7891,\n  8123: 8123,\n  8268: 8268,\n  8281: 8281,\n  8830: 8830,\n  8246: 8246,\n  8634: 8634,\n  8734: 8734,\n  8735: 8735,\n  8736: 8736,\n  8737: 8737,\n  8738: 8738,\n  8739: 8739,\n  8740: 8740,\n  8741: 8741,\n  8742: 8742,\n  8743: 8743,\n  8744: 8744,\n  8201: 8201,\n  8745: 8745,\n  8746: 8746,\n  8730: 8730,\n  8747: 8747,\n  8751: 8751,\n  8752: 8752,\n  8753: 8753,\n  8754: 8754,\n  8755: 8755,\n  8757: 8757,\n  8758: 8758,\n  8759: 8759,\n  8760: 8760,\n  8761: 8761,\n  8762: 8762,\n  8763: 8763,\n  8764: 8764,\n  8765: 8765,\n  8766: 8766,\n  8767: 8767,\n  8768: 8768,\n  8769: 8769,\n  8770: 8770,\n  8771: 8771,\n  8772: 8772,\n  8773: 8773,\n  8774: 8774,\n  8775: 8775,\n  8776: 8776,\n  8777: 8777,\n  8778: 8778,\n  8779: 8779,\n  8780: 8780,\n  8781: 8781,\n  8782: 8782,\n  8783: 8783,\n  8784: 8784,\n  8785: 8785,\n  8787: 8787,\n  8788: 8788,\n  8789: 8789,\n  8790: 8790,\n  8791: 8791,\n  8792: 8792,\n  8793: 8793,\n  8794: 8794,\n  7896: 7896,\n  7920: 7920,\n  8117: 8117,\n  7894: 7894,\n  7912: 7912,\n  8109: 8109,\n  8120: 8120,\n  8795: 8795,\n  8796: 8796,\n  8124: 8124,\n  8135: 8135,\n  8797: 8797,\n  8136: 8136,\n  8265: 8265,\n  8273: 8273,\n  8798: 8798,\n  8799: 8799,\n  8271: 8271,\n  8209: 8209,\n  8800: 8800,\n  8801: 8801,\n  8802: 8802,\n  8803: 8803,\n  8805: 8805,\n  8239: 8239,\n  8241: 8241,\n  8240: 8240,\n  8807: 8807,\n  8809: 8809,\n  8811: 8811,\n  8820: 8820,\n  8821: 8821,\n  8813: 8813,\n  8814: 8814,\n  8822: 8822,\n  8815: 8815,\n  8816: 8816,\n  8823: 8823,\n  8817: 8817,\n  8247: 8247,\n  8826: 8826,\n  8827: 8827,\n  8251: 8251,\n  8828: 8828,\n  8829: 8829,\n  9774: 9774,\n}\n","export default {\n  8724: 8724,\n  8725: 8725,\n  8617: 8617,\n  8726: 8726,\n  8727: 8727,\n  8053: 8053,\n  8806: 8806,\n  8808: 8808,\n  8810: 8810,\n  8812: 8812,\n  8814: 8814,\n  8816: 8816,\n  8818: 8818,\n  8819: 8819,\n  8952: 8952,\n  9006: 9006,\n  8954: 8954,\n  9007: 9007,\n  8487: 8487,\n  8022: 8022,\n  8496: 8496,\n  8956: 8956,\n  8957: 8957,\n  8958: 8958,\n  8959: 8959,\n  8960: 8960,\n  8961: 8961,\n  8962: 8962,\n  8963: 8963,\n  8964: 8964,\n  8965: 8965,\n  8966: 8966,\n  8967: 8967,\n  8968: 8968,\n  8969: 8969,\n  8970: 8970,\n  8971: 8971,\n  8972: 8972,\n  8973: 8973,\n  8974: 8974,\n  8975: 8975,\n  8976: 8976,\n  8977: 8977,\n  8978: 8978,\n  8979: 8979,\n  8980: 8980,\n  8981: 8981,\n  8982: 8982,\n  8983: 8983,\n  8984: 8984,\n  8985: 8985,\n  7933: 7933,\n  8543: 8543,\n  8986: 8986,\n  8987: 8987,\n  8988: 8988,\n  8989: 8989,\n  7917: 7917,\n  7911: 7911,\n  7958: 7958,\n  8992: 8992,\n  8993: 8993,\n  8096: 8096,\n  8995: 8995,\n  8994: 8994,\n  8059: 8059,\n  8058: 8058,\n  8054: 8054,\n  8662: 8662,\n  8996: 8996,\n  8997: 8997,\n  8998: 8998,\n  8999: 8999,\n  9000: 9000,\n  9001: 9001,\n  9002: 9002,\n  9003: 9003,\n  9004: 9004,\n  9005: 9005,\n  9473: 9473,\n  9470: 9470,\n  8859: 8859,\n}\n","export default {\n  video_cuts: 2862,\n  offensive: 8834,\n  deffensive: 8858,\n  cuts_favorite_play_list: 3397, //Плейлист команды\n  cuts_positional_atack: 5265, //позиционное нападение\n  cuts_free_throws: 3562, //штрафные броски\n  cuts_blocks: 3566, //блокшоты\n  cuts_fouls: 5021, //фолы\n  cuts_fouls_drawn: 5266, //фолы на нем\n  cuts_video_summary: 2862, //видео нарезки\n  cuts_off_actions: 2946, //действия в атаке\n  cuts_deff_actions: 5248, //действия в обороне\n  cuts_partner: 5988, // партнеры\n  cuts_opponent: 1024, //оппоненты\n  group_param_add_data: 3604, //дополнительные показатели\n}\n","import filtersLexic from './filters'\nimport loginLexic from './login'\nimport playerLexic from './player'\nimport teamLexic from './team'\nimport matchLexic from './match'\nimport markersLexic from './markers'\nimport tableParamsLexic from './tableParams'\nimport tableParamsLexicShort from './tableParamsShort'\nimport tableParamsNumLexic from './tableParamsNum'\nimport videoCutsLexic from './videoCuts'\n\nconst indexLexic = {\n  video_actions: 588,\n  video_select_all_actions: 6938,\n  video_select_partner: 6840,\n  video_select_opponent: 6841,\n  video_reload: 6939,\n  video_reset_filters: 6593,\n  //header\n  enter_team_or_player: 6575, //введите имя команды или игрока\n  header_my_video: 688, //мои видео\n  header_my_profile: 690, //мой профиль\n  header_upload_video: 6231, // загрузить видео\n  header_recently_visited: 7698, // Посещенные страницы\n  header_quit: 1924, //выход\n  header_team: 658, //Команда\n  header_nationality: 583, //Национальность\n  header_league: 675, //Лига\n  header_team_level: 855, //Уровень команды\n  header_age: 542, //Возраст\n  header_contract: 665, //Контракт\n  header_bodyPart: 3994, //Рука\n  header_position: 768, //позиция\n  header_goals: 55, //очки\n  header_skills: 811, //навыки\n  header_instat_index: 113, //InStat Index\n  header_statistics: 1587, //Статистика\n  header_my_players: 689,\n  header_invite_players: 1491,\n  header_comments: 1285,\n  header_flag_search: 2919,\n  header_playlists: 2638,\n  header_shared_episodes: 3949,\n  header_online_translation: 3518,\n  header_men: 6492, //мужчины\n  header_women: 6491, //женщины\n  boxscore_play_video: 6487, //воспроизвести видео\n  //duration settings\n  episodes_duration: 6227,\n  user_settings_duration: 6229,\n  default_settings_duration: 6228,\n  boxscore_popup_subtitle: 6583,\n\n  //play types\n  Playtype: 4167,\n  Isolations: 4181,\n  Transition: 5905,\n  Pick_n_rolls_handler: 6136,\n  Post_up: 4186,\n  Cuts: 4093,\n  Catch_and_shoot: 6428,\n  Put_back: 5215,\n  Catch_and_drive: 6429,\n  Pickn_Pop: 5918,\n  Hand_offs: 4188,\n  Screens: 4184,\n  Miscellaneous: 7153,\n  Pick_n_rolls_roller: 6135,\n\n  //параметры таблиц матчей\n  ////дефолтные параметры\n  reset_tables: 6945,\n  new_table: '5720', // Передаем специально в виде строки\n\n  // table names\n  main_statistics: 4269,\n  passes_table: 7037,\n  passes_table_gk: 3180,\n  shots_table: 3178,\n  shots_table_gk: 1327,\n  challenges: 251,\n  add_table: 6943,\n  remove_table: 6944,\n  move_table_down: 6947,\n  move_table_up: 6946,\n  downloadXLS: 3148,\n  downloadPDF: 3147,\n  vertical_view: 8687, // Вертикальный вид\n  horizontal_view: 8688, // Горизонтальный вид\n\n  params_matches_points: 3558, //- Набранные очки\n  params_matches_rebounds: 3570, // Подбор\n  params_matches_assist: 3174, // - Голевая передача\n  params_matches_steals: 3564, // = перехват\n  params_matches_turnover: 3565, //- Потеря\n  //\n  average_for_match: 426, //В среднем за матч\n  average_for_90: 1238,\n\n  //группы параметров\n  group_param_picking_up: 412, //подборы\n  group_param_boxscore: 2929, //протокол\n  group_param_combinations_and_iso: 3602, //комбинации и изоляции\n  group_param_shots_types: 4120, //типы бросков\n  group_param_add_data: 3604, //дополнительные показатели\n\n  //амплуа\n  amplua_center_short: 4809,\n  amplua_pforward_short: 4003,\n  amplua_lforward_short: 4002,\n  amplua_sguard_short: 4807,\n  amplua_pguard_short: 4808,\n\n  //Параметры в шапке\n  header_field_goals_percent: 5237,\n  header_3pt_shots_percent: 5238,\n  header_free_throws_percent: 5239,\n\n  //параметры\n  stat_year: 673, //лет\n  stat_sm: 817, //см\n  stat_kg: 652, //кг\n\n  //match select\n  match_select_3: 777, // последние 3\n  match_select_5: 778, // последние 5\n  match_select_10: 2471, // последние 10\n  match_select_all_season: 4805, //все матчи текущего сезона\n  match_select_this_year: 4806, //все матчи этого года\n  match_selected: 5638, // выбрано матчей\n  match_select_this_season: 2511, // текущий сезон\n\n  //tables Boxscore\n  boxscore_selected_params: 5639, // выбранные параметры\n  boxscore_sec_before: 4779, //сек до\n  boxscore_sec_after: 4780, //сек после\n  boxscore_all_range: 4781, //показать все владения\n  boxscore_setting_all_ep: 5640, //настройка показа всех эпизодов\n  boxscore_protocol: 3605, // протокол\n  boxscore_efficiency: 5229, // Показатели эффективности\n  boxscore_combinations: 5233, // комбинации\n  boxscore_with_fouls: 5252, // с учетом фолов\n  boxscore_deff_combine: 5234, // защита против комбинаций\n  boxscore_date: 473, // дата\n\n  //shoots map\n  shoots_goals_opponent: 3036, //броски соперника\n  shoots_goals: 3559, //Свои броски\n  shoots_without_zones: 4312, //без зон\n  shoots_basic_zones: 4310, //основные\n  shoots_extend_zones: 4311, //основные\n  shoots_2x_goals: 3560, //2х очковые\n  shoots_3x_goals: 3561, //3х очковые\n  shoots_opened: 5208, //Открытый\n  shoots_closed: 5209, //закрытый\n  markers_from: 9583, // точки откуда\n  markers_to: 9584, // точки куда\n  full_trajectory: 9585, // полная траектория\n\n  //match popup\n  table_popup_dnd_info: 5725, //Drag params up or down to reorder\n  match_popup_full_game: 1295, //полный матч\n  match_popup_ball_in_play: 2489, //Ball in play\n  match_popup_all_time_player: 5225, //Все игровое время\n  match_popup_rifling_attack: 2947, //Время в защите\n  match_popup_rifling_defense: 2946, //Время в атаке\n  match_popup_highlights: 2108,\n  match_popup_pure_time: 1345,\n  match_popup_goals: 55,\n  match_popup_pdf: 3553,\n  match_popup_details: 3366,\n\n  //video cuts\n  cuts_positional_atack: 5265, //позиционное нападение\n  cuts_free_throws: 3562, //штрафные броски\n  cuts_blocks: 3566, //блокшоты\n  cuts_fouls: 5021, //фолы\n  cuts_fouls_drawn: 5266, //фолы на нем\n  cuts_video_summary: 2862, //видео нарезки\n  cuts_off_actions: 2946, //действия в атаке\n  cuts_deff_actions: 5248, //действия в обороне\n  cuts_partner: 5988, // партнеры\n  cuts_opponent: 1024, //оппоненты\n\n  //common\n  cancel: 732,\n  ok: 724,\n  players: 9457,\n  teams: 660,\n  show_more: 7143, // кнопка 'показать больше'\n\n  //numeric lexics\n  7341: 7341, //external video\n}\n\nexport {\n  indexLexic,\n  filtersLexic,\n  loginLexic,\n  playerLexic,\n  teamLexic,\n  matchLexic,\n  markersLexic,\n  videoCutsLexic,\n  tableParamsLexic,\n  tableParamsLexicShort,\n  tableParamsNumLexic,\n}\n","import { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withHandlers,\n  lifecycle,\n} from 'recompose'\nimport get from 'lodash/get'\n\nimport { indexLexic } from 'config/lexics'\n\nimport { rangeSettingsHoc } from 'hocs/rangeSettingsHoc'\nimport {\n  TComposeInner,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n  TLifecycle,\n  TPropsOuter,\n} from './types'\n\nexport const gearPopupComposed = compose<TComposeInner, TPropsOuter>(\n  inject(\n    'lexics',\n    'playerProfile',\n    'gearPopupStore',\n  ),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    /**\n    * Функция для отображения названия для таблицы.\n    * @param {object} table - объект таблицы с параметрами\n    * @param {boolean} newPopup - флаг новое ли окно popup.\n      Если да, то отображаем название по-умолчанию Название таблицы\n  */\n    getTable: () => (table, newPopup) => {\n      if (newPopup) {\n        const newTable = {\n          position: 0,\n          tableName: indexLexic.new_table,\n        }\n        return newTable\n      }\n      return table\n    },\n    /**\n    * Запись в стор выбранных параметров в попапе шестеренки\n    * @param {bool} newPopup - если шестеренка для создания новой таблицы\n    * @param {func} handleNewPopupAction - функция закрытия попапа для новой таблцы\n    * @param {func} saveTempParams - функция сохранения параметров\n    * @param {func} handlePopupAction - функция закрытия попапа\n    * @param {number} position - номер таблицы\n    */\n    onApply: ({\n      currentStore: {\n        addTable,\n        saveTempParams,\n        storeName,\n      },\n      gearPopupStore: {\n        editTempTableName,\n        eraseTempSelected,\n        tempSelected,\n        tempTableName,\n      },\n      handleNewPopupAction,\n      handlePopupAction,\n      newPopup,\n      playerProfile: { profile },\n    }) => position => () => {\n      const ampluaId = get(profile, 'amplua.id')\n      if (newPopup) {\n        addTable(tempTableName, storeName, tempSelected)\n        editTempTableName(indexLexic.new_table, true)\n      } else {\n        saveTempParams({\n          ampluaId,\n          localStorageName: storeName,\n          position,\n          selectedParams: tempSelected,\n        })\n      }\n\n      if (newPopup) {\n        handleNewPopupAction()\n      } else {\n        handlePopupAction()\n      }\n      eraseTempSelected()\n    },\n    /**\n    * Закрытие попапа шестеренки\n    * @param {func} editTempSelected - функция очищения выбранных параметров\n    * @param {func} handlePopupAction - функция закрытия попапа\n    *\n    */\n    onClose: ({\n      gearPopupStore: { eraseTempSelected },\n      handleNewPopupAction,\n      handlePopupAction,\n      newPopup,\n    }) => () => {\n      eraseTempSelected()\n      if (newPopup) {\n        handleNewPopupAction()\n      } else {\n        handlePopupAction()\n      }\n    },\n  }),\n  lifecycle<TLifecycle, {}>({\n    componentDidMount() {\n      const {\n        gearPopupStore: { fillTempSelected },\n        newPopup,\n        table: { selectedParams },\n      } = this.props\n      if (!newPopup) {\n        fillTempSelected(selectedParams)\n      }\n    },\n  }),\n  rangeSettingsHoc,\n  observer,\n)\n","import React from 'react'\n\nimport get from 'lodash/get'\n\nimport { T9n } from 'react-sport'\n\nimport { EditTableName } from 'features/TableName/components/EditTableName'\nimport { RangeSelector } from './RangeSelector'\nimport { GearTable } from './GearTable'\nimport { DndParams } from './DndParams'\nimport { gearPopupComposed } from './composed'\n\nimport { TComposeInner } from './types'\n\n// Попап окно с параметрами\nconst GearPopupComponent = ({\n  currentStore,\n  getTable,\n  lexics: { getLexics },\n  newPopup,\n  onApply,\n  onClose,\n  playerProfile: { profile },\n  table,\n}: TComposeInner) => (\n  <div className='popup popup-modern popup-modern_position-left popup-modern_active'>\n    <div className='popup-inner'>\n      <div className='popup-row-header'>\n        <h3 className='popup-title'>\n          <EditTableName\n            table={getTable(table, newPopup)}\n            newPopup={newPopup}\n            currentStore={currentStore}\n          />\n          <span className='popup-title__icon' />\n        </h3>\n        <span className='popup-close' onClick={onClose} />\n      </div>\n      <div className='popup-row-container'>\n        <GearTable\n          currentStore={currentStore}\n          ampluaId={get(profile, 'amplua.id', 0)}\n        />\n      </div>\n      <div className='popup-column-aside'>\n        <DndParams />\n        <div className='popup-duration-settings'>\n          <div className='popup-col-title'>\n            <T9n t='boxscore_setting_all_ep' />\n          </div>\n          <RangeSelector />\n        </div>\n      </div>\n      <div className='popup-row-footer'>\n        <div className='popup-buttons'>\n          <input\n            onClick={onClose}\n            type='button'\n            value={getLexics('cancel')}\n            className='popup-cancel'\n          />\n          <input\n            onClick={onApply(table.position)}\n            type='button'\n            value={getLexics('ok')}\n            className='popup-submit'\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n)\n\nexport const GearPopup = gearPopupComposed(GearPopupComponent)\n","import React, { Fragment } from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers } from 'recompose'\nimport cx from 'classnames'\nimport find from 'lodash/find'\n\nimport { T9n } from 'react-sport'\n\nimport {\n  TComposeInner,\n  TPropsOuter,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n} from './types'\n\nconst PopupItemComponent = ({\n  checkActive,\n  isActiveParam,\n  last,\n  param,\n  param: { lexical_formula },\n}: TComposeInner) => (\n  <Fragment>\n    <div className='checkbox-wrapper'>\n      <span\n        className={cx(\n          'checkbox-label',\n          { 'checkbox-label_active': isActiveParam(param) },\n        )}\n        data-name='param'\n        onClick={checkActive(param)}\n      >\n        <T9n t={lexical_formula} />\n      </span>\n    </div>\n    {last && <br />}\n  </Fragment>\n)\n\nexport const popupItemComposed = compose<TComposeInner, TPropsOuter>(\n  inject('gearPopupStore'),\n  withHandlers <TWithHandlersOuter, TWithHandlersInner>({\n    /**\n     * Функция выбора чекбокса\n     * @param {array} tempSelected - массив выбранных параметров (не сохраненные в сторе)\n     * @param {number} editTempSelected - функция действия с чекбоксом ('add', 'delete')\n     * @param {number} param_id - id параметра\n     * @param {number} gear_group_id - id группы параметров\n     * @param {string} short_lexical_formula - лексика параметра\n     * @param {object} param - весь параметр\n     */\n    checkActive: ({\n      gearPopupStore: {\n        addToTempSelected,\n        removeFromTempSelected,\n        tempSelected,\n      },\n    }) => param => () => {\n      const {\n        gear_group_id,\n        param_id,\n        short_lexical_formula,\n      } = param\n\n      if (\n        find(tempSelected, {\n          gear_group_id,\n          param_id,\n          short_lexical_formula,\n        })\n      ) {\n        removeFromTempSelected(param)\n      } else {\n        addToTempSelected(param)\n      }\n    },\n    /**\n     * Проверка активного класса для выбранного чекбокса\n     * @param {array} tempSelected - массив выбранных параметров (не сохраненные в сторе)\n     * @param {number} param_id - id параметра\n     * @param {number} gear_group_id - id группы параметров\n     * @param {string} short_lexical_formula - лексика параметра\n     */\n    isActiveParam: ({ gearPopupStore: { tempSelected } }) => ({\n      gear_group_id,\n      param_id,\n      short_lexical_formula,\n    }) => (\n      !!find(tempSelected, {\n        gear_group_id,\n        param_id,\n        short_lexical_formula,\n      })\n    ),\n  }),\n  observer,\n)\n\nexport const PopupItem = popupItemComposed(PopupItemComponent)\n","import { types } from 'mobx-state-tree'\n\n// @ts-ignore\nimport { indexLexic } from 'config/lexics'\n\nexport const gearPopupViews = types.model({}).volatile(() => ({\n  tempSelected: [], //Временно выбранные параметры (чекбоксы)\n  tempTableName: indexLexic.new_table, //Временно выбранное название таблицы\n}))\n","import { types } from 'mobx-state-tree'\nimport { toJS } from 'mobx'\n\nimport filter from 'lodash/filter'\nimport isEqual from 'lodash/isEqual'\nimport map from 'lodash/map'\n\n// @ts-ignore\nimport { indexLexic } from 'config/lexics'\n\nexport const gearPopupActions = types.model({}).actions(self => ({\n  //@ts-ignore\n  addToTempSelected(param) {\n    //@ts-ignore\n    //@ts-ignore\n    self.tempSelected = [...self.tempSelected, toJS(param)]\n  },\n\n  //@ts-ignore\n  removeFromTempSelected(param) {\n    //@ts-ignore\n    self.tempSelected = filter(\n      //@ts-ignore\n      self.tempSelected,\n      item => !isEqual(param, item),\n    )\n  },\n\n  eraseTempSelected() {\n    //@ts-ignore\n    self.tempSelected = []\n  },\n\n  //@ts-ignore\n  fillTempSelected(params) {\n    //@ts-ignore\n    self.tempSelected = map(params, param => toJS(param))\n  },\n  /** Редактирование названия таблицы\n   * @param {string} name - название таблицы\n   * @param {bool} erase - возврат к значению по-умолчанию\n   */\n  editTempTableName(name: string, erase: boolean = false) {\n    if (erase) {\n      //@ts-ignore\n      self.tempTableName = indexLexic.new_table\n    } else {\n      //@ts-ignore\n      self.tempTableName = name\n    }\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\nimport { gearPopupViews } from './gearPopupViews'\nimport { gearPopupActions } from './gearPopupActions'\n\nexport const GearPopupStore = types.compose(\n  gearPopupActions,\n  gearPopupViews,\n)\n","export const defaultTableName = '8479'\n\nexport const tableLexics = {\n  teamMatches: 'match_show_opponent',\n  tournamentMatches: 'match_show_all_teams',\n}\n\n// Типы итогового значения в ячейках таблицы\nexport const tableStatsTypes = ['total', 'average_for_match']\n\nexport const tableTypes = {\n  //Профиль турнира\n  tournamentMatches: 'tournamentMatches', //таблица матчей по турниру\n  tournamentPlayers: 'tournamentPlayers', //таблица игроков по турниру\n  //Профиль команды\n  teamMatches: 'teamMatches', // таблица матчей на профиле команды\n  teamPlayers: 'teamPlayers', // таблица игроков на профиле команды\n  //Профиль игрока\n  playerMatches: 'playerMatches', //таблица матчей на профиле игрока\n  //Профиль матча\n  matchPlayersTable: 'matchPlayersTable', //таблица игроков на профиле матча\n}\n","import React from 'react'\nimport { compose, withHandlers } from 'recompose'\nimport { observer } from 'mobx-react'\nimport { T9n } from 'react-sport'\n// @ts-ignore\nimport { tableLexics } from 'config/tables'\n\ntype TProps = {\n  getClassName: (value: boolean) => string,\n  currentStore: { showOpponentStats: boolean },\n  setShowOppStat: () => void,\n  tableType: string,\n};\n\n// Компонент шапки таблицы, где есть статистика соперника\nconst HeaderWithOppComponent = ({\n  currentStore: { showOpponentStats },\n  getClassName,\n  setShowOppStat,\n  tableType,\n}: TProps) => (\n  <a className={getClassName(showOpponentStats)} onClick={setShowOppStat}>\n    {/*\n    //@ts-ignore */}\n    <T9n t={tableLexics[tableType]} />\n  </a>\n)\n\nconst HeaderWithOppComposed = compose(\n  //@ts-ignore\n  withHandlers({\n    setShowOppStat: ({ currentStore: { toggleShowOpponent } }) => () =>\n      toggleShowOpponent(),\n  }),\n  observer,\n)\n\n// @ts-ignore\nexport const HeaderWithOpp = HeaderWithOppComposed(HeaderWithOppComponent)\n","\nimport * as React from 'react'\nimport { compose, withHandlers } from 'recompose'\n\nimport { T9n } from 'react-sport'\n\n// @ts-ignore\nimport { tableStatsTypes } from 'config/tables'\n\n// Хок для получения кнопок для выпадашки с типами значений для ячеек таблицы\n// тип *  - т.к. хок универсальный и мы не знаем, какие пропсы в компонентах\nexport const getDropdownBtnsHoc = compose<any, any>(\n  withHandlers({\n    getDropdownBtns: () => ({\n      //@ts-ignore\n      onClick,\n      //@ts-ignore\n      position,\n      //@ts-ignore\n      summaryType,\n    }) => {\n      const types = summaryType === 'total' ? tableStatsTypes : tableStatsTypes.reverse()\n\n      //@ts-ignore\n      return types.map(type => (\n        <T9n key={type} t={type} onClick={onClick(type, position)} />\n      ))\n    },\n  }),\n)\n","import React, { Fragment } from 'react'\nimport { observer } from 'mobx-react'\nimport { compose, withHandlers } from 'recompose'\n\nimport { T9n, SimpleDropdown } from 'react-sport'\n\n// @ts-ignore\nimport { getDropdownBtnsHoc } from 'hocs/getDropdownBtnsHoc'\n\ntype TProps = {\n  getClassName: (value: boolean) => string,\n  currentStore: {\n    avatarIsVisible: boolean,\n    toggleShowAvatar: () => void,\n    changeValueType: (type: string, position: number) => void,\n  },\n  getDropdownBtns: (options: {}) => Array<any>,\n  table: {\n    position: number,\n    summaryType: string,\n  },\n  setTypeHandler: () => void,\n}\n\n// Компонент левой части шапки таблицы, где есть статистика соперника\nconst HeaderWithAvatarComponent = observer(\n  ({\n    currentStore: { avatarIsVisible, toggleShowAvatar },\n    getClassName,\n    getDropdownBtns,\n    setTypeHandler,\n    table: { position, summaryType },\n  }: TProps) => (\n    <Fragment>\n      {/*\n      //@ts-ignore */}\n      <SimpleDropdown placeholder={<T9n t='total' />}>\n        {getDropdownBtns({\n          summaryType,\n          position,\n          onClick: setTypeHandler,\n        })}\n      </SimpleDropdown>\n      <a className={getClassName(avatarIsVisible)} onClick={toggleShowAvatar}>\n        <T9n t='show_photo' />\n      </a>\n    </Fragment>\n  ),\n)\n\nconst HeaderWithAvatarComposed = compose<any, TProps>(\n  //@ts-ignore\n  withHandlers({\n    setTypeHandler: ({ currentStore: { changeValueType } }) =>\n      //@ts-ignore\n      //@ts-ignore\n      (type, position) => () => changeValueType(type, position),\n  }),\n  getDropdownBtnsHoc,\n)\n\nexport const HeaderWithAvatar = HeaderWithAvatarComposed(\n  HeaderWithAvatarComponent,\n)\n","import React from 'react'\nimport { observer } from 'mobx-react'\n\nimport includes from 'lodash/includes'\nimport { compose, withProps } from 'recompose'\nimport cx from 'classnames'\n\nimport {\n  TPropsInner,\n  TPropsOuter,\n  TWithPropsInner,\n  TWithPropsOuter,\n} from './types'\n\nexport const TeamCheckboxComponent = ({\n  ckeckboxClassName,\n  onClick,\n  status,\n  teamName,\n}: TPropsInner) => (\n  <a\n    className={ckeckboxClassName}\n    onClick={onClick(status)}\n  >\n    {teamName}\n  </a>\n)\n\nconst teamCheckbox = compose<TPropsInner, TPropsOuter>(\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(({ status, team }) => ({\n    ckeckboxClassName: cx('team-stats-header-opponents-toggler', {\n      checked: includes(team, status),\n    }),\n  })),\n)\nexport const TeamCheckbox = teamCheckbox(TeamCheckboxComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withProps,\n  withHandlers,\n} from 'recompose'\nimport get from 'lodash/get'\nimport without from 'lodash/without'\nimport includes from 'lodash/includes'\nimport map from 'lodash/map'\nimport values from 'lodash/values'\n\nimport { getSuffix } from 'module/utils/helpers'\nimport { TeamCheckbox } from './TeamCheckbox'\n\nimport {\n  TComposeInner,\n  TWithPropsInner,\n  TInject,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n} from './types'\n\n// Компонент шапки таблицы, где есть выбор у пользователя какую команду показывать\nconst HeaderWithTeamsComponent = ({\n  onClick,\n  table: { team },\n  teamsInfo,\n}: TComposeInner) => (\n  <div className='stats-table-checkbox-opp'>\n    {map(values(teamsInfo), ({ name, status }) => (\n      <TeamCheckbox\n        key={status}\n        status={status}\n        onClick={onClick}\n        teamName={name}\n        team={team}\n      />\n    ))}\n  </div>\n)\n\nexport const headerWithTeamsComposed = compose<TComposeInner, {}>(\n  inject(\n    'matchProfile',\n    'lexics',\n    'matchTable',\n  ),\n  observer,\n  withProps<TWithPropsInner, TInject>(\n    ({ lexics: { lang }, matchProfile: { data } }) => {\n      const suffix = getSuffix(lang)\n      return {\n        teamsInfo: {\n          home: {\n            name: get(data, `team1_name_${suffix}`, 'home'),\n            status: 'showHomeTeam',\n          },\n          opp: {\n            name: get(data, `team2_name_${suffix}`, 'opp'),\n            status: 'showOppTeam',\n          },\n        },\n      }\n    },\n  ),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    onClick: ({\n      matchTable: { toggleCheckTeam },\n      table,\n    }) => teamName => () => {\n      const { team } = table\n\n      const updatedTeamsId = includes(team, teamName)\n        ? without(team, teamName)\n        : [...team, teamName]\n\n      toggleCheckTeam(updatedTeamsId, table)\n    },\n  }),\n  observer,\n)\n\nexport const HeaderWithTeams = headerWithTeamsComposed(HeaderWithTeamsComponent)\n","import * as React from 'react'\nimport {\n  compose,\n  withHandlers,\n} from 'recompose'\n\nimport { HeaderWithOpp } from './HeaderWithOpp'\nimport { HeaderWithAvatar } from './HeaderWithAvatar'\nimport { HeaderWithTeams } from './HeaderWithTeams'\n\ntype TProps = {\n  //@ts-ignore\n  tableType: string | null,\n  currentStore: {},\n}\n\ntype TPropsComposed = {\n  //@ts-ignore\n  getTable: (type: string | null) => React.Node | null,\n}\n\nconst TableHeaderComponent = ({\n  getTable,\n  tableType,\n}: TProps & TPropsComposed) => getTable(tableType)\n\nconst tableHeaderComposed = compose<TProps & TPropsComposed, TProps>(\n  withHandlers({\n    //@ts-ignore\n    getTable: props => (tableType) => {\n      const tables = {\n        //@ts-ignore\n        teamMatches: <HeaderWithOpp {...props} />,\n        //@ts-ignore\n\n        matchPlayersTable: <HeaderWithTeams {...props} />,\n        //@ts-ignore\n        tournamentMatches: <HeaderWithOpp {...props} />,\n        //@ts-ignore\n        tournamentPlayers: <HeaderWithAvatar {...props} />,\n      }\n      //@ts-ignore\n      return tables[tableType] || null\n    },\n  }),\n)\n\nexport const TableHeader = tableHeaderComposed(TableHeaderComponent)\n","import { observer } from 'mobx-react'\n\nimport {\n  compose,\n  branch,\n  renderComponent,\n} from 'recompose'\n\nimport Loader from 'features/components/common/loader/Loader'\n\ntype TIsLoading = (args: any) => boolean\n\n/*\n  Хок для добавления лоадера для оборачиваемого компонента\n  Работает так: используем функцию проверки isLoading\n  Прим. props => props.someModel.isFetching\n  Если возвращает true, то рендерится лоадер.\n  Если false, то рендерится компонент, или нижестоящий хок (если в compose)\n*/\nexport const withSpinnerWhileLoading = (isLoading: TIsLoading) =>\n  compose(\n    observer,\n    branch(\n      isLoading,\n      renderComponent(Loader),\n    ),\n  )\n","import { withStateHandlers } from 'recompose'\nimport isEmpty from 'lodash/isEmpty'\n\ntype TWithStateHandlers = {\n  param: {\n    param_id?: number,\n  },\n  sortAsc: boolean,\n}\n\n/**\n * Получение отсортированных полей в таблице\n * @param {number} param - id параметра\n * @param {boolean} sortAsc - порядок сортировки (по возрастанию)\n */\nexport const setSortedIdHOC = withStateHandlers(\n  ({ param = {}, sortAsc = true }: TWithStateHandlers) => ({\n    param,\n    sortAsc,\n  }),\n  {\n    changeActiveParam: ({ param, sortAsc }) => ({\n      newParam,\n      storeAction,\n      table,\n    }) => {\n      const clickOnNewParam = param.param_id !== newParam.param_id\n      const sortIsNeedReset = Boolean(!clickOnNewParam && sortAsc)\n      const clickCases = {\n        default: {\n          param: {},\n          sortAsc: true,\n        },\n        newParamClicked: {\n          param: newParam,\n          sortAsc: false,\n        },\n        simpleClick: {\n          param: newParam,\n          sortAsc: !sortAsc,\n        },\n      }\n\n      let result = null\n      // При клике на другой столбец счетчик обнуляется и выделяется новый столбец\n      if (!isEmpty(param) && clickOnNewParam) {\n        result = clickCases.newParamClicked\n      }\n      // При клике третий раз на одном и том же столбце, сбрасываем сортировку\n      if (sortIsNeedReset) {\n        result = clickCases.default\n      } else {\n        result = clickCases.simpleClick\n      }\n\n      storeAction({\n        param: result.param,\n        sortAsc: result.sortAsc,\n        table,\n      })\n\n      return result\n    },\n  },\n)\n","import {\n  compose,\n  withHandlers,\n  withState,\n} from 'recompose'\nimport { inject } from 'mobx-react'\nimport { TLexics } from 'react-sport'\n\ntype TToggleClose = {\n  matchPopupOpened: boolean,\n  setOpened: (arg: boolean) => void,\n}\n\ntype TGetPost = {\n  lexics: TLexics,\n  matchLinks: {\n    fetch: (\n      f_match: number,\n      pageId: number,\n      page: string\n    ) => void,\n  },\n  matchPopupOpened: boolean,\n  setOpened: (arg: boolean) => void,\n\n}\n/*\n  Хок для компонента c выпадашкой, в которой содержится информация о матче.\n  При клике на матч делается запрос на получение ссылок с бэка.\n  в компоненте который оборачиваестя хоком появляется метод toggleClose\n  для открытия/закрытие попап окна со списком ссылок\n*/\nexport const withMatchLinksGetter = compose(\n  inject('lexics', 'matchLinks'),\n  withState('matchPopupOpened', 'setOpened', false),\n\n  withHandlers({\n    getPost: ({\n      lexics: { page },\n      matchLinks: { fetch },\n      matchPopupOpened,\n      setOpened,\n    }: TGetPost) => (f_match: number, pageId: number) => () => {\n      fetch(f_match, pageId, page)\n      setOpened(!matchPopupOpened)\n    },\n\n    toggleClose: ({ matchPopupOpened, setOpened }: TToggleClose) => () =>\n      setOpened(!matchPopupOpened),\n  }),\n)\n","\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withHandlers,\n  withState,\n  withProps,\n} from 'recompose'\n\nimport cx from 'classnames'\nimport get from 'lodash/get'\n\nimport { setSortedIdHOC } from 'hocs'\n\nimport {\n  TPropsInner,\n  TPropsOuter,\n  TWithPropsInner,\n  TWithPropsOuter,\n  TStoreObj,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n  TProfileNames,\n} from './types'\n\nexport const tableComposed = compose<TPropsInner, TPropsOuter>(\n  inject(\n    'matchProfile',\n    'teamTable',\n    'playerTable',\n    'matchTable',\n    'lexics',\n    'tableReports',\n    'teamProfile',\n    'playerProfile',\n    'tournamentMatchesTableStore',\n    'tournamentsProfile',\n    'teamPlayers',\n    'tournamentPlayersTableStore',\n  ),\n  withState('popupOpened', 'openPopup', false),\n  withState('newPopupOpened', 'openNewPopup', false),\n  // Хок хендлера сортировки\n  setSortedIdHOC,\n\n  withProps<TWithPropsInner, TWithPropsOuter>(\n    ({\n      matchTable,\n      param: {\n        gear_group_id,\n        param_id,\n      },\n      playerTable,\n      tableType = 'default',\n      teamPlayers,\n      teamTable,\n      tournamentMatchesTableStore,\n      tournamentPlayersTableStore,\n    }) => {\n      // Используем нужный стор для использования методов\n      const stores: TStoreObj = {\n        matchPlayersTable: matchTable,\n        playerMatches: playerTable,\n        teamMatches: teamTable,\n        teamPlayers,\n        tournamentMatches: tournamentMatchesTableStore,\n        tournamentPlayers: tournamentPlayersTableStore,\n      }\n\n      return {\n        activeId: `${param_id}_${gear_group_id}`,\n        currentStore: stores[tableType],\n      }\n    },\n  ),\n\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    getClassName: ({ currentStore: { showOpponentStats } }) => checked =>\n      cx('team-stats-header-opponents-toggler', {\n        checked: showOpponentStats || checked,\n      }),\n\n    getLinks: ({ tableReports: { pdfIsFetching, xlsIsFetching } }) => () => [\n      { xls: xlsIsFetching },\n      { pdf: pdfIsFetching },\n    ],\n\n    handleNewPopupAction: ({ openNewPopup }) => () => openNewPopup(n => !n),\n\n    handlePopupAction: ({ openPopup }) => () => openPopup(n => !n),\n\n    saveReport: ({\n      lexics: { page },\n      matchProfile,\n      playerProfile,\n      tableReports: { getReport },\n      tableType,\n      teamProfile,\n      tournamentsProfile,\n    }) => (e, key) => {\n      const profilesNames: TProfileNames = {\n        match: get(matchProfile, ['data', 'match_date'], ''),\n        player: get(playerProfile, 'profile.short_name_eng'),\n        team: get(teamProfile, 'profile.name_eng'),\n        tournaments: get(tournamentsProfile, 'profile.name_eng'),\n      }\n      const name = profilesNames[page]\n      getReport(e, key, tableType)\n        .then((blob) => {\n          const link: any = document.getElementById('download-link')\n          const date = new Date()\n          link.href = URL.createObjectURL(blob)\n          link.download = `${date.getDate()}_${date.getMonth()\n            + 1}_${date.getFullYear()}_matches_${name}.${key}`\n          link.click()\n        })\n    },\n\n    setSortedId: ({\n      changeActiveParam,\n      currentStore: { setActiveParam },\n      table,\n    }) => (param) => {\n      // Запускаем функцию из setSortedIdHOC.\n      changeActiveParam({\n        newParam: param,\n        storeAction: setActiveParam,\n        table,\n      })\n    },\n\n  }),\n  observer,\n)\n","import { types } from 'mobx-state-tree'\n\nimport size from 'lodash/size'\n\n// @ts-ignore\nimport { saveTablesToLocalStorage } from 'module/utils/helpers'\n\nexport const addTable = types.model({}).actions(self => ({\n  /**\n   * Добавляем новую таблицу\n   * @param {string} name - название таблицы\n   * @param {string} localStorageName - ключ для записи в localStorage\n   */\n  addTable(\n    name: string,\n    localStorageName: string,\n    selectedParams: Array<{}>,\n  ) {\n    //@ts-ignore\n    const position: number = size(self.tables) + 1\n    //@ts-ignore\n    self.tables = {\n      //@ts-ignore\n      ...self.tables,\n      [position]: {\n        position,\n        selectedParams,\n        tableName: name,\n        summaryType: 'average_for_match',\n      },\n    }\n    //@ts-ignore\n    saveTablesToLocalStorage({ name: localStorageName, tables: self.tables })\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\nimport get from 'lodash/get'\n\nexport const changeValueType = types.model({}).actions(self => ({\n  /** Меняем стиль отображения ячеек (итоговое по всем матчам или среднее значение)\n   * @param {string} type - тип отображения\n   */\n  changeValueType(type: string, position: number) {\n    // Если тип не меняется, то ничего не делаем\n    //@ts-ignore\n    //@ts-ignore\n    //@ts-ignore\n    if (get(self.tables, type === [position, 'summaryType'])) return null\n    //@ts-ignore\n    self.tables = {\n      //@ts-ignore\n      ...self.tables,\n      [position]: {\n        //@ts-ignore\n        ...self.tables[position],\n        summaryType: type,\n      },\n    }\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\nimport size from 'lodash/size'\nimport keys from 'lodash/keys'\nimport omit from 'lodash/omit'\nimport reduce from 'lodash/reduce'\n\n// @ts-ignore\nimport { saveTablesToLocalStorage } from 'module/utils/helpers'\n\nexport const deleteTable = types.model({}).actions(self => ({\n  /** удаления таблицы\n   * @param {number} position - порядковый номер таблицы\n   * @param {string} localStorageName - ключ для записи в localStorage\n   */\n  deleteTable(position: number, localStorageName: string) {\n    //@ts-ignore\n    const tablesList: Array<any> = keys(self.tables)\n    // Удаляем текущую таблицу\n    //@ts-ignore\n    const omitedTables = omit(self.tables, position)\n    // // Перезаписываем все таблицы, позиция которых после удаленной. Передвигаем весь список\n    const updatedTables = reduce(\n      omitedTables,\n      (acc, curr, key) => {\n        //@ts-ignore\n        if (key > position) {\n          //@ts-ignore\n          //@ts-ignore\n          acc[key - 1] = {\n            //@ts-ignore\n            ...self.tables[key],\n            //@ts-ignore\n            position: key - 1,\n          }\n        }\n        //@ts-ignore\n        //@ts-ignore\n        acc[key] = self.tables[key]\n        return acc\n      },\n      {},\n    )\n\n    // Удаляем последнюю таблицу, дубль при перемещении всех наверх\n    //@ts-ignore\n    self.tables = omit(updatedTables, size(tablesList))\n\n    //@ts-ignore\n    saveTablesToLocalStorage({ name: localStorageName, tables: self.tables })\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\n// @ts-ignore\nimport { saveTablesToLocalStorage } from 'module/utils/helpers'\n\nexport const editTable = types.model({}).actions(self => ({\n  /** Редактирование таблицы\n   * @param {number} position - порядковый номер таблицы\n   * @param {string | number} name - новое название таблицы\n   * @param {string} localStorageName - ключ для записи в localStorage\n   */\n  editTable(\n    position: number,\n    name: string,\n    localStorageName: string,\n  ) {\n    //@ts-ignore\n    self.tables = {\n      //@ts-ignore\n      ...self.tables,\n      [position]: {\n        //@ts-ignore\n        ...self.tables[position],\n        tableName: name,\n      },\n    }\n    //@ts-ignore\n    saveTablesToLocalStorage({ name: localStorageName, tables: self.tables })\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\n// @ts-ignore\nimport { indexLexic } from 'config/lexics'\n\nexport const editTempTableName = types.model({}).actions(self => ({\n  /** Редактирование названия таблицы\n   * @param {string} name - название таблицы\n   * @param {bool} erase - возврат к значению по-умолчанию\n   */\n  editTempTableName(name: string, erase: boolean = false) {\n    if (erase) {\n      //@ts-ignore\n      self.tempTableName = indexLexic.new_table\n    } else {\n      //@ts-ignore\n      self.tempTableName = name\n    }\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\nimport size from 'lodash/size'\n\nimport { saveTablesToLocalStorage } from 'module/utils/helpers'\n\nexport const moveTable = types.model({}).actions(self => ({\n  /** Перемещение таблицы вверх/вниз\n* @param {number} position - порядковый номер таблицы\n* @param {string} type - тип перемещения (вверх или вниз)\n* @param {string} localStorageName - ключ для записи в localStorage\n  */\n  moveTable(\n    position: number,\n    type: string,\n    localStorageName: string,\n  ) {\n    //@ts-ignore\n    const tableCount: number = size(self.tables)\n    //@ts-ignore\n    const currentTable: {} = self.tables[position]\n    //@ts-ignore\n    const prevTable: {} = self.tables[position - 1]\n    //@ts-ignore\n    const nextTable: {} = self.tables[position + 1]\n\n    if (\n      (type === 'up' && position === 1)\n      || (type === 'down' && position === tableCount)\n    ) return null\n\n    if (type === 'up') {\n      //@ts-ignore\n      self.tables = {\n        //@ts-ignore\n        ...self.tables,\n        [position - 1]: {\n          ...currentTable,\n          position: position - 1,\n        },\n        [position]: {\n          ...prevTable,\n          position,\n        },\n      }\n    }\n\n    if (type === 'down') {\n      //@ts-ignore\n      self.tables = {\n        //@ts-ignore\n        ...self.tables,\n        [position]: {\n          ...nextTable,\n          position,\n        },\n        [position + 1]: {\n          ...currentTable,\n          position: position + 1,\n        },\n      }\n    }\n    //@ts-ignore\n    saveTablesToLocalStorage({ name: localStorageName, tables: self.tables })\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\nexport const resetTable = types.model({}).actions(self => ({\n  /** Сброс всех таблиц по-умолчанию\n   * @param {string} localStorageName - ключ для записи в localStorage\n   */\n  resetTable(localStorageName: string) {\n    // Сначала удаляем таблицы уже сформированные\n    window.localStorage.removeItem(localStorageName)\n    //@ts-ignore\n    self.tables = {}\n    //@ts-ignore\n    self.saveTables(localStorageName)\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\nimport { saveTablesToLocalStorage } from 'module/utils/helpers'\n\nexport const saveTempParams = types.model({}).actions(self => ({\n  /**\n   * Выбранные параметры (чекбоксы) сохраняем в стор\n   * @param {number} position - порядковый номер таблицы\n   * @param {string} localStorageName - ключ для записи в localStorage\n   * @param {array} selectedParams - выбранные параметры, которые мы записываем в постоянные\n   */\n  saveTempParams({\n    ampluaId,\n    localStorageName,\n    position,\n    selectedParams,\n  }: {\n    ampluaId?: number,\n    localStorageName: string,\n    position: number,\n    selectedParams: Array<{}>,\n  }) {\n    //@ts-ignore\n    self.tables = {\n      //@ts-ignore\n      ...self.tables,\n      [position]: {\n        //@ts-ignore\n        ...self.tables[position],\n        selectedParams,\n      },\n    }\n    // Сохраняем выбранные параметры в localStorage\n    saveTablesToLocalStorage({\n      id: ampluaId,\n      name: localStorageName,\n      //@ts-ignore\n      tables: self.tables,\n    })\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\ntype TSetActiveParam = {\n  param: {\n    param_id: number,\n  },\n  sortAsc: boolean,\n  table: {\n    position: number,\n  },\n}\n\nexport const setActiveParam = types.model({}).actions(self => ({\n  setActiveParam({\n    param,\n    sortAsc,\n    table,\n  }: TSetActiveParam) {\n    const { position } = table\n    //@ts-ignore\n    self.tables = {\n      //@ts-ignore\n      ...self.tables,\n      [position]: {\n        ...table,\n        sortAsc,\n        activeId: param.param_id,\n      },\n    }\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\nimport { addTable } from './addTable'\nimport { changeValueType } from './changeValueType'\nimport { deleteTable } from './deleteTable'\nimport { editTable } from './editTable'\nimport { editTempTableName } from './editTempTableName'\nimport { moveTable } from './moveTable'\nimport { resetTable } from './resetTable'\nimport { saveTempParams } from './saveTempParams'\nimport { setActiveParam } from './setActiveParam'\n\nexport const tableActions = types.compose(\n  addTable,\n  changeValueType,\n  deleteTable,\n  editTable,\n  editTempTableName,\n  moveTable,\n  resetTable,\n  saveTempParams,\n  setActiveParam,\n)\n","import { types } from 'mobx-state-tree'\nimport { toJS } from 'mobx'\nimport reduce from 'lodash/reduce'\nimport filter from 'lodash/filter'\nimport sortBy from 'lodash/sortBy'\n\nimport { callApi } from 'react-sport'\n\nimport routes from 'config/routes'\n\nconst url: string = `${routes.API_ROOT}/data`\n\nexport const tableApiActions = types.model({}).actions(self => ({\n  getGearParamsList(ampluaId: number) {\n    //@ts-ignore\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'ask_gear_params',\n        params: {\n          _v_amplua_id: ampluaId,\n        },\n      }),\n    }\n\n    return callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        self.error = null\n      },\n      //@ts-ignore\n      onSuccess: self._onSuccessGearParams,\n      //@ts-ignore\n      onError: self._onError,\n    })\n  },\n\n  //@ts-ignore\n  _onSuccessGearParams({ data }) {\n    //@ts-ignore\n    self.totalParams = data\n    //@ts-ignore\n    self.fetchGroups()\n  },\n\n  fetchGroups() {\n    //@ts-ignore\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'ask_gear_group_view',\n      }),\n    }\n    return callApi({\n      url,\n      config,\n      onRequest: () => {},\n      //@ts-ignore\n      onSuccess: self._onSuccessGroups,\n      //@ts-ignore\n      onError: self._onError,\n    })\n  },\n\n  _onSuccessGroups(json: {\n    data: Array<{\n      group_id: number,\n      group_lexical_formula: number,\n      group_name: string,\n    }>,\n  }) {\n    //@ts-ignore\n    self.gearParams = reduce(\n      json.data,\n      //@ts-ignore\n      (prev, curr) => {\n        const current = {\n          params: sortBy(\n            filter(\n              //@ts-ignore\n              toJS(self.totalParams),\n              ({ gear_group_id }) => gear_group_id === curr.group_id,\n            ),\n            'sort_order',\n          ),\n          groupName: String(curr.group_lexical_formula),\n        }\n        return [...prev, current]\n      },\n      [],\n    )\n  },\n\n  _onError(error: any) {\n    //@ts-ignore\n    self.error = error\n  },\n}))\n","import { types, Instance } from 'mobx-state-tree'\n\nimport { tableActions } from './tableActions'\nimport { tableApiActions } from './tableApiActions'\n\nconst Param = types.model('Param', {\n  clickable: types.number,\n  f_option_3: types.number,\n  full_lexical_formula: types.string,\n  gear_group_id: types.number,\n  gear_subgroup_id: types.number,\n  is_default: types.maybeNull(types.string),\n  lexical_formula: types.string,\n  name: types.string,\n  param1_id: types.maybeNull(types.array(types.string)),\n  param2_id: types.maybeNull(types.array(types.string)),\n  param_id: types.identifierNumber,\n  short_lexical_formula: types.string,\n  sort_order: types.number,\n})\n\nconst GearParam = types.model('GearParam', {\n  groupName: types.maybeNull(types.string),\n  params: types.array(Param),\n})\n\n// Модель группы с названием\nconst ParamGroup = types.model('ParamGroup', {\n  group_id: types.number,\n  group_lexical_formula: types.number,\n  group_name: types.string,\n})\n\nexport const TableCommon = types.model('tableCommon', {\n  error: types.frozen({}),\n  gearParams: types.array(GearParam),\n  paramGroups: types.array(ParamGroup),\n  tempSelected: types.array(Param),\n  tempTableName: types.union(types.string, types.number, types.undefined),\n  totalParams: types.array(Param),\n})\n\nexport const TableStore = types.compose(\n  TableCommon,\n  tableActions,\n  tableApiActions,\n)\n\nexport type TParam = Instance<typeof Param>\n","\nimport { types, flow } from 'mobx-state-tree'\nimport isEmpty from 'lodash/isEmpty'\nimport flatten from 'lodash/flatten'\nimport uniqBy from 'lodash/uniqBy'\nimport size from 'lodash/size'\n\nimport { callApi } from 'react-sport'\n\n// @ts-ignore\nimport routes from 'config/routes'\n// @ts-ignore\nimport { filterDBStats } from 'module/utils/helpers'\nimport { matchesToShow } from '../config'\n\ntype TConfig = {\n  method: string,\n  body: string,\n};\n\nconst url: string = `${routes.API_ROOT}/data`\n\nexport const TournamentMatchesTableApiActions = types\n  .model({})\n  .actions(self => ({\n    fetchTableInfo: flow(function* fetchTableInfo() {\n      //@ts-ignore\n      yield self.getGearParamsList(0)\n      //@ts-ignore\n      yield self.fetchTableParams()\n    }),\n\n    fetchTableParams() {\n      //@ts-ignore\n      const paramsList: Array<number> = isEmpty(\n        //@ts-ignore\n        self.summarySelectedParamsFromTables,\n      )\n        //@ts-ignore\n        ? self.defaultParams\n        //@ts-ignore\n        : self.summarySelectedParamsFromTables\n      const config: TConfig = {\n        method: 'POST',\n        body: JSON.stringify({\n          proc: 'ask_tournament_param_view',\n          params: {\n            //@ts-ignore\n            _v_match_id: self.matchesToFetch,\n            _v_param_id: paramsList,\n          },\n        }),\n      }\n\n      return callApi({\n        url,\n        config,\n        onRequest: () => {\n          //@ts-ignore\n          self.partFetching = true\n          //@ts-ignore\n          self.error = null\n        },\n        //@ts-ignore\n        onSuccess: self._onSuccesTableParams,\n        //@ts-ignore\n        onError: self._onError,\n      })\n    },\n\n    _onSuccesTableParams(json: { data: Array<{}> }) {\n      //@ts-ignore\n      //@ts-ignore\n      self.stats = uniqBy(\n        //@ts-ignore\n        flatten([...self.stats, filterDBStats(json.data)]),\n        'id',\n      )\n      //@ts-ignore\n      if (size(self.matchesToFetch) < matchesToShow) {\n        //@ts-ignore\n        self.canFetch = false\n      }\n      if (window.localStorage.getItem('tournamentMatchesTableStore') === null) {\n        //@ts-ignore\n        self.saveTables()\n      } else {\n        //@ts-ignore\n        //@ts-ignore\n        self.tables = JSON.parse(\n          //@ts-ignore\n          window.localStorage.getItem('tournamentMatchesTableStore'),\n        )\n      }\n      //@ts-ignore\n      self.partFetching = false\n      //@ts-ignore\n      self.isLoaded = true\n    },\n\n    _onError(error: any) {\n      //@ts-ignore\n      self.error = error\n    },\n  }))\n","export const matchesToShow = 5\n","import { types } from 'mobx-state-tree'\n\nimport filter from 'lodash/fp/filter'\nimport sortBy from 'lodash/fp/sortBy'\nimport flow from 'lodash/fp/flow'\n\n// @ts-ignore\nimport { saveTablesToLocalStorage } from 'module/utils/helpers'\n// @ts-ignore\nimport { defaultTableName } from 'config/tables'\n\nexport const TournamentMatchesTableActions = types.model({}).actions(self => ({\n  saveTables() {\n    const defaultTable = {\n      position: 1,\n      selectedParams: flow(\n        filter('is_default'),\n        sortBy(['gear_group_id', 'sort_order']),\n        //@ts-ignore\n      )(self.totalParams),\n      tableName: defaultTableName,\n      summaryType: 'average_for_match',\n    }\n    //@ts-ignore\n    self.tables = {\n      1: defaultTable,\n    }\n    //@ts-ignore\n    saveTablesToLocalStorage({\n      name: 'tournamentMatchesTableStore',\n      //@ts-ignore\n      tables: self.tables,\n    })\n  },\n\n  addOffset() {\n    //@ts-ignore\n    self.offset += 1\n    //@ts-ignore\n    return self.fetchTableParams()\n  },\n\n  toggleShowOpponent() {\n    //@ts-ignore\n    //@ts-ignore\n    self.showOpponentStats = !self.showOpponentStats\n  },\n}))\n","import { types, getParent } from 'mobx-state-tree'\n\nimport map from 'lodash/map'\nimport reduce from 'lodash/reduce'\nimport values from 'lodash/values'\nimport flatten from 'lodash/flatten'\nimport take from 'lodash/take'\nimport chunk from 'lodash/chunk'\n\nimport { matchesToShow } from '../config'\n\nexport const TournamentMatchesTableViews = types\n  .model({})\n  .volatile(() => ({\n    // offSet - кол-во частей запрашиваемых матчей.\n    //Т.к. их очень много, запрашивать будем по частям\n    offset: 1,\n    canFetch: true,\n    showOpponentStats: false,\n    partFetching: false,\n  }))\n  .views(self => ({\n    get summarySelectedParamsFromTables() {\n      const paramsSummary = reduce(\n        //@ts-ignore\n        values(self.tables),\n        (acc, curr) => {\n          const currentTableSelectedParams = map(\n            curr.selectedParams,\n            'param_id',\n          )\n          //@ts-ignore\n          acc.push(currentTableSelectedParams)\n          return acc\n        },\n        [],\n      )\n      return flatten(paramsSummary)\n    },\n\n    get defaultParams() {\n      return reduce(\n        //@ts-ignore\n        self.totalParams,\n        (acc, { is_default, param_id }) => {\n          if (is_default) {\n            //@ts-ignore\n            acc.push(param_id)\n          }\n          return acc\n        },\n        [],\n      )\n    },\n\n    get actualMatchesList() {\n      return take(\n        map(getParent(self).tournamentMatches.matches),\n        self.offset * matchesToShow,\n      )\n    },\n\n    // Считаем кол-во матчей для запроса\n    get matchesToFetch() {\n      const matchesTotal = getParent(self).tournamentMatches.matchesIds // Общее коли-во матчей\n      // Разбиваем общее кол-во матчей на части\n      const chunkedMatchesList = chunk(matchesTotal, matchesToShow)\n      return chunkedMatchesList[self.offset - 1]\n    },\n  }))\n","import { types } from 'mobx-state-tree'\n\n// @ts-ignore\nimport { TableStore } from 'features/Table/models/tableModel'\n\nimport { TournamentMatchesTableApiActions } from './TournamentMatchesTableApiActions'\nimport { TournamentMatchesTableActions } from './TournamentMatchesTableActions'\nimport { TournamentMatchesTableViews } from './TournamentMatchesTableViews'\n\nconst ParamExtended = types.model('Param', {\n  f_match: types.number,\n  f_match_event_ids: types.maybeNull(types.array(types.number)),\n  f_match_event_ids_json: types.maybeNull(types.array(types.number)),\n  f_option_0: types.number,\n  f_option_1: types.maybeNull(types.number),\n  f_option_2: types.maybeNull(types.number),\n  f_option_3: types.maybeNull(types.number),\n  f_option_4: types.maybeNull(types.number),\n  f_option_5: types.maybeNull(types.number),\n  f_option_6: types.maybeNull(types.number),\n  f_param: types.maybeNull(types.number),\n  f_team: types.maybeNull(types.number),\n  f_variant_zone: types.maybeNull(types.number),\n  id: types.string,\n  param_name: types.string,\n  value: types.maybeNull(types.number),\n})\n\nexport const TournamentMatchesTable = types.model('TournamentMatches', {\n  storeName: 'tournamentMatchesTableStore',\n  isLoaded: false,\n  error: types.maybeNull(types.frozen({})),\n  tables: types.frozen({}),\n  stats: types.array(ParamExtended),\n})\n\nexport const TournamentMatchesTableStore = types.compose(\n  // общие методы и свойства таблиц\n  TableStore,\n  // Собственные методы и свойства\n  TournamentMatchesTable,\n  TournamentMatchesTableActions,\n  TournamentMatchesTableApiActions,\n  TournamentMatchesTableViews,\n)\n","\nimport React from 'react'\nimport { lifecycle, compose } from 'recompose'\nimport { inject, observer } from 'mobx-react'\n\nimport { Tables } from 'features/Table'\nimport Loader from 'features/components/common/loader/Loader'\n\nimport { tableTypes } from 'config/tables'\nimport { TLexics } from 'react-sport'\n\ntype TProps = {\n  lexics: TLexics,\n  tournamentId: number,\n  tournamentMatchesTableStore: {\n    isLoaded: boolean,\n    tables: {},\n  },\n};\n\nconst TournamentMatches = ({\n  tournamentId,\n  tournamentMatchesTableStore: { isLoaded, tables },\n}: TProps) =>\n  (isLoaded ? (\n    <Tables\n      tableType={tableTypes.tournamentMatches}\n      tables={tables}\n      pageId={String(tournamentId)}\n    />\n  ) : (\n    <Loader />\n  ))\n\nexport const TournamentMatchesComposed = compose(\n  inject('lexics', 'tournamentMatchesTableStore'),\n  lifecycle({\n    componentDidMount() {\n      //@ts-ignore\n      const {\n        //@ts-ignore\n        tournamentMatchesTableStore: { fetchTableInfo },\n      } = this.props\n      fetchTableInfo()\n    },\n  }),\n  observer,\n  //@ts-ignore\n)(TournamentMatches)\n","/*\n Функция перевода '-' в '0' для того, чтобы сортировка работала по значению\n !Тут длинный прочерк!\n*/\nexport const emptyStatToZero = (value: string): string => (\n  value === '—' ? '0' : value\n)\n","\nimport React from 'react'\nimport cx from 'classnames'\n\nimport { T9n } from 'react-sport'\n\nimport './styles.scss'\n\ntype TProps = {\n  isFetching: boolean,\n  onClick: () => void,\n};\n\nexport const ShowMoreBtn = ({ isFetching, onClick }: TProps) => (\n  <div\n    className={cx('show-more-btn', { 'show-more-btn_loading': isFetching })}\n    onClick={onClick}\n  >\n    {!isFetching && <T9n t='show_more' />}\n  </div>\n)\n","import { compose, withHandlers } from 'recompose'\nimport cx from 'classnames'\n\ntype TParam = {\n  clickable: number,\n  gear_group_id: number,\n  param1_id: number | null,\n  param_id: number,\n}\n\nexport const clickableClassNameHOC = compose(\n  withHandlers({\n    /**\n     * Получение класса\n     * @param {number} param_id - id параметра\n     * @param {number} param1_id - id параметра необходимого для вычисления значения (проверка на %)\n     * @param {number} gear_group_id - айди группы параметров\n     * @param {number} activeId - активный id параметра (для отображения отсортированного)\n     */\n    getClassName: () => ({\n      clickable,\n      gear_group_id,\n      param_id,\n      param1_id,\n    }: TParam,\n    activeId: string) => cx({\n      cell: !clickable,\n      'clickable-cell': Boolean(clickable),\n      percents: param1_id,\n      'sorted-by': `${param_id}_${gear_group_id}` === activeId,\n    }),\n  }),\n)\n","import { inject, observer } from 'mobx-react'\nimport {\n  compose,\n  withHandlers,\n} from 'recompose'\nimport isEmpty from 'lodash/isEmpty'\nimport reduce from 'lodash/reduce'\nimport filter from 'lodash/filter'\nimport forEach from 'lodash/forEach'\n\nimport { clickableClassNameHOC } from 'hocs/getClickableTdClassNameHoc'\n\nimport { TFoot as TFootComponent } from 'features/Table'\n\nimport { TParam } from 'features/Table/models/tableModel'\n\ntype TProps = {\n  activeId: string,\n  getActualMatchesList: (\n    page: string,\n    pageId: string,\n    tableStats: Array<{}>,\n    opps?: boolean,\n  ) => Array<any>,\n  //@ts-ignore\n  getClassName: (param: TParam, activeId: string) => void,\n  getExtLink: (args: {\n    lexical_formula: string,\n    param_id: number,\n  }) => void,\n  param?: TParam,\n  showOpponentStats: boolean,\n  page?: string,\n  pageId: string,\n  selectedMatches: {},\n  setType: (arg: string) => void,\n  table: {\n    selectedParams: Array<TParam>,\n  },\n  tableStats: Array<{}>,\n}\n\nexport const tfootComposed = compose<any, TProps>(\n  inject(\n    'shootsRange',\n    'lexics',\n    'videoLink',\n    'tournamentMatchesTableStore',\n  ),\n  //@ts-ignore\n  withHandlers({\n    /**\n    * Функция для открытия попап окна с видео повторами\n    * @param {number} param_id - id параметра\n    * @param {string} lexical_formula - название параметра\n    * @param {array} tableStats - массив всех параметров\n    * @param {number} id - id игрока или команды\n    * @param {boolean} forOpp - флаг для фильтрации. Ищем для своей команды или для команд соперника\n    */\n    getExtLink: ({\n      lexics: { lang },\n      shootsRange,\n      tableStats,\n      videoLink: { request },\n    }) => ({ lexical_formula, param_id }: {\n      lexical_formula: string,\n      param_id: number,\n    }) => {\n      // Фильтруем сначала по команде\n      const teamTableStats = filter(\n        tableStats,\n        { f_param: param_id },\n      )\n      if (isEmpty(teamTableStats)) return null\n\n      // Выдергиваем только ивенты из массива статистики для конкретной команды\n      // и делаем из них просто общий массив [number]\n      const filteredEvents = reduce(\n        teamTableStats,\n        (acc, { f_match_event_ids_json: events }) => {\n          if (!events) return acc\n          //@ts-ignore\n          forEach(events, event => acc.push(event))\n          return acc\n        }, [],\n      )\n\n      return request({\n        events: filteredEvents,\n        lang,\n        lexical_formula,\n        range: shootsRange,\n        type: 'tablesFooter',\n      })\n    },\n    /**\n    * Функция установки выбранного типа итогового значения в таблице\n    * @param {string} type - типа итогового значения\n    */\n    setType: ({\n      tournamentMatchesTableStore: { changeValueType },\n    }) => (type: string, position: number) => changeValueType(type, position),\n    /**\n    * Функция фильтрации статистики по всем матчам только по выбранным матчам.\n    И для команды соперника или нашей\n    * @param {string} page - игрок или команда\n    * @param {string} pageId - id игрока/команды\n    * @param {array} tableStats - массив параметров\n    */\n    getActualMatchesList: ({ tableStats }) => () => tableStats,\n  }),\n  clickableClassNameHOC,\n  observer,\n)\n\nexport const TFoot = tfootComposed(TFootComponent)\n","import { observer, inject } from 'mobx-react'\n\nimport {\n  dateWithYear,\n  getSuffix,\n  getAbbr,\n  //@ts-ignore\n} from 'module/utils/helpers'\n\nimport { compose, withProps } from 'recompose'\nimport get from 'lodash/get'\n\nexport const leftSideTrComposed = compose(\n  inject('lexics'),\n  observer,\n  //@ts-ignore\n  withProps(\n    //@ts-ignore\n    ({\n      handleClick,\n      lexics: { lang },\n      pageId,\n      rowInfo: { f_match, match_date, opponent_score, score, ...rowInfo },\n      showOpponentStats,\n    }) => {\n      const suffix = getSuffix(lang)\n      const oppTeamName = get(rowInfo, `name_opponent_${suffix}`)\n      const teamName = get(rowInfo, `name_${suffix}`)\n\n      return {\n        rowspan: '',\n        handleClick: handleClick(f_match, pageId),\n        titleClassName: 'match-score',\n        showOpponent: showOpponentStats,\n        ownerTeamName: getAbbr(teamName),\n        oppTeamName: getAbbr(oppTeamName),\n        titleScore: `${score}:${opponent_score}`,\n        shortName: teamName,\n        shortNameOpponent: oppTeamName,\n        matchDate: dateWithYear(match_date),\n        match: {\n          has_video: true,\n          f_match,\n        },\n      }\n    },\n  ),\n)\n","import * as React from 'react'\nimport { PlayButton, MatchName, TableUI } from 'react-sport'\nimport { MatchPopup } from 'features/Table'\nimport { leftSideTrComposed } from './composed'\n\ntype TProps = {\n  showOpponent: boolean,\n  rowspan: string,\n  match: {\n    has_video: boolean,\n    f_match: number,\n  },\n  //@ts-ignore\n  handleClick: (value: SyntheticEvent<HTMLButtonElement>) => void,\n  titleScore: string,\n  titleClassName: string,\n  matchDate: string,\n  shortNameOpponent: string,\n  shortName: string,\n  ownerTeamName: string,\n  oppTeamName: string,\n  matchPopupOpened: boolean,\n  isFetching: boolean,\n  links: {},\n  toggleClose: () => {},\n}\n\n// @ts-ignore\nexport const LeftSideTr = leftSideTrComposed(\n  //@ts-ignore\n  ({\n    handleClick,\n    isFetching,\n    links,\n    match: { f_match, has_video },\n    matchDate,\n    matchPopupOpened,\n    oppTeamName,\n    ownerTeamName,\n    rowspan,\n    shortName,\n    shortNameOpponent,\n    showOpponent,\n    titleClassName,\n    titleScore,\n    toggleClose,\n  }: TProps) => (\n    //@ts-ignore\n    <TableUI.LeftSideTrWrapper rowSpan={rowspan} className='left-side-tr'>\n      {matchPopupOpened && (\n      //@ts-ignore\n        <MatchPopup\n          isFetching={isFetching}\n          links={links}\n          f_match={f_match}\n          toggleClose={toggleClose}\n        />\n      )}\n      <TableUI.PlayButtonWrapper>\n        {has_video && (\n          <PlayButton\n            //@ts-ignore\n            handleClick={handleClick}\n          />\n        )}\n      </TableUI.PlayButtonWrapper>\n\n      <TableUI.MatchDate>{matchDate}</TableUI.MatchDate>\n\n      <TableUI.MatchNameWrapper>\n        <MatchName\n          //@ts-ignore\n          handleClick={handleClick}\n          teamName={shortNameOpponent}\n        />\n      </TableUI.MatchNameWrapper>\n      {/*\n        //@ts-ignore */}\n      <TableUI.MatchScoreWrapper className={titleClassName}>\n        {titleScore}\n      </TableUI.MatchScoreWrapper>\n\n      <TableUI.MatchNameWrapper>\n        {/*\n        //@ts-ignore */}\n        <MatchName handleClick={handleClick} teamName={shortName} />\n      </TableUI.MatchNameWrapper>\n\n      {showOpponent && (\n        <TableUI.MatchScoreForOppWrapper>\n          <TableUI.MatchAbbrName side='home'>\n            {ownerTeamName}\n          </TableUI.MatchAbbrName>\n          <TableUI.MatchAbbrName side='opp'>\n            {oppTeamName}\n          </TableUI.MatchAbbrName>\n        </TableUI.MatchScoreForOppWrapper>\n      )}\n    </TableUI.LeftSideTrWrapper>\n  ),\n)\n","import { inject, observer } from 'mobx-react'\n\nimport { compose } from 'recompose'\n\nimport { withMatchLinksGetter } from 'hocs'\nimport { getExtLinkHOC } from 'hocs/getExtLinkHOC'\nimport { clickableClassNameHOC } from 'hocs/getClickableTdClassNameHoc'\n\n//TODO типизировать этот список хоков\n//@ts-ignore\nexport const TrComposed = compose<any, {}>(\n  inject(\n    'videoLink',\n    'lexics',\n    'shootsRange',\n    'matchLinks',\n  ),\n  withMatchLinksGetter,\n  getExtLinkHOC,\n  clickableClassNameHOC,\n  observer,\n)\n","import React from 'react'\nimport map from 'lodash/map'\n\nimport { Td } from 'features/Table/components/Td'\n\nimport { TPropsTr } from './types'\n\nimport { LeftSideTr } from '../LeftSideTr'\nimport { TrComposed } from './composed'\n\n// Строка со статистикой по матчу\nexport const Tr = TrComposed(\n  ({\n    activeId,\n    getClassName,\n    getPost,\n    matchLinks: { isFetching, links },\n    matchPopupOpened,\n    pageId,\n    rowInfo,\n    selectedParams,\n    showOpponentStats,\n    tableStats,\n    toggleClose,\n  }: TPropsTr) => (\n    <tr className='stats-table__table-row'>\n      {/*\n        //@ts-ignore */}\n      <LeftSideTr\n        showOpponentStats={showOpponentStats}\n        rowInfo={rowInfo}\n        pageId={pageId}\n        handleClick={getPost}\n        matchPopupOpened={matchPopupOpened}\n        isFetching={isFetching}\n        links={links}\n        toggleClose={toggleClose}\n      />\n      {map(selectedParams, param => (\n        <td\n          key={`${param.param_id}_${param.gear_group_id}`}\n          className={getClassName(param, activeId)}\n        >\n          {showOpponentStats ? (\n            <table>\n              <tbody>\n                {map([rowInfo.team_id, rowInfo.opp_team_id], team => (\n                  <tr key={team}>\n                    <Td\n                      id={team}\n                      param={param}\n                      tableStats={tableStats}\n                      rowInfo={rowInfo}\n                      tableType='tournamentMatches'\n                    />\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          ) : (\n            <table>\n              <tbody>\n                <tr>\n                  <Td\n                    param={param}\n                    tableStats={tableStats}\n                    rowInfo={rowInfo}\n                    type='total'\n                    tableType='tournamentMatchesTotal'\n                  />\n                </tr>\n              </tbody>\n            </table>\n          )}\n        </td>\n      ))}\n    </tr>\n  ),\n)\n","import React, { Fragment } from 'react'\nimport { inject, observer } from 'mobx-react'\nimport { compose, withHandlers } from 'recompose'\nimport map from 'lodash/map'\nimport filter from 'lodash/filter'\n\nimport { TableUI } from 'react-sport'\n\nimport { getSummaryStatValue } from 'module/utils/helpers/getSummaryStatValue'\nimport { emptyStatToZero } from 'module/utils/helpers/emptyStatToZero'\n\nimport Loader from 'features/components/common/loader/Loader'\nimport { THead, TBody } from 'features/Table'\nimport { ShowMoreBtn } from 'features/ShowMoreBtn'\n\nimport { TParam } from 'features/Table/models/tableModel'\nimport { TFoot } from './HOCs/TFootHOC'\nimport { Tr } from './Tr'\n\nimport './styles.scss'\n\ntype TProps = {\n  pageId: string,\n  sortAsc: boolean,\n  activeId: string,\n  table: {\n    selectedParams: Array<TParam>,\n  },\n  setSortedId: () => {},\n  getMatchesList: () => Array<{}>,\n  currentStore: {\n    isLoaded: boolean,\n    showOpponentStats: boolean,\n    stats: Array<{}>,\n    addOffset: () => void,\n    partFetching: boolean,\n    canFetch: boolean,\n  },\n  param?: TParam,\n}\n\n// Основной блок таблицы со статистикой для страницы турнира\nconst TournamentTableComponent = ({\n  activeId,\n  currentStore: {\n    addOffset,\n    canFetch,\n    isLoaded,\n    partFetching,\n    showOpponentStats,\n    stats,\n  },\n  getMatchesList,\n  pageId,\n  setSortedId,\n  sortAsc,\n  table,\n}: TProps) => (\n\n  <Fragment>\n    <div className='stats-table__wrapper'>\n\n      <table className='stats-table__table'>\n        <TableUI.Thead>\n          {/*\n          //@ts-ignore */}\n          <THead table={table} setSortedId={setSortedId} />\n        </TableUI.Thead>\n        {isLoaded ? (\n          <Fragment>\n            {/*\n            //@ts-ignore */}\n            <TBody\n              selectedParams={table.selectedParams}\n              rows={getMatchesList()}\n              tableStats={stats}\n              pageId={pageId}\n              sortAsc={sortAsc}\n              activeId={activeId}\n              showOpponentStats={showOpponentStats}\n              Tr={Tr}\n            />\n            {/*\n            //@ts-ignore */}\n            <TFoot\n              table={table}\n              tableStats={stats}\n              pageId={pageId}\n              activeId={activeId}\n              showOpponentStats={showOpponentStats}\n            />\n          </Fragment>\n        ) : (\n          <Loader />\n        )}\n      </table>\n    </div>\n    {canFetch && (\n      <div className='show-btn-container'>\n        <ShowMoreBtn onClick={addOffset} isFetching={partFetching} />\n      </div>\n    )}\n  </Fragment>\n)\n\nconst tournamentTableComposed = compose(\n  inject('tournamentMatchesTableStore'),\n  //@ts-ignore\n  withHandlers({\n    /**\n     * Получение списка матчей, отсортированного по значению выбранного параметра\n     * @param {boolean} sortAsc - флаг для сортировки (по убыванию или по возрастанию)\n     */\n    getMatchesList: ({\n      param,\n      tournamentMatchesTableStore: { actualMatchesList, stats },\n    }) => () =>\n      map(actualMatchesList, (match) => {\n        const sortedValue = getSummaryStatValue(\n          param.param_id,\n          filter(stats, { f_match: match.f_match }),\n          'total',\n        ).toString()\n        return {\n          ...match,\n          param,\n          sortBy: emptyStatToZero(sortedValue),\n        }\n      }),\n  }),\n  observer,\n)\n\n//@ts-ignore\nexport const TournamentTable = tournamentTableComposed(TournamentTableComponent)\n","\nimport { types } from 'mobx-state-tree'\n\nimport { callApi } from 'react-sport'\n\nimport get from 'lodash/get'\n\n// @ts-ignore\nimport routes from 'config/routes'\n\ntype TConfig = {\n  method: string,\n  body: string,\n};\n\nconst url: string = `${routes.API_ROOT}/data`\n\nexport const TournamentPagePlayersApiActions = types\n  .model({})\n  .actions(self => ({\n    fetchTableParams(tournamentId: number, seasonId: number) {\n      const config: TConfig = {\n        method: 'POST',\n        body: JSON.stringify({\n          proc: 'scout_tournament_players_stat',\n          params: {\n            _p_tournament_id: tournamentId,\n            _p_season_id: seasonId,\n          },\n        }),\n      }\n\n      // Делаем также запрос для параметров шестеренки\n      //@ts-ignore\n      self.getGearParamsList(0)\n\n      return callApi({\n        url,\n        config,\n        onRequest: () => {\n          //@ts-ignore\n          self.error = null\n          //@ts-ignore\n          self.isLoaded = false\n        },\n        //@ts-ignore\n        onSuccess: self._onSuccesPlayers,\n        //@ts-ignore\n        onError: self._onError,\n      })\n    },\n\n    //@ts-ignore\n    _onSuccesPlayers({ data }: {}) {\n      //@ts-ignore\n      self.players = get(data, '[0].scout_tournament_players_stat') || []\n\n      if (window.localStorage.getItem('tournamentPlayersTableStore') === null) {\n        //@ts-ignore\n        self.saveTables()\n      } else {\n        //@ts-ignore\n        //@ts-ignore\n        self.tables = JSON.parse(\n          //@ts-ignore\n          window.localStorage.getItem('tournamentPlayersTableStore'),\n        )\n      }\n\n      //@ts-ignore\n      self.isLoaded = true\n    },\n\n    _onError(error: any) {\n      //@ts-ignore\n      self.error = error\n    },\n  }))\n","import { types } from 'mobx-state-tree'\n\nimport filter from 'lodash/fp/filter'\nimport sortBy from 'lodash/fp/sortBy'\nimport flow from 'lodash/fp/flow'\n\n// @ts-ignore\nimport { saveTablesToLocalStorage } from 'module/utils/helpers'\n// @ts-ignore\nimport { defaultTableName } from 'config/tables'\n\nexport const TournamentPagePlayersActions = types.model({}).actions(self => ({\n  saveTables() {\n    const defaultTable = {\n      position: 1,\n      selectedParams: flow(\n        filter('is_default'),\n        sortBy(['gear_group_id', 'sort_order']),\n        //@ts-ignore\n      )(self.totalParams),\n      tableName: defaultTableName,\n      summaryType: 'total',\n    }\n    //@ts-ignore\n    self.tables = {\n      1: defaultTable,\n    }\n    //@ts-ignore\n    saveTablesToLocalStorage({\n      name: 'tournamentPlayersTableStore',\n      //@ts-ignore\n      tables: self.tables,\n    })\n  },\n\n  toggleShowAvatar() {\n    //@ts-ignore\n    //@ts-ignore\n    self.avatarIsVisible = !self.avatarIsVisible\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\nexport const TournamentPagePlayersViews = types.model({}).volatile(() => ({\n  avatarIsVisible: false,\n}))\n","import { types } from 'mobx-state-tree'\n\n// @ts-ignore\nimport { TableStore } from 'features/Table/models/tableModel'\n\nimport { TournamentPagePlayersApiActions } from './apiActions'\nimport { TournamentPagePlayersActions } from './actions'\nimport { TournamentPagePlayersViews } from './views'\n\nconst Param = types.model('Param', {\n  p: types.number,\n  o: types.number,\n  v: types.number,\n})\n\nconst Player = types.model('Player', {\n  f_player: types.number,\n  shirt_num: types.maybeNull(types.string),\n  name_rus: types.string,\n  name_eng: types.string,\n  f_team: types.maybeNull(types.number),\n  pos1: types.maybeNull(types.number),\n  params: types.maybeNull(types.array(Param)),\n})\n\nexport const TournamentPagePlayersTable = types.model('TournamentPlayers', {\n  storeName: 'tournamentPlayersTableStore',\n  isLoaded: false,\n  error: types.maybeNull(types.frozen({})),\n  tables: types.frozen({}),\n  players: types.array(Player),\n})\n\nexport const TournamentPlayersTableStore = types.compose(\n  // общие методы и свойства таблиц\n  TableStore,\n  // Собственные методы и свойства\n  TournamentPagePlayersTable,\n  TournamentPagePlayersApiActions,\n  TournamentPagePlayersActions,\n  TournamentPagePlayersViews,\n)\n","\nimport React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { lifecycle, compose } from 'recompose'\n\n// @ts-ignore\nimport { Tables } from 'features/Table'\n// @ts-ignore\nimport Loader from 'features/components/common/loader/Loader'\n// @ts-ignore\nimport { tableTypes } from 'config/tables'\n\ntype TProps = {\n  lexics: { page: string },\n  tournamentId: number,\n  tournamentPlayersTableStore: { isLoaded: boolean, tables: {} },\n};\n\nconst TournamentPlayersTableComponent = ({\n  tournamentId,\n  tournamentPlayersTableStore: { isLoaded, tables },\n}: TProps) =>\n  (isLoaded ? (\n    <Tables\n      tableType={tableTypes.tournamentPlayers}\n      tables={tables}\n      pageId={String(tournamentId)}\n    />\n  ) : (\n    <Loader />\n  ))\n\nexport const TournamentPlayersTableComposed = compose(\n  inject('lexics', 'tournamentPlayersTableStore', 'tournamentSeasonSelect'),\n  lifecycle({\n    componentDidMount() {\n      const {\n        //@ts-ignore\n        tournamentId,\n        //@ts-ignore\n        tournamentPlayersTableStore: { fetchTableParams },\n        //@ts-ignore\n        tournamentSeasonSelect: { selectedSeason },\n      } = this.props\n      fetchTableParams(tournamentId, selectedSeason.season_id)\n    },\n  }),\n  observer,\n)\n\n// @ts-ignore\nexport const TournamentPlayersTable = TournamentPlayersTableComposed(\n  //@ts-ignore\n  TournamentPlayersTableComponent,\n)\n","import { observer, inject } from 'mobx-react'\n\nimport get from 'lodash/get'\nimport { compose, withProps } from 'recompose'\n\nimport { utils } from 'react-sport'\n\n// @ts-ignore\nimport { getLongSuffix } from 'module/utils/helpers'\n\nexport const leftSideTrComposed = compose(\n  inject('lexics', 'tournamentPlayersTableStore'),\n  observer,\n  //@ts-ignore\n  withProps(\n    //@ts-ignore\n    ({\n      lexics: { lang },\n      rowInfo: {\n        f_player,\n        ...rowInfo\n      },\n      tournamentPlayersTableStore: { avatarIsVisible },\n    }) => {\n      const suffix = getLongSuffix(lang)\n\n      return {\n        rowspan: '',\n        avatarUrl: utils.helpers.getLogo({\n          type: 'players_volleyball',\n          id: f_player,\n        }),\n        avatarIsVisible,\n        playerProfileLink: `/players/${f_player}`,\n        shirtNumber: get(rowInfo, 'shirt_num'),\n        playerName: get(rowInfo, `name_${suffix}`),\n      }\n    },\n  ),\n)\n","import * as React from 'react'\n\nimport { TableUI, utils } from 'react-sport'\n\nimport { leftSideTrComposed } from './composed'\n\ntype TProps = {\n  rowspan: string,\n  //@ts-ignore\n  shirtNumber: string | null,\n  playerName: string,\n  avatarUrl: string,\n  playerProfileLink: string,\n  avatarIsVisible: boolean,\n}\n//@ts-ignore\nexport const LeftSideTr = leftSideTrComposed(({\n  avatarIsVisible,\n  avatarUrl,\n  playerName,\n  playerProfileLink,\n  shirtNumber,\n}: TProps) => (\n  <TableUI.LeftSideTrPlayersWrapper>\n    {avatarIsVisible && (\n      <TableUI.ResultsAvatar\n        src={avatarUrl}\n        onError={utils.helpers.onProfileImageError}\n      />\n    )}\n    <TableUI.PlayerNumber>\n      {shirtNumber}\n    </TableUI.PlayerNumber>\n    {/*\n        //@ts-ignore */}\n    <TableUI.PlayerName href={playerProfileLink}>\n      {playerName}\n    </TableUI.PlayerName>\n  </TableUI.LeftSideTrPlayersWrapper>\n))\n","import { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers } from 'recompose'\n\nimport get from 'lodash/get'\nimport find from 'lodash/find'\n\nimport { withMatchLinksGetter } from 'hocs'\n// @ts-ignore\nimport { getExtLinkHOC } from 'hocs/getExtLinkHOC'\n// @ts-ignore\nimport { clickableClassNameHOC } from 'hocs/getClickableTdClassNameHoc'\n\nimport { TPropsTrComposed } from './types'\n\nexport const TrComposed = compose<any, TPropsTrComposed>(\n  inject('videoLink', 'lexics', 'shootsRange', 'matchLinks'),\n  withMatchLinksGetter,\n  getExtLinkHOC,\n  clickableClassNameHOC,\n  //@ts-ignore\n  withHandlers({\n    getStat: ({ rowInfo: { params } }) =>\n      //@ts-ignore\n      paramId => String(get(find(params, { p: paramId }), 'v', 0)),\n  }),\n  observer,\n)\n","import React from 'react'\nimport map from 'lodash/map'\n\nimport { TableUI } from 'react-sport'\nimport { LeftSideTr } from '../LeftSideTr'\nimport { TrComposed } from './composed'\n\n// import { TPropsTr } from './types'\n\ntype TProps = {\n  activeId: string,\n  //@ts-ignore\n  getClassName: (param: {}, activeId: string) => void,\n  rowInfo: {},\n  pageId: string,\n  selectedParams: Array<{}>,\n  getStat: (param: number) => string,\n}\n\n// Строка со статистикой по игроку\nexport const Tr = TrComposed(\n  ({\n    activeId,\n    getClassName,\n    getStat,\n    pageId,\n    rowInfo,\n    selectedParams,\n  }: TProps) => (\n    <tr className='stats-table__table-row'>\n      {/*\n          //@ts-ignore */}\n      <LeftSideTr rowInfo={rowInfo} pageId={pageId} />\n      {map(selectedParams, param => (\n        <TableUI.Td\n          //@ts-ignore\n          key={`${param.param_id}_${param.gear_group_id}`}\n            //@ts-ignore\n          className={getClassName(param, activeId)}\n            //@ts-ignore\n          value={getStat(param.param_id)}\n          onClick={() => { }}\n        />\n      ))}\n    </tr>\n  ),\n)\n","import React, { Fragment } from 'react'\nimport { inject } from 'mobx-react'\n\nimport { compose, withHandlers } from 'recompose'\n\nimport map from 'lodash/map'\nimport find from 'lodash/find'\nimport get from 'lodash/get'\n\nimport { TableUI } from 'react-sport'\n\n// @ts-ignore\nimport { emptyStatToZero } from 'module/utils/helpers/emptyStatToZero'\nimport Loader from 'features/components/common/loader/Loader'\n// @ts-ignore\nimport { THead, TBody } from 'features/Table'\n\nimport { TParam } from 'features/Table/models/tableModel'\nimport { Tr } from './Tr'\n\ntype TProps = {\n  pageId: string,\n  sortAsc: boolean,\n  activeId: string,\n  table: {\n    selectedParams: Array<TParam>,\n  },\n  setSortedId: () => {},\n  currentStore: {\n    isLoaded: boolean,\n  },\n  param?: TParam,\n  getPlayersList: () => Array<{}>,\n};\n\n// Основной блок таблицы со статистикой для страницы турнира\nconst TournamentPlayersComponent = ({\n  activeId,\n  currentStore: { isLoaded },\n  getPlayersList,\n  pageId,\n  setSortedId,\n  sortAsc,\n  table,\n}: TProps) => (\n  <Fragment>\n    <div className='stats-table__wrapper'>\n      <table className='stats-table__table'>\n        <TableUI.Thead>\n          {/*\n              // @ts-ignore */}\n          <THead table={table} setSortedId={setSortedId} />\n        </TableUI.Thead>\n        {isLoaded ? (\n          <Fragment>\n            {/*\n                //@ts-ignore */}\n            <TBody\n              selectedParams={table.selectedParams}\n              rows={getPlayersList()}\n              pageId={pageId}\n              sortAsc={sortAsc}\n              activeId={activeId}\n              Tr={Tr}\n            />\n          </Fragment>\n        ) : (\n          <Loader />\n        )}\n      </table>\n    </div>\n  </Fragment>\n)\n\nconst tournamentPlayersComposed = compose(\n  inject('tournamentPlayersTableStore'),\n  //@ts-ignore\n  withHandlers({\n    /**\n     * Получение списка матчей, отсортированного по значению выбранного параметра\n     * @param {boolean} sortAsc - флаг для сортировки (по убыванию или по возрастанию)\n     */\n    getPlayersList: ({\n      param,\n      tournamentPlayersTableStore: { players },\n    }) => () =>\n      map(players, (player) => {\n        const sortedValue = get(\n          find(player.params, { p: param.param_id }),\n          'v',\n          0,\n        )\n        return {\n          ...player,\n          param,\n          sortBy: emptyStatToZero(sortedValue),\n        }\n      }),\n  }),\n)\n\n// @ts-ignore\nexport const TournamentPlayers = tournamentPlayersComposed(\n  //@ts-ignore\n  TournamentPlayersComponent,\n)\n","import { inject, observer } from 'mobx-react'\nimport { compose, withProps } from 'recompose'\n\nimport { getLongSuffix } from 'module/utils/helpers'\n\nimport { clickableClassNameHOC } from 'hocs/getClickableTdClassNameHoc'\n\nimport {\n  TPropsInner,\n  TPropsOuter,\n  TWithPropsInner,\n  TWithPropsOuter,\n} from './types'\n\nexport const TrMatchComposed = compose<TPropsInner, TPropsOuter>(\n  inject('videoLink', 'lexics'),\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(({\n    lexics: { lang },\n    rowInfo,\n  }) => {\n    const suffix = getLongSuffix(lang)\n    const firstName = rowInfo[`firstname_${suffix}`]\n    const lastName = rowInfo[`lastname_${suffix}`]\n\n    return {\n      playerName: `${firstName} ${lastName}`,\n    }\n  }),\n  clickableClassNameHOC,\n  observer,\n)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport map from 'lodash/map'\n\nimport { Td } from 'features/Table/components/Td'\n\nimport { TrMatchComposed } from './composed'\n\nimport { TPropsInner } from './types'\n\n// Строка со статистикой по матчу\nconst TrMatchComponent = ({\n  activeId,\n  getClassName,\n  playerName,\n  rowInfo,\n  selectedParams,\n  tableStats,\n}: TPropsInner) => (\n  <tr className='stats-table__table-row'>\n    <td className='left-side-tr'>\n      <Link target='_blank' to={`/players/${rowInfo.f_player}`}>\n        <div className='stats-cell'>\n          <div className='player-number'>{rowInfo.num}</div>\n          <div className='player-name'>{playerName}</div>\n        </div>\n      </Link>\n    </td>\n    {map(selectedParams, param => (\n      <td\n        key={`${param.param_id}_${param.gear_group_id}`}\n        className={getClassName(param, activeId)}\n      >\n        <table>\n          <tbody>\n            <tr>\n              <Td\n                id={rowInfo.f_player}\n                param={param}\n                tableStats={tableStats}\n                rowInfo={rowInfo}\n                tableType='matchPlayersTable'\n              />\n            </tr>\n          </tbody>\n        </table>\n      </td>\n    ))}\n  </tr>\n)\n\nexport const TrMatch = TrMatchComposed(TrMatchComponent)\n","import React, { Fragment } from 'react'\nimport { observer } from 'mobx-react'\n\nimport { TableUI } from 'react-sport'\n\nimport { THead, TBody } from 'features/Table'\n\nimport { TrMatch } from '../Tr'\n\ntype TProps = {\n  table: {},\n  setSortedId: () => void,\n  tableStats: Array<{}>,\n  pageId: string,\n  sortAsc: boolean,\n  activeId: string,\n  param: {},\n  rows: Array<{}>,\n}\n\nexport const Table = observer(\n  ({\n    activeId,\n    pageId,\n    param,\n    rows,\n    setSortedId,\n    sortAsc,\n    table,\n    tableStats,\n  }: TProps) => (\n    <Fragment>\n      <TableUI.Thead>\n        {/*\n        //@ts-ignore */}\n        <THead table={table} setSortedId={setSortedId} />\n      </TableUI.Thead>\n      {/*\n      //@ts-ignore */}\n      <TBody\n        //@ts-ignore\n        selectedParams={table.selectedParams}\n        rows={rows}\n        tableStats={tableStats}\n        pageId={pageId}\n        sortAsc={sortAsc}\n        activeId={activeId}\n        param={param}\n        Tr={TrMatch}\n      />\n    </Fragment>\n  ),\n)\n","import { inject, observer } from 'mobx-react'\n\nimport { compose, withProps } from 'recompose'\nimport reduce from 'lodash/reduce'\nimport map from 'lodash/map'\nimport isEmpty from 'lodash/isEmpty'\nimport filter from 'lodash/filter'\n\nimport { emptyStatToZero } from 'module/utils/helpers/emptyStatToZero'\nimport { getStatValue } from 'module/utils/helpers/getStatValue'\n\nimport {\n  TProps,\n  TWithPropsInner,\n  TWithPropsOuter,\n  TComposedInner,\n  TStats,\n} from './types'\n\nexport const tableComposed = compose<TComposedInner, TProps>(\n  inject('matchTable', 'matchProfile'),\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(({\n    matchTable: {\n      playerList,\n      tableStats,\n    },\n    param,\n    table: { team },\n  }) => {\n    const playerListByTeams = playerList || []\n    const filteredPlayerStats = ({ f_player }: { f_player: number }): TStats =>\n      filter(tableStats, { f_player })\n\n    // Добавляем поле sortBy для каждого игрока, если есть параметр, по которому сортировать\n    const teamsPlayersStats = isEmpty(param)\n      ? playerListByTeams\n      : reduce(\n        playerListByTeams,\n        (\n          acc: {[key: number] : {}},\n          curr: {},\n          team: number,\n        ) => {\n          acc[team] = map(curr, (player: {f_player: number}) => {\n            const sortedValue = getStatValue(\n              param,\n              filteredPlayerStats(player),\n            )\n            return {\n              ...player,\n              sortBy: emptyStatToZero(sortedValue),\n            }\n          })\n          return acc\n        },\n        {},\n      )\n\n    return {\n      activeTeams: team,\n      teamsPlayersStats,\n    }\n  }),\n  observer,\n)\n","import React, { Fragment } from 'react'\n\nimport includes from 'lodash/includes'\n\nimport { Table } from './Table'\nimport { tableComposed } from './tableComposed'\n\nimport { TComposedInner } from './types'\n\n// Основной блок таблицы со статистикой для страницы матча\nexport const TableMatchWrapper = tableComposed(\n  ({\n    activeId,\n    activeTeams,\n    currentStore: { tableStats },\n    matchProfile: {\n      data: { team1_id, team2_id },\n    },\n    pageId,\n    param,\n    setSortedId,\n    sortAsc,\n    table,\n    teamsPlayersStats,\n  }: TComposedInner) => (\n    <div className='stats-table__wrapper'>\n      <table className='stats-table__table'>\n        <Fragment>\n          {includes(activeTeams, 'showHomeTeam') && (\n            <Table\n              rows={teamsPlayersStats[team1_id]}\n              tableStats={tableStats}\n              table={table}\n              setSortedId={setSortedId}\n              pageId={pageId}\n              sortAsc={sortAsc}\n              activeId={activeId}\n              param={param}\n            />\n          )}\n          {includes(activeTeams, 'showOppTeam') && (\n            <Table\n              rows={teamsPlayersStats[team2_id]}\n              tableStats={tableStats}\n              table={table}\n              setSortedId={setSortedId}\n              pageId={pageId}\n              sortAsc={sortAsc}\n              activeId={activeId}\n              param={param}\n            />\n          )}\n        </Fragment>\n      </table>\n    </div>\n  ),\n)\n","import { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withHandlers,\n} from 'recompose'\nimport get from 'lodash/get'\n\nimport { clickableClassNameHOC } from 'hocs/getClickableTdClassNameHoc'\n\nimport { TFoot as TFootComponent } from 'features/Table'\n\nconst TfootComposed = compose(\n  inject(\n    'selectedMatches',\n    'matches',\n    'shootsRange',\n    'lexics',\n    'videoLink',\n    'teamTable',\n    'playerTable',\n  ),\n  //@ts-ignore\n  withHandlers({\n    /**\n    * Функция для открытия попап окна с видео повторами\n    * @param {number} param_id - id параметра\n    * @param {string} lexical_formula - название параметра\n    * @param {array} tableStats - массив всех параметров\n    * @param {number} id - id игрока или команды\n    * @param {boolean} forOpp - флаг для фильтрации. Ищем для своей команды или для команд соперника\n    */\n    getExtLink: ({\n      lexics: { lang, page },\n      shootsRange,\n      tableStats,\n      videoLink: { request },\n    }) => (\n      {\n        //@ts-ignore\n        lexical_formula,\n        //@ts-ignore\n        param_id,\n      },\n      //@ts-ignore\n      id,\n      //@ts-ignore\n      forOpp,\n    ) => {\n      //@ts-ignore\n      const checkId = (teamId) => {\n        if (page === 'player') {\n          return true\n        }\n        if (forOpp) {\n          return teamId !== id\n        }\n        return teamId === id\n      }\n\n      // Фильтруем сначала по команде\n      const events = tableStats.filter(\n        //@ts-ignore\n        ({ f_param, f_team }) => (\n          f_param === param_id && checkId(f_team)),\n      )\n      const filteredEvents = events.map(\n        (\n          { f_match_event_ids_json }\n          //@ts-ignore\n          : { f_match_event_ids_json: Array<number | null> },\n        ) => f_match_event_ids_json,\n      )\n        .flat()\n      // удаляем все null из массива эвентов\n        .filter(Boolean)\n\n      if (events.length) {\n        request({\n          events: filteredEvents,\n          lang,\n          lexical_formula,\n          range: shootsRange,\n          type: 'tablesFooter',\n        })\n      }\n    },\n    /**\n    * Функция установки выбранного типа итогового значения в таблице\n    * @param {string} type - типа итогового значения\n    */\n    setType: ({\n      lexics: { page },\n      playerTable,\n      teamTable,\n    }) => (type: string, position: number) => {\n      if (page === 'team') {\n        return teamTable.changeValueType(type, position)\n      }\n      return playerTable.changeValueType(type, position)\n    },\n    /**\n    * Функция фильтрации статистики по всем матчам только по выбранным матчам.\n    И для команды соперника или нашей\n    * @param {string} page - игрок или команда\n    * @param {string} pageId - id игрока/команды\n    * @param {array} tableStats - массив параметров\n    */\n    getActualMatchesList: ({\n      lexics: { page },\n      selectedMatches,\n      tableStats,\n    }) => ({\n      forOpps,\n      pageId,\n    }: {\n      pageId: string,\n      forOpps: boolean,\n    }) => {\n      const selectedMatchesList: Array<number> = get(selectedMatches, `${page}.${pageId}`, [])\n      // Для команды соперника\n      if (forOpps) {\n        //@ts-ignore\n        return tableStats.filter(({ f_match, f_team }) => (\n          f_team !== +pageId && selectedMatchesList.includes(f_match)))\n      }\n      // для страницы игрока возвращем просто весь массив со значением параметров\n      // (нам нужны все для среднего значения)\n      if (page === 'player') {\n        //@ts-ignore\n\n        return tableStats.filter(({ f_match }) => (\n          selectedMatchesList.includes(f_match)))\n      }\n      // Для текущей команды\n      //@ts-ignore\n      return tableStats.filter(({ f_match, f_team }) => (\n        f_team === +pageId && selectedMatchesList.includes(f_match)))\n    },\n  }),\n  clickableClassNameHOC,\n  observer,\n)\n\nexport const TFoot = TfootComposed(TFootComponent)\n","import { observer, inject } from 'mobx-react'\n\nimport get from 'lodash/get'\nimport find from 'lodash/find'\nimport reduce from 'lodash/reduce'\nimport map from 'lodash/map'\nimport includes from 'lodash/includes'\nimport {\n  compose,\n  withProps,\n} from 'recompose'\n\nimport { withMatchLinksGetter } from 'hocs'\nimport { clickableClassNameHOC } from 'hocs/getClickableTdClassNameHoc'\n\nimport {\n  TWithPropsInner,\n  TWithPropsOuter,\n} from './types'\n\nimport { TStat } from '../types'\n\nexport const trComposed = compose(\n  inject(\n    'videoLink',\n    'lexics',\n    'shootsRange',\n    'matchLinks',\n    'matches',\n  ),\n  withMatchLinksGetter,\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(({\n    lexics: { page },\n    matches: { list },\n    pageId,\n    rowInfo: { f_match },\n    selectedParams,\n    tableStats,\n  }) => {\n    const selectedParamsIds = map(selectedParams, 'param_id')\n    const matchesList = get(list, [pageId, 'matches'], [])\n\n    // Разделяем всю статистику по командам\n    const tableStatsReduced = reduce(tableStats, (\n      acc: {[key: string]: Array<TStat>},\n      curr: TStat,\n    ) => {\n      if (\n        !includes(selectedParamsIds, curr.f_param)\n        || curr.f_match !== f_match\n      ) {\n        return acc\n      }\n      //f_player или f_team\n      if (get(curr, `f_${page}`) === Number(pageId)) {\n        acc.home.push(curr)\n        return acc\n      }\n\n      acc.guest.push(curr)\n      return acc\n    }, {\n      guest: [],\n      home: [],\n    })\n\n    return {\n      rowInfo: find(matchesList, { f_match }),\n      tableStats: tableStatsReduced,\n      tableType: page === 'team' ? 'teamMatches' : 'playerMatches',\n    }\n  }),\n  clickableClassNameHOC,\n  observer,\n)\n","import { observer, inject } from 'mobx-react'\n\nimport {\n  dateWithYear,\n  getSuffix,\n  getAbbr,\n  //@ts-ignore\n} from 'module/utils/helpers'\n\nimport { compose, withProps } from 'recompose'\nimport get from 'lodash/get'\n\nexport const leftSideTrComposed = compose(\n  inject('lexics'),\n  observer,\n  //@ts-ignore\n  withProps(\n    //@ts-ignore\n    ({\n      handleClick,\n      lexics: { lang },\n      pageId,\n      rowInfo: {\n        f_match,\n        home_match,\n        match_date,\n        opponent_score,\n        score,\n        ...rowInfo\n      },\n      showOpponentStats,\n    }) => {\n      const suffix = getSuffix(lang)\n      const oppTeamName = get(rowInfo, `name_opponent_${suffix}`)\n      const teamName = get(rowInfo, `name_${suffix}`)\n\n      return {\n        tdClassName: home_match === '@' ? 'opponent' : '',\n        rowspan: '',\n        handleClick: handleClick(f_match, pageId),\n        titleClassName: 'match-score',\n        showOpponent: showOpponentStats,\n        ownerTeamName: getAbbr(teamName),\n        oppTeamName: getAbbr(oppTeamName),\n        titleScore: `${score}:${opponent_score}`,\n        shortNameOpponent: oppTeamName,\n        matchDate: dateWithYear(match_date),\n        match: {\n          has_video: false,\n          home_match,\n          f_match,\n        },\n      }\n    },\n  ),\n)\n","import * as React from 'react'\nimport { PlayButton, MatchName, TableUI } from 'react-sport'\n// @ts-ignore\nimport { MatchPopup } from 'features/Table'\nimport { leftSideTrComposed } from './composed'\n\ntype TProps = {\n  showOpponent?: boolean,\n  tdClassName: string,\n  rowspan: string,\n  match: {\n    has_video: boolean,\n    home_match: string,\n    f_match: number,\n  },\n  //@ts-ignore\n  handleClick: (value: SyntheticEvent<HTMLButtonElement>) => void,\n  titleScore: string,\n  titleClassName: string,\n  matchDate: string,\n  shortNameOpponent: string,\n  ownerTeamName: string,\n  oppTeamName: string,\n  matchPopupOpened: boolean,\n  isFetching: boolean,\n  links: {},\n  toggleClose: () => {},\n}\n\n// @ts-ignore\nexport const LeftSideTr = leftSideTrComposed(\n  //@ts-ignore\n  ({\n    handleClick,\n    isFetching,\n    links,\n    match: { f_match, has_video, home_match },\n    matchDate,\n    matchPopupOpened,\n    oppTeamName,\n    ownerTeamName,\n    rowspan,\n    shortNameOpponent,\n    showOpponent,\n    tdClassName,\n    titleClassName,\n    titleScore,\n    toggleClose,\n  }: TProps) => (\n    //@ts-ignore\n    <TableUI.LeftSideTrWrapper rowSpan={rowspan} className='left-side-tr'>\n      {matchPopupOpened && (\n      //@ts-ignore\n        <MatchPopup\n          isFetching={isFetching}\n          links={links}\n          f_match={f_match}\n          toggleClose={toggleClose}\n        />\n      )}\n      <TableUI.PlayButtonWrapper>\n        {/*\n        //@ts-ignore */}\n        {has_video && <PlayButton handleClick={handleClick} />}\n      </TableUI.PlayButtonWrapper>\n\n      <TableUI.MatchDate>{matchDate}</TableUI.MatchDate>\n      {/*\n        //@ts-ignore */}\n      <TableUI.MatchNameWrapper home_match={home_match}>\n        {/*\n        //@ts-ignore */}\n        <TableUI.MatchSide className={tdClassName}>\n          {home_match}\n        </TableUI.MatchSide>\n        {/*\n        //@ts-ignore */}\n        <MatchName handleClick={handleClick} teamName={shortNameOpponent} />\n      </TableUI.MatchNameWrapper>\n      {/*\n        //@ts-ignore */}\n      <TableUI.MatchScoreWrapper className={titleClassName}>\n        {titleScore}\n      </TableUI.MatchScoreWrapper>\n\n      {showOpponent && (\n        <TableUI.MatchScoreForOppWrapper>\n          <TableUI.MatchAbbrName side='home'>\n            {ownerTeamName}\n          </TableUI.MatchAbbrName>\n          <TableUI.MatchAbbrName side='opp'>\n            {oppTeamName}\n          </TableUI.MatchAbbrName>\n        </TableUI.MatchScoreForOppWrapper>\n      )}\n    </TableUI.LeftSideTrWrapper>\n  ),\n)\n","import React from 'react'\n\nimport map from 'lodash/map'\n\nimport { Td } from 'features/Table/components/Td'\n\nimport { TPropsTr } from './types'\n\nimport { trComposed } from './composed'\nimport { LeftSideTr } from '../LeftSideTr'\n\n// Строка со статистикой по матчу\nexport const Tr = trComposed(\n  //@ts-ignore\n  ({\n    activeId,\n    getClassName,\n    getPost,\n    matchLinks: { isFetching, links },\n    matchPopupOpened,\n    pageId,\n    rowInfo,\n    selectedParams,\n    showOpponentStats,\n    tableStats,\n    tableType,\n    toggleClose,\n  }: TPropsTr) => (\n    <tr className='stats-table__table-row'>\n      {/*\n      //@ts-ignore */}\n      <LeftSideTr\n        showOpponentStats={showOpponentStats}\n        rowInfo={rowInfo}\n        pageId={pageId}\n        handleClick={getPost}\n        matchPopupOpened={matchPopupOpened}\n        isFetching={isFetching}\n        links={links}\n        toggleClose={toggleClose}\n      />\n      {map(selectedParams, param => (\n        <td\n          key={`${param.param_id}_${param.gear_group_id}`}\n          className={getClassName(param, activeId)}\n        >\n          <table>\n            <tbody>\n              <tr>\n                <Td\n                  id={Number(pageId)}\n                  param={param}\n                  tableStats={tableStats.home}\n                  rowInfo={rowInfo}\n                  tableType={tableType}\n                />\n              </tr>\n            </tbody>\n          </table>\n          {showOpponentStats && (\n            <table>\n              <tbody>\n                <tr>\n                  <Td\n                    id={rowInfo.f_team_opponent}\n                    param={param}\n                    tableStats={tableStats.guest}\n                    rowInfo={rowInfo}\n                    tableType={tableType}\n                  />\n                </tr>\n              </tbody>\n            </table>\n          )}\n        </td>\n      ))}\n    </tr>\n  ),\n)\n","import React, { Fragment } from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers } from 'recompose'\nimport get from 'lodash/get'\nimport filter from 'lodash/filter'\nimport map from 'lodash/map'\n\nimport { TableUI } from 'react-sport'\n\nimport { getStatValue } from 'module/utils/helpers/getStatValue'\nimport { emptyStatToZero } from 'module/utils/helpers/emptyStatToZero'\n\nimport { THead, TBody } from 'features/Table'\n\nimport { TFoot } from './HOCs/TFootHOC'\nimport { Tr } from './Tr'\n\nimport {\n  TProps,\n  TPropsOuter,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n} from './types'\n\nexport const CommonTableComponent = ({\n  activeId,\n  currentStore,\n  getMatchesList,\n  lexics: { page },\n  pageId,\n  param,\n  setSortedId,\n  sortAsc,\n  table,\n}: TProps) => (\n  <div className='stats-table__wrapper'>\n    <table className='stats-table__table'>\n      <TableUI.Thead>\n        {/*\n        //@ts-ignore */}\n        <THead table={table} setSortedId={setSortedId} />\n      </TableUI.Thead>\n      {/* Тут пока используем в т.ч. isFetching, т.к. не все сторы переписаны на один стиль */}\n      {currentStore.isLoaded || !currentStore.isFetching ? (\n        <Fragment>\n          {/*\n          //@ts-ignore */}\n          <TBody\n            selectedParams={table.selectedParams}\n            rows={getMatchesList(pageId, param)}\n            pageId={pageId}\n            tableStats={currentStore.tableStats}\n            sortAsc={sortAsc}\n            activeId={activeId}\n            showOpponentStats={currentStore.showOpponentStats}\n            Tr={Tr}\n          />\n          {/*\n          //@ts-ignore */}\n          <TFoot\n            table={table}\n            tableStats={currentStore.tableStats}\n            pageId={pageId}\n            page={page}\n            activeId={activeId}\n            showOpponentStats={currentStore.showOpponentStats}\n          />\n        </Fragment>\n      ) : (\n        <tbody className='loader-wrapper' />\n      )}\n    </table>\n  </div>\n)\n\nconst CommonTableComposed = compose<TProps, TPropsOuter>(\n  inject('lexics', 'selectedMatches'),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    getMatchesList: ({\n      currentStore: { tableStats },\n      lexics: { page },\n      selectedMatches,\n    }) => (pageId, param) => {\n      const selectedMatchesList = get(selectedMatches, `${page}.${pageId}`, [])\n      const tableStatsFiltered = (match: number) => (\n        filter(\n          tableStats,\n          ({\n            f_match,\n            f_param,\n            f_player,\n            f_team,\n          }) => {\n            const pageType = page === 'player' ? f_player : f_team\n            return (\n              f_match === match\n            && pageType === +pageId\n            && f_param === param.param_id\n            )\n          },\n        )\n      )\n\n      return map(selectedMatchesList, (match) => {\n        const sortedValue = getStatValue(param, tableStatsFiltered(match))\n        return {\n          f_match: match,\n          param,\n          sortBy: emptyStatToZero(sortedValue),\n        }\n      })\n    },\n  }),\n  observer,\n)\n\nexport const CommonTable = CommonTableComposed(CommonTableComponent)\n","import React from 'react'\nimport {\n  compose,\n  withHandlers,\n} from 'recompose'\n\nimport { TournamentTable } from 'features/TournamentPageMatchesTable'\nimport { TournamentPlayers } from 'features/TournamentPagePlayersTable'\nimport { TableMatchWrapper } from 'features/MatchProfileTable'\nimport { CommonTable } from 'features/CommonTable'\n\nimport {\n  TPropsInner,\n  TPropsOuter,\n  TWithHandlersInner,\n  TTables,\n} from './types'\n\nconst TableContentComponent = ({\n  getTable,\n  tableType,\n}: TPropsInner) => getTable(tableType) || null\n\nconst tableContentComposed = compose<TPropsInner, TPropsOuter>(\n  withHandlers<TPropsOuter, TWithHandlersInner>({\n    getTable: ({ ...props }) => (tableType) => {\n      const tables: TTables = {\n        //@ts-ignore\n        matchPlayersTable: <TableMatchWrapper {...props} />,\n        playerMatches: <CommonTable {...props} />,\n        teamMatches: <CommonTable {...props} />,\n        tournamentMatches: <TournamentTable {...props} />,\n        tournamentPlayers: <TournamentPlayers {...props} />,\n      }\n\n      if (!tableType) return null\n\n      return tables[tableType]\n    },\n  }),\n)\n\nexport const TableContent = tableContentComposed(TableContentComponent)\n","\nimport React, { Fragment } from 'react'\n\nimport { compose, withHandlers } from 'recompose'\n\nimport { TableHeaderSettingsButton, T9n } from 'react-sport'\n\n// @ts-ignore\nimport { tableHeaderButtons } from 'module/utils/helpers'\n\ntype TProps = {\n  handleNewPopupAction: () => void,\n  handlePopupAction: () => void,\n  deleteTable: () => void,\n  moveTableUp: () => void,\n  moveTableDown: () => void,\n  resetTable: () => void,\n  currentStore: {\n    tables: {},\n  },\n  table: {},\n}\n\nconst TableActionsComponent = ({\n  currentStore,\n  deleteTable,\n  handleNewPopupAction,\n  handlePopupAction,\n  moveTableDown,\n  moveTableUp,\n  resetTable,\n}: TProps) => (\n  <Fragment>\n    {tableHeaderButtons(\n      handleNewPopupAction,\n      deleteTable,\n      moveTableUp,\n      moveTableDown,\n      resetTable,\n      currentStore.tables,\n    ).map(({ action, buttonType, t }) => (\n      <TableHeaderSettingsButton\n        onClick={action}\n        buttonType={buttonType}\n        key={t}\n      >\n        <T9n t={t} />\n      </TableHeaderSettingsButton>\n    ))}\n    <a className='stats-table__action-link' onClick={handlePopupAction}>\n      <i className='icon-settings' />\n    </a>\n  </Fragment>\n)\n\nconst TableActionsComposed = compose(\n  //@ts-ignore\n  withHandlers({\n    // Функция удаления таблицы\n    deleteTable: ({\n      currentStore: { deleteTable, storeName },\n      table: { position },\n    }) => () => deleteTable(position, storeName),\n\n    // Поднятие таблицы в списке\n    moveTableUp: ({\n      currentStore: { moveTable, storeName },\n      table: { position },\n    }) => () => moveTable(position, 'up', storeName),\n\n    // Спуск таблицы вниз по списку\n    moveTableDown: ({\n      currentStore: { moveTable, storeName },\n      table: { position },\n    }) => () => moveTable(position, 'down', storeName),\n\n    // Функция возврата таблице значений по-умолчанию\n    resetTable: ({ currentStore: { resetTable, storeName } }) => () =>\n      resetTable(storeName),\n  }),\n)\n\n// @ts-ignore\nexport const TableActions = TableActionsComposed(TableActionsComponent)\n","import React from 'react'\n\nimport { DownloadLinksComponent } from 'react-sport'\n\nimport { GearPopup } from 'features/GearPopup'\nimport { TableHeader } from 'features/TableHeader/components/'\nimport { EditTableName } from 'features/TableName/components/EditTableName'\n\nimport { tableComposed } from './composed'\nimport { TableContent } from '../TableContent'\nimport { TableActions } from '../TableActions'\n\nimport 'features/Table/styles/StatsTable.scss'\nimport 'features/Table/styles/TablePopup.scss'\n\nimport { TPropsInner } from './types'\n\n// Таблица со статистикой по выбранным матчам\nconst TableComponent = ({\n  activeId,\n  currentStore,\n  getClassName,\n  getLinks,\n  handleNewPopupAction,\n  handlePopupAction,\n  newPopupOpened,\n  pageId,\n  param,\n  popupOpened,\n  saveReport,\n  setSortedId,\n  sortAsc,\n  table,\n  tableType,\n}: TPropsInner) => (\n  <div className='stats-table'>\n    <div className='stats-table__header'>\n      <div className='stats-table__header-left'>\n        <TableHeader\n          table={table}\n            //@ts-ignore\n          tableType={tableType}\n          currentStore={currentStore}\n          getClassName={getClassName}\n        />\n      </div>\n      <div className='stats-table__name'>\n        <EditTableName table={table} currentStore={currentStore} />\n      </div>\n      <div className='stats-table__actions'>\n        {/*\n          //@ts-ignore */}\n        <DownloadLinksComponent links={getLinks()} reportHandle={saveReport} />\n        {/*\n          //@ts-ignore */}\n        <TableActions\n          currentStore={currentStore}\n          handleNewPopupAction={handleNewPopupAction}\n          handlePopupAction={handlePopupAction}\n          table={table}\n        />\n      </div>\n    </div>\n    <TableContent\n      activeId={activeId}\n      currentStore={currentStore}\n      pageId={pageId}\n      param={param}\n      setSortedId={setSortedId}\n      sortAsc={sortAsc}\n      table={table}\n      tableType={tableType}\n    />\n    {(popupOpened || newPopupOpened) && (\n      <GearPopup\n        table={table}\n        handlePopupAction={handlePopupAction}\n        handleNewPopupAction={handleNewPopupAction}\n        popupOpened={popupOpened}\n        newPopupOpened={newPopupOpened}\n        currentStore={currentStore}\n        newPopup={newPopupOpened}\n      />\n    )}\n  </div>\n)\n\nexport const Table = tableComposed(TableComponent)\n","import React, { Fragment } from 'react'\n\nimport map from 'lodash/map'\n\nimport { Table } from './Table'\nimport { TParam } from '../models/tableModel'\n\ntype TProps = {\n  pageId: string,\n  tableType?: string,\n  tables: {\n    [key: number]: {\n      position: number,\n      selectedParams: Array<TParam>,\n    },\n  },\n}\n\nexport const Tables = ({\n  pageId,\n  tables,\n  tableType,\n}: TProps) => (\n  <Fragment>\n    {map(\n      tables,\n      table => (\n        <Table\n          tableType={tableType}\n          key={table.position}\n          pageId={pageId}\n          table={table}\n        />\n      ),\n    )}\n  </Fragment>\n)\n","\nimport { types, flow } from 'mobx-state-tree'\n\nimport get from 'lodash/get'\nimport reduce from 'lodash/reduce'\nimport find from 'lodash/find'\nimport pick from 'lodash/pick'\nimport filter from 'lodash/filter'\n\nimport { callApi } from 'react-sport'\n// @ts-ignore\nimport routes from 'config/routes'\n\ntype TConfig = {\n  method: string,\n  body: string,\n};\n\ntype TFetch = {\n  lang: string,\n  matchId: string,\n  params: Array<number>,\n};\n\nconst url: string = `${routes.API_ROOT}/data`\n\nexport const PlayersCompareApiActions = types.model({}).actions(self => ({\n  // Запрос при первом рендере компонента.\n  basicFetch: flow(function* basicFetch({ lang, matchId, params }: TFetch) {\n    try {\n      // Запрашиваем список всех игроков для обеих команд\n      //@ts-ignore\n      yield self.fetchPlayers(matchId)\n\n      // Предвыбираем по умолчанию первых игроков в каждой команде\n      //@ts-ignore\n      const defaultPlayers = reduce(\n        //@ts-ignore\n        self.playerList,\n        (acc, curr) => {\n          if (!find(acc, { f_team: curr.f_team })) {\n            //@ts-ignore\n            acc.push(curr)\n          }\n          return acc\n        },\n        [],\n      )\n      //@ts-ignore\n      self.updateSelectedPlayers({\n        lang,\n        matchId,\n        players: defaultPlayers,\n      })\n\n      // Запрашиваем данные по выбранным игрокам\n      //@ts-ignore\n      yield self.fetch({\n        lang,\n        matchId,\n        params,\n      })\n\n      // Запрашиваем список всех параметров для шестеренки и групп\n      //@ts-ignore\n      yield self.getGearParamsList(1)\n      // Ставим по умолчанию выбранные параметры (чтобы при открытии шестеренки они были выбраны)\n      //@ts-ignore\n      self.setDefaultSelectedParams()\n    } catch (error) {\n      //@ts-ignore\n      self._onError(error)\n    }\n  }),\n\n  fetch({ lang, matchId, params }: TFetch) {\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'scout_players_all_stat',\n        params: {\n          _p_match_id: +matchId,\n          //@ts-ignore\n          _p_player_arr: Object.values(self.selectedPlayers),\n          _p_param_arr: params,\n          _p_lang_id: Number(lang !== 'ru'),\n        },\n      }),\n    }\n    return callApi({\n      url,\n      config,\n      //@ts-ignore\n      onRequest: self._onRequest,\n      //@ts-ignore\n      onSuccess: self._onSuccess,\n      //@ts-ignore\n      onError: self._onError,\n    })\n  },\n\n  _onRequest() {\n    //@ts-ignore\n    self.stats = []\n    //@ts-ignore\n    self.playersInfo = null\n    //@ts-ignore\n    self.isLoaded = false\n  },\n\n  _onSuccess(json: { data: Array<{}> } = { data: [] }) {\n    const players = get(json.data, '[0].scout_players_all_stat') || []\n    //@ts-ignore\n    self.stats = get(\n      //@ts-ignore\n      find(players, 'params_info', {}),\n      'params_info',\n      [],\n    )\n    //@ts-ignore\n    //@ts-ignore\n    //@ts-ignore\n    self.playersInfo = players.reduce((acc, current) => {\n      acc[current.f_player] = pick(current, [\n        'f_player',\n        'f_team',\n        'params',\n        'photo_player',\n        'photo_team',\n      ])\n      return acc\n    }, {})\n    //@ts-ignore\n    self.error = null\n    //@ts-ignore\n    self.isLoaded = true\n  },\n\n  fetchPlayers(matchId: number | string) {\n    const url: string = `${routes.API_ROOT}/data`\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'ask_players_list_match',\n        params: {\n          _v_match_id: matchId,\n          _v_played: true,\n        },\n      }),\n    }\n    return callApi({\n      url,\n      config,\n      onRequest: () => {},\n      //@ts-ignore\n      onSuccess: self._onSuccessPlayers,\n      //@ts-ignore\n      onError: self._onError,\n    })\n  },\n\n  //@ts-ignore\n  _onSuccessPlayers(json: { data?: Array<any> | null } = []) {\n    //@ts-ignore\n    self.playerList = filter(json.data, 'played')\n  },\n\n  _onError(error: any) {\n    //@ts-ignore\n    self.isLoaded = false\n    //@ts-ignore\n    self.error = error\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\nimport map from 'lodash/map'\nimport size from 'lodash/size'\nimport isEmpty from 'lodash/isEmpty'\nimport compact from 'lodash/compact'\nimport forEach from 'lodash/forEach'\nimport filter from 'lodash/filter'\nimport includes from 'lodash/includes'\n\ntype TUpdateSelectedPlayers = {\n  lang: string,\n  matchId: string,\n  players: Array<{\n    f_team: number,\n    f_player: number,\n  } | null>,\n};\n\ntype TSaveTempParams = {\n  lang: string,\n  matchId: string,\n  params: Array<{}>,\n};\n\nexport const PlayersCompareActions = types.model({}).actions(self => ({\n  // Обновляем список игроков при выборе нового игрока из раскрывающегося списка\n  updateSelectedPlayers({ lang, matchId, players }: TUpdateSelectedPlayers) {\n    if (isEmpty(compact(players))) return null\n    // При инициализации стора у нас нет игроков,\n    // но при изменении пользователем игрока учитываем предыдущее состояние\n    //@ts-ignore\n    const newSelectedPlayers = { ...self.selectedPlayers }\n    // При обновлении одного игрока из команды мы меняем только нужного, второй остается в объекте\n    forEach(\n      players,\n      //@ts-ignore\n      //@ts-ignore\n      ({ f_player, f_team }) => { newSelectedPlayers[f_team] = f_player },\n    )\n    // Заменяем в сторе обновленный список игроков для дальнейшего запроса к API\n    //@ts-ignore\n    self.selectedPlayers = newSelectedPlayers\n    if (size(players) === 1) {\n      //@ts-ignore\n      self.fetch({\n        lang,\n        matchId,\n        //@ts-ignore\n        params: self.getParamsIds,\n      })\n    }\n  },\n\n  // Сохранение временно выбранных параметров (при закрытии шестеренки)\n  saveTempParams({ lang, matchId, params }: TSaveTempParams) {\n    //@ts-ignore\n    self.selectedParams = params\n    //@ts-ignore\n    self.fetch({\n      lang,\n      matchId,\n      //@ts-ignore\n      params: self.getParamsIds,\n    })\n  },\n\n  //Сохраняем все параметры в шестеренке и предвыбираем дефолтные (при первом открытии)\n  setDefaultSelectedParams() {\n    // По умолчанию предвыбираем дефолтные параметры\n    //@ts-ignore\n    const defaultIds = map(self.stats, 'param')\n    //@ts-ignore\n    self.selectedParams = filter(\n      //@ts-ignore\n      self.totalParams,\n      ({ param_id }) => includes(defaultIds, param_id),\n    )\n  },\n}))\n","\nimport { types } from 'mobx-state-tree'\n\nimport sortBy from 'lodash/sortBy'\nimport findIndex from 'lodash/findIndex'\nimport map from 'lodash/map'\n\nexport const PlayersCompareViews = types.model({}).views(self => ({\n  get sortedStats() {\n    //@ts-ignore\n    const ids = self.getParamsIds\n    return sortBy(\n      //@ts-ignore\n      self.stats,\n      ({ param }) => findIndex(ids, o => o === Number(param)),\n    )\n  },\n\n  get getParamsIds(): Array<number> {\n    //@ts-ignore\n    return map(self.selectedParams, 'param_id')\n  },\n}))\n","\nimport { types } from 'mobx-state-tree'\n\n// @ts-ignore\nimport { tableApiActions } from 'features/Table'\n\nimport { PlayersCompareApiActions } from './apiActions'\nimport { PlayersCompareActions } from './actions'\nimport { PlayersCompareViews } from './views'\n\nconst Stat = types.model('Stat', {\n  param: types.number,\n  param_name: types.maybeNull(types.string),\n  param_name_short: types.maybeNull(types.string),\n})\n\nconst GearParam = types.model('SelectedGearParam', {\n  clickable: types.number,\n  f_option_3: types.number,\n  full_lexical_formula: types.string,\n  gear_group_id: types.number,\n  gear_subgroup_id: types.number,\n  is_default: types.maybeNull(types.string),\n  lexical_formula: types.string,\n  name: types.string,\n  param1_id: types.maybeNull(types.array(types.string)),\n  param2_id: types.maybeNull(types.array(types.string)),\n  param_id: types.number,\n  short_lexical_formula: types.string,\n  sort_order: types.number,\n})\n\nexport const PlayersCompare = types.model('PlayersCompareWidget', {\n  stats: types.maybeNull(types.array(Stat)),\n  playersInfo: types.frozen({}),\n  isLoaded: types.boolean,\n  error: types.frozen({}),\n  selectedPlayers: types.frozen({}),\n  selectedParams: types.maybeNull(types.array(GearParam)),\n  tempSelected: types.array(GearParam),\n})\n\nexport const PlayersCompareStore = types.compose(\n  // Общие методы для получения параметров для шестеренки\n  tableApiActions,\n  // Собственные методы\n  PlayersCompare,\n  PlayersCompareApiActions,\n  PlayersCompareActions,\n  PlayersCompareViews,\n)\n","import { PlayersCompareStore } from './PlayersCompareStore'\n\nexport default PlayersCompareStore.create({\n  playersInfo: {},\n  stats: [],\n  isLoaded: false,\n  error: {},\n  selectedPlayers: {},\n  selectedParams: [],\n  tempSelected: [],\n})\n","import { types } from 'mobx-state-tree'\nimport includes from 'lodash/includes'\nimport get from 'lodash/get'\nimport map from 'lodash/map'\nimport sortBy from 'lodash/sortBy'\nimport filter from 'lodash/filter'\nimport reduce from 'lodash/reduce'\n\nimport { toJS } from 'mobx'\nimport { callApi } from 'react-sport'\nimport { percentageParams } from 'config/teamPopupParams'\nimport routes from 'config/routes'\n\ntype TConfig = {\n  method: string,\n  body: string,\n}\n\nconst TeamPlayersApiActions = types.model({}).actions(self => ({\n  // Получение всех параметров для игроков в команде\n  //@ts-ignore\n  fetchParams(id, selectedMatches) {\n    const url: string = `${routes.API_ROOT}/data`\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'ask_gear_params',\n        params: {\n          _v_amplua_id: 0,\n        },\n      }),\n    }\n    callApi({\n      url,\n      config,\n      //@ts-ignore\n      onRequest: () => self._onRequest(),\n      onSuccess: (\n        //@ts-ignore\n        json: { data: Array<{}> },\n        //@ts-ignore\n      ) => self._onSuccessParams(json, id, selectedMatches),\n      //@ts-ignore\n      onError: (error: any) => self._onError(error),\n    })\n  },\n\n  _onRequest() {\n    //@ts-ignore\n    self.isFetching = true\n    //@ts-ignore\n    self.error = null\n  },\n\n  _onSuccessParams(\n    //@ts-ignore\n    json: { data: Array<{}> },\n    //@ts-ignore\n    id,\n    //@ts-ignore\n    selectedMatches,\n  ) {\n    //@ts-ignore\n    self.totalParams = get(json, 'data', [])\n    //@ts-ignore\n    self.error = null\n    //@ts-ignore\n    self.fetchGroups()\n    //@ts-ignore\n    self.fetchPlayers(id, selectedMatches)\n  },\n\n  //@ts-ignore\n  _onError(error: {}) {\n    //@ts-ignore\n    self.isFetching = false\n    //@ts-ignore\n    self.error = error\n  },\n\n  // Получение общего списка игроков\n  //@ts-ignore\n  fetchPlayers(id, selectedMatches) {\n    const url: string = `${routes.API_ROOT}/data`\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'scout_team_players_stat',\n        params: {\n          _p_team_id: id,\n          _p_match_arr: selectedMatches.team[id],\n          //@ts-ignore\n          _p_params_arr: map(self.totalParams, 'param_id'),\n        },\n      }),\n    }\n    callApi({\n      url,\n      config,\n      //@ts-ignore\n      onRequest: () => self._onRequest(),\n      //@ts-ignore\n      onSuccess: (json: { data: Array<{}> }) => self._onSuccessPlayers(json),\n      //@ts-ignore\n      onError: (error: any) => self._onError(error),\n    })\n  },\n  //@ts-ignore\n  _onSuccessPlayers(json: { data: Array<{}> }) {\n    //@ts-ignore\n    self.isFetching = false\n    //@ts-ignore\n    self.players = map(\n      get(json.data, '[0].scout_team_players_stat', []),\n      player => ({\n        ...player,\n        params: get(player, 'params') && map(player.params, param => ({\n          ...param,\n          // для % параметров не используем формулу, не меняем значение\n          // % параметры берем из конфига\n          value: includes(percentageParams, param.param)\n            ? param.value / param.matches_count\n            : param.value,\n          averageValue: param.value / param.matches_count,\n        })),\n      }),\n    )\n    //@ts-ignore\n    self.error = null\n  },\n\n  // Получение списка групп для шестеренки\n  fetchGroups() {\n    const url: string = `${routes.API_ROOT}/data`\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'ask_gear_group_view',\n      }),\n    }\n    callApi({\n      url,\n      config,\n      //@ts-ignore\n      onRequest: () => self._onRequest(),\n      //@ts-ignore\n      onSuccess: (json: { data: Array<any> }) => self._onSuccessGroups(json),\n      //@ts-ignore\n      onError: (error: any) => self._onError(error),\n    })\n  },\n\n  //@ts-ignore\n  _onSuccessGroups(json: { data: Array<any> }) {\n    //@ts-ignore\n    self.paramGroups = get(json, 'data', [])\n    //@ts-ignore\n    self.paramGroupsError = null\n    //@ts-ignore\n    const serializedParams = map(self.totalParams, item => toJS(item))\n    //@ts-ignore\n    self.gearParams = reduce(self.paramGroups, (prev, curr) => {\n      const current = {\n        params: sortBy(\n          filter(\n            serializedParams, ({ gear_group_id }) => gear_group_id === curr.group_id,\n          ), 'sort_order',\n        ),\n        groupName: String(curr.group_lexical_formula),\n      }\n      return [...prev, current]\n    }, [])\n    if (window.localStorage.getItem('teamPlayersTable') === null) {\n      //@ts-ignore\n      self.saveTables()\n    } else {\n      //@ts-ignore\n      self.tables = JSON.parse(window.localStorage.getItem('teamPlayersTable'))\n    }\n  },\n\n  // Получение списка ивентов для игрока\n  fetchEvents(\n    //@ts-ignore\n    lang,\n    //@ts-ignore\n    lexical_formula,\n    //@ts-ignore\n    playerId,\n    //@ts-ignore\n    paramId,\n    //@ts-ignore\n    request,\n    //@ts-ignore\n    selectedMatches,\n    //@ts-ignore\n    shootsRange,\n  ) {\n    const url: string = `${routes.API_ROOT}/data`\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'scout_events_sec_by_param',\n        params: {\n          _p_matches: selectedMatches,\n          _p_param_id: paramId,\n          _p_player_id: playerId,\n        },\n      }),\n    }\n    return callApi({\n      url,\n      config,\n      onRequest: () => { },\n      //@ts-ignore\n      onSuccess: (json: { data: Array<any> }) => (\n        //@ts-ignore\n        self._onSuccessEvents(\n          json,\n          lang,\n          lexical_formula,\n          request,\n          shootsRange,\n          playerId,\n        )\n      ),\n      //@ts-ignore\n      onError: (error: any) => self._onError(error),\n    })\n  },\n\n  _onSuccessEvents(\n    //@ts-ignore\n    json: { data: Array<any> },\n    lang: string,\n    lexical_formula: string,\n    request: (arg: { }) => void,\n    shootsRange: {},\n    playerId: number,\n  ) {\n    //@ts-ignore\n    self.events = map(\n      get(json.data, '[0].scout_events_sec_by_param', []), 'id',\n    )\n    //@ts-ignore\n    if (self.events.length) {\n      request({\n        //@ts-ignore\n        events: self.events,\n        range: shootsRange,\n        lang,\n        lexical_formula,\n        playerInfo: playerId,\n        type: 'teamPlayers',\n      })\n    }\n  },\n}))\n\nexport default TeamPlayersApiActions\n","import { toJS } from 'mobx'\nimport { types } from 'mobx-state-tree'\n\nimport filter from 'lodash/filter'\nimport omit from 'lodash/omit'\nimport get from 'lodash/get'\nimport reduce from 'lodash/reduce'\nimport isEqual from 'lodash/isEqual'\n\nimport { indexLexic } from 'config/lexics'\nimport { saveTablesToLocalStorage } from 'module/utils/helpers'\n\ntype TSetActiveParam = {\n  param: {\n    param_id: number,\n  },\n  sortAsc: boolean,\n  table: {\n    position: number,\n  },\n}\n\n//TODO переписать и декомпозировать\nconst TeamPlayersActions = types.model({}).actions(self => ({\n  // Записываем в стор таблицы после получения параметров\n  saveTables() {\n    //@ts-ignore\n    self.gearParams.forEach(({ groupName, params }, index) => {\n      const position: number = index + 1\n      const table: {\n        position: number,\n        selectedParams: Array<{ is_default: string }>,\n        tableName: string | number,\n      } = {\n        position,\n        //@ts-ignore\n        selectedParams: params.filter(({ is_default }) => is_default === 'default'),\n        tableName: String(groupName),\n        //@ts-ignore\n        summaryType: 'average_for_match',\n        avatarIsVisible: false,\n      }\n      //@ts-ignore\n      if (table.selectedParams.length) {\n        //@ts-ignore\n        self.tables = {\n          //@ts-ignore\n          ...self.tables,\n          [position]: {\n            ...table,\n            sortAsc: false,\n            activeId: null,\n          },\n        }\n      }\n      //@ts-ignore\n      saveTablesToLocalStorage({ name: 'teamPlayersTable', tables: self.tables })\n    })\n  },\n  /**\n   * Действия с выбранными в шестеренке параметрами\n   * (добавление, удаление, очищение выбранных параметров, перемещение карточек в правом меню)\n   * @param {string} action - название действия\n   * @param {object} param - параметр, с которым выполняем действие или список параметров\n   */\n  //@ts-ignore\n  editTempSelected(action = null, param) {\n    switch (action) {\n      //@ts-ignore\n      case 'add':\n        //@ts-ignore\n        self.tempSelected = [...self.tempSelected, toJS(param)]\n        break\n      //@ts-ignore\n      case 'delete':\n        //@ts-ignore\n        self.tempSelected = filter(\n          //@ts-ignore\n          self.tempSelected,\n          item => !isEqual(param, item),\n        )\n        break\n      //@ts-ignore\n      case 'erase':\n        //@ts-ignore\n        self.tempSelected = []\n        break\n      default:\n        //@ts-ignore\n        self.tempSelected = param.map(param => toJS(param))\n        break\n    }\n  },\n  /**\n   * Выбранные параметры (чекбоксы) сохраняем в стор\n   * @param {number} position - порядковый номер таблицы\n   */\n  saveTempParams({\n    localStorageName = 'teamPlayersTable',\n    position,\n    selectedParams,\n  }: {\n    localStorageName: string,\n    position: number,\n    selectedParams: Array<{}>,\n  }) {\n    //@ts-ignore\n    self.tables = {\n      //@ts-ignore\n      ...self.tables,\n      [position]: {\n        //@ts-ignore\n        ...self.tables[position],\n        selectedParams,\n      },\n    }\n    // Сохраняем выбранные параметры в localStorage\n    //@ts-ignore\n    saveTablesToLocalStorage({ name: localStorageName, tables: self.tables })\n    // Очищаем временно выбранные параметры из popup\n    //@ts-ignore\n    self.editTempSelected('erase')\n  },\n  /**\n   * Добавляем новую таблицу\n   * @param {string} name - название таблицы\n   */\n  addTable(\n    name: string,\n    localStorageName: string = 'teamPlayersTable',\n    selectedParams: Array<{}>,\n  ) {\n    //@ts-ignore\n    const position: number = Object.keys(self.tables).length + 1\n    //@ts-ignore\n    self.tables = {\n      //@ts-ignore\n      ...self.tables,\n      [position]: {\n        avatarIsVisible: false,\n        position,\n        selectedParams,\n        summaryType: 'average_for_match',\n        tableName: name,\n      },\n    }\n    // Сохраняем таблицы в localStorage\n    //@ts-ignore\n    saveTablesToLocalStorage({ name: localStorageName, tables: self.tables })\n  },\n\n  /** удаления таблицы\n* @param {number} position - порядковый номер таблицы\n*/\n  deleteTable(position: number) {\n    //@ts-ignore\n    const tablesList: Array<any> = Object.keys(self.tables)\n    // Удаляем текущую таблицу\n    //@ts-ignore\n    const omitedTables = omit(self.tables, position)\n    // Перезаписываем все таблицы, позиция которых после удаленной. Передвигаем весь список\n    const updatedTables = reduce(omitedTables, (acc, curr, key) => {\n      //@ts-ignore\n      if (key > position) {\n        //@ts-ignore\n        acc[key - 1] = {\n          //@ts-ignore\n          ...self.tables[key],\n          //@ts-ignore\n          position: key - 1,\n        }\n      }\n      //@ts-ignore\n      acc[key] = self.tables[key]\n      return acc\n    }, {})\n    //@ts-ignore\n    self.tables = omit(updatedTables, tablesList.length)\n    // Удаляем и из localStorage\n    //@ts-ignore\n    saveTablesToLocalStorage({ name: 'teamPlayersTable', tables: self.tables })\n  },\n\n  /** Редактирование таблицы\n* @param {number} position - порядковый номер таблицы\n* @param {string | number} name - новое название таблицы\n*/\n  editTable(position: number, name: string | number) {\n    //@ts-ignore\n    self.tables = {\n      //@ts-ignore\n      ...self.tables,\n      [position]: {\n        //@ts-ignore\n        ...self.tables[position],\n        tableName: name,\n      },\n    }\n    //@ts-ignore\n    saveTablesToLocalStorage({ name: 'teamPlayersTable', tables: self.tables })\n  },\n\n  /** Сброс всех таблиц по-умолчанию*/\n  resetTable() {\n    // Сначала удаляем таблицы уже сформированные\n    window.localStorage.removeItem('teamPlayersTable')\n    //@ts-ignore\n    self.tables = {}\n    //@ts-ignore\n    self.saveTables()\n  },\n\n  /** Перемещение таблицы вверх/вниз\n  * @param {number} position - порядковый номер таблицы\n  * @param {string} type - тип перемещения (вверх или вниз)\n  */\n  moveTable(position: number, type: string) {\n    //@ts-ignore\n    const tableCount: number = Object.keys(self.tables).length\n    //@ts-ignore\n    const current: {} = self.tables[position]\n    //@ts-ignore\n    const prev: {} = self.tables[position - 1]\n    //@ts-ignore\n    const next: {} = self.tables[position + 1]\n    if (type === 'up') {\n      //@ts-ignore\n      self.tables = {\n        //@ts-ignore\n        ...self.tables,\n        [position - 1]: {\n          ...current,\n          position: position - 1,\n        },\n        [position]: {\n          ...prev,\n          position,\n        },\n      }\n    }\n    if (type === 'down') {\n      // Если мы опускаем последнюю таблицу вниз, то ничего не происходит\n      if (position === tableCount) return null\n      //@ts-ignore\n      self.tables = {\n        //@ts-ignore\n        ...self.tables,\n        [position]: {\n          ...next,\n          position,\n        },\n        [position + 1]: {\n          ...current,\n          position: position + 1,\n        },\n      }\n    }\n    //@ts-ignore\n    saveTablesToLocalStorage({ name: 'teamPlayersTable', tables: self.tables })\n  },\n\n  /** Редактирование названия таблицы\n  * @param {string} name - название таблицы\n  * @param {bool} erase - возврат к значению по-умолчанию\n  */\n  editTempTableName(name: string, erase: boolean = false) {\n    if (erase) {\n      //@ts-ignore\n      self.tempTableName = indexLexic.new_table\n    } else {\n      //@ts-ignore\n      self.tempTableName = name\n    }\n  },\n\n  /** Меняем стиль отображения ячеек (итоговое по всем матчам или среднее значение)\n  * @param {string} type - тип отображения\n  */\n  changeValueType(type: string, position: number) {\n    // Если тип не меняется, то не используем формулу\n    //@ts-ignore\n    if (get(self.tables, `${position}.summaryType`) === type) return null\n    //@ts-ignore\n    self.tables = {\n      //@ts-ignore\n      ...self.tables,\n      [position]: {\n        //@ts-ignore\n        ...self.tables[position],\n        summaryType: type,\n      },\n    }\n  },\n\n  setActiveParam({\n    param,\n    sortAsc,\n    table,\n  }: TSetActiveParam) {\n    const { position } = table\n    //@ts-ignore\n    self.tables = {\n      //@ts-ignore\n      ...self.tables,\n      [position]: {\n        ...table,\n        sortAsc,\n        activeId: param.param_id,\n      },\n    }\n  },\n\n  showAvatarToggle(position: number) {\n    //@ts-ignore\n    self.tables = {\n      //@ts-ignore\n      ...self.tables,\n      [position]: {\n        //@ts-ignore\n        ...self.tables[position],\n        //@ts-ignore\n        avatarIsVisible: !self.tables[position].avatarIsVisible,\n      },\n    }\n  },\n}))\n\nexport default TeamPlayersActions\n","\nimport { types } from 'mobx-state-tree'\nimport TeamPlayersApiActions from './TeamPlayersApiActions'\nimport TeamPlayersActions from './TeamPlayersActions'\n\n// Модель параметра для игрока\nconst PlayerParam = types.model('PlayerParam', {\n  data_type: types.string,\n  f_match_event_ids: types.maybeNull(types.number),\n  matches_count: types.maybeNull(types.number),\n  option: types.number,\n  param: types.number,\n  value: types.number,\n  averageValue: types.number,\n})\n\n// Модель параметра(шестеренка)\nconst Param = types.model('Param', {\n  clickable: types.number,\n  f_option_3: types.number,\n  full_lexical_formula: types.string,\n  gear_group_id: types.number,\n  gear_subgroup_id: types.number,\n  is_default: types.maybeNull(types.string),\n  lexical_formula: types.string,\n  name: types.string,\n  param1_id: types.maybeNull(types.array(types.string)),\n  param2_id: types.maybeNull(types.array(types.string)),\n  param_id: types.identifierNumber,\n  short_lexical_formula: types.string,\n  sort_order: types.number,\n})\n\n// Модель параметров, разбитых на логические группы (основные, подачи и тд)\nconst GearParam = types.model('GearParam', {\n  groupName: types.maybeNull(types.string),\n  params: types.array(Param),\n})\n\n//Модель игрока\nconst Player = types.model('Player', {\n  f_player: types.number,\n  matches_count: types.number,\n  nickname_eng: types.maybeNull(types.string),\n  nickname_rus: types.maybeNull(types.string),\n  params: types.maybeNull(types.array(PlayerParam)),\n  shirt_num: types.string,\n  short_name_eng: types.string,\n  short_name_rus: types.string,\n})\n\n// Модель группы с названием\nconst ParamGroup = types.model('ParamGroup', {\n  group_id: types.number,\n  group_lexical_formula: types.number,\n  group_name: types.string,\n})\n\nexport const TeamPlayers = types.model('TeamPlayers', {\n  totalParams: types.array(Param),\n  gearParams: types.array(GearParam),\n  tables: types.frozen({\n    position: types.number,\n    selectedParams: types.array(Param),\n    tableName: types.string,\n    summaryType: types.string,\n    avatarIsVisible: types.boolean,\n  }),\n  tempSelected: types.array(Param),\n  players: types.array(Player),\n  tempTableName: types.union(types.string, types.number, types.undefined),\n  isFetching: types.boolean,\n  error: types.frozen({}),\n  paramGroups: types.array(ParamGroup),\n  events: types.array(types.number),\n})\n\nconst TeamPlayersStore = types.compose(\n  TeamPlayers,\n  TeamPlayersActions,\n  TeamPlayersApiActions,\n)\n\nexport default TeamPlayersStore\n","// @ts-ignore\nimport { indexLexic } from 'config/lexics'\n\nimport TeamPlayersStore from './TeamPlayersStore'\n\n// @ts-ignore\nexport default TeamPlayersStore.create({\n  gearParams: [],\n  totalParams: [],\n  tables: {},\n  tempSelected: [],\n  players: [],\n  tempTableName: indexLexic.new_table,\n  isFetching: false,\n  error: {},\n  events: [],\n})\n","import { types } from 'mobx-state-tree'\nimport isEqual from 'lodash/isEqual'\nimport isEmpty from 'lodash/isEmpty'\nimport reduce from 'lodash/reduce'\nimport uniq from 'lodash/uniq'\n\nimport stores from 'features/stores'\n\nconst SelectedMatchesActions = types.model({}).actions(self => ({\n  // запись выбранных матчей в стор\n  //@ts-ignore\n  setSelected(selected: Array<number>, pageId: string) {\n    //@ts-ignore\n    const { page } = stores.lexics\n    //@ts-ignore\n    self[page] = {\n      [pageId]: selected,\n    }\n  },\n\n  // запись выбранных матчей как временно выбранные (пока меню не закрыто)\n  setTempSelected(selected: Array<number>) {\n    //@ts-ignore\n    self.tempSelected = selected\n  },\n\n  // указываем выбранный период (за последний год, за последний сезон)\n  //@ts-ignore\n  setPeriod(period?: (string | number)) {\n    //@ts-ignore\n    self.selectedPeriod = period\n  },\n\n  // действия при открытии/закрытии меню\n  //@ts-ignore\n  setOpened(pageId) {\n    //@ts-ignore\n    const { page } = stores.lexics\n    //@ts-ignore\n    self.toggleSelect(!self.opened)\n\n    //@ts-ignore\n    if (self.opened) {\n      // При открытии раскрывающегося меню с матчами сразу записываем выбранные\n      //@ts-ignore\n      self.setTempSelected(self[page][pageId])\n    } else {\n      // При закрытии меню делаем запросы к API для получения статистики по выбранным матчам\n      // и сохраняем выбранные матчи\n      //@ts-ignore\n      self.onCloseActions(page, pageId)\n      //@ts-ignore\n      self.setSelected([...self.tempSelected], pageId)\n    }\n  },\n  //@ts-ignore\n  toggleSelect(select) {\n    //@ts-ignore\n    self.opened = select\n  },\n\n  onCloseActions(page: string, pageId: string) {\n    // Проверка, обновился ли список выбранных матчей.\n    const matchesListDidUpdate = (page: {}) => (\n      //@ts-ignore\n      !isEqual(self.tempSelected, page[pageId])\n    )\n    //@ts-ignore\n    const { profile } = stores.playerProfile\n    //@ts-ignore\n    const { player, team } = stores.selectedMatches\n    const isPlayerPage = page === 'player'\n    //@ts-ignore\n    const { fetch: fetchMarkers } = stores.markers\n    //@ts-ignore\n    if (isEmpty(self.tempSelected)) return self.eraseAllData(isPlayerPage)\n\n    if (isPlayerPage && matchesListDidUpdate(player)) {\n      //@ts-ignore\n      const { fetch: fetchHeaderStats } = stores.playerStats\n      //@ts-ignore\n      const { fetchTableStats } = stores.playerTable\n      // Запрашиваем новую статистику для таблиц с матчами\n      //@ts-ignore\n      fetchTableStats(self.tempSelected, pageId)\n      // Запрашиваем новую статистику для шапки\n      //@ts-ignore\n      fetchHeaderStats(pageId, self.tempSelected, profile.amplua.id)\n      // Запрашиваем новые маркеры\n      //@ts-ignore\n      fetchMarkers(pageId, self.tempSelected)\n    }\n\n    if (!isPlayerPage && matchesListDidUpdate(team)) {\n      //@ts-ignore\n      const { fetch: fetchHeaderStats } = stores.teamStats\n      //@ts-ignore\n      const { list } = stores.matches\n      //@ts-ignore\n      const { fetchTableStats } = stores.teamTable\n      //@ts-ignore\n      const { fetchParams } = stores.teamPlayers\n      const teamIds = reduce(list[pageId].matches,\n        (ids, { f_match, f_team_opponent }) => {\n          //@ts-ignore\n          if (self.tempSelected.includes(f_match)) {\n            //@ts-ignore\n            ids.push(f_team_opponent)\n          }\n          // Добавляем айди текущей команды в массив\n          //@ts-ignore\n          ids.push(+pageId)\n          return uniq(ids)\n        }, [])\n\n      // Запрашиваем новую статистику для шапки\n      //@ts-ignore\n      fetchHeaderStats(pageId, self.tempSelected)\n      // Запрашиваем новую статистику для таблиц с матчами\n      //@ts-ignore\n      fetchTableStats(self.tempSelected, teamIds)\n      // Запрашиваем новый список игроков\n      //@ts-ignore\n      fetchParams(+pageId, stores.selectedMatches)\n      // Запрашиваем новые маркеры\n      //@ts-ignore\n      fetchMarkers(pageId, self.tempSelected)\n    }\n  },\n\n  // Если выбрали 0 матчей, полостью очищам всю статистику и маркеры\n  eraseAllData(isPlayerPage: boolean) {\n    const { eraseHeaderStats } = isPlayerPage\n      //@ts-ignore\n      ? stores.playerStats\n      //@ts-ignore\n      : stores.teamStats\n    eraseHeaderStats()\n    //@ts-ignore\n    stores.markers.deleteMarkers()\n  },\n}))\n\nexport default SelectedMatchesActions\n","\nimport { types } from 'mobx-state-tree'\nimport SelectedMatchesActions from './SelectedMatchesActions'\n\nexport const SelectedMatches = types.model('SelectedMatches', {\n  opened: types.boolean,\n  pageId: types.string,\n  player: types.frozen({}),\n  team: types.frozen({}),\n  tempSelected: types.array(types.number),\n  selectedPeriod: types.maybeNull(types.union(types.string, types.number)),\n})\n\nconst SelectedMatchesStore = types.compose(\n  SelectedMatches,\n  SelectedMatchesActions,\n)\n\nexport default SelectedMatchesStore\n","import SelectedMatchesStore from './SelectedMatchesStore'\n\nexport default SelectedMatchesStore.create({\n  opened: false,\n  pageId: '',\n  player: {},\n  team: {},\n  tempSelected: [],\n  selectedPeriod: null,\n})\n","import { types } from 'mobx-state-tree'\n// @ts-ignore\nimport routes from 'config/routes'\n\ntype TOptions = {\n  lang_id: string,\n  team: number,\n  matches: Array<any>,\n  tables: {},\n};\n\nconst TableReportsApiActions = types.model({}).actions(self => ({\n  //@ts-ignore\n  //@ts-ignore\n  //@ts-ignore\n  fetchData(e, key, options) {\n    const url: string = `${routes.API_ROOT}/report/tables_report`\n    const { lang_id, matches, tables, team }: TOptions = options\n    const body = {\n      uri: 'request_players_stat_scout',\n      test: true,\n      params: {\n        type: key,\n        lang_id,\n        team,\n        matches,\n        tables,\n      },\n    }\n    //@ts-ignore\n    self.changeFetchingStatus(key)\n    return fetch(url, { method: 'POST', body: JSON.stringify(body) })\n      .then((response: any) => {\n        //@ts-ignore\n        self.changeFetchingStatus(key)\n        return response.blob()\n      })\n      .catch((error: {}) => {\n        //@ts-ignore\n        self.onError(error)\n        //@ts-ignore\n        self.changeFetchingStatus(key)\n      })\n  },\n  //@ts-ignore\n  changeFetchingStatus(key) {\n    //@ts-ignore\n    //@ts-ignore\n    self[`${key}IsFetching`] = !self[`${key}IsFetching`]\n  },\n  //@ts-ignore\n  onError(error) {\n    //@ts-ignore\n    self.error = error\n  },\n}))\n\nexport default TableReportsApiActions\n","\nimport { types } from 'mobx-state-tree'\nimport TableReportsApiActions from './TableReportsApiActions'\n\nconst TableReports = types.model('TableReports', {\n  pdfIsFetching: types.boolean,\n  xlsIsFetching: types.boolean,\n  error: types.frozen({}),\n})\n\nconst TableReportsStore = types.compose(\n  TableReports,\n  TableReportsApiActions,\n)\n\nexport default TableReportsStore\n","import TableReportsStore from './TableReportsStore'\n\nexport default TableReportsStore.create({\n  pdfIsFetching: false,\n  xlsIsFetching: false,\n  error: {},\n})\n","import { types } from 'mobx-state-tree'\nimport get from 'lodash/get'\nimport values from 'lodash/values'\nimport reduce from 'lodash/reduce'\nimport filter from 'lodash/filter'\n\n\nimport { callApi } from 'react-sport'\nimport routes from 'config/routes'\n\nconst MatchProfileApiActions = types.model({}).actions(self => ({\n  //@ts-ignore\n  fetch(matchId) {\n    const url = `${routes.API_ROOT}/data`\n    const config = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'scout_match_inf',\n        params: {\n          _p_match_id: matchId,\n        },\n      }),\n    }\n\n    callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        self.data = {}\n        //@ts-ignore\n        self.isFetching = true\n      },\n      //@ts-ignore\n      onSuccess: json => self._onSuccess(json, matchId),\n      //@ts-ignore\n      onError: error => self._onError(error),\n    })\n  },\n\n  _onSuccess({ data }: { data: {} }, matchId: string) {\n    //@ts-ignore\n    self.data = get(data, '[0].scout_match_inf', {})\n    //@ts-ignore\n    self.fetchPeriods(matchId)\n    //@ts-ignore\n    self.fetchVideoLinks(matchId)\n    //@ts-ignore\n    self.error = null\n    //@ts-ignore\n    self.matchId = matchId\n  },\n\n  _onError(error: any) {\n    //@ts-ignore\n    self.error = error\n    //@ts-ignore\n    self.isFetching = false\n  },\n\n  fetchPeriods(matchId: string) {\n    const url = `${routes.API_ROOT}/data`\n    const config = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'ask_team_param_view',\n        params: {\n          _v_match_id: [matchId],\n          //@ts-ignore\n          //@ts-ignore\n          _v_team_id: [self.data.team1_id, self.data.team2_id],\n          _v_param_id: [239],\n        },\n      }),\n    }\n\n    callApi({\n      url,\n      config,\n      onRequest: () => {},\n      //@ts-ignore\n      onSuccess: json => self._onSuccessPeriods(json),\n      //@ts-ignore\n      onError: error => self._onError(error),\n    })\n  },\n\n  _onSuccessPeriods(json: {\n    data: Array<{\n      value: number,\n      f_option_0: number,\n      f_team: number,\n    }>,\n  }) {\n    const data = json.data.map(({ f_option_0, f_team, value }) => ({\n      value,\n      period: f_option_0,\n      team: f_team,\n    }))\n    //@ts-ignore\n    self.periods = values(\n      reduce(\n        data,\n        (res, { period }) => {\n          if (period !== 0) {\n            //@ts-ignore\n            res[period] = filter(data, item => item.period === period)\n          }\n          return res\n        },\n        {},\n      ),\n    )\n  },\n\n  fetchVideoLinks(matchId: string) {\n    const url = `${routes.API_ROOT}/video/match`\n    const config = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'scout_team_match_pop_up',\n        //@ts-ignore\n        team_id: `${get(self.data, 'team1_id', '')}`,\n        match_id: +matchId,\n      }),\n    }\n\n    callApi({\n      url,\n      config,\n      onRequest: () => {},\n      //@ts-ignore\n      onSuccess: json => self._onSuccessVideoLinks(json),\n      //@ts-ignore\n      onError: error => self._onError(error),\n    })\n  },\n\n  _onSuccessVideoLinks(json: { links: {} }) {\n    //@ts-ignore\n    self.videoLinks = json.links\n    //@ts-ignore\n    self.isFetching = false\n  },\n}))\n\nexport default MatchProfileApiActions\n","\nimport { types } from 'mobx-state-tree'\nimport MatchProfileApiActions from './MatchProfileApiActions'\n\nexport const MatchProfile = types.model('MatchProfile', {\n  data: types.frozen({}),\n  periods: types.array(types.array(types.frozen({}))),\n  isFetching: types.boolean,\n  matchId: types.maybeNull(types.string),\n  videoLinks: types.frozen({}),\n  error: types.maybeNull(types.frozen({})),\n})\n\nconst MatchProfileStore = types.compose(\n  MatchProfile,\n  MatchProfileApiActions,\n)\n\nexport default MatchProfileStore\n","import MatchProfileStore from './MatchProfileStore'\n\nexport default MatchProfileStore.create({\n  data: {},\n  periods: [],\n  isFetching: true,\n  matchId: null,\n  videoLinks: {},\n  error: null,\n})\n","\n// Получение тайтлов для шапки профиля команды/игрока\n\ntype TArgs = {\n  simpleName: string,\n  matchesCount: number,\n  matchName: string,\n  paramName: string | number,\n};\n\nconst getHeaderStatsTitle = ({\n  matchesCount,\n  matchName,\n  paramName,\n  simpleName,\n}: TArgs) => () => ({\n  playlist_title: `${simpleName}`,\n  playlist_subtitle: `${matchesCount} ${matchName} - ${paramName}`,\n})\n\nexport default getHeaderStatsTitle\n","type TArgs = {\n  getMatchInfo: () => {\n    teamName: string,\n    oppTeamName: string,\n    teamScore: number,\n    oppTeamScore: number,\n    activeTeam: string,\n  },\n  //@ts-ignore\n  activeTab: string | null,\n  page: string,\n  simpleName: string,\n  matchesCount: number,\n  matchName: string,\n}\n\n// Получение тайтлов для карты ударов\nconst getMapShootsTitle = ({\n  activeTab,\n  getMatchInfo,\n  matchesCount,\n  matchName,\n  page,\n  simpleName,\n}: TArgs) => () => {\n  // Для страницы матча\n  const getMatchMapShootsTitle = () => {\n    const {\n      activeTeam,\n      oppTeamName,\n      oppTeamScore,\n      teamName,\n      teamScore,\n    } = getMatchInfo()\n    return {\n      playlist_title: `${activeTeam}`,\n      playlist_subtitle: `${teamName} ${teamScore}:${oppTeamScore} ${oppTeamName} - ${activeTab}`,\n    }\n  }\n\n  // Для страницы команды или игрока\n  const getTeamOrPlayerMapShootsTitle = () => ({\n    playlist_title: `${simpleName}`,\n    playlist_subtitle: `${matchesCount} ${matchName} - ${activeTab}`,\n  })\n\n  const pages = {\n    team: getTeamOrPlayerMapShootsTitle,\n    player: getTeamOrPlayerMapShootsTitle,\n    match: getMatchMapShootsTitle,\n  }\n  // запускаем для каждой страницы свою функцию\n  //@ts-ignore\n  if (!pages[page]) return null\n  //@ts-ignore\n  return pages[page]()\n}\n\nexport default getMapShootsTitle\n","import get from 'lodash/get'\n\ntype TArgs = {\n  getMatchInfo: () => {\n    teamName: string,\n    oppTeamName: string,\n    teamScore: number,\n    oppTeamScore: number,\n  },\n  matchInfo: any,\n  page: string,\n  suffix: string,\n  longSuffix: string,\n  paramName: string | number,\n  stores: {\n    //@ts-ignore\n    playerProfile: { profile: {} },\n  },\n  playerInfo: any,\n}\n\n// Получение тайтлов для ячеек таблиц со статистикой по матчам\nconst getTableMatchesTitle = ({\n  getMatchInfo,\n  longSuffix,\n  matchInfo,\n  page,\n  paramName,\n  playerInfo,\n  stores,\n  suffix,\n}: TArgs) => () => {\n  const oppTeamName: string = get(matchInfo, `name_opponent_${suffix}`, '')\n  const teamName: string = get(matchInfo, `name_${suffix}`, '')\n    || get(matchInfo, `name_${longSuffix}`, '')\n\n  // Матчи с профиля команды\n  const getTeamTableMatchesTitle = () => ({\n    playlist_title: `${teamName}`,\n    playlist_subtitle: `vs ${oppTeamName} - ${paramName}`,\n    title: '',\n  })\n\n  // Матчи с профиля игрока\n  const getPlayerTableMatchesTitle = () => {\n    const { playerProfile: { profile } } = stores\n    const firstName: string = get(profile, `firstname_${longSuffix}`)\n    const lastName: string = get(profile, `lastname_${longSuffix}`)\n    const playerName = `${firstName} ${lastName}`\n\n    return {\n      playlist_title: `${playerName} - ${teamName}`,\n      playlist_subtitle: `vs ${oppTeamName} - ${paramName}`,\n      title: '',\n    }\n  }\n\n  // Таблица со статистикой с профиля матча\n  const getStatsTableMatchesTitle = () => {\n    const { oppTeamName, teamName } = getMatchInfo()\n    return {\n      playlist_title: `${playerInfo} - ${teamName}`,\n      playlist_subtitle: `vs ${oppTeamName} - ${paramName}`,\n      title: '',\n    }\n  }\n\n  const pages = {\n    team: getTeamTableMatchesTitle,\n    player: getPlayerTableMatchesTitle,\n    match: getStatsTableMatchesTitle,\n  }\n  //@ts-ignore\n  if (!pages[page]) return null\n  //@ts-ignore\n  return pages[page]()\n}\n\nexport default getTableMatchesTitle\n","\n\ntype TArgs = {\n  paramName: string | number,\n  simpleName: string,\n  matchesCount: number,\n  matchName: string,\n};\n\n// Получение тайтлов для футера таблиц со статистикой по матчам\nconst getTablesFooterTitle = ({\n  matchesCount,\n  matchName,\n  paramName,\n  simpleName,\n}: TArgs) => () => ({\n  playlist_title: `${simpleName}`,\n  playlist_subtitle: `${matchesCount} ${matchName} - ${paramName}`,\n})\n\nexport default getTablesFooterTitle\n","\nimport find from 'lodash/find'\nimport get from 'lodash/get'\n\ntype TArgs = {\n  teamPlayers: {},\n  paramName: string | number,\n  playerInfo: any,\n  longSuffix: string,\n};\n\n// Получение тайтлов для игроков в команде на вкладке ИГРОКИ\nconst getTeamPlayersTitle = ({\n  longSuffix,\n  paramName,\n  playerInfo,\n  teamPlayers,\n}: TArgs) => () => {\n  const player = find(\n    get(teamPlayers, 'players'),\n    ({ f_player }) => f_player === playerInfo,\n  )\n  const playerName = get(player, `short_name_${longSuffix}`, '')\n\n  return {\n    playlist_title: `${playerName}`,\n    playlist_subtitle: `${paramName}`,\n  }\n}\n\nexport default getTeamPlayersTitle\n","\ntype TArgs = {\n  getMatchInfo: () => {\n    teamName: string,\n    oppTeamName: string,\n    teamScore: number,\n    oppTeamScore: number,\n  },\n  playerInfo: any,\n  paramName: string | number,\n};\n\n// Получение тайтлов для виджетов\nconst getWidgetsTitle = ({ getMatchInfo, paramName, playerInfo }: TArgs) => (\n  widgetType: string,\n) => {\n  // Виджет сравнения игроков из 2 команд\n  const getPlayersCompareWidgetsTitle = () => {\n    const { oppTeamName, oppTeamScore, teamName, teamScore } = getMatchInfo()\n    const title = `${teamName} ${teamScore}:${oppTeamScore} ${oppTeamName} - ${playerInfo}`\n    return {\n      playlist_title: title,\n      playlist_subtitle: `${paramName}`,\n      title,\n    }\n  }\n\n  const getTeamsCompareWidgterTitle = () => {\n    const { oppTeamName, oppTeamScore, teamName, teamScore } = getMatchInfo()\n    const title = `${teamName} ${teamScore}:${oppTeamScore} ${oppTeamName}`\n    return {\n      playlist_title: title,\n      playlist_subtitle: `${paramName}`,\n      title,\n    }\n  }\n\n  // Все виджеты тут\n  const widgetTypes = {\n    playersCompare: getPlayersCompareWidgetsTitle,\n    teamsCompare: getTeamsCompareWidgterTitle,\n  }\n\n  //@ts-ignore\n  return widgetTypes[widgetType]()\n}\n\nexport default getWidgetsTitle\n","import get from 'lodash/get'\nimport size from 'lodash/size'\n\nimport { getSuffix, getLongSuffix, num2str } from 'module/utils/helpers'\nimport stores from 'features/stores'\n\nimport getHeaderStatsTitle from './titles/getHeaderStatsTitle'\nimport getMapShootsTitle from './titles/getMapShootsTitle'\nimport getTableMatchesTitle from './titles/getTableMatchesTitle'\nimport getTablesFooterTitle from './titles/getTablesFooterTitle'\nimport getTeamPlayersTitle from './titles/getTeamPlayersTitle'\nimport getWidgetsTitle from './titles/getWidgetsTitle'\n\n/** создаем объект с названием плейлиста для внешней видео ссылки\n * @param {string} lexical_formula - название параметра\n * @param {object} matchInfo - Информация о матче. Нужна для имен команд\n * @param {string} tab - активный таб на карте ударов\n * @param {string} lang - язык\n * @param {string} playerInfo - Информация об игроке, если доступна.\n * @param {string} type - тип запроса, для составления title (приходит из компонента)\n * @param {string} widgetType - тип виджета, если доступен\n\n * @returns {object} возвращаемое значение - объект с полями тайтлов\n */\nconst setTitle = ({\n  lang,\n  lexical_formula,\n  matchInfo,\n  playerInfo,\n  tab = '',\n  type,\n  widgetType,\n}: {\n  lexical_formula: string | number,\n  matchInfo: any,\n  tab: string,\n  lang: string,\n  playerInfo: any,\n  type: string,\n  widgetType: string,\n}) => {\n  const {\n    //@ts-ignore\n    lexics: { getLexics, page },\n    //@ts-ignore\n    playerProfile,\n    //@ts-ignore\n    selectedMatches,\n    //@ts-ignore\n    teamPlayers,\n    //@ts-ignore\n    teamProfile,\n  } = stores\n  //@ts-ignore\n  const activeTab: string | null = getLexics(tab)\n  const suffix: string = getSuffix(lang)\n  const longSuffix: string = getLongSuffix(lang)\n  const paramName: string | number = getLexics(lexical_formula) || lexical_formula\n\n  const pageId: string | number = get(stores, `${page}Profile.profile.id`, '')\n  const matchesCount: number = size(get(selectedMatches, `${page}.${pageId}`))\n  let matchName: string\n  if (lang === 'ru') {\n    matchName = num2str(matchesCount, ['матч', 'матча', 'матчей'])\n  } else {\n    //@ts-ignore\n    matchName = matchesCount.toString().split('').pop() === 1\n      ? 'match'\n      : 'matches'\n  }\n\n  const simpleName: string = get(teamProfile, `profile.name_${longSuffix}`, '')\n    || get(playerProfile, `profile.short_name_${longSuffix}`, '')\n\n  const getMatchInfo = () => {\n    const {\n      //@ts-ignore\n      matches: { active },\n      //@ts-ignore\n      matchProfile: { data },\n    } = stores\n    const {\n      score_team1: teamScore,\n      score_team2: oppTeamScore,\n    } = data\n    const teamName: string = get(data, `team1_name_${suffix}`, '')\n    const oppTeamName: string = get(data, `team2_name_${suffix}`, '')\n    const activeTeam: string = get(data, `${active}_name_${suffix}`)\n    return {\n      teamScore,\n      oppTeamScore,\n      teamName,\n      oppTeamName,\n      activeTeam,\n    }\n  }\n\n  // Аргументы для передачи в функцию создания тайтлов\n  const args = {\n    matches: {\n      matchInfo,\n      suffix,\n      longSuffix,\n      paramName,\n      stores,\n      getMatchInfo,\n      playerInfo,\n      page,\n    },\n    tablesFooter: {\n      simpleName,\n      matchesCount,\n      matchName,\n      paramName,\n    },\n    widgets: {\n      getMatchInfo,\n      playerInfo,\n      paramName,\n    },\n    mapShoots: {\n      getMatchInfo,\n      activeTab,\n      page,\n      simpleName,\n      matchesCount,\n      matchName,\n    },\n    headerStats: {\n      simpleName,\n      matchesCount,\n      matchName,\n      paramName,\n    },\n    teamPlayers: {\n      teamPlayers,\n      paramName,\n      playerInfo,\n      longSuffix,\n    },\n  }\n\n  // Объект со ссылками на функции для составления названия плейлиста\n  // В зависимости от type вызывается нужная функция\n  const titleTypes = {\n    //@ts-ignore\n    matches: getTableMatchesTitle(args.matches),\n    tablesFooter: getTablesFooterTitle(args.tablesFooter),\n    widgets: getWidgetsTitle(args.widgets),\n    mapShoots: getMapShootsTitle(args.mapShoots),\n    headerStats: getHeaderStatsTitle(args.headerStats),\n    teamPlayers: getTeamPlayersTitle(args.teamPlayers),\n  }\n  //@ts-ignore\n  if (!titleTypes[type]) return null\n\n  if (type === 'widgets') {\n    return titleTypes[type](widgetType)\n  }\n  //@ts-ignore\n  return titleTypes[type]()\n}\n\nexport default setTitle\n","import { types } from 'mobx-state-tree'\nimport { callApi } from 'react-sport'\n\nimport routes from 'config/routes'\nimport setTitle from './setTitle'\n\nconst ExternalVideoLinksActions = types.model({}).actions(self => ({\n  /** Запрос ссылки для попап окна для видео повторов\n   * @param {Array} events - список ивентов для повтора\n   * @param {Object} range - Объект с диапазонами с секундами до ивента и после\n   * @param {string} lang - язык\n   * @param {number || null} matchId - айди матча, пока не передаем\n   * @param {string} lexical_formula - название параметра\n   * @param {number || null} matchesCount - количество выбранных матчей\n   * @param {object} matchInfo - Информация о матче. Нужна для имен команд\n   * @param {string} playerInfo - Информация об игроке, если доступна.\n   * @param {string} tab - активный таб на карте ударов\n   * @param {string} type - тип запроса, для составления title (приходит из компонента)\n   * @param {string} widgetType - тип виджета, если доступен\n   */\n  request({\n    //@ts-ignore\n    events,\n    //@ts-ignore\n    lang,\n    lexical_formula = '',\n    matchesCount = null,\n    matchId = null,\n    //@ts-ignore\n    matchInfo,\n    //@ts-ignore\n    playerInfo,\n    //@ts-ignore\n    range,\n    tab = '',\n    type = '',\n    widgetType = '',\n  }) {\n    const title = setTitle({\n      lexical_formula,\n      //@ts-ignore\n      matchesCount,\n      matchInfo,\n      tab,\n      lang,\n      playerInfo,\n      type,\n      widgetType,\n    })\n    const url: string = `${routes.API_ROOT}/video`\n    const body: {\n      allRange: boolean,\n      //@ts-ignore\n      events: Array<string | number | null>,\n      lang: string,\n      //@ts-ignore\n      matchId: number | null,\n      //@ts-ignore\n      offset_start: number | null,\n      //@ts-ignore\n      offset_end: number | null,\n    } = {\n      allRange: false,\n      events,\n      lang,\n      matchId,\n      offset_start: range.before,\n      offset_end: range.after,\n      ...title,\n    }\n\n    return callApi({\n      url,\n      config: {\n        method: 'POST',\n        body: JSON.stringify(body),\n      },\n      //@ts-ignore\n      onRequest: () => self._onRequest(),\n      //@ts-ignore\n      onSuccess: ({ link }) => self._onSuccess(link),\n      //@ts-ignore\n      onError: (error: any) => self._onError(error),\n    })\n  },\n\n  _onRequest() {\n    //@ts-ignore\n    self.isFetching = true\n  },\n  //@ts-ignore\n  _onSuccess(link) {\n    if (link) {\n      window.open(link, '_blank')\n    }\n    //@ts-ignore\n    self.isFetching = false\n  },\n  //@ts-ignore\n  _onError(error) {\n    //@ts-ignore\n    self.error = error\n    //@ts-ignore\n    self.isFetching = false\n  },\n}))\n\nexport default ExternalVideoLinksActions\n","\nimport { types } from 'mobx-state-tree'\nimport ExternalVideoLinksActions from './ExternalVideoLinksActions'\n\nexport const ExternalVideoLinks = types.model('ExternalVideoLinks', {\n  isFetching: types.boolean,\n})\n\nconst ExternalVideoLinksStore = types.compose(\n  ExternalVideoLinks,\n  ExternalVideoLinksActions,\n)\n\nexport default ExternalVideoLinksStore\n","import ExternalVideoLinksStore from './ExternalVideoLinksStore'\n\nexport default ExternalVideoLinksStore.create({\n  isFetching: false,\n})\n","import { types } from 'mobx-state-tree'\nimport { callApi } from 'react-sport'\n// @ts-ignore\nimport routes from 'config/routes'\n\nconst FiltersApiActions = types.model({}).actions(self => ({\n  fetch() {\n    const url = `${routes.API_ROOT}/data`\n    const config = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'ask_filters_manual_view',\n      }),\n    }\n\n    callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        self.data = []\n        //@ts-ignore\n        self.error = null\n        //@ts-ignore\n        self.loaded = false\n      },\n      //@ts-ignore\n      onSuccess: json => self._onSuccess(json),\n      //@ts-ignore\n      onError: error => self._onError(error),\n    })\n  },\n\n  _onSuccess({ data }: { data: {} }) {\n    //@ts-ignore\n    self.data = data\n    //@ts-ignore\n    self.loaded = true\n    //@ts-ignore\n    self.error = null\n  },\n\n  _onError(error: any) {\n    //@ts-ignore\n    self.error = error\n    //@ts-ignore\n    self.loaded = true\n  },\n}))\n\nexport default FiltersApiActions\n","import { types } from 'mobx-state-tree'\nimport has from 'lodash/has'\nimport every from 'lodash/every'\nimport forEach from 'lodash/forEach'\nimport find from 'lodash/find'\nimport get from 'lodash/get'\nimport reduce from 'lodash/reduce'\n\nimport { toJS } from 'mobx'\n// @ts-ignore\nimport stores from 'features/stores'\n\nconst FilterActions = types\n  .model({})\n  .volatile(() => ({\n    tempSelectedFilters: {},\n  }))\n  .actions(self => ({\n    clear() {\n      //@ts-ignore\n      self.checked = {}\n    },\n\n    //@ts-ignore\n    toggleOpenMenu(type) {\n      //@ts-ignore\n      //@ts-ignore\n      self.opened = !self.opened\n      if (type === 'reset') {\n        self.tempSelectedFilters = {}\n        return null\n      }\n      //@ts-ignore\n      if (self.opened) {\n        //@ts-ignore\n        self.tempSelectedFilters = self.checked\n      } else {\n        //@ts-ignore\n        self.checked = self.tempSelectedFilters\n        self.tempSelectedFilters = {}\n      }\n      return null\n    },\n\n    handleTempCheck(id: number | string, popupType?: string) {\n      const tempClone = { ...self.tempSelectedFilters }\n      //@ts-ignore\n      const filterInfo = toJS(self.findFilterInfo(id, popupType))\n      if (has(tempClone, id)) {\n        //@ts-ignore\n        delete tempClone[id]\n      } else if (filterInfo) {\n        //@ts-ignore\n        tempClone[id] = filterInfo\n      }\n      self.tempSelectedFilters = tempClone\n      return null\n    },\n\n    //@ts-ignore\n    handleAllTempCheck(ids, popupType?: string) {\n      const tempClone = { ...self.tempSelectedFilters }\n      if (every(ids, id => has(tempClone, id))) {\n        forEach(ids, (id) => {\n          //@ts-ignore\n          delete tempClone[id]\n        })\n      } else {\n        forEach(ids, (id) => {\n          //@ts-ignore\n          const filterInfo = toJS(self.findFilterInfo(id, popupType))\n          if (filterInfo) {\n            //@ts-ignore\n            tempClone[id] = filterInfo\n          }\n        })\n      }\n      self.tempSelectedFilters = tempClone\n    },\n\n    handleUncheck(id: number | string) {\n      //@ts-ignore\n      const checkedCloned = { ...self.checked }\n      delete checkedCloned[id]\n      //@ts-ignore\n      self.checked = checkedCloned\n    },\n  }))\n  .views(self => ({\n    findFilterInfo(id: number | string, popupType?: string) {\n      //@ts-ignore\n      if (!popupType) return find(self.data, { id })\n\n      //@ts-ignore\n      const getIdFromString = id => Number(id.split('_')[0])\n      const players = popupType === 'popupWithHomePlayers'\n        //@ts-ignore\n        ? self.homePlayers\n        //@ts-ignore\n        : self.teamPlayers\n      return find(players, { player_id: getIdFromString(id) })\n    },\n\n    get teamPlayers() {\n      const players = get(stores, 'mapShoot.data')\n      return reduce(\n        players,\n        (acc, { prop_player }) => {\n          //@ts-ignore\n          //@ts-ignore\n          prop_player.forEach(player => acc.push(player))\n          return acc\n        },\n        [],\n      )\n    },\n\n    get homePlayers() {\n      const players = get(stores, 'playerInfo.basicData')\n      //@ts-ignore\n      return reduce(\n        players,\n        //@ts-ignore\n        (acc, { f_player, prop_player }) => {\n          const newObj = prop_player[0]\n          newObj.player_id = f_player\n          return [...acc, newObj]\n        },\n        [],\n      )\n    },\n  }))\n\nexport default FilterActions\n","\nimport { types } from 'mobx-state-tree'\nimport FiltersApiActions from './FiltersApiActions'\nimport FilterActions from './FilterActions'\n\n// Модель группы с названием\nconst FilterElem = types.model('FilterElem', {\n  c_action: types.maybeNull(types.number),\n  c_match_event_prop: types.maybeNull(types.array(types.number)),\n  c_match_event_prop2: types.maybeNull(types.array(types.number)),\n  c_match_event_prop_value: types.maybeNull(types.array(types.number)),\n  c_match_event_prop_value2: types.maybeNull(types.array(types.number)),\n  filter_name: types.string,\n  id: types.number,\n  lexic_id: types.maybeNull(types.number),\n})\n\nexport const Filters = types.model('Filters', {\n  data: types.array(FilterElem),\n  checked: types.frozen({}),\n  opened: types.boolean,\n  loaded: types.boolean,\n  error: types.maybeNull(types.frozen({})),\n})\n\nconst FiltersStore = types.compose(\n  Filters,\n  FiltersApiActions,\n  FilterActions,\n)\n\nexport default FiltersStore\n","import FiltersStore from './FiltersStore'\n\nexport default FiltersStore.create({\n  data: [],\n  checked: {},\n  opened: false,\n  loaded: false,\n  //@ts-ignore\n  tempChecked: {},\n  error: null,\n})\n","import { types } from 'mobx-state-tree'\n\nimport filter from 'lodash/filter'\nimport includes from 'lodash/includes'\nimport map from 'lodash/map'\n\nexport const TeamsCompareActions = types\n  .model({})\n  .volatile(() => ({\n    teamsInfoLoaded: false,\n  }))\n  .actions(self => ({\n    // Сохранение временно выбранных параметров (при закрытии шестеренки)\n    saveTempParams(\n      lang: string,\n      matchId: string,\n      userConfirmedParams: Array<{}>,\n    ) {\n      //@ts-ignore\n      const paramsIdList = map(userConfirmedParams, 'param_id', [])\n\n      //@ts-ignore\n      self.selectedParams = userConfirmedParams\n      //@ts-ignore\n      self.fetchStats(lang, matchId, paramsIdList)\n    },\n\n    //Сохраняем все параметры в шестеренке и предвыбираем дефолтные (при первом открытии)\n    setDefaultSelectedParams() {\n      // По умолчанию предвыбираем дефолтные параметры\n      //@ts-ignore\n      const defaultIds = map(self.stats, 'param')\n      //@ts-ignore\n      self.selectedParams = filter(\n        //@ts-ignore\n        self.totalParams,\n        ({ param_id }) => includes(defaultIds, param_id),\n      )\n    },\n  }))\n","import { types, flow } from 'mobx-state-tree'\n\nimport { utils } from 'react-sport'\n\nimport get from 'lodash/get'\nimport find from 'lodash/find'\nimport reduce from 'lodash/reduce'\nimport pick from 'lodash/pick'\n\nimport stores from 'features/stores'\n\nimport routes from 'config/routes'\n\ntype TConfig = {\n  method: string,\n  body: string,\n}\n\nexport const TeamsCompareApiActions = types.model({})\n  .actions(self => ({\n    // Запрос при первом рендере компонента.\n    // Нам нужны все параметры для шестеренки\n    // После ответа делаем запрос на получение данных для виджета\n    basicFetch: flow(function* basicFetch(\n      //@ts-ignore\n      lang,\n      //@ts-ignore\n      matchId,\n      //@ts-ignore\n      paramsList,\n    ) {\n      // Делаем запрос данных для таблицы\n      //@ts-ignore\n      yield self.fetchStats(lang, matchId, paramsList)\n      // Делаем запрос всех параметров (для шестеренки)\n      //@ts-ignore\n      yield self.getGearParamsList(1)\n      // Устанавливаем выбранные параметры по-умолчанию\n      //@ts-ignore\n      self.setDefaultSelectedParams()\n    }),\n    // Запрос к API для получения статистики команд\n    fetchStats(\n      lang: string,\n      matchId: string,\n      params: Array<number>,\n    ) {\n      const matchInfo = get(stores, 'matchProfile.data', {})\n      const teams = [matchInfo.team1_id, matchInfo.team2_id]\n      const url: string = `${routes.API_ROOT}/data`\n      const config: TConfig = {\n        method: 'POST',\n        body: JSON.stringify({\n          proc: 'scout_teams_all_stat',\n          params: {\n            _p_match_id: Number(matchId),\n            _p_season_id: null,\n            _p_team_arr: teams,\n            _p_param_arr: params,\n            _p_lang_id: Number(lang !== 'ru'),\n          },\n        }),\n      }\n      return utils.callApi({\n        url,\n        config,\n        //@ts-ignore\n        onRequest: self._onRequest,\n        //@ts-ignore\n        onSuccess: self._onSuccess,\n        //@ts-ignore\n        onError: self._onError,\n      })\n    },\n\n    _onRequest() {\n      //@ts-ignore\n      self.stats = []\n      //@ts-ignore\n      self.teamsInfo = null\n      //@ts-ignore\n      self.teamsInfoLoaded = false\n    },\n\n    //@ts-ignore\n    _onSuccess(json: { data?: Array<{}> }) {\n      const teams = get(json.data, '[0].scout_teams_all_stat', [])\n      //@ts-ignore\n      self.stats = get(find(teams, 'params_info', {}), 'params_info')\n      //@ts-ignore\n      self.teamsInfo = reduce(teams, (acc, current) => {\n        //@ts-ignore\n        acc[current.f_team] = pick(\n          current,\n          ['f_team', 'params', 'photo_team'],\n        )\n        return acc\n      }, {})\n      //@ts-ignore\n      self.error = null\n      //@ts-ignore\n      self.teamsInfoLoaded = true\n    },\n\n    _onError(error: any) {\n      //@ts-ignore\n      self.error = error\n      //@ts-ignore\n      self.teamsInfoLoaded = false\n    },\n  }))\n","\nimport { types } from 'mobx-state-tree'\n\n// @ts-ignore\nimport { tableApiActions } from 'features/Table'\n\nimport { TeamsCompareActions } from './TeamsCompareActions'\nimport { TeamsCompareApiActions } from './TeamsCompareApiActions'\n\nconst Stat = types.model('Stat', {\n  param: types.number,\n  param_name: types.maybeNull(types.string),\n  param_name_short: types.maybeNull(types.string),\n})\n\nconst GearParam = types.model('SelectedGearParam', {\n  clickable: types.number,\n  f_option_3: types.number,\n  full_lexical_formula: types.string,\n  gear_group_id: types.number,\n  gear_subgroup_id: types.number,\n  is_default: types.maybeNull(types.string),\n  lexical_formula: types.string,\n  name: types.string,\n  param1_id: types.maybeNull(types.array(types.string)),\n  param2_id: types.maybeNull(types.array(types.string)),\n  param_id: types.number,\n  short_lexical_formula: types.string,\n  sort_order: types.number,\n})\n\nconst TeamsCompare = types.model('TeamsCompareWidget', {\n  stats: types.maybeNull(types.array(Stat)),\n  teamsInfo: types.frozen({}),\n  isLoaded: false,\n  error: types.frozen({}),\n  selectedParams: types.maybeNull(types.array(GearParam)),\n})\n\nexport const TeamsCompareStore = types.compose(\n  // Общие методы для получения параметров для шестеренки\n  tableApiActions,\n  // Собственные методы\n  TeamsCompare,\n  TeamsCompareActions,\n  TeamsCompareApiActions,\n)\n","import React from 'react'\nimport map from 'lodash/map'\nimport { TTeamStats } from '../types'\n\nexport const TeamsStats = ({\n  getClassName,\n  getExtLink,\n  getStatValue,\n  stats,\n  team1,\n  team2,\n}: TTeamStats) => (\n  <div className='t-compare__stats-container'>\n    {map(stats, ({ param, param_name, param_name_short }, index) => (\n      <div\n        key={`${param}_${param_name_short}_${index}`}\n        className='t-compare__stats-row'\n      >\n        <span\n          className={getClassName(param, team1)}\n            //@ts-ignore\n          onClick={getExtLink(param, param_name, team1)}\n        >\n          {getStatValue(param, team1)}\n        </span>\n        <span className='t-compare__stats-name'>{param_name}</span>\n        <span\n          className={getClassName(param, team2)}\n            //@ts-ignore\n          onClick={getExtLink(param, param_name, team2)}\n        >\n          {getStatValue(param, team2)}\n        </span>\n      </div>\n    ))}\n  </div>\n)\n\nexport default TeamsStats\n","import React from 'react'\nimport { T9n, utils } from 'react-sport'\nimport { TTeamsCompareLogos } from '../types'\n\nconst {\n  helpers: { onProfileImageError },\n} = utils\n\nexport const TeamsCompareLogos = ({\n  getImage,\n  team1,\n  team2,\n}: TTeamsCompareLogos) => (\n  <div className='t-compare__control-row'>\n    <div className='t-compare__logo-container t-compare__logo-container_teams'>\n      <img\n        className='t-compare__logo t-compare__logo_team'\n        //@ts-ignore\n        src={getImage(team1)}\n        alt='logoTeam'\n        onError={e => onProfileImageError(e, 'team')}\n      />\n    </div>\n\n    <div className='t-compare__controls t-compare__controls_player'>\n      <T9n className='t-compare__toggler' t='match' />\n    </div>\n    <div className='t-compare__logo-container t-compare__logo-container_teams'>\n      <img\n        className='t-compare__logo t-compare__logo_team t-compare__logo_team-right'\n        //@ts-ignore\n        src={getImage(team2)}\n        alt='logoTeam'\n        onError={e => onProfileImageError(e, 'team')}\n      />\n    </div>\n  </div>\n)\n\nexport default TeamsCompareLogos\n","import React, { Fragment } from 'react'\n\nimport { TPropsInner } from './types'\n\nimport TeamsCompareStats from '../TeamsCompareStats'\nimport TeamsCompareLogos from '../TeamsCompareLogos'\nimport { teamsCompareInfoComposed } from './composed'\n\nexport const TeamsCompareInfoComponent = ({\n  getClassName,\n  getExtLink,\n  getImage,\n  getSortedStats,\n  getStatValue,\n  team1,\n  team2,\n}: TPropsInner) => (\n  <Fragment>\n    <TeamsCompareLogos\n      getImage={getImage}\n      team1={team1}\n      team2={team2}\n    />\n    <TeamsCompareStats\n      stats={getSortedStats()}\n      team1={team1}\n      team2={team2}\n      getStatValue={getStatValue}\n      getClassName={getClassName}\n      getExtLink={getExtLink}\n    />\n  </Fragment>\n)\n\nexport const TeamsCompareInfo = teamsCompareInfoComposed(TeamsCompareInfoComponent)\n","import { inject, observer } from 'mobx-react'\n\nimport { withHandlers, compose } from 'recompose'\nimport cx from 'classnames'\nimport uniqBy from 'lodash/uniqBy'\nimport sortBy from 'lodash/sortBy'\nimport map from 'lodash/map'\nimport get from 'lodash/get'\nimport find from 'lodash/find'\n\nimport {\n  TPropsInner,\n  TPropsOuter,\n  TWithHandlersOuter1,\n  TWithHandlersInner1,\n  TWithHandlersOuter2,\n  TWithHandlersInner2,\n} from './types'\n\nexport const teamsCompareInfoComposed = compose<TPropsInner, TPropsOuter>(\n  inject(\n    'lexics',\n    'videoLink',\n    'shootsRange',\n    'matchTable',\n    'teamsCompareWidget',\n  ),\n  withHandlers<TWithHandlersOuter1, TWithHandlersInner1>({\n    getTeamParams: ({\n      teamsCompareWidget: { teamsInfo },\n    }) => teamId => get(teamsInfo, [teamId, 'params'], []),\n  }),\n  withHandlers<TWithHandlersOuter2, TWithHandlersInner2>({\n    getClassName: ({ getTeamParams }) => (param, teamId) => {\n      const hasVideo = get(\n        find(getTeamParams(teamId), { param }),\n        'f_match_event_ids',\n      )\n      return cx(\n        't-compare__stats-num',\n        { 't-compare__clickable-cell': hasVideo },\n      )\n    },\n\n    getExtLink: ({\n      getTeamParams,\n      lexics: { lang },\n      shootsRange,\n      videoLink: { request },\n    }) => (param, param_name, teamId) => () => {\n      const events = get(\n        find(getTeamParams(teamId), { param }), 'f_match_event_ids',\n      )\n      if (events) {\n        request({\n          events,\n          lang,\n          lexical_formula: param_name,\n          range: shootsRange,\n          type: 'widgets',\n          widgetType: 'teamsCompare',\n        })\n      }\n    },\n\n    getImage: ({ teamsCompareWidget: { teamsInfo } }) => teamId => (\n      get(teamsInfo, `${teamId}.photo_team`, '')\n    ),\n\n    getSortedStats: ({\n      teamsCompareWidget: {\n        selectedParams,\n        stats,\n      },\n    }) => () => {\n      if (stats) {\n        const uniqStats = uniqBy(stats, 'param')\n        return sortBy(uniqStats, ({ param }) => {\n          const selectedParamsIds = map(selectedParams, 'param_id')\n          return selectedParamsIds.indexOf(param)\n        })\n      }\n      return []\n    },\n\n    getStatValue: ({ getTeamParams }) => (param, teamId) => {\n      const value = get(\n        find(getTeamParams(teamId), { param }),\n        'value',\n      )\n      return value ? value.toFixed() : '-'\n    },\n  }),\n  observer,\n)\n","import React from 'react'\n\nimport { T9n } from 'react-sport'\n\nimport { DndParams, GearTable } from 'features/GearPopup'\n\nimport TeamsComparePopupComposed from './TeamsComparePopupComposed'\n\ntype TProps = {\n  //@ts-ignore\n  lexics: { getLexics: (string) => string },\n  onApply: () => void,\n  //@ts-ignore\n  onClose: (value: string | null) => void,\n  teamsCompareWidget: {},\n}\n\n// Попап окно с параметрами (шестеренка)\nexport const TeamsComparePopup = ({\n  lexics: { getLexics },\n  onApply,\n  onClose,\n  teamsCompareWidget,\n}: TProps) => (\n  <div className='popup popup-modern popup-modern_position-left popup-modern_active'>\n    <div className='popup-inner'>\n      <div className='popup-row-header'>\n        <h3 className='popup-title'>\n          <T9n t='main_statisctic' />\n        </h3>\n        {/*\n          //@ts-ignore */}\n        <span className='popup-close' onClick={onClose} />\n\n      </div>\n      <div className='popup-row-container'>\n        <GearTable\n          tableType='teamsCompareWidget'\n          currentStore={teamsCompareWidget}\n          ampluaId={0}\n        />\n      </div>\n      <div className='popup-column-aside'>\n        <DndParams />\n      </div>\n      <div className='popup-row-footer'>\n        <div className='popup-buttons'>\n          <input\n            //@ts-ignore\n            onClick={onClose}\n            type='button'\n            value={getLexics('cancel')}\n            className='popup-cancel'\n          />\n          <input\n            onClick={onApply}\n            type='button'\n            value={getLexics('ok')}\n            className='popup-submit'\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n)\n\n//@ts-ignore\nexport default TeamsComparePopupComposed(TeamsComparePopup)\n","\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers, lifecycle } from 'recompose'\n\nconst TeamsComparePupupComposed = compose(\n  inject(\n    'matchProfile',\n    'teamProfile',\n    'matchTable',\n    'lexics',\n    'teamsCompareWidget',\n    'gearPopupStore',\n  ),\n  //@ts-ignore\n  withHandlers({\n    /**\n     * Запись в стор выбранных параметров в попапе шестеренки\n     * @param {func} saveTempParams - функция сохранения параметров\n     * @param {func} handlePopupAction - функция закрытия попапа\n     * @param {string} lang - выбранный язык\n     * @param {string} matchId - id матча\n     */\n    onApply: ({\n      gearPopupStore: { tempSelected },\n      handlePopupAction,\n      lexics: { lang },\n      matchProfile: { matchId },\n      teamsCompareWidget: { saveTempParams },\n    }) => () => {\n      saveTempParams(lang, matchId, tempSelected)\n      handlePopupAction()\n    },\n    /**\n     * Закрытие попапа шестеренки\n     * @param {func} editTempSelected - функция очищения выбранных параметров\n     * @param {func} handlePopupAction - функция закрытия попапа\n     *\n     */\n    onClose: ({\n      gearPopupStore: { eraseTempSelected },\n      handlePopupAction,\n    }) => () => {\n      eraseTempSelected()\n      handlePopupAction()\n    },\n  }),\n  lifecycle({\n    componentDidMount() {\n      const {\n        //@ts-ignore\n        gearPopupStore: { fillTempSelected },\n        //@ts-ignore\n        teamsCompareWidget: { selectedParams },\n      } = this.props\n      fillTempSelected(selectedParams)\n    },\n  }),\n  observer,\n)\n\nexport default TeamsComparePupupComposed\n","\nimport React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers, withState } from 'recompose'\n\nimport { T9n } from 'react-sport'\n\nimport TeamsComparePopup from './TeamsComparePopup'\nimport { TTeamsCompareHeder } from '../types'\n\nexport const TeamsCompareHeder = ({\n  handlePopupAction,\n  popupOpened,\n}: TTeamsCompareHeder) => (\n  <div className='t-compare__header'>\n    <T9n className='t-compare__title' t='teams_statistic' />\n    <a className='t-compare__gear-options' onClick={handlePopupAction}>\n      <i className='icon-settings' />\n    </a>\n    {popupOpened && <TeamsComparePopup handlePopupAction={handlePopupAction} />}\n  </div>\n)\n\nconst TeamsCompareHeaderComposed = compose(\n  inject('lexics', 'videoLink', 'shootsRange', 'teamsCompareWidget'),\n  withState('popupOpened', 'openPopup', false),\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    handlePopupAction: ({ openPopup }) => () => openPopup(n => !n),\n  }),\n  observer,\n  //@ts-ignore\n)(TeamsCompareHeder)\n\nexport default TeamsCompareHeaderComposed\n","const defaultParams = [\n  101,\n  102,\n  103,\n  124,\n  137,\n  142,\n  158,\n  169,\n  171,\n  172,\n  175,\n  239,\n]\n\nexport default defaultParams\n","import React from 'react'\nimport { observer, inject } from 'mobx-react'\n\nimport map from 'lodash/map'\nimport {\n  compose,\n  lifecycle,\n  withProps,\n} from 'recompose'\n\nimport { getSuffix } from 'module/utils/helpers'\n\nimport { TeamsCompareInfo } from '../TeamsCompareInfo'\nimport TeamsCompareHeader from '../TeamsCompareHeader'\n\nimport defaultParams from '../../config'\n\nimport {\n  TPropsInner,\n  TWithPropsInner,\n  TWithPropsOuter,\n  TLifecycle,\n} from './types'\n\nexport const TeamsCompareComponent = ({\n  matchProfile: {\n    data: {\n      team1_id,\n      team2_id,\n      ...data\n    },\n  },\n  suffix,\n  teamsCompareWidget: { stats, teamsInfoLoaded },\n}: TPropsInner) => (\n  <div className='t-compare'>\n    <TeamsCompareHeader />\n    <div className='t-compare__container'>\n      <div className='t-compare__teams'>\n        <div className='t-compare__team'>\n          <span className='t-compare__team-name'>\n            {data[`team1_name_${suffix}`]}\n          </span>\n        </div>\n        <div className='t-compare__team'>\n          <span className='t-compare__team-name'>\n            {data[`team2_name_${suffix}`]}\n          </span>\n        </div>\n      </div>\n      {teamsInfoLoaded ? (\n        <TeamsCompareInfo\n          team1={team1_id}\n          team2={team2_id}\n          stats={stats}\n        />\n      ) : (\n        <div className='loading' />\n      )}\n    </div>\n  </div>\n)\n\nconst TeamsCompareComposed = compose<TPropsInner, {}>(\n  inject(\n    'lexics',\n    'teamsCompareWidget',\n    'matchProfile',\n  ),\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(\n    ({ lexics: { lang } }) => ({\n      lang,\n      suffix: getSuffix(lang),\n    }),\n  ),\n  lifecycle<TLifecycle>({\n    componentDidMount() {\n      const {\n        lang: currentLang,\n        matchProfile: { matchId },\n        teamsCompareWidget: { basicFetch },\n      } = this.props\n      basicFetch(currentLang, matchId, defaultParams)\n    },\n    componentDidUpdate(prevProps) {\n      const {\n        lang: currentLang,\n        matchProfile: { matchId },\n        teamsCompareWidget: { fetchStats, selectedParams },\n      } = this.props\n\n      if (prevProps.lang !== currentLang) {\n        const paramsIds = map(selectedParams, 'param_id')\n        fetchStats(currentLang, matchId, paramsIds)\n      }\n    },\n  }),\n  observer,\n)\n\nexport const TeamsCompare = TeamsCompareComposed(TeamsCompareComponent)\n","import { types } from 'mobx-state-tree'\nimport { callApi } from 'react-sport'\n// @ts-ignore\nimport routes from 'config/routes'\n\nconst TeamProfileApiActions = types.model({}).actions(self => ({\n  fetch(teamId: string | number) {\n    const url = `${routes.API_ROOT}/data`\n    const config = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'scout_team_inf',\n        params: {\n          _p_team_id: teamId,\n        },\n      }),\n    }\n    callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        self.profile = null\n        //@ts-ignore\n        self.isLoaded = false\n      },\n      //@ts-ignore\n      onSuccess: self._onSuccess,\n      //@ts-ignore\n      onError: self._onError,\n    })\n  },\n\n  _onSuccess(json: {\n    data: Array<{\n      scout_team_inf: Array<{}>,\n    }>,\n  }) {\n    //@ts-ignore\n    self.isLoaded = true\n    //@ts-ignore\n    self.profile = json.data[0].scout_team_inf[0] || null\n    //@ts-ignore\n    self.error = null\n  },\n\n  _onError(error: any) {\n    //@ts-ignore\n    self.error = error\n  },\n}))\n\nexport default TeamProfileApiActions\n","import { types } from 'mobx-state-tree'\nimport TeamProfileApiActions from './TeamProfileApiActions'\n\nexport const TeamProfile = types.model('TeamProfile', {\n  profile: types.maybeNull(types.frozen({})),\n  isLoaded: types.boolean,\n  error: types.maybeNull(types.frozen({})),\n})\n\nconst TeamProfileStore = types.compose(\n  TeamProfile,\n  TeamProfileApiActions,\n)\n\nexport default TeamProfileStore\n","import TeamProfileStore from './TeamProfileStore'\n\nexport default TeamProfileStore.create({\n  profile: null,\n  isLoaded: false,\n  error: null,\n})\n","import { types } from 'mobx-state-tree'\nimport { values } from 'mobx'\n\nimport orderBy from 'lodash/orderBy'\nimport get from 'lodash/get'\nimport head from 'lodash/head'\n\nimport { callApi } from 'react-sport'\n// @ts-ignore\nimport routes from 'config/routes'\n\nconst TournamentPageApiActions = types.model({}).actions(self => ({\n  fetchSeasons(tournamentId: number) {\n    const url = `${routes.API_ROOT}/data`\n    const config = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'scout_tournament_season_list',\n        params: {\n          _p_tournament_id: tournamentId,\n        },\n      }),\n    }\n\n    return callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        self.isLoaded = false\n        //@ts-ignore\n        self.error = null\n      },\n      //@ts-ignore\n      onSuccess: json => self._onSuccessSeasons(json, tournamentId),\n      //@ts-ignore\n      onError: self._onError,\n    })\n  },\n\n  _onSuccessSeasons(\n    json: {\n      data: Array<{\n        scout_tournament_season_list: Array<{}>,\n      }>,\n    },\n    tournamentId: number,\n  ) {\n    const apiResponse = orderBy(\n      get(json, 'data[0].scout_tournament_season_list', []),\n      ['season_id'],\n      ['desc'],\n    )\n    //@ts-ignore\n    apiResponse.forEach(season => self.seasons.set(season.season_id, season))\n    //@ts-ignore\n    const defaultSeasonId = head(values(self.seasons)).season_id\n    //@ts-ignore\n    self.changeActiveSeason(tournamentId, defaultSeasonId)\n    //@ts-ignore\n    self.error = null\n    //@ts-ignore\n    self.isLoaded = true\n  },\n\n  _onError(error: any) {\n    //@ts-ignore\n    self.error = error\n  },\n}))\n\nexport default TournamentPageApiActions\n","import { types, getRoot } from 'mobx-state-tree'\nimport { values } from 'mobx'\n\nconst TournamentSeasonSelectActions = types\n  .model({})\n  .volatile(() => ({\n    selectedSeason: {},\n    opened: false,\n  }))\n  .actions(self => ({\n    changeActiveSeason: (tournamentId: number, id: number) => {\n      //@ts-ignore\n      self.selectedSeason = self.seasons.get(id)\n      getRoot(self).tournamentMatches.fetchMatchesInfo(tournamentId, id)\n    },\n  }))\n  .views(self => ({\n    get seasonsList() {\n      //@ts-ignore\n      return values(self.seasons)\n    },\n  }))\n\nexport default TournamentSeasonSelectActions\n","import { types } from 'mobx-state-tree'\nimport TournamentSeasonSelectApiActions from './TournamentSeasonSelectApiActions'\nimport TournamentSeasonSelectActions from './TournamentSeasonSelectActions'\n\nconst Season = types.model('Season', {\n  season_id: types.maybeNull(types.number),\n  season_name: types.maybeNull(types.string),\n})\n\nexport const TournamentSeasons = types.model('TournamentSeasons', {\n  seasons: types.map(Season),\n  isLoaded: false,\n  error: types.maybeNull(types.frozen({})),\n})\n\nconst TournamentSeasonsStore = types.compose(\n  TournamentSeasons,\n  TournamentSeasonSelectApiActions,\n  TournamentSeasonSelectActions,\n)\n\nexport default TournamentSeasonsStore\n","import { types } from 'mobx-state-tree'\n\nimport get from 'lodash/get'\n\nimport { callApi } from 'react-sport'\n\n// @ts-ignore\nimport routes from 'config/routes'\n\nconst TournamentPageApiActions = types.model({}).actions(self => ({\n  fetchTournamentProfile(tournamentId: number) {\n    const url = `${routes.API_ROOT}/data`\n    const config = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'scout_tournament_inf',\n        params: {\n          _p_tournament_id: tournamentId,\n        },\n      }),\n    }\n\n    return callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        self.profile = {}\n        //@ts-ignore\n        self.isLoaded = false\n      },\n      //@ts-ignore\n      onSuccess: self._onSuccess,\n      //@ts-ignore\n      onError: self._onError,\n    })\n  },\n\n  _onSuccess(json: {\n    data: Array<{\n      scout_tournament_inf: {},\n    }>,\n  }) {\n    //@ts-ignore\n    self.profile = get(json, 'data[0].scout_tournament_inf', {})\n    //@ts-ignore\n    self.error = null\n    //@ts-ignore\n    self.isLoaded = true\n  },\n\n  _onError(error: any) {\n    //@ts-ignore\n    self.error = error\n  },\n}))\n\nexport default TournamentPageApiActions\n","import { types } from 'mobx-state-tree'\nimport TournamentPageApiActions from './TournamentPageApiActions'\n\nexport const TournamentPage = types.model('TournamentProfile', {\n  profile: types.maybeNull(types.frozen({})),\n  isLoaded: false,\n  error: types.maybeNull(types.frozen({})),\n})\n\nconst TournamentPageStore = types.compose(\n  TournamentPage,\n  TournamentPageApiActions,\n)\n\nexport default TournamentPageStore\n","import { types } from 'mobx-state-tree'\n\nconst getPlainError = (error: Error | null) =>\n  (error\n    ? {\n      message: error.message,\n      name: error.name,\n      stack: error.stack,\n    }\n    : null)\n\nconst Error = types.model({\n  message: types.string,\n  name: '',\n  stack: types.maybe(types.string),\n})\n\nexport const ErrorModel = types\n  .model({\n    error: types.maybeNull(Error),\n  })\n  .actions(self => ({\n    setError(error: Error | null) {\n      self.error = getPlainError(error)\n    },\n  }))\n","import { types } from 'mobx-state-tree'\n\nexport const FetchModel = types\n  .model('Fetch', {\n    isLoaded: false,\n  })\n  .actions(self => ({\n    setIsLoaded(isLoaded: boolean) {\n      self.isLoaded = isLoaded\n    },\n  }))\n","import { types, Instance } from 'mobx-state-tree'\n\nimport { TableStore } from 'features/Table/models/tableModel'\n\nimport { ErrorModel } from 'features/ErrorModel'\nimport { FetchModel } from 'features/FetchModel'\n\nconst PlayerData = types.model('PlayerData', {\n  firstname_eng: types.maybeNull(types.string),\n  firstname_rus: types.maybeNull(types.string),\n  lastname_eng: types.maybeNull(types.string),\n  lastname_rus: types.maybeNull(types.string),\n  nickname_eng: types.maybeNull(types.string),\n  nickname_rus: types.maybeNull(types.string),\n})\n\nconst PlayerSimpleModel = types.model('PlayerSimple', {\n  f_player: types.number,\n  prop_player: types.array(PlayerData),\n})\n\nconst ParamExtended = types.model('Param', {\n  f_match: types.number,\n  f_match_event_ids: types.maybeNull(types.array(types.number)),\n  f_match_event_ids_json: types.maybeNull(types.array(types.number)),\n  f_option_0: types.number,\n  f_option_1: types.maybeNull(types.number),\n  f_option_2: types.maybeNull(types.number),\n  f_option_3: types.maybeNull(types.number),\n  f_option_4: types.maybeNull(types.number),\n  f_option_5: types.maybeNull(types.number),\n  f_option_6: types.maybeNull(types.number),\n  f_param: types.maybeNull(types.number),\n  f_team: types.maybeNull(types.number),\n  f_player: types.maybeNull(types.number),\n  f_variant_zone: types.maybeNull(types.number),\n  id: types.string,\n  param_name: types.string,\n  value: types.maybeNull(types.number),\n})\n\nexport const MatchPagePlayersModel = types.compose(\n  types.model('MatchPagePlayers', {\n    error: types.maybeNull(types.frozen({})),\n    isLoaded: false,\n    playerList: types.frozen({}),\n    playersInfo: types.array(PlayerSimpleModel),\n    storeName: 'matchPagePlayers',\n    tableStats: types.array(ParamExtended),\n    tables: types.frozen({}),\n  }),\n  ErrorModel,\n  FetchModel,\n  TableStore,\n)\n\nexport type TPlayerSimpleModel = Instance<typeof PlayerSimpleModel>\n","import { MatchPagePlayersApiActions } from './api'\n\nexport const matchTable = MatchPagePlayersApiActions.create()\n","import stores from 'features/stores'\n\nimport get from 'lodash/get'\n\nimport { MatchPagePlayersModel } from './matchPlayersStore'\n\nexport const MatchPagePlayersViews = MatchPagePlayersModel\n  .views(() => ({\n    get teamsId() {\n      const { team1_id, team2_id } = get(stores, 'matchProfile.data', {})\n\n      return [team1_id, team2_id]\n    },\n  }))\n","import filter from 'lodash/fp/filter'\nimport sortBy from 'lodash/fp/sortBy'\nimport flow from 'lodash/fp/flow'\n\nimport reduce from 'lodash/reduce'\nimport map from 'lodash/map'\nimport get from 'lodash/get'\nimport find from 'lodash/find'\nimport isEmpty from 'lodash/isEmpty'\nimport set from 'lodash/set'\n\nimport { saveTablesToLocalStorage } from 'module/utils/helpers'\n\nimport { MatchPagePlayersViews } from './views'\n\nexport const MatchPagePlayersActions = MatchPagePlayersViews\n  .actions(self => ({\n    setTables(tables:{}) {\n      self.tables = tables\n    },\n  }))\n  .actions(self => ({\n    saveTables() {\n      const filteredParams = filter(\n        ({ groupName, params }) => !isEmpty(params),\n      )(self.gearParams)\n      const updatedTables = reduce(filteredParams, (acc, curr, index) => {\n        const position = index + 1\n        const table = {\n          position,\n          selectedParams: flow(\n            filter('is_default'),\n            sortBy(['gear_group_id', 'sort_order']),\n          )(curr.params),\n          summaryType: 'average_for_match',\n          tableName: String(curr.groupName),\n        }\n\n        if (!isEmpty(table.selectedParams)) {\n          set(\n            table,\n            'team',\n            ['showHomeTeam', 'showOppTeam'],\n          )\n          set(\n            acc,\n            position,\n            table,\n          )\n        }\n\n        return acc\n      }, {})\n\n      self.setTables(updatedTables)\n\n      saveTablesToLocalStorage({\n        name: 'matchPagePlayers',\n        tables: self.tables,\n      })\n    },\n\n    toggleCheckTeam(team: Array<number>, table: { position: number }) {\n      const { position } = table\n      const updatedTables = {\n        ...self.tables,\n        [position]: {\n          ...table,\n          team,\n        },\n      }\n\n      self.setTables(updatedTables)\n    },\n\n    // Дополняем профиль игрока именем и фамилией\n    updatePlayerProfile() {\n      const teams = self.teamsId\n\n      self.playerList = reduce(\n        teams,\n        (acc, curr) => {\n          const currentTeamPlayers: Array<{ f_player: number }> = get(self.playerList, curr, [])\n          const updatedPlayers = map(currentTeamPlayers, (player) => {\n            const {\n              firstname_eng,\n              firstname_rus,\n              lastname_eng,\n              lastname_rus,\n            } = get(\n              find(self.playersInfo, { f_player: player.f_player }),\n              'prop_player[0]',\n              {},\n            )\n\n            return {\n              ...player,\n              firstname_eng,\n              firstname_rus,\n              lastname_eng,\n              lastname_rus,\n            }\n          })\n          set(acc, curr, updatedPlayers)\n          return acc\n        },\n        {},\n      )\n    },\n  }))\n","import map from 'lodash/fp/map'\nimport values from 'lodash/fp/values'\nimport flatten from 'lodash/fp/flatten'\nimport filter from 'lodash/fp/filter'\nimport pipe from 'lodash/fp/pipe'\n\nimport routes from 'config/routes'\n\nimport { callApi } from 'react-sport'\n\nimport { MatchPagePlayersActions } from '../actions'\n\ntype TConfig = {\n  body: string,\n  method: string,\n}\nexport const MatchPagePlayersFetchPlayersInfo = MatchPagePlayersActions.actions(self => ({\n  _onSuccessPlayersInfo(json: { data: typeof self.playersInfo }) {\n    self.playersInfo = json.data || []\n    self.setError(null)\n    self.updatePlayerProfile()\n  },\n}))\n  .actions(self => ({\n    fetchPlayersInfo() {\n      const url: string = `${routes.API_ROOT}/data`\n      const players = pipe(\n        values,\n        flatten,\n        filter({ type_player: 'p' }),\n        map('f_player'),\n      )(self.playerList)\n\n      const config: TConfig = {\n        body: JSON.stringify({\n          params: { _p_player_id: players },\n          proc: 'scout_players_info',\n        }),\n        method: 'POST',\n      }\n\n      return callApi({\n        config,\n        onError: self._onError,\n        onRequest: () => { self.setIsLoaded(false) },\n        onSuccess: self._onSuccessPlayersInfo,\n        url,\n      })\n    },\n  }))\n","import filter from 'lodash/fp/filter'\n\nimport reduce from 'lodash/reduce'\n\nimport routes from 'config/routes'\n\nimport { callApi } from 'react-sport'\n\nimport { MatchPagePlayersFetchPlayersInfo } from './fetchPlayersInfo'\n\ntype TConfig = {\n  body: string,\n  method: string,\n}\n\nexport const MatchPagePlayersFetchPlayers = MatchPagePlayersFetchPlayersInfo.actions(self => ({\n  _onSuccessPlayers(json: { data: typeof self.playersInfo }) {\n    const playersPlayedThisMatch = filter<Array<{}>>('played')(json.data)\n\n    self.playerList = reduce(\n      playersPlayedThisMatch,\n      (\n        acc: {[key: number]: Array<{}>},\n        curr: any,\n      ) => {\n        const players = acc[curr.f_team] || []\n\n        acc[curr.f_team] = [\n          ...players,\n          {\n            ...curr,\n            sortBy: 0,\n          },\n        ]\n\n        return acc\n      }, {},\n    )\n\n    self.setError(null)\n\n    // Делаем запрос для получения данных по полученным игрокам\n    self.fetchPlayersInfo()\n  },\n}))\n  .actions(self => ({\n    fetchPlayers(matchId: number | string) {\n      const url: string = `${routes.API_ROOT}/data`\n      const config: TConfig = {\n        body: JSON.stringify({\n          params: {\n            _v_match_id: matchId,\n            _v_played: true,\n          },\n          proc: 'ask_players_list_match',\n        }),\n        method: 'POST',\n      }\n\n      return callApi({\n        config,\n        onError: self._onError,\n        onRequest: () => { self.setIsLoaded(false) },\n        onSuccess: self._onSuccessPlayers,\n        url,\n      })\n    },\n  }))\n","import { filterDBStats } from 'module/utils/helpers'\n\nimport map from 'lodash/fp/map'\nimport values from 'lodash/fp/values'\nimport flatten from 'lodash/fp/flatten'\nimport pipe from 'lodash/fp/pipe'\n\nimport isEmpty from 'lodash/isEmpty'\n\nimport { callApi } from 'react-sport'\n\nimport routes from 'config/routes'\n\nimport { MatchPagePlayersFetchPlayers } from './fetchPlayers'\n\ntype TConfig = {\n  body: string,\n  method: string,\n}\n\nexport const MatchPagePlayersFetchTableStats = MatchPagePlayersFetchPlayers.actions(self => ({\n  _onSuccessStats(json: { data: typeof self.tableStats }) {\n    //@ts-ignore\n    self.tableStats = filterDBStats(json.data)\n    if (\n      isEmpty(self.tables)\n      && window.localStorage.getItem('matchPagePlayers') === null\n    ) {\n      self.saveTables()\n    } else {\n      //@ts-ignore\n      self.tables = JSON.parse(window.localStorage.getItem('matchPagePlayers'))\n    }\n    self.setIsLoaded(true)\n    self.setError(null)\n  },\n}))\n  .actions(self => ({\n    fetchTableStats(matchId: number | string) {\n      const url: string = `${routes.API_ROOT}/data`\n      const config: TConfig = {\n        body: JSON.stringify({\n          params: {\n            _v_match_id: [matchId],\n            _v_param_id: map('param_id')(self.totalParams),\n            _v_player_id:\n          pipe(\n            values,\n            flatten,\n            map('f_player'),\n          )(self.playerList),\n          },\n          proc: 'ask_player_param_view',\n        }),\n        method: 'POST',\n      }\n      return callApi({\n        config,\n        onError: self._onError,\n        onRequest: () => {\n          self.setError(null)\n          self.setIsLoaded(false)\n        },\n        onSuccess: self._onSuccessStats,\n        url,\n      })\n    },\n  }))\n","import { flow } from 'mobx-state-tree'\n\nimport { MatchPagePlayersFetchTableStats } from './fetchTableStats'\n\nexport const MatchPagePlayersApiActions = MatchPagePlayersFetchTableStats\n  .actions(self => ({\n    fetchMatchesInfo: flow(\n      function* fetchMatchesInfo(matchId: number) {\n        try {\n          // Делаем запрос для получения списка игроков в командах\n          yield self.fetchPlayers(matchId)\n          // Делаем запрос для получения списка всех параметров\n          yield self.getGearParamsList(1)\n          // Делаем запрос для получения значений для игроков\n          yield self.fetchTableStats(matchId)\n        } catch (error) {\n          self._onError(error)\n        }\n      },\n    ),\n  }))\n","import { types } from 'mobx-state-tree'\n\nconst Param = types.model('ParamSimple', {\n  p: types.number,\n  o: types.number,\n  v: types.number,\n})\n\nconst Match = types.model('Match', {\n  f_match: types.number,\n  match_date: types.string,\n  match_status: types.number,\n  home_match: types.string,\n  win_lose: types.string,\n  name_ru: types.string,\n  name_en: types.string,\n  name_opponent_ru: types.string,\n  name_opponent_en: types.string,\n  score: types.number,\n  opponent_score: types.number,\n  team_id: types.number,\n  opp_team_id: types.number,\n  params: types.maybeNull(types.array(Param)),\n  params_opp: types.maybeNull(types.array(Param)),\n})\n\nexport const TournamentMatches = types.model('TournamentSeasons', {\n  storeName: 'tournamentMatches',\n  matches: types.array(Match),\n  isLoaded: false,\n  error: types.maybeNull(types.frozen({})),\n})\n","\nimport { types } from 'mobx-state-tree'\nimport orderBy from 'lodash/orderBy'\nimport get from 'lodash/get'\n\nimport { callApi } from 'react-sport'\n\n// @ts-ignore\nimport routes from 'config/routes'\n\ntype TConfig = {\n  method: string,\n  body: string,\n};\n\nconst url: string = `${routes.API_ROOT}/data`\n\nexport const TournamentMatchesApiActions = types.model({}).actions(self => ({\n  fetchMatchesInfo(tournamentId: number, seasonId: number) {\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'scout_tournament_matches_stat',\n        params: {\n          _p_tournament_id: tournamentId,\n          _p_season_id: seasonId,\n        },\n      }),\n    }\n\n    return callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        self.isLoaded = false\n        //@ts-ignore\n        self.error = null\n        //@ts-ignore\n        self.matches = []\n      },\n      //@ts-ignore\n      onSuccess: self._onSuccessMatchesInfo,\n      //@ts-ignore\n      onError: self._onError,\n    })\n  },\n\n  _onSuccessMatchesInfo(json: {\n    data: Array<{\n      scout_tournament_matches_stat: Array<{}>,\n    }>,\n  }) {\n    //@ts-ignore\n    self.matches = orderBy(\n      get(json, 'data[0].scout_tournament_matches_stat', []),\n      'match_date',\n      'desc',\n    )\n    //@ts-ignore\n    self.error = null\n    //@ts-ignore\n    self.isLoaded = true\n  },\n\n  _onError(error: any) {\n    //@ts-ignore\n    self.error = error\n  },\n}))\n","\nimport { types } from 'mobx-state-tree'\n\nimport map from 'lodash/map'\n\nexport const TournamentMatchesViews = types.model({}).views(self => ({\n  // Считаем кол-во матчей для запроса\n  get matchesIds() {\n    //@ts-ignore\n    return map(self.matches, 'f_match')\n  },\n}))\n","import { types } from 'mobx-state-tree'\n\nimport { TournamentMatches } from './TournamentMatchesStore'\nimport { TournamentMatchesApiActions } from './TournamentMatchesApiActions'\nimport { TournamentMatchesViews } from './TournamentMatchesViews'\n\nexport const TournamentMatchesStore = types.compose(\n  TournamentMatches,\n  TournamentMatchesApiActions,\n  TournamentMatchesViews,\n)\n","import { types } from 'mobx-state-tree'\n\nimport set from 'lodash/set'\nimport reduce from 'lodash/reduce'\nimport uniq from 'lodash/uniq'\nimport get from 'lodash/get'\nimport map from 'lodash/map'\n\nimport { callApi } from 'react-sport'\n\nimport routes from 'config/routes'\n\nimport { team_params } from 'config/params'\nimport { filterDBStats } from 'module/utils/helpers'\n\ntype TConfig = {\n  method: string,\n  body: string,\n}\n\nconst TournamentHeaderStatsApiActions = types.model({}).actions(self => ({\n  fetchHeaderParams() {\n    const url: string = `${routes.API_ROOT}/data`\n    const config: TConfig = {\n      method: 'POST',\n      body: JSON.stringify({\n        proc: 'ask_tournament_param_view',\n        params: {\n          //@ts-ignore\n          _v_match_id: self.matchesIds,\n          _v_param_id: map(team_params, 'param_id'),\n        },\n      }),\n    }\n    return callApi({\n      url,\n      config,\n      onRequest: () => {\n        //@ts-ignore\n        self.loaded = false\n        //@ts-ignore\n        self.error = null\n      },\n      //@ts-ignore\n      onSuccess: (json: { data: Array<{}> }) => self._onSuccesHeaderParams(json),\n      //@ts-ignore\n      onError: (error: any) => self._onError(error),\n    })\n  },\n\n  _onSuccesHeaderParams(json: { data: Array<{}> }) {\n    // Фильтруем ответ. Нужно отсеить параметры для части поля и тд\n    const filteredStats = filterDBStats(json.data)\n    //@ts-ignore\n    self.stats = reduce(\n      filteredStats,\n      (acc, { f_match, f_match_event_ids_json, f_param, value }) => {\n        //@ts-ignore\n        if (acc[f_param]) {\n          const allEvents = get(acc, `${f_param}.events`) || []\n          const matches = get(acc, `${f_param}.matches`) || []\n          const currentEvents = f_match_event_ids_json || []\n\n          //@ts-ignore\n          acc[f_param] = {\n            //@ts-ignore\n            count: acc[f_param].count + 1,\n            //@ts-ignore\n            value: acc[f_param].value + value,\n            matches: [...matches, f_match],\n            events: [...allEvents, ...currentEvents],\n          }\n        } else {\n          //@ts-ignore\n          acc[f_param] = {\n            count: 1,\n            matches: [f_match],\n            value,\n            events: f_match_event_ids_json,\n          }\n        }\n        //@ts-ignore\n        const { matches } = acc[f_param]\n        set(acc, `${f_param}.matches`, uniq(matches))\n\n        return acc\n      }, {},\n    )\n    //@ts-ignore\n    self.loaded = true\n  },\n\n  _onError(error: any) {\n    //@ts-ignore\n    self.error = error\n  },\n\n}))\n\nexport default TournamentHeaderStatsApiActions\n","import { types, getParent } from 'mobx-state-tree'\n\nimport reduce from 'lodash/reduce'\nimport size from 'lodash/size'\nimport includes from 'lodash/includes'\n\n// @ts-ignore\nimport { percentageParams } from 'config/teamPopupParams'\n\nconst TournamentHeaderStatsActions = types\n  .model({})\n  .volatile(() => ({\n    stats: {},\n  }))\n  .views(self => ({\n    get matchesIds() {\n      return getParent(self).tournamentMatches.matchesIds\n    },\n\n    get countAverageStatValue() {\n      return reduce(\n        self.stats,\n        (result, { count, matches, value }, key) => {\n          const denominator = includes(percentageParams, Number(key))\n            ? count\n            : size(matches)\n\n          return {\n            ...result,\n            [key]: value / denominator,\n          }\n        },\n        {},\n      )\n    },\n  }))\n\nexport default TournamentHeaderStatsActions\n","import { types } from 'mobx-state-tree'\nimport TournamentHeaderStatsApiActions from './TournamentHeaderStatsApiActions'\nimport TournamentHeaderStatsActions from './TournamentHeaderStatsActions'\n\nconst Param = types.model('Param', {\n  p: types.number,\n  o: types.number,\n  v: types.number,\n})\n\nconst GearParam = types.model('GearParam', {\n  f_option_3: types.number,\n  full_lexical_formula: types.string,\n  gear_group_id: types.number,\n  gear_subgroup_id: types.number,\n  is_default: types.maybeNull(types.string),\n  lexical_formula: types.string,\n  name: types.string,\n  param1_id: types.maybeNull(types.array(types.string)),\n  param2_id: types.maybeNull(types.array(types.string)),\n  param_id: types.number,\n  short_lexical_formula: types.string,\n  sort_order: types.number,\n})\n\nconst Match = types.model('Match', {\n  f_match: types.number,\n  match_date: types.string,\n  match_status: types.number,\n  home_match: types.string,\n  win_lose: types.string,\n  name_ru: types.string,\n  name_en: types.string,\n  name_opponent_ru: types.string,\n  name_opponent_en: types.string,\n  score: types.number,\n  opponent_score: types.number,\n  team_id: types.number,\n  opp_team_id: types.number,\n  params: types.maybeNull(types.array(Param)),\n  params_opp: types.maybeNull(types.array(Param)),\n})\n\nexport const TournamentHeaderStats = types.model('TournamentHeaderStats', {\n  matches: types.map(Match),\n  loaded: false,\n  error: types.maybeNull(types.frozen({})),\n  gearParams: types.maybeNull(types.array(GearParam)),\n})\n\nconst TournamentHeaderStatsStore = types.compose(\n  TournamentHeaderStats,\n  TournamentHeaderStatsApiActions,\n  TournamentHeaderStatsActions,\n)\n\nexport default TournamentHeaderStatsStore\n","import { types, Instance } from 'mobx-state-tree'\n\nimport { TableStore } from 'features/Table/models/tableModel'\n\nconst ParamExtended = types.model('Param', {\n  f_match: types.number,\n  f_match_event_ids: types.maybeNull(types.array(types.number)),\n  f_match_event_ids_json: types.maybeNull(types.array(types.number)),\n  f_option_0: types.number,\n  f_option_1: types.maybeNull(types.number),\n  f_option_2: types.maybeNull(types.number),\n  f_option_3: types.maybeNull(types.number),\n  f_option_4: types.maybeNull(types.number),\n  f_option_5: types.maybeNull(types.number),\n  f_option_6: types.maybeNull(types.number),\n  f_param: types.maybeNull(types.number),\n  f_player: types.maybeNull(types.number),\n  f_team: types.maybeNull(types.number),\n  f_variant_zone: types.maybeNull(types.number),\n  id: types.string,\n  param_name: types.string,\n  value: types.maybeNull(types.number),\n})\n\nexport const PlayerMatchesModel = types.compose(\n  types.model('PlayerMatchesModel', {\n    error: types.maybeNull(types.frozen({})),\n    isLoaded: false,\n    storeName: 'playerMatches',\n    tableStats: types.array(ParamExtended),\n    tables: types.frozen({}),\n    url: types.string,\n  }),\n  // общие методы и свойства таблиц\n  TableStore,\n)\n\nexport type TParamExtended = Instance<typeof ParamExtended>\n","import filter from 'lodash/filter'\nimport get from 'lodash/get'\nimport reduce from 'lodash/reduce'\nimport set from 'lodash/set'\nimport isEmpty from 'lodash/isEmpty'\n\nimport stores from 'features/stores'\n\nimport { saveTablesToLocalStorage } from 'module/utils/helpers'\n\nimport { PlayerMatchesModel } from './PlayerPageMatchesStore'\n\ntype TTable = {\n  position: number,\n  selectedParams: Array<{ is_default: string | null }>,\n  summaryType: string,\n  tableName: string | number,\n}\n\n// Базовые действия с таблицами на профиле игрока\nexport const PlayerPageMatchesBaseActions = PlayerMatchesModel\n  .actions(self => ({\n    saveToStorage(localStorageName: string) {\n      saveTablesToLocalStorage({\n        id: get(stores, 'playerProfile.profile.amplua.id'),\n        name: localStorageName,\n        tables: self.tables,\n      })\n    },\n  }))\n  .actions(self => ({\n    // Записываем в стор таблицы после получения параметров\n    saveTables(localStorageName: string) {\n      const filteredParams = filter(self.gearParams, ({ params }) => params.length)\n\n      self.tables = reduce(filteredParams, (acc, curr, index) => {\n        const position = index + 1\n        const table: TTable = {\n          position,\n          selectedParams: filter(curr.params, { is_default: 'default' }),\n          summaryType: 'average_for_match',\n          tableName: String(curr.groupName),\n        }\n\n        if (!isEmpty(table.selectedParams)) {\n          set(acc, position, table)\n        }\n\n        return acc\n      }, {})\n\n      self.saveToStorage(localStorageName)\n    },\n  }))\n","import get from 'lodash/get'\nimport reduce from 'lodash/reduce'\nimport size from 'lodash/size'\nimport omit from 'lodash/omit'\nimport keys from 'lodash/keys'\n\nimport { PlayerPageMatchesBaseActions } from './baseActions'\n\nconst moveTypes = {\n  DOWN: 'down',\n  UP: 'up',\n}\n/* Действия с таблицами\n(добавление, удаление, перемещение, возврат к значению по умолчанию)\n*/\nexport const PlayerPageMatchesActions = PlayerPageMatchesBaseActions\n  .actions(self => ({\n    addTable(\n      name: string,\n      localStorageName: string,\n      selectedParams: Array<{}>,\n    ) {\n      const position: number = size(self.tables) + 1\n      self.tables = {\n        ...self.tables,\n        [position]: {\n          position,\n          selectedParams,\n          summaryType: 'average_for_match',\n          tableName: name,\n        },\n      }\n      self.saveToStorage(localStorageName)\n    },\n    deleteTable(position: number, localStorageName: string) {\n      const tablesList = keys(self.tables)\n      // Удаляем текущую таблицу\n      const omitedTables = omit(self.tables, position)\n      // Перезаписываем все таблицы, позиция которых после удаленной. Передвигаем весь список\n      const updatedTables = reduce<{}, {[key: string]: {}}>(\n        omitedTables,\n        (acc, curr, key) => {\n          const keyNum = Number(key)\n          if (keyNum > position) {\n            acc[keyNum - 1] = {\n              ...get(self.tables, key),\n              position: keyNum - 1,\n            }\n          }\n\n          acc[key] = get(self.tables, key)\n          return acc\n        },\n        {},\n      )\n\n      // Удаляем последнюю таблицу, дубль при перемещении всех наверх\n      self.tables = omit(updatedTables, size(tablesList))\n      self.saveToStorage(localStorageName)\n    },\n\n    editTable(\n      position: number,\n      name: string,\n      localStorageName: string,\n    ) {\n      self.tables = {\n        ...self.tables,\n        [position]: {\n          ...get(self.tables, position),\n          tableName: name,\n        },\n      }\n      self.saveToStorage(localStorageName)\n    },\n    moveTable(\n      position: number,\n      type: string,\n      localStorageName: string,\n    ) {\n      const tableCount: number = size(self.tables)\n      const currentTable = get(self.tables, position)\n      const prevTable = get(self.tables, [position - 1])\n      const nextTable = get(self.tables, [position + 1])\n\n      if (\n        (type === moveTypes.UP && position === 1)\n        || (type === moveTypes.DOWN && position === tableCount)\n      ) return null\n\n      if (type === moveTypes.UP) {\n        self.tables = {\n          ...self.tables,\n          [position - 1]: {\n            ...currentTable,\n            position: position - 1,\n          },\n          [position]: {\n            ...prevTable,\n            position,\n          },\n        }\n      }\n\n      if (type === moveTypes.DOWN) {\n        self.tables = {\n          ...self.tables,\n          [position]: {\n            ...nextTable,\n            position,\n          },\n          [position + 1]: {\n            ...currentTable,\n            position: position + 1,\n          },\n        }\n      }\n      return self.saveToStorage(localStorageName)\n    },\n    resetTable(localStorageName: string) {\n      self.tables = {}\n      self.saveTables(localStorageName)\n    },\n  }))\n","import { flow } from 'mobx-state-tree'\n\nimport map from 'lodash/map'\nimport get from 'lodash/get'\n\nimport { callApi } from 'react-sport'\n\nimport { filterDBStats } from 'module/utils/helpers'\nimport stores from 'features/stores'\n\nimport { TParamExtended } from './PlayerPageMatchesStore'\n\nimport { PlayerPageMatchesActions } from './actions'\n\ntype TConfig = {\n  body: string,\n  method: string,\n}\n\ntype TFetchPlayerMatches = {\n  ampluaId: number,\n  matches: Array<number>,\n  playerId: number,\n}\n\nexport const PlayerPageMatchesApiActions = PlayerPageMatchesActions\n  .actions(self => ({\n    _onError(error: {}) {\n      self.error = error\n      self.isLoaded = false\n    },\n\n    _onSuccessStats(json: { data: Array<TParamExtended> }) {\n      //@ts-ignore\n      self.tableStats = filterDBStats(json.data)\n      const playerMatches = get(\n        JSON.parse(window.localStorage.getItem('playerMatches') || '{}'),\n        get(stores, 'playerProfile.profile.amplua.id'),\n      )\n      if (playerMatches) {\n        self.tables = playerMatches\n      } else {\n        self.saveTables('playerMatches')\n      }\n      self.error = {}\n      self.isLoaded = true\n    },\n  }))\n  .actions(self => ({\n    /** Запрос для получения статистики по параметрам\n      * @param {array} matches - список матчей\n      * @param {string} teamId - айди игрока\n      */\n    fetchTableStats(matches: Array<number>, playerId: number | string) {\n      const config: TConfig = {\n        body: JSON.stringify({\n          params: {\n            _v_match_id: matches,\n            _v_param_id: map(self.totalParams, 'param_id'),\n            _v_player_id: [playerId],\n          },\n          proc: 'ask_player_param_view',\n        }),\n        method: 'POST',\n      }\n      return callApi({\n        config,\n        onError: self._onError,\n        onRequest: () => {\n          self.isLoaded = false\n          self.error = {}\n        },\n        onSuccess: self._onSuccessStats,\n        url: self.url,\n      })\n    },\n  }))\n  .actions(self => ({\n    fetchPlayerMatches: flow(\n      function* fetchPlayerMatches({\n        ampluaId,\n        matches,\n        playerId,\n      }: TFetchPlayerMatches) {\n        try {\n          // Делаем запрос для получения списка всех параметров\n          yield self.getGearParamsList(ampluaId)\n          // Делаем запрос для получения списка всех групп параметров\n          yield self.fetchGroups()\n          // Делаем запрос для получения значений для игроков\n          yield self.fetchTableStats(matches, playerId)\n        } catch (error) {\n          self._onError(error)\n        }\n      },\n    ),\n  }))\n","import routes from 'config/routes'\n\nimport { PlayerPageMatchesApiActions } from './apiActions'\n\nconst url: string = `${routes.API_ROOT}/data`\n\nexport const playerMatchesStore = PlayerPageMatchesApiActions.create({\n  error: {},\n  isLoaded: false,\n  storeName: 'playerMatches',\n  tableStats: [],\n  tables: {},\n  tempTableName: '',\n  url,\n})\n","import { types, Instance } from 'mobx-state-tree'\n\nimport { TableStore } from 'features/Table/models/tableModel'\nimport { ErrorModel } from 'features/ErrorModel'\nimport { FetchModel } from 'features/FetchModel'\n\nconst ParamExtended = types.model('Param', {\n  f_match: types.number,\n  f_match_event_ids: types.maybeNull(types.array(types.number)),\n  f_match_event_ids_json: types.maybeNull(types.array(types.number)),\n  f_option_0: types.number,\n  f_option_1: types.maybeNull(types.number),\n  f_option_2: types.maybeNull(types.number),\n  f_option_3: types.maybeNull(types.number),\n  f_option_4: types.maybeNull(types.number),\n  f_option_5: types.maybeNull(types.number),\n  f_option_6: types.maybeNull(types.number),\n  f_param: types.maybeNull(types.number),\n  f_player: types.maybeNull(types.number),\n  f_team: types.maybeNull(types.number),\n  f_variant_zone: types.maybeNull(types.number),\n  id: types.string,\n  param_name: types.string,\n  value: types.maybeNull(types.number),\n})\n\nexport const TeamMatchesModel = types.compose(\n  types.model('TeamMatchesModel', {\n    isLoaded: false,\n    showOpponentStats: types.boolean,\n    storeName: 'teamMatches',\n    tableStats: types.array(ParamExtended),\n    tables: types.frozen({}),\n    url: types.string,\n  }),\n  ErrorModel,\n  FetchModel,\n  // общие методы и свойства таблиц\n  TableStore,\n)\n\nexport type TParamExtended = Instance<typeof ParamExtended>\n","import { dataURL } from 'config/routes'\n\nimport { TeamPageMatchesApiActions } from './apiActions'\n\nexport const teamMatchesStore = TeamPageMatchesApiActions.create({\n  error: null,\n  isLoaded: false,\n  showOpponentStats: false,\n  storeName: 'teamMatches',\n  tableStats: [],\n  tables: {},\n  tempTableName: '',\n  url: dataURL,\n})\n","import filter from 'lodash/filter'\nimport isEmpty from 'lodash/isEmpty'\nimport reduce from 'lodash/reduce'\nimport set from 'lodash/set'\n\nimport { saveTablesToLocalStorage } from 'module/utils/helpers'\n\nimport { TeamMatchesModel, TParamExtended } from './model'\n\ntype TTable = {\n  position: number,\n  selectedParams: Array<{ is_default: string | null }>,\n  summaryType: string,\n  tableName: string | number,\n}\n\nexport const TeamPageMatchesActions = TeamMatchesModel\n  .actions(self => ({\n    setTableStats(tableStats: Array<TParamExtended>) {\n      //@ts-ignore\n      self.tableStats = tableStats\n    },\n    setTables(tables:{}) {\n      self.tables = tables\n    },\n  }))\n  .actions(self => ({\n    // Записываем в стор таблицы после получения параметров\n    saveTables() {\n      const filteredParams = filter(self.gearParams, ({ params }) => params.length)\n\n      const updatedTables = reduce(filteredParams, (acc, curr, index) => {\n        const position = index + 1\n        const table: TTable = {\n          position,\n          selectedParams: filter(curr.params, { is_default: 'default' }),\n          summaryType: 'average_for_match',\n          tableName: String(curr.groupName),\n        }\n\n        if (!isEmpty(table.selectedParams)) {\n          set(acc, position, table)\n        }\n\n        return acc\n      }, {})\n\n      self.setTables(updatedTables)\n\n      saveTablesToLocalStorage({\n        name: 'teamMatches',\n        tables: self.tables,\n      })\n    },\n\n    toggleShowOpponent() {\n      self.showOpponentStats = !self.showOpponentStats\n    },\n  }))\n","import { flow } from 'mobx-state-tree'\n\nimport map from 'lodash/map'\nimport isEmpty from 'lodash/isEmpty'\n\nimport { callApi } from 'react-sport'\n\nimport { filterDBStats } from 'module/utils/helpers'\n\nimport { TeamPageMatchesActions } from './actions'\n\nimport { TParamExtended } from './model'\n\ntype TConfig = {\n  body: string,\n  method: string,\n}\n\ntype TFetchTeamMatches = {\n  matches: Array<number>,\n  teamId: Array<number>,\n}\n\nexport const TeamPageMatchesApiActions = TeamPageMatchesActions\n  .actions(self => ({\n    _onError(error: Error) {\n      self.setError(error)\n      self.setIsLoaded(false)\n    },\n\n    _onSuccessStats(json: { data: Array<TParamExtended> }) {\n      const teamMatches = JSON.parse(window.localStorage.getItem('teamMatches') || '{}')\n\n      self.setTableStats(filterDBStats(json.data))\n\n      if (!isEmpty(teamMatches)) {\n        self.setTables(teamMatches)\n      } else {\n        self.saveTables()\n      }\n      self.setError(null)\n      self.setIsLoaded(true)\n    },\n  }))\n  .actions(self => ({\n    /** Запрос для получения статистики по параметрам\n      * @param {array} matches - список матчей\n      * @param {array} teamId - массив айди команд\n      */\n    fetchTableStats(matches: Array<number>, teamId: Array<number | string>) {\n      const config: TConfig = {\n        body: JSON.stringify({\n          params: {\n            _v_match_id: matches,\n            _v_param_id: map(self.totalParams, 'param_id'),\n            _v_team_id: teamId,\n          },\n          proc: 'ask_team_param_view',\n        }),\n        method: 'POST',\n      }\n      return callApi({\n        config,\n        onError: self._onError,\n        onRequest: () => {\n          self.setIsLoaded(false)\n          self.setError(null)\n        },\n        onSuccess: self._onSuccessStats,\n        url: self.url,\n      })\n    },\n  }))\n  .actions(self => ({\n    fetchTeamMatches: flow(\n      function* fetchTeamMatches({\n        matches,\n        teamId,\n      }: TFetchTeamMatches) {\n        try {\n          // Делаем запрос для получения списка всех параметров для шестеренки\n          yield self.getGearParamsList(0)\n          // Делаем запрос для получения значений для команд\n          yield self.fetchTableStats(matches, teamId)\n        } catch (error) {\n          self.setError(error)\n        }\n      },\n    ),\n  }))\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, lifecycle } from 'recompose'\nimport get from 'lodash/get'\nimport reduce from 'lodash/reduce'\nimport includes from 'lodash/includes'\n\nimport { tableTypes } from 'config/tables'\nimport { withSpinnerWhileLoading } from 'hocs'\n\nimport { Tables } from 'features/Table'\n\nimport {\n  TPropsInner,\n  TProps,\n  TLifecycle,\n  TParam,\n} from './types'\n\nconst TeamPageMatchesComponent = ({\n  pageId,\n  teamTable: {\n    tables,\n  },\n}: TPropsInner) => (\n  <div>\n    <Tables\n      tableType={tableTypes.teamMatches}\n      tables={tables}\n      pageId={pageId}\n    />\n  </div>\n)\n\nconst teamPageMatchesComposed = compose<TPropsInner, TProps>(\n  inject(\n    'teamTable',\n    'selectedMatches',\n    'matches',\n  ),\n  withSpinnerWhileLoading(\n    ({ pageId, selectedMatches }) => !(selectedMatches.team[pageId]),\n  ),\n  lifecycle<TLifecycle>({\n    componentDidMount() {\n      const {\n        matches: { list },\n        pageId,\n        selectedMatches,\n        teamTable: { fetchTeamMatches },\n      } = this.props\n\n      // Необходимо подготовить id команд соперников из выбранных матчей\n      const selectedMatchesIds = get(selectedMatches, ['team', pageId])\n      const allMatches = get(list, [pageId, 'matches'])\n      const opponentsIds = reduce(\n        allMatches,\n        (acc: Array<number>, curr: TParam) => {\n          if (includes(selectedMatchesIds, curr.f_match)) {\n            acc.push(Number(curr.f_team_opponent))\n          }\n          return acc\n        }, [],\n      )\n      fetchTeamMatches({\n        matches: selectedMatchesIds,\n        teamId: [Number(pageId), ...opponentsIds],\n      })\n    },\n  }),\n  withSpinnerWhileLoading(\n    ({ teamTable }) => !(teamTable.isLoaded),\n  ),\n  observer,\n)\n\nexport const TeamPageMatches = teamPageMatchesComposed(TeamPageMatchesComponent)\n","import { types } from 'mobx-state-tree'\n\nimport { stores as remoteStore } from 'react-sport'\n\nimport routes from 'config/routes'\nimport { langsList, profilePaths } from 'config/common'\n\nimport history from 'features/history'\n\n// @ts-ignore\nimport BasicStore from 'features/stores/BasicStore'\n// @ts-ignore\nimport Tabs from 'features/stores/Tabs'\n// @ts-ignore\nimport Matches from 'features/stores/Matches/MatchesStore'\n// @ts-ignore\nimport PlayerProfile from 'features/stores/PlayerProfile/PlayerProfileStore'\n// @ts-ignore\nimport PlayerStats from 'features/stores/PlayerStatsHeader/PlayerStatsHeaderStore'\n// @ts-ignore\nimport TeamStats from 'features/stores/TeamStatsHeader/TeamStatsHeaderStore'\n// @ts-ignore\nimport InfoItem from 'features/stores/InfoItem'\n// @ts-ignore\nimport ComposeMarkers from 'features/stores/Markers/ComposeMarkers'\n// @ts-ignore\nimport Zones from 'features/stores/Zones/ZonesStore'\n// @ts-ignore\nimport ShotTypes from 'features/stores/ShotType/ShotTypeStore'\n// @ts-ignore\nimport MapShoot from 'features/stores/MapShoot/MapShootStore'\n// @ts-ignore\nimport PlayerInfo from 'features/stores/PlayerInfo/PlayerInfoStore'\n// @ts-ignore\nimport ToolTips from 'features/stores/ToolTips/ToolTipsStore'\n// @ts-ignore\nimport ShootsRange from 'features/stores/ShootsRange/ShootsRange'\n// @ts-ignore\nimport VideoCuts from 'features/stores/VideoCuts/ComposeVideoCuts'\n//@ts-ignore\nimport MatchLinks from 'features/stores/MatchLinks/MatchLinksStore'\n// @ts-ignore\nimport TableReports from 'features/stores/TableReports/TableReportsStore'\n// @ts-ignore\nimport playersCompareWidget from 'models/Widgets/PlayersCompare'\n// @ts-ignore\nimport teamPlayers from 'models/StatsTable/TeamTable/TeamPlayers'\n// @ts-ignore\nimport selectedMatches from 'models/SelectedMatches'\n// @ts-ignore\nimport tableReportsMST from 'models/TableReports'\n// @ts-ignore\nimport matchProfile from 'models/MatchProfile'\n// @ts-ignore\nimport videoLink from 'models/ExternalVideoLinks'\n// @ts-ignore\nimport filters from 'features/MapFilters/models'\n// @ts-ignore\nimport { TeamsCompareStore } from 'features/TeamsCompareWidget'\n// @ts-ignore\nimport teamProfile from 'features/TeamPage/models'\n// @ts-ignore\nimport TournamentSeasonSelectStore from 'features/TournamentSeasonSelect/models/TournamentSeasonSelectStore'\n// @ts-ignore\nimport TournamentPageStore from 'features/TournamentPage/models/TournamentPageStore'\n// @ts-ignore\nimport { TournamentMatchesTableStore } from 'features/TournamentPageMatchesTable/models/TournamentMatchesTableStore'\n// @ts-ignore\nimport { matchTable } from 'features/MatchPagePlayers/models'\n// @ts-ignore\nimport { TournamentMatchesStore } from 'features/TournamentPageMatches'\n// @ts-ignore\nimport { TournamentPlayersTableStore } from 'features/TournamentPagePlayersTable'\n// @ts-ignore\nimport TournamentHeaderStatsStore from 'features/TournamentHeaderStats/models/TournamentHeaderStatsStore'\n// @ts-ignore\nimport { playerMatchesStore } from 'features/PlayerPageMatches/models'\nimport { teamMatchesStore } from 'features/TeamPageMatches'\nimport { GearPopupStore } from 'features/GearPopup'\n\nconst stores = {}\nconst Markers = ComposeMarkers(BasicStore)\nconst markers = new Markers(stores)\nconst lexics = new remoteStore.Lexics(routes.API_ROOT, langsList)\nconst Cuts = VideoCuts(remoteStore.VideoSummaries, markers)\n\nconst mstRootStore = types\n  .model('rootStore', {\n    tournamentSeasonSelect: types.optional(TournamentSeasonSelectStore, {}),\n    tournamentsProfile: types.optional(TournamentPageStore, {}),\n    tournamentHeaderStats: types.optional(TournamentHeaderStatsStore, {}),\n    tournamentMatches: types.optional(TournamentMatchesStore, {}),\n    tournamentMatchesTableStore: types.optional(\n      TournamentMatchesTableStore,\n      //@ts-ignore\n      {},\n    ),\n    tournamentPlayersTableStore: types.optional(\n      TournamentPlayersTableStore,\n      //@ts-ignore\n      {},\n    ),\n    gearPopupStore: types.optional(GearPopupStore, {}),\n    teamsCompareWidget: types.optional(TeamsCompareStore, {}),\n  })\n  .create()\n\nObject.assign(stores, {\n  playersCompareWidget,\n  teamPlayers,\n  tableReportsMST,\n  matchProfile,\n  teamProfile,\n  selectedMatches,\n  videoLink,\n  filters,\n  // TODO заглушка для стора\n  tutorials: {},\n  tabs: new Tabs(stores),\n  matches: new Matches(stores),\n  matchTable,\n  liveSearch: remoteStore.LiveSearch.create({\n    rootUrl: routes.API_ROOT,\n    sport: 'volleyball',\n  }),\n  //@ts-ignore\n  infoItem: new InfoItem(stores),\n  matchLinks: new MatchLinks(stores),\n  playerProfile: new PlayerProfile(stores),\n  playerStats: new PlayerStats(stores),\n  teamStats: new TeamStats(stores),\n  teamTable: teamMatchesStore,\n  playerTable: playerMatchesStore,\n  //@ts-ignore\n  zones: new Zones(stores),\n  //@ts-ignore\n  shotTypes: new ShotTypes(stores),\n  //@ts-ignore\n  mapShoot: new MapShoot(stores),\n  //@ts-ignore\n  playerInfo: new PlayerInfo(stores),\n  //@ts-ignore\n  tooltips: new ToolTips(stores),\n  tableReports: new TableReports(stores),\n  //@ts-ignore\n  shootsRange: new ShootsRange(stores),\n  videoPlayer: new remoteStore.VideoPlayer(routes.API_ROOT, 50000000),\n  header: new remoteStore.Header({\n    profilePopup: profilePaths,\n  }),\n  recent: new remoteStore.Recent(routes.API_ROOT),\n  searchString: new remoteStore.SearchString(routes.API_ROOT),\n  auth: new remoteStore.Auth(routes.API_ROOT, history),\n  //@ts-ignore\n  playersVS: new Cuts(routes.API_ROOT, 'player', lexics),\n  //@ts-ignore\n  teamsVS: new Cuts(routes.API_ROOT, 'team', lexics),\n  lexics,\n  markers,\n  ...mstRootStore,\n})\n\nexport default stores\n","import React from 'react'\n\nimport {\n  compose,\n  withHandlers,\n  withState,\n} from 'recompose'\nimport cx from 'classnames'\nimport map from 'lodash/map'\n\nimport { T9n, OutsideClick } from 'react-sport'\n\nimport { profilePaths } from 'config/common'\nimport { beta } from 'config/routes'\n\nimport {\n  TComposedInner,\n  TPropsOuter,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n} from './types'\n\nconst ProfilePopupComponent = ({\n  isOpened,\n  logoutClick,\n  toggleOpened,\n}: TComposedInner) => (\n  <div className='link-iconed-wrapper'>\n    <a\n      onClick={() => toggleOpened(!isOpened)}\n      className={\n        cx('link-iconed link-iconed-primary header-profile-link',\n          'js-open-dropdown tooltip-trigger')}\n    >\n      <div className='hover-tooltip'>\n        <T9n t='header_my_profile' />\n      </div>\n      <i className='icon-person' />\n      <T9n t='header_my_profile' className='link-iconed-text' />\n    </a>\n    {\n      isOpened && (\n        <div className='dropdown-menu-container js-dropdown-profile open'>\n          <ul className='list-unstyled'>\n            {map(profilePaths, (path, name) => (\n              <li>\n                <a\n                  href={`${beta}/${path}`}\n                >\n                  <T9n t={name} />\n                </a>\n              </li>\n            ))}\n            <li>\n              <a className='js-sign-out' onClick={logoutClick}>\n                <T9n t='header_quit' />\n              </a>\n            </li>\n          </ul>\n        </div>\n      )\n    }\n  </div>\n)\n\nconst composed = compose<TComposedInner, TPropsOuter >(\n  withState(\n    'isOpened',\n    'toggleOpened',\n    false,\n  ),\n  withState(\n    'componentName',\n    'changeComponentName',\n    'profilePopup',\n  ),\n\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    clickOutside: ({ toggleOpened }) => () => toggleOpened(false),\n\n    logoutClick: ({ logout }) => (e) => {\n      e.preventDefault()\n      logout()\n    },\n  }),\n  OutsideClick,\n)\n\nexport const ProfilePopup = composed(ProfilePopupComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withProps } from 'recompose'\nimport cx from 'classnames'\n\nimport { T9n } from 'react-sport'\n\nimport { beta } from 'config/routes'\nimport { profilePaths } from 'config/common'\n\ntype TProps = {\n  externalLink: string,\n}\n\nconst UploadVideoBtnComponent = ({\n  externalLink,\n}: TProps) => (\n  <div className='link-iconed-wrapper'>\n    <a\n      href={externalLink}\n      className={cx(\n        'link-iconed link-iconed-primary header-profile-link',\n        'js-open-dropdown tooltip-trigger',\n      )}\n    >\n      <div className='hover-tooltip'>\n        <T9n t='header_upload_video' />\n      </div>\n      <i className='upload-video__icon' />\n    </a>\n  </div>\n)\n\nconst injectedUploadVideoBtn = compose<TProps, {}>(\n  inject('auth'),\n  observer,\n  withProps<TProps, {}>(() =>\n    ({\n      externalLink: `${beta}/${profilePaths.header_upload_video}`,\n    })),\n  observer,\n)\n\nexport const UploadVideoBtn = injectedUploadVideoBtn(UploadVideoBtnComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, lifecycle } from 'recompose'\n\nimport {\n  T9n,\n  Langs,\n  TLexics,\n  LiveSearchUI,\n} from 'react-sport'\n\nimport { indexLexic } from 'config/lexics'\n\nimport { ProfilePopup } from 'features/ProfilePopup'\nimport { UploadVideoBtn } from 'features/UploadVideoBtn'\n\ntype TPropsLifecycle = {\n  lexics: TLexics,\n}\n\ntype TComposeInner = {\n  auth: {\n    logout: () => void,\n  },\n  lexics: TLexics,\n}\n\nexport const HomeComponent = ({ auth: { logout } }: TComposeInner) => (\n  <section className='home'>\n    <div className='header'>\n      <div className='header-table' data-block='sharedHeaderTable'>\n        <div className='header-row'>\n          <div className='header-column-left'>\n            <div className='container-fluid'>\n              <div className='row'>\n                <div className='logo' />\n              </div>\n            </div>\n          </div>\n          <p className='home__text'>\n            <T9n t='enter_team_or_player' />\n          </p>\n          <div className='header-column-responsive' id='header-live-search'>\n            <LiveSearchUI.LiveSearch />\n          </div>\n          <div className='header-column-right'>\n            <UploadVideoBtn />\n            <ProfilePopup logout={logout} />\n            <div className='lang-wrapper'>\n              <Langs />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </section>\n)\n\nconst homeComposed = compose<TComposeInner, {}>(\n  inject('auth', 'lexics'),\n  lifecycle<TPropsLifecycle, {}>({\n    componentDidMount() {\n      const { lexics } = this.props\n      lexics.appPage = { page: 'index', phrases: indexLexic }\n    },\n  }),\n  observer,\n)\n\nexport const Home = homeComposed(HomeComponent)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose } from 'recompose'\n\nimport { Langs, LiveSearchUI } from 'react-sport'\n\nimport { ProfilePopup } from 'features/ProfilePopup'\nimport { UploadVideoBtn } from 'features/UploadVideoBtn'\n\ntype TProps = {\n  auth: {\n    logout: () => void,\n  },\n}\n\nconst HeaderComponent = ({ auth: { logout } }: TProps) => (\n  <div>\n    <header className='header'>\n      <div className='header-table' data-block='sharedHeaderTable'>\n        <div className='header-row'>\n          <div className='header-column-left'>\n            <div className='container-fluid'>\n              <div className='row'>\n                <Link className='logo' to='/' />\n              </div>\n            </div>\n          </div>\n          <div className='header-column-responsive' id='header-live-search'>\n            <LiveSearchUI.LiveSearch />\n          </div>\n          <div className='header-column-right'>\n            <UploadVideoBtn />\n            <ProfilePopup logout={logout} />\n            <div className='lang-wrapper'>\n              <Langs />\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  </div>\n)\n\nconst headerComposed = compose<TProps, {}>(\n  inject('lexics', 'auth'),\n  observer,\n)\n\nexport const Header = headerComposed(HeaderComponent)\n","import React, { Fragment } from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { observer } from 'mobx-react'\n\nimport { compose, withProps } from 'recompose'\nimport includes from 'lodash/includes'\nimport filter from 'lodash/filter'\nimport map from 'lodash/map'\n\nimport { T9n } from 'react-sport'\n\nimport { mainPageTabs } from 'config/tabsConfig'\nimport {\n  TProps,\n  TPropsOuter,\n  TComposedInner,\n  TWithPropsInner,\n  TWithPropsOuter,\n} from './types'\n\nexport const LinksListComponent = ({ match: { url }, tabs }: TProps) => (\n  <Fragment>\n    {map(tabs, ({ exact, lexics, link }) => (\n      <li className='stats-tabs__item' key={link}>\n        <NavLink\n          to={`${url}${link}`}\n          activeClassName='active'\n          exact={exact}\n        >\n          <T9n t={lexics} />\n        </NavLink>\n      </li>\n    ))}\n  </Fragment>\n)\n\nconst linksListComposed = compose<TComposedInner, TPropsOuter>(\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(({ page }) => {\n    const tabs = filter(mainPageTabs, ({ pages }) => includes(pages, page))\n    return { tabs }\n  }),\n)\n\nexport const LinksList = linksListComposed(LinksListComponent)\n","import React from 'react'\nimport { observer, inject } from 'mobx-react'\n\nimport {\n  withHandlers,\n  compose,\n  lifecycle,\n} from 'recompose'\nimport cx from 'classnames'\n\nimport { T9n } from 'react-sport'\n\nimport { LinksList } from 'features/components/common/stats-tabs/LinksList'\n\nimport {\n  TProps,\n  TComposeInner,\n  TWithHandlers,\n  TPrevProps,\n} from './types'\n\nimport './StatsTabs.scss'\n\nexport const StatsTabsComponent = ({\n  handleClick,\n  isStats,\n  lexics: { page },\n  match,\n  tabs: {\n    active,\n    list,\n  },\n}: TComposeInner) => (\n  <ul className='stats-tabs'>\n    {isStats\n      ? <LinksList match={match} page={page} />\n      : list.map(tab => (\n        <li key={tab} className='stats-tabs__item'>\n          <a\n            href=''\n            className={cx({ active: active === tab })}\n            onClick={handleClick(tab)}\n          >\n            <T9n t={tab} />\n          </a>\n        </li>\n      ))}\n  </ul>\n)\n\nconst statsTabComposed = compose<TComposeInner, TProps>(\n  inject(\n    'lexics',\n    'tabs',\n    'markers',\n    'zones',\n    'filters',\n  ),\n  withHandlers<TWithHandlers, {}>({\n    handleClick: ({\n      filters: { clear },\n      markers: {\n        loaded,\n        selectToggle,\n      },\n      tabs,\n      zones: {\n        resetToDefaultDirections,\n        setChecked,\n      },\n    }) => (id: number) => (e: React.FormEvent<HTMLInputElement>) => {\n      e.preventDefault()\n      if (loaded) {\n        tabs.changeActive(id)\n        selectToggle(false)\n        setChecked('without_zone')\n        resetToDefaultDirections()\n        clear()\n      }\n    },\n  }),\n  lifecycle<TPrevProps, TPrevProps>({\n    componentDidMount() {\n      const {\n        markers: { setDefaultDirections },\n      } = this.props\n      setDefaultDirections()\n    },\n  }),\n  observer,\n)\n\nexport const StatsTabs = statsTabComposed(StatsTabsComponent)\n","import React from 'react'\n\nimport { StatsTabs } from 'features/components/common/stats-tabs/StatsTabs'\n\ntype TProps = {\n  match: {\n    url: string,\n  },\n}\n\nexport const Header = ({ match }: TProps) => (\n  <div className='main-page__content-header'>\n    <StatsTabs isStats={false} match={match} />\n  </div>\n)\n","import React, { Fragment } from 'react'\nimport {\n  withHandlers,\n  compose,\n  withProps,\n} from 'recompose'\n\nimport get from 'lodash/get'\nimport isEmpty from 'lodash/isEmpty'\nimport cx from 'classnames'\n\n// TODO переписать получение координат для маркеров, чтобы разобраться в типах\ntype TProps = {\n  positionsInfo: {\n    from: {\n      //@ts-ignore\n      pos_x?: number | boolean | null,\n      //@ts-ignore\n      pos_y?: number | boolean | null,\n    },\n    middle: {\n      //@ts-ignore\n      pos_x: number | null,\n      //@ts-ignore\n      pos_y: number | null,\n      //@ts-ignore\n    } | string | null,\n  },\n  pointers: {\n    pointer1?: {\n      width: number,\n      rotate: number,\n    },\n    pointer2?: {\n      width: number,\n      rotate: number,\n    },\n  },\n  getPointerClass: () => string,\n  getTransform: (value: number) => string,\n}\n\nconst PointerComponent = ({\n  getPointerClass,\n  getTransform,\n  pointers,\n  pointers: {\n    pointer1,\n    pointer2,\n  },\n  positionsInfo: {\n    from,\n    middle,\n  },\n}: TProps) => {\n  if (isEmpty(pointers)) return null\n\n  return (\n    <Fragment>\n      <div\n        className={getPointerClass()}\n        style={{\n          //@ts-ignore\n          width: `calc(${pointer1.width}%)`,\n          left: `${from.pos_x}%`,\n          top: `${from.pos_y}%`,\n          //@ts-ignore\n          transform: getTransform(pointer1.rotate),\n        }}\n      />\n      {(get(middle, 'pos_x') && get(middle, 'pos_y')) && (\n        <div\n          className={getPointerClass()}\n          style={{\n            //@ts-ignore\n            width: `calc(${pointer2.width}%)`,\n            //@ts-ignore\n            left: `${middle.pos_x}%`,\n            //@ts-ignore\n            top: `${middle.pos_y}%`,\n            //@ts-ignore\n            transform: getTransform(pointer2.rotate),\n          }}\n        />\n      )}\n    </Fragment>\n  )\n}\n\nconst pointerComposed = compose(\n  withHandlers({\n    getDirections: () => ({\n      beginning: {\n        //@ts-ignore\n        pos_x: firstX,\n        //@ts-ignore\n        pos_y: firstY,\n      },\n      ending: {\n        //@ts-ignore\n        pos_x: lastX,\n        //@ts-ignore\n        pos_y: lastY,\n      },\n    }) => {\n      // Т.к. длина вектора выражается в %,\n      // а % (в координатах точек) берутся от разных длин (длина поля в 2 раза длиннее ширины)\n      // То для математических действий надо привести их к одной системе координат\n      // Y надо умножить на 2 (Y - ширина поля)\n      const cat1 = Math.abs(firstY - lastY) * 2 //Первый катет\n      const cat2 = Math.abs(firstX - lastX) // Второй катет\n      const width = Math.sqrt((cat2 ** 2) + (cat1 ** 2)) // гипотенуза\n\n      let angle = Math.asin(cat1 / width) * 180 / Math.PI // вычисляем угол поворота вектора\n\n      // Учитываем нахожение точек начала и конца\n      if (lastX >= firstX && lastY < firstY) {\n        angle = 360 - angle\n      }\n\n      if (lastX < firstX && lastY >= firstY) {\n        angle = 180 - angle\n      }\n\n      if (lastX < firstX && lastY < firstY) {\n        angle += 180\n      }\n\n      return {\n        width,\n        rotate: angle,\n      }\n    },\n  }),\n  //@ts-ignore\n  withHandlers({\n    getPointers: (({\n      getDirections,\n      positionsInfo: {\n        from,\n        middle,\n        to,\n      },\n    }) => () => {\n      if (!get(from, 'pos_x', false)\n        || !get(from, 'pos_y', false)\n        || !get(to, 'pos_x', false)\n        || !get(to, 'pos_y', false)) {\n        return {}\n      }\n\n      if ((get(middle, 'pos_x') && get(middle, 'pos_y'))) {\n        const pointer1 = getDirections({\n          beginning: from,\n          ending: middle,\n        })\n        const pointer2 = getDirections({\n          beginning: middle,\n          ending: to,\n        })\n        return {\n          pointer1,\n          pointer2,\n        }\n      }\n\n      const pointer1 = getDirections({\n        beginning: from,\n        ending: to,\n      })\n      return { pointer1 }\n    }),\n    getPointerClass: ({\n      positionsInfo: {\n        from,\n        middle,\n        to,\n      },\n    }) => () => {\n      const pointClass = get(from, 'type') || get(to, 'type')\n\n      return cx(\n        'pointer',\n        {\n          middle: (get(middle, 'pos_x') && get(middle, 'pos_y')),\n          [`vector_${pointClass}`]: pointClass,\n        },\n      )\n    },\n  }),\n  withHandlers({\n    //@ts-ignore\n    getTransform: () => angle => `rotate(${angle}deg)`,\n  }),\n  //@ts-ignore\n  withProps(({ getPointers }) => ({\n    pointers: getPointers(),\n  })),\n)\n\n//@ts-ignore\nexport const Pointer = pointerComposed(PointerComponent)\n","import React, { Fragment } from 'react'\n\nimport { inject, observer } from 'mobx-react'\n\nimport { withProps, compose } from 'recompose'\nimport map from 'lodash/map'\nimport get from 'lodash/get'\nimport reduce from 'lodash/reduce'\n\nimport { getLongSuffix } from 'module/utils/helpers'\n\nimport {\n  TPropsInner,\n  TPropsOuter,\n  TWithPropsInner,\n  TWithPropsOuter,\n} from './types'\n\nexport const PlayerNameComponent = ({ tooltipNames }: TPropsInner) => (\n  <Fragment>\n    {map(tooltipNames, name => (\n      <span key={name} className='shot__player-name'>\n        {name}\n      </span>\n    ))}\n  </Fragment>\n)\n\n// TODO Пока этот функционал не готов. Но пока не удаляем\n\n// if (playerName) {\n//   return <span className='shot__player-name'>{playerName}</span>\n// }\n// if (thirdPlayerName) {\n//   return (\n//     <Fragment>\n//       <span className='shot__player-name'>{firstPlayerName}</span>\n//       <span className='shot__player-name'>{secondPlayerName}</span>\n//       <span className='shot__player-name'>{thirdPlayerName}</span>\n//     </Fragment>\n//   )\n// } if (secondPlayerName) {\n//   return (\n//     <Fragment>\n//       <span className='shot__player-name'>{firstPlayerName}</span>\n//       <span className='shot__player-name'>{secondPlayerName}</span>\n//     </Fragment>\n//   )\n// }\n\n\nconst playerNameComposed = compose<TPropsInner, TPropsOuter>(\n  inject('lexics'),\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(({\n    lexics: { lang },\n    point: {\n      playerName,\n    },\n  }) => {\n    const suffix = getLongSuffix(lang)\n    const tooltipNames = reduce(\n      playerName,\n      (acc: Array<string>, curr) => {\n        const firstName = get(curr, `firstname_${suffix}`)\n        const lastName = get(curr, `lastname_${suffix}`)\n        const fullName = `${firstName} ${lastName}`\n        acc.push(fullName)\n\n        return acc\n      }, [],\n    )\n    // TODO Пока не готово пробрасывание второго и третьего имени\n    // || secondPlayerName\n    // || thirdPlayerName\n    return {\n      tooltipNames,\n    }\n  }),\n)\n\nexport const PlayerName = playerNameComposed(PlayerNameComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { withHandlers, compose } from 'recompose'\nimport cx from 'classnames'\nimport toString from 'lodash/toString'\n\nimport { T9n } from 'react-sport'\n\nimport { getLongSuffix } from 'module/utils/helpers'\n\nimport { PlayerName } from 'features/components/common/map/PlayerName'\n\nimport {\n  TComposeInner,\n  TPropsOuter,\n  TWithHandlersOuterEventToEpisode,\n  TWithHandlersInnerEventToEpisode,\n  TWithHandlersOuterHandleShootClick,\n  TWithHandlersInnerHandleShootClick,\n} from './types'\n\nconst GAME_PART_LEXIC = 8684\n\nconst ToolTipComponent = ({\n  handleShootClick,\n  left,\n  lexics: { lang },\n  point,\n  point: {\n    half,\n    opponentTeam,\n    result_lexic,\n    score1,\n    score2,\n  },\n  type,\n  x,\n  y,\n}: TComposeInner) => (\n  <div\n    className={cx('shot', {\n      [`shot_${type}`]: type,\n      left,\n    })}\n    style={{ left: `${x}%`, top: `${y}%` }}\n    onClick={handleShootClick(point)}\n  >\n    <div className='shot__tooltip'>\n      <span className='shot__result'>\n        <T9n t={toString(result_lexic)} />\n      </span>\n      {/*\n        //@ts-ignore */}\n      <PlayerName point={point} />\n      <span className='shot__opponent-team'>\n        @ {opponentTeam[`name_${getLongSuffix(lang)}`]}\n      </span>\n      <span className='shot__period-info'>\n        <span className='shot__period-num'>\n          {half} <T9n t={toString(GAME_PART_LEXIC)} />\n        </span>\n        <span className='shot__period-score'>{` ${score1} - ${score2}`}</span>\n      </span>\n    </div>\n  </div>\n)\n\nconst toolTipComposed = compose<TComposeInner, TPropsOuter>(\n  inject(\n    'videoPlayer',\n    'lexics',\n    'shootsRange',\n  ),\n  withHandlers<TWithHandlersOuterEventToEpisode, TWithHandlersInnerEventToEpisode>({\n    eventToEpisode: ({\n      lexics: {\n        getLexics,\n      },\n    }) => ({\n      f_match,\n      half,\n      id,\n      result_lexic,\n      second,\n    }) => {\n      const set = `${half} ${getLexics(GAME_PART_LEXIC)}`\n\n      return {\n        action: {\n          name: getLexics(result_lexic),\n          set,\n        },\n        eventId: Number(id),\n        half,\n        matchId: f_match,\n        period: set,\n        second: Math.round(second / 1000),\n      }\n    },\n  }),\n  withHandlers<TWithHandlersOuterHandleShootClick, TWithHandlersInnerHandleShootClick>({\n    handleShootClick: ({\n      eventToEpisode,\n      videoPlayer,\n    }) => event => () => {\n      const data = [eventToEpisode(event)]\n      videoPlayer.fetchVideo(data)\n      videoPlayer.isOpened = true\n    },\n  }),\n  observer,\n)\n\nexport const ToolTip = toolTipComposed(ToolTipComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withProps } from 'recompose'\nimport map from 'lodash/map'\nimport values from 'lodash/values'\nimport pickBy from 'lodash/pickBy'\nimport get from 'lodash/get'\nimport filter from 'lodash/filter'\nimport includes from 'lodash/includes'\n\nimport { Pointer } from './Pointer'\nimport { ToolTip } from './ToolTip'\n\ntype TProps = {\n  //@ts-ignore\n  marker?: {\n    //@ts-ignore\n    point?: {},\n  },\n  toolTips: Array<{}>,\n}\n\nconst MarkerComponent = ({\n  marker: positionsInfo,\n  toolTips,\n}: TProps) => (\n  <div className='marker__wrapper'>\n    {/*\n      //@ts-ignore */}\n    <Pointer positionsInfo={positionsInfo} />\n    {map(toolTips, ({\n      //@ts-ignore\n      pos_x,\n      //@ts-ignore\n      pos_y,\n      //@ts-ignore\n      type,\n    }) => (\n      <ToolTip\n        key={`${pos_x}_${pos_y}`}\n            //@ts-ignore\n        point={positionsInfo.point}\n        type={type}\n        y={pos_y}\n        x={pos_x}\n      />\n    ))}\n  </div>\n)\n\nconst markerComposed = compose(\n  inject('markers'),\n  observer,\n  //@ts-ignore\n  withProps(({\n    marker,\n    markers: {\n      directions: {\n        from,\n        to,\n      },\n    },\n  }) => {\n    const toolTips = values(\n      pickBy(marker, value => get(value, 'pos_x') && get(value, 'pos_y')),\n    )\n    let toolTipsWithVectors = null\n    if (from && to) {\n      toolTipsWithVectors = filter(\n        toolTips, ({ type }) => includes(['out', 'point'], type),\n      )\n    }\n    // Если у нас показываюся векторы (когда есть точки куда и откуда),\n    // то используем отфильтрованные точки\n    return {\n      toolTips: toolTipsWithVectors || toolTips,\n    }\n  }),\n  observer,\n)\n//@ts-ignore\nexport const Marker = markerComposed(MarkerComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  withHandlers,\n  compose,\n} from 'recompose'\nimport isArray from 'lodash/isArray'\nimport get from 'lodash/get'\nimport { toJS } from 'mobx'\n\nimport Loader from 'features/components/common/loader/Loader'\nimport { Marker } from './MarkerItem'\n\ntype TProps = {\n  getMarkers: () => Array<{}>,\n  preparePoint: (marker: {}) => {},\n}\n\n//@ts-ignore\ntype TMarkerType = boolean | { pos_y: number | null }\n\n/**\n * Компонент Markers - является контейнером маркеров\n *\n * @property {function} getMarkers - функция получения списка маркеров\n * @property {function} preparePoint - в функцию передается маркер и она возврощает\n * позицию маркера и делает некую фильтрацию\n *\n */\n\nconst MarkersComponent = ({\n  getMarkers,\n  preparePoint,\n}: TProps) => (\n  isArray(toJS(getMarkers()))\n    ? getMarkers().map((marker, idx) => (\n      //@ts-ignore\n      <Marker\n        key={idx}\n        marker={preparePoint(marker)}\n      />\n    ))\n    : getMarkers()\n)\n\nconst markersComposed = compose(\n  inject('markers', 'tabs', 'zones'),\n  withHandlers({\n    //функция получения типа удара\n    //@ts-ignore\n    getActionTypes: () => ({ action_type }, to, from) => {\n      const type = { fromType: '', toType: '' }\n      switch (action_type) {\n        case 'Positive':\n          if (to) {\n            type.toType = 'point'\n          }\n          break\n        case 'Negative':\n          if (from && to) {\n            type.fromType = 'miss'\n            type.toType = 'out'\n          } else if (from) {\n            type.fromType = 'miss'\n          } else {\n            type.toType = 'out'\n          }\n          break\n        default: break\n      }\n      return type\n    },\n\n    /*\n    * функция получения счета, счет первой и второй команды достаются\n    * в маркерах по специальным ключам\n    */\n    //@ts-ignore\n    getScore: () => ({ prop }, key) => prop.find(property => property[0] === key),\n    //@ts-ignore\n    getList: () => (list, data) => (\n      //@ts-ignore\n      list.filter(({ prop }) => prop.find(([property, value]) => (\n        Object.entries(data).some(([key, values]) => {\n          //@ts-ignore\n          if (key === 'any') return values.includes(property)\n          //@ts-ignore\n          return parseInt(key, 10) === property && values.includes(value)\n        })\n      )))\n    ),\n  }),\n  //@ts-ignore\n  withHandlers({\n    /*\n    * в функцию передается маркер и она возврощает\n    * позицию маркера и делает некую фильтрацию\n    */\n    preparePoint: ({\n      getActionTypes,\n      getScore,\n      markers: {\n        directions,\n      },\n      tabs: { active },\n      zones: {\n        checked,\n      },\n      //@ts-ignore\n    }) => (point) => {\n      //получаем позиции маркера\n      let { from, middle, to } = point\n\n      //условия для показа точки по середине\n      const middleCondition = directions.from\n        && directions.to\n        && !point.dontShowOpponentSide\n        && middle\n\n      //устанавливаем координаты для точек откуда, куда и блок, если есть точка по середине\n      from = directions.from && from\n      middle = middleCondition && middle\n      to = (directions.to && !point.dontShowOpponentSide)\n        && to\n\n      //получаем тип удара, для точек откуда и куда\n      const { fromType, toType } = getActionTypes(point, to, from)\n\n      //получаем счет игры из маркера\n      const score1 = getScore(point, 136)\n      const score2 = getScore(point, 137)\n      //функция которая скрывает маркер, если он находится под разметкой зоны\n      // для вкладки 'подачи' скрываем маркеры под зонами противника\n      // для остальных - под своими зонами\n      //@ts-ignore\n      const hideMarker = (marker) => {\n        const tabCheck = active === 'serve'\n          ? (get(marker, 'pos_y') > 50)\n          : (get(marker, 'pos_y') < 50)\n        return tabCheck && marker.pos_y\n      }\n      //@ts-ignore\n      const checkPosition = (markerType: TMarkerType) => {\n        if (!markerType) return null\n        //@ts-ignore\n        if (checked === 'without_zone') return markerType.pos_y\n        return hideMarker(markerType)\n      }\n\n      const checkZone = (\n        markerType: TMarkerType,\n        directionType: string,\n      ) => ({\n        //@ts-ignore\n        ...markerType,\n        type: directionType,\n        pos_y: checkPosition(markerType),\n      })\n\n      return {\n        point: {\n          ...point,\n          score1: get(score1, 2, 0),\n          score2: get(score2, 2, 0),\n        },\n        from: checkZone(from, fromType),\n        to: checkZone(to, toType),\n        middle,\n      }\n    },\n    //получение маркеров\n    getMarkers: ({\n      markers: {\n        list,\n        loaded,\n      },\n    }) => () => {\n      if (!loaded) return <Loader />\n      return list\n    },\n  }),\n  observer,\n)\n\n//@ts-ignore\nexport const Markers = markersComposed(MarkersComponent)\n","\nimport React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers } from 'recompose'\nimport get from 'lodash/get'\n\nimport { takeScreenshot, utils } from 'react-sport'\n\nimport {\n  TProps,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n} from './types'\n\nconst {\n  helpers: { getLongSuffix, getSuffix },\n} = utils\n\nconst SaveScreenShotComponent = ({ handleDownload }: TProps) => (\n  <button className='map-block__controls-button'>\n    <i className='icon-download' onClick={handleDownload} />\n  </button>\n)\n\nexport const saveScreenShotComposed = compose<TProps, any>(\n  inject(\n    'zones',\n    'lexics',\n    'tabs',\n    'matches',\n    'markers',\n    'matchProfile',\n    'playerProfile',\n    'teamProfile',\n  ),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    handleDownload: ({\n      lexics: { getLexics, lang, page },\n      markers: { selectToggle },\n      matches: { active: currentTeam },\n      matchProfile: { data },\n      playerProfile,\n      tabs: { active },\n      teamProfile,\n    }) => (e) => {\n      // Снимаем выделение зоны.\n      // TODO подумать, как реализовать когда у нас два элемента SVG сохраняются в одной картинке\n      selectToggle(false)\n      const field = document.getElementsByClassName(\n        'map-block__map-field-outer',\n      )[0]\n      const elementBackgroundSVG = document.getElementsByClassName(\n        'map-block__zone-map',\n      )[0]\n\n      const suffix = getSuffix(lang)\n      const longSuffix = getLongSuffix(lang)\n      const pages = {\n        match: {\n          body: get(data, `${currentTeam}_name_${suffix}`, ''),\n          extra: `${get(data, 'match_date', '')}.png`,\n        },\n        player: {\n          body:\n            `${get(playerProfile, `profile.firstname_${longSuffix}`, '')}`\n            + ` ${get(playerProfile, `profile.lastname_${longSuffix}`, '')}`,\n        },\n        team: {\n          body: get(teamProfile, `profile.name_${longSuffix}`, ''),\n        },\n      }\n      const pageInfo = get(pages, page, {})\n      const picName = `${getLexics(active)}`\n        + ` ${get(pageInfo, 'body', '')}`\n        + ` ${get(pageInfo, 'extra', '')}`\n\n      takeScreenshot({\n        callback: () => {},\n        e,\n        elementBackgroundSVG,\n        elementToChangeBackground: 'map',\n        field,\n        picName,\n      })\n    },\n  }),\n  observer,\n)\n\nexport const SaveScreenShot = saveScreenShotComposed(SaveScreenShotComponent)\n","import React, { Fragment } from 'react'\nimport { observer } from 'mobx-react'\n\nimport { compose, withHandlers } from 'recompose'\nimport cx from 'classnames'\n\nimport { OutsideClick } from 'react-sport'\n\nimport { rangeSettingsHoc } from 'hocs/rangeSettingsHoc'\nimport { RangeSettings } from 'features/components/common/map/RangeSettings'\n\nimport {\n  TComposeInner,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n  TClickOutsideOuter,\n  TClickOutsideInner,\n} from './types'\n\nexport const RangeSettingsPopupComponent = ({\n  handleShowPopup,\n  onBlurHandler,\n  onChangeHandler,\n  rangeAfter,\n  rangeBefore,\n  shootsRange: { isOpened },\n}: TComposeInner) => (\n  <Fragment>\n    <button className='map-block__controls-button map-block__controls-button_range'>\n      <i className='icon-settings' onClick={handleShowPopup} />\n    </button>\n    <div\n      className={cx('main-page__range-popup-settings', { hidden: !isOpened })}\n    >\n      {isOpened\n      && (\n        <RangeSettings\n          onBlurHandler={onBlurHandler}\n          onChangeHandler={onChangeHandler}\n          rangeAfter={rangeAfter}\n          rangeBefore={rangeBefore}\n        />\n      )}\n    </div>\n  </Fragment>\n)\n\nconst rangeSettingsPopupComposed = compose<TComposeInner, {}>(\n  rangeSettingsHoc,\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    handleShowPopup: ({ shootsRange: { rangePopup } }) => () => rangePopup(),\n  }),\n  withHandlers<TClickOutsideOuter, TClickOutsideInner>({\n    clickOutside: ({\n      handleShowPopup,\n      onBlurHandler,\n      shootsRange: { isOpened },\n    }) => () => {\n      if (isOpened) {\n        onBlurHandler()\n        handleShowPopup()\n      }\n    },\n  }),\n  OutsideClick,\n  observer,\n)\n\nexport const RangeSettingsPopup = rangeSettingsPopupComposed(RangeSettingsPopupComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport map from 'lodash/map'\nimport orderBy from 'lodash/orderBy'\nimport uniqBy from 'lodash/uniqBy'\nimport {\n  withHandlers,\n  compose,\n  withState,\n} from 'recompose'\nimport cx from 'classnames'\n\nimport { VideoLink } from 'react-sport'\n\nimport {\n  TComposeInner,\n  TComposeOuter,\n  TWithState,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n} from './types'\n\nconst PlayVideoBtnComponent = ({\n  getClassName,\n  getRange,\n  getShoots,\n  handleVideoExternal,\n  mapFieldFetching,\n}: TComposeInner) => (\n  <div className={getClassName()}>\n    {/*\n    //@ts-ignore */}\n    <VideoLink\n      shootsRange={getRange()}\n      handleVideoExternal={handleVideoExternal}\n      externalFetching={mapFieldFetching}\n      shoots={getShoots()}\n      store='shoots'\n    />\n  </div>\n)\n\nconst playVideoBtnComposed = compose<TComposeInner, TComposeOuter>(\n  inject(\n    'videoLink',\n    'lexics',\n    'shootsRange',\n    'markers',\n    'selectedMatches',\n  ),\n  withState<TWithState, {}>(\n    'mapFieldFetching',\n    'toggleMapFieldFetching',\n    false,\n  ),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    getClassName: ({ markers: { loaded } }) => () =>\n      cx('video__btn-container', { loading: !loaded }),\n\n    getRange: ({\n      shootsRange: {\n        after,\n        allPossession,\n        before,\n      },\n    }) => () => (allPossession ? 0 : Number(before + after)),\n\n    getShoots: ({\n      markers: {\n        list,\n        loaded,\n      },\n    }) => () => ({\n      activeData: uniqBy(list, 'id'),\n      isFetching: !loaded,\n    }),\n\n    handleVideoExternal: ({\n      lexics: { lang },\n      shootsRange,\n      tab,\n      toggleMapFieldFetching,\n      videoLink,\n    }) => (shoots) => {\n      toggleMapFieldFetching(true)\n      const shots = map(orderBy(shoots, 'match_date', 'asc'), 'id')\n      videoLink.request({\n        events: shots,\n        lang,\n        range: shootsRange,\n        tab,\n        type: 'mapShoots',\n      }).finally(() => toggleMapFieldFetching(false))\n    },\n  }),\n  observer,\n)\n\nexport const PlayVideoBtn = playVideoBtnComposed(PlayVideoBtnComponent)\n","\nimport React, { Children } from 'react'\nimport { observer } from 'mobx-react'\n\nimport {\n  withHandlers,\n  withState,\n  withProps,\n  compose,\n} from 'recompose'\nimport cx from 'classnames'\nimport includes from 'lodash/includes'\n\nimport { OutsideClick } from 'react-sport'\n\nimport {\n  TPropsInner,\n  TPropsOuter,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n  TWithPropsInner,\n  TWithPropsOuter,\n} from './types'\n\nexport const ControlDropDownComponent = ({\n  children,\n  className,\n  isVisible,\n  menuType,\n  title,\n  toggleOpenMenu,\n  withTitle,\n}: TPropsInner) => (\n  <div className={className} onClick={toggleOpenMenu}>\n    <button className='map-block__controls-button'>\n      {withTitle ? (\n        <span className='map-block__controls-button__title'>{title}</span>\n      ) : (\n        <i className={`icon-select-${menuType}`} />\n      )}\n    </button>\n    {isVisible && (\n      <ul className='map-block__select-list'>\n        {Children.map(children, (child, i) => (\n          <li key={i} className='map-block__select-item'>\n            <a>{child}</a>\n          </li>\n        ))}\n      </ul>\n    )}\n  </div>\n)\n\nconst controlDropDownComposed = compose<TPropsInner, TPropsOuter>(\n  withState('isVisible', 'toggleIsVisible', false),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    clickOutside: ({ toggleIsVisible }) => () => toggleIsVisible(false),\n    toggleOpenMenu: ({ isVisible, toggleIsVisible }) => () => toggleIsVisible(!isVisible),\n  }),\n  withProps<TWithPropsInner, TWithPropsOuter>(({ isVisible, menuType }) => ({\n    className: cx('map-block__select', {\n      'map-block__select_open': isVisible,\n    }),\n    withTitle: includes(['teamSelect'], menuType),\n  })),\n  OutsideClick,\n  observer,\n)\n\nexport const ControlDropDown = controlDropDownComposed(ControlDropDownComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport get from 'lodash/get'\nimport {\n  compose,\n  withHandlers,\n  withProps,\n  withState,\n} from 'recompose'\nimport { OutsideClick, T9n } from 'react-sport'\n\nimport { getSuffix, getAbbr } from 'module/utils/helpers'\n\nimport { ControlDropDown } from '../ControlsDropDown'\n\nimport {\n  TPropsInner,\n  TWithState,\n  TWithPropsInner,\n  TWithHandlersInner,\n  TWithPropsOuter,\n  TWithHandlersOuter,\n  TWithHandlersCheckOuter,\n  TWithHandlersCheckInner,\n} from './types'\n\nexport const TeamsPopupComponent = ({\n  activeTeamShortName,\n  checkTeam,\n  teams,\n}: TPropsInner) => (\n  <ControlDropDown\n    menuType='teamSelect'\n    title={activeTeamShortName}\n  >\n    {teams.map(({ id, teamName }) => (\n      <div\n        onClick={checkTeam(id)}\n        className='custom-select__option'\n        key={id}\n      >\n        <T9n t={teamName} />\n      </div>\n    ))}\n  </ControlDropDown>\n)\n\nconst teamsPopupComposed = compose<TPropsInner, {}>(\n  inject(\n    'filters',\n    'lexics',\n    'matchProfile',\n    'markers',\n    'matches',\n  ),\n  withState<TWithState, {}>('isOpened', 'setIsOpened', false),\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(({\n    lexics: { lang },\n    matches: { active },\n    matchProfile: { data },\n  }) => {\n    const suffix = getSuffix(lang)\n    const team1Name = get(data, `team1_name_${suffix}`)\n    const team2Name = get(data, `team2_name_${suffix}`)\n    return {\n      activeTeamShortName: getAbbr(get(data, `${active}_name_${suffix}`)),\n      teams: [\n        {\n          id: 'team1',\n          teamName: team1Name,\n        },\n        {\n          id: 'team2',\n          teamName: team2Name,\n        },\n      ],\n    }\n  }),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    clickOutside: ({ setIsOpened }) => () => setIsOpened(false),\n    handleActive: ({\n      matches: {\n        changeActive,\n      },\n    }) => (active) => {\n      changeActive(active)\n    },\n    setIsOpenedHandler: ({ isOpened, setIsOpened }) => () => () => setIsOpened(!isOpened),\n  }),\n  withHandlers<TWithHandlersCheckOuter, TWithHandlersCheckInner>({\n    checkTeam: ({\n      filters: { clear },\n      handleActive,\n      markers: { fetch },\n      matches: { active },\n      matchProfile,\n      setIsOpenedHandler,\n    }) => id => () => {\n      if (active !== id) {\n        handleActive(id)\n        const teamId = get(matchProfile, `data.${id}_id`, '')\n        const matches = [get(matchProfile, 'matchId')]\n        fetch(teamId, matches)\n        // Очищаем все выбранные фильтры при смене команды\n        clear()\n      }\n      return setIsOpenedHandler()\n    },\n  }),\n  OutsideClick,\n  observer,\n)\n\nexport const TeamsPopup = teamsPopupComposed(TeamsPopupComponent)\n","// массив с кнопками для выпадающего списка на карте ударов направлений маркеров\n// tabs - вкладки, в которых есть данная кнопка\n\nconst directionsDropDownButtons = [\n  {\n    tabs: ['attack', 'block', 'serve', 'pass'],\n    endPoint: { to: true, from: true },\n    name: 'full_trajectory',\n  },\n  {\n    tabs: [\n      'attack',\n      'block',\n      'serve',\n      'pass',\n      'attack_reception',\n      'serve_reception',\n    ],\n    endPoint: { to: false, from: true },\n    name: 'markers_from',\n  },\n  {\n    tabs: ['attack', 'block', 'serve', 'pass'],\n    endPoint: { to: true, from: false },\n    name: 'markers_to',\n  },\n]\n\nexport default directionsDropDownButtons\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport forIn from 'lodash/forIn'\nimport filter from 'lodash/filter'\nimport includes from 'lodash/includes'\nimport {\n  withHandlers,\n  withProps,\n  compose,\n} from 'recompose'\n\nimport { T9n } from 'react-sport'\n\nimport directionsDropDownButtons from '../config/directionsDropdown'\n\nimport { ControlDropDown } from '../ControlsDropDown'\n\nimport {\n  TProps,\n  TWithPropsInner,\n  TWithPropsOuter,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n} from './types'\n\nexport const DirectionsComponent = ({\n  chooseDirection,\n  directionsBtns,\n}: TProps) => (\n  <ControlDropDown menuType='action'>\n    {directionsBtns.map(({ endPoint, name }) => (\n      <div\n        className='custom-select__option'\n        onClick={chooseDirection(endPoint)}\n        key={name}\n      >\n        <T9n t={name} />\n      </div>\n    ))}\n  </ControlDropDown>\n)\n\nconst directionsComposed = compose<TProps, {}>(\n  inject(\n    'tabs',\n    'markers',\n    'zones',\n  ),\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(({ tabs: { active } }) => ({\n    directionsBtns: filter(directionsDropDownButtons, ({ tabs }) =>\n      includes(tabs, active)),\n  })),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    chooseDirection: ({\n      markers: { handleDirection, selectToggle },\n      zones: { resetToDefaultDirections },\n    }) => (endPoint: {}) => () => {\n      // При смене режима отображения точек, сбрасываем показ зон и выделение\n      resetToDefaultDirections()\n      forIn(endPoint, (value, key) => handleDirection(key, value))\n      selectToggle(false)\n    },\n  }),\n  observer,\n)\n\nexport const Directions = directionsComposed(DirectionsComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  withHandlers,\n  withProps,\n  compose,\n} from 'recompose'\n\nimport { T9n } from 'react-sport'\n\nimport { ControlDropDown } from '../ControlsDropDown'\n\nimport {\n  TProps,\n  TWithHandlersOuter,\n  TComposeInner,\n  TWithHandlersInner,\n} from './types'\n\nexport const ZonesComponent = ({ checkZone, zoneTitles }: TProps) => (\n  <ControlDropDown menuType='zone'>\n    {zoneTitles.map(zone => (\n      <div\n        className='custom-select__option'\n        onClick={checkZone(zone)}\n        key={zone}\n      >\n        <T9n t={zone} />\n      </div>\n    ))}\n  </ControlDropDown>\n)\n\nconst zonesComposed = compose<TComposeInner, {}>(\n  inject(\n    'tabs',\n    'markers',\n    'zones',\n  ),\n  observer,\n  withProps(() => {\n    // зоны поля\n    const zoneTitles = [\n      'without_zone',\n      'basic_zones',\n      'advanced_zones',\n    ]\n    return { zoneTitles }\n  }),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    checkZone: ({\n      markers: { selectToggle },\n      zones: { resetToDefaultDirections, setChecked },\n    }) => (checkedZone: string) => () => {\n      if (checkedZone === 'without_zone') {\n        resetToDefaultDirections()\n      }\n      setChecked(checkedZone)\n      selectToggle(false)\n    },\n  }),\n  observer,\n)\n\nexport const Zones = zonesComposed(ZonesComponent)\n","\nimport React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers } from 'recompose'\nimport isEqual from 'lodash/isEqual'\n\nimport { SaveScreenShot } from 'features/components/common/map/SaveScreenShot'\nimport { RangeSettingsPopup } from 'features/components/common/map/RangeSettingsPopup'\nimport { PlayVideoBtn } from 'features/components/common/video-player/PlayVideoBtn'\n\nimport { TeamsPopup } from './TeamsPopup'\nimport { Directions } from './Directions'\nimport { Zones } from './Zones'\n\nimport {\n  TProps,\n  TWithHandlersOuter,\n} from './types'\n\nexport const MapFieldControlsComponent = ({\n  lexics: { page },\n  selectArea,\n  shootsRange: { after, before },\n  tabs: { active },\n}: TProps) => (\n  <div className='map-block__controls'>\n    <div className='map-block__controls-col'>\n      <Directions />\n      <Zones />\n      {page === 'match' && <TeamsPopup />}\n      <button className='map-block__controls-button' onClick={selectArea}>\n        <i className='icon-area' />\n      </button>\n    </div>\n    {/*\n      //@ts-ignore */}\n    <PlayVideoBtn tab={active} />\n    <div className='map-block__controls-col'>\n      <SaveScreenShot />\n      {/* TODO MapShare пока не делаем */}\n      {/* <MapShare /> */}\n      <RangeSettingsPopup key={`${after}_${before}`} />\n    </div>\n  </div>\n)\n\nconst mapFieldControlsComposed = compose<TProps, {}>(\n  inject(\n    'tabs',\n    'lexics',\n    'markers',\n    'zones',\n    'shootsRange',\n  ),\n  withHandlers<TWithHandlersOuter, {}>({\n    selectArea: ({\n      markers: {\n        directions,\n        select,\n        selectToggle,\n        setAllVisible,\n      },\n      zones: {\n        resetToDefaultDirections,\n        setZone,\n      },\n    }) => () => {\n      if (!select) {\n        setAllVisible()\n      }\n      if (isEqual(directions, { from: true, to: true })) {\n        resetToDefaultDirections()\n      }\n      setZone('without_zone')\n      selectToggle(!select)\n    },\n  }),\n  observer,\n)\nexport const MapFieldControls = mapFieldControlsComposed(MapFieldControlsComponent)\n","// Данные по каждой зоне\n\ntype TZones = {\n  [key: string]: {},\n}\nexport const zones: TZones = {\n  bottom: {\n    advanced_zones: [7, 8, 9, 6, 5, 4, 3, 2, 1],\n    basic_zones: [4, 5, 3, 6, 2, 1],\n  },\n  top: {\n    advanced_zones: [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    basic_zones: [1, 2, 6, 3, 5, 4],\n  },\n}\n\n// Координаты границ зон поля в завимости от выбранного типа\nexport const zoneBorderConfig = {\n  x: {\n    basic: {\n      top: [\n        {\n          zonesList: [1, 2],\n          coords: [-15, 33],\n        },\n        {\n          zonesList: [3, 6],\n          coords: [33, 67],\n        },\n        {\n          zonesList: [5, 4],\n          coords: [67, 120],\n        },\n      ],\n      bottom: [\n        {\n          zonesList: [4, 5],\n          coords: [-15, 33],\n        },\n        {\n          zonesList: [3, 6],\n          coords: [33, 67],\n        },\n        {\n          zonesList: [1, 2],\n          coords: [67, 120],\n        },\n      ],\n    },\n    advanced: {\n      top: [\n        {\n          zonesList: [1, 2, 3],\n          coords: [-15, 33],\n        },\n        {\n          zonesList: [4, 5, 6],\n          coords: [33, 67],\n        },\n        {\n          zonesList: [7, 8, 9],\n          coords: [67, 120],\n        },\n      ],\n      bottom: [\n        {\n          zonesList: [7, 8, 9],\n          coords: [-15, 33],\n        },\n        {\n          zonesList: [4, 5, 6],\n          coords: [33, 67],\n        },\n        {\n          zonesList: [1, 2, 3],\n          coords: [67, 120],\n        },\n      ],\n    },\n  },\n  y: {\n    basic: {\n      top: [\n        {\n          zonesList: [1, 6, 5],\n          coords: [-15, 33],\n        },\n        {\n          zonesList: [2, 3, 4],\n          coords: [33, 50],\n        },\n      ],\n      bottom: [\n        {\n          zonesList: [4, 3, 2],\n          coords: [50, 66],\n        },\n        {\n          zonesList: [5, 6, 1],\n          coords: [66, 120],\n        },\n      ],\n    },\n    advanced: {\n      top: [\n        {\n          zonesList: [1, 4, 9],\n          coords: [-15, 17],\n        },\n        {\n          zonesList: [2, 5, 8],\n          coords: [17, 33],\n        },\n        {\n          zonesList: [3, 6, 7],\n          coords: [33, 50],\n        },\n      ],\n      bottom: [\n        {\n          zonesList: [3, 6, 7],\n          coords: [50, 67],\n        },\n        {\n          zonesList: [2, 5, 8],\n          coords: [67, 83],\n        },\n        {\n          zonesList: [1, 4, 9],\n          coords: [83, 120],\n        },\n      ],\n    },\n  },\n}\n\n// Положительный маркер, ключ - активный таб\nexport const zoneAction = {\n  attack: [24, [93, 97, 168]],\n  block: [27, [116]],\n  pass: [21, [68]],\n  serve: [15, [35, 36, 37]],\n  attack_reception: [18, [50]],\n  serve_reception: [18, [50]],\n}\n","\nimport React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withHandlers,\n  withProps,\n} from 'recompose'\nimport map from 'lodash/map'\nimport some from 'lodash/some'\nimport get from 'lodash/get'\nimport find from 'lodash/find'\nimport includes from 'lodash/includes'\nimport filter from 'lodash/filter'\nimport inRange from 'lodash/inRange'\nimport size from 'lodash/size'\nimport isEmpty from 'lodash/isEmpty'\n\nimport {\n  zoneAction,\n  zoneBorderConfig,\n} from 'config/zones'\nimport {\n  TEventToEpisodeOuter,\n  TEvent,\n  THandleShootClickOuter,\n  TProps,\n  TPropsInner,\n  TPropsOuter,\n  TGetParamsOuter,\n  TGetParamsInner,\n  TWithPropsInner,\n  TWithPropsOuter,\n} from './types'\n\nconst GAME_PART_LEXIC = 8684\n\nconst ZonesStatisticComponent = ({\n  handleShootClick,\n  percentage,\n  succesZoneMarkers,\n  totalZoneMarkers,\n  zone,\n  zoneEvents,\n  zones: { total },\n}: TProps) => (\n  <a\n    className={`map-block__zones-episode zone_${zone}`}\n    onClick={handleShootClick(zoneEvents)}\n  >\n    <p>{percentage}%</p>\n    <span>{!total && `${succesZoneMarkers} — ${totalZoneMarkers}`}</span>\n  </a>\n)\n\nconst zonesStatisticComposed = compose<TPropsInner, TPropsOuter>(\n  inject(\n    'tabs',\n    'markers',\n    'zones',\n    'videoPlayer',\n    'shootsRange',\n    'lexics',\n  ),\n  withHandlers<TGetParamsOuter, TGetParamsInner>({\n    /*\n     * фильтрация параметров.\n     * data - список маркеров\n     * key - ключ, по которому получаем нужный нам список\n     * zone - текущая зона\n     */\n    getParams: ({\n      tabs: { active },\n      zones: { checked },\n    }) => ({\n      data,\n      key,\n      zone,\n    }) => {\n      // Фильтруем \"Уcпешные\" действия (маркеры)\n      if (key === 'successActions') {\n        const firstConditionId = get(zoneAction, `${active}.[0]`)\n        const secondConditionId = get(zoneAction, `${active}.[1]`)\n        data = filter(data, ({ prop }) =>\n          some(\n            prop,\n            propItem =>\n              includes(propItem, firstConditionId)\n              && some(propItem, propItemValue =>\n                includes(secondConditionId, propItemValue)),\n          ))\n      }\n      // Получаем границы зоны из конфига в зависимости от выбранного типа поля\n      const side = active === 'serve' ? 'top' : 'bottom' //наша часть поля или соперника\n      const fieldType = checked === 'basic_zones' ? 'basic' : 'advanced'\n      // достаем из конфига границы для выбранного типа и стороны поля\n      const zoneTypeX = get(zoneBorderConfig, `x.${fieldType}.${side}`)\n      const zoneTypeY = get(zoneBorderConfig, `y.${fieldType}.${side}`)\n      // получаем координаты границы по Х и по Y\n      const xCoords = get(\n        find(zoneTypeX, ({ zonesList }) => includes(zonesList, zone)),\n        'coords',\n      )\n      const yCoords = get(\n        find(zoneTypeY, ({ zonesList }) => includes(zonesList, zone)),\n        'coords',\n      )\n      // Для подачи (serve) или передачи (pass) нам нужны зоны соперника,\n      // т.е. куда мяч улетел ('to')\n      const coordsType = includes(['serve', 'pass'], active) ? 'to' : 'from'\n\n      // Возвращаем отфильтрованные маркеры по текущей зоне\n      return filter(\n        data,\n        marker =>\n          inRange(get(marker, `${coordsType}.pos_x`), xCoords[0], xCoords[1])\n          && inRange(get(marker, `${coordsType}.pos_y`), yCoords[0], yCoords[1]),\n      )\n    },\n  }),\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>((\n    {\n      getParams,\n      markers: { list },\n      zone,\n    } : TWithPropsOuter,\n  ) => {\n    const getMarkers = (key: string) =>\n      getParams({\n        data: list,\n        key,\n        zone,\n      })\n    // количество всех маркеров в данной зоне\n    const allMarkers = getMarkers('totalActions')\n    const totalZoneMarkers = size(allMarkers)\n    // количество \"успешных\" маркеров в данной зоне\n    const succesZoneMarkers = size(getMarkers('successActions'))\n    const percentage = Math.round((succesZoneMarkers / totalZoneMarkers) * 100) || 0\n    return {\n      percentage,\n      succesZoneMarkers,\n      totalZoneMarkers,\n      zoneEvents: allMarkers,\n    }\n  }),\n  withHandlers<TEventToEpisodeOuter, {}>({\n    eventToEpisode: ({\n      lexics: { getLexics },\n    }) => (event: TEvent) => {\n      const {\n        f_match,\n        half,\n        id,\n        result_lexic,\n        second,\n      } = event\n      const set = `${half} ${getLexics(GAME_PART_LEXIC)}`\n\n      return {\n        action: {\n          name: getLexics(result_lexic),\n          set,\n        },\n        eventId: Number(id),\n        half,\n        matchId: f_match,\n        period: set,\n        second: Math.round(second / 1000),\n      }\n    },\n  }),\n  withHandlers<THandleShootClickOuter, {}>({\n    handleShootClick: ({\n      eventToEpisode,\n      videoPlayer: {\n        fetchVideo,\n        setModalOpen,\n      },\n    }) => (events: Array<number>) => () => {\n      if (!isEmpty(events)) {\n        const data = map(events, event => eventToEpisode(event))\n\n        fetchVideo(data)\n        setModalOpen(true)\n      }\n    },\n  }),\n)\n\nexport const ZonesStatistic = zonesStatisticComposed(ZonesStatisticComponent)\n","export const zoneSideDimension = 106.9\nexport const longSideDimension = 214.8\n\n// Данные для отрисовки SVG с зонами поверх поля\nexport const fieldSVGDimensions = {\n  top: {\n    basic_zones: [\n      {\n        x: 238.8,\n        y: 8.5,\n      },\n      {\n        x: 131.7,\n        y: 8.5,\n      },\n      {\n        x: 24.5,\n        y: 8.5,\n      },\n      {\n        x: 24.5,\n        y: 223.8,\n      },\n      {\n        x: 238.8,\n        y: 223.8,\n      },\n      {\n        x: 131.7,\n        y: 223.8,\n      },\n    ],\n    advanced_zones: [\n      {\n        x: 24.5,\n        y: 8.5,\n      },\n      {\n        x: 238.8,\n        y: 8.5,\n      },\n      {\n        x: 131.7,\n        y: 8.5,\n      },\n      {\n        x: 238.8,\n        y: 223.6,\n      },\n      {\n        x: 238.8,\n        y: 115.9,\n      },\n      {\n        x: 131.7,\n        y: 115.9,\n      },\n      {\n        x: 131.7,\n        y: 223.6,\n      },\n      {\n        x: 24.5,\n        y: 115.9,\n      },\n      {\n        x: 24.5,\n        y: 223.6,\n      },\n    ],\n  },\n  bottom: {\n    basic_zones: [\n      {\n        x: 238.8,\n        y: 438.7,\n      },\n      {\n        x: 131.7,\n        y: 438.7,\n      },\n      {\n        x: 24.5,\n        y: 438.7,\n      },\n      {\n        x: 24.5,\n        y: 331.2,\n      },\n      {\n        x: 238.8,\n        y: 331.2,\n      },\n      {\n        x: 131.7,\n        y: 331.2,\n      },\n    ],\n    advanced_zones: [\n      {\n        x: 24.5,\n        y: 331.2,\n      },\n      {\n        x: 238.8,\n        y: 331.2,\n      },\n      {\n        x: 131.7,\n        y: 331.2,\n      },\n      {\n        x: 238.8,\n        y: 546.3,\n      },\n      {\n        x: 238.8,\n        y: 438.7,\n      },\n      {\n        x: 131.7,\n        y: 438.7,\n      },\n      {\n        x: 131.7,\n        y: 546.3,\n      },\n      {\n        x: 24.5,\n        y: 438.7,\n      },\n      {\n        x: 24.5,\n        y: 546.3,\n      },\n    ],\n  },\n}\n","import React from 'react'\n\nimport get from 'lodash/get'\n\nimport {\n  fieldSVGDimensions,\n  zoneSideDimension,\n  longSideDimension,\n} from '../config'\n\ntype TProps = {\n  side: string,\n  checked: string,\n}\n\nexport const MapFieldSVG = ({ checked, side }: TProps) => (\n  //@ts-ignore\n  <svg\n    version='1.1'\n    id='Layer_1'\n    xmlns='http://www.w3.org/2000/svg'\n    xlink='http://www.w3.org/1999/xlink'\n    x='0px'\n    y='0px'\n    viewBox='0 0 369 662'\n    xmlSpace='preserve'\n    className='map-block__zone-map'\n  >\n    <g>\n      <g>\n        <rect\n          x='24.2'\n          y='8.8'\n          className='st0'\n          width='321.5'\n          height='644.5'\n          fill='#FEF1EB'\n        />\n        <path\n          className='st1'\n          d='M345.5,9v644h-321V9H345.5 M346,8.5H24v645h322V8.5L346,8.5z'\n          fill='#A1A4A3'\n        />\n      </g>\n      <g>\n        <rect\n          x='24'\n          y='223.3'\n          className='st1'\n          width='322'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n      </g>\n      <g>\n        <rect\n          x='24'\n          y='438.2'\n          className='st1'\n          width='322'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n      </g>\n      <g>\n        <g>\n          <rect x='14' y='330.8' width='342' height='0.5' />\n        </g>\n        <circle cx='354.5' cy='331' r='1.5' />\n        <circle cx='15.5' cy='331' r='1.5' />\n      </g>\n      <g>\n        <rect\n          x='16'\n          y='223.3'\n          className='st1'\n          width='5'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n        <rect\n          x='8'\n          y='223.3'\n          className='st1'\n          width='5'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n        <rect y='223.3' className='st1' width='5' height='0.5' fill='#A1A4A3' />\n      </g>\n      <g>\n        <rect\n          x='16'\n          y='438.2'\n          className='st1'\n          width='5'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n        <rect\n          x='8'\n          y='438.2'\n          className='st1'\n          width='5'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n        <rect y='438.2' className='st1' width='5' height='0.5' fill='#A1A4A3' />\n      </g>\n      <g>\n        <rect\n          x='364'\n          y='223.3'\n          className='st1'\n          width='5'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n        <rect\n          x='356'\n          y='223.3'\n          className='st1'\n          width='5'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n        <rect\n          x='348'\n          y='223.3'\n          className='st1'\n          width='5'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n      </g>\n      <g>\n        <rect\n          x='364'\n          y='438.2'\n          className='st1'\n          width='5'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n        <rect\n          x='356'\n          y='438.2'\n          className='st1'\n          width='5'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n        <rect\n          x='348'\n          y='438.2'\n          className='st1'\n          width='5'\n          height='0.5'\n          fill='#A1A4A3'\n        />\n      </g>\n      <g>\n        <rect x='24' className='st1' width='0.5' height='5' fill='#A1A4A3' />\n        <rect x='345.5' className='st1' width='0.5' height='5' fill='#A1A4A3' />\n      </g>\n      <g>\n        <rect\n          x='24'\n          y='657'\n          className='st1'\n          width='0.5'\n          height='5'\n          fill='#A1A4A3'\n        />\n        <rect\n          x='345.5'\n          y='657'\n          className='st1'\n          width='0.5'\n          height='5'\n          fill='#A1A4A3'\n        />\n      </g>\n    </g>\n    {checked !== 'without_zone'\n      //@ts-ignore\n      && get(fieldSVGDimensions, [side, checked], []).map(({ x, y }, i) => (\n        <rect\n          className='map-block__hover-zone'\n          key={`${x}_${y}`}\n          x={x}\n          y={y}\n          width={zoneSideDimension}\n          //В случае, если у нас выбраны базовые зоны, то длина задних зон - увеличенная\n          height={\n            checked === 'basic_zones' && i < 3\n              ? longSideDimension\n              : zoneSideDimension\n          }\n        />\n      ))}\n  </svg>\n)\n","import React, { Fragment } from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport cx from 'classnames'\nimport get from 'lodash/get'\nimport map from 'lodash/map'\n\nimport { withHandlers, withProps, compose } from 'recompose'\n\nimport { ZonesStatistic } from 'features/components/common/map/ZoneStatistic'\n\nimport { zones } from 'config/zones'\nimport {\n  TProps,\n  TComposeInner,\n  TPRopsInner,\n  TPropsOuter,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n} from './types/fieldZonesTypes'\nimport { MapFieldSVG } from './MapFieldSVG'\n\nconst FieldZonesComponent = ({\n  getZonesClassName,\n  side,\n  zones: { checked },\n  zonesList,\n}: TProps) => (\n  <Fragment>\n    <div className={getZonesClassName()}>\n      {checked !== 'without_zone'\n        && map(zonesList, (zone: string) => (\n          <ZonesStatistic key={zone} zone={zone} />\n        ))}\n    </div>\n    <MapFieldSVG side={side} checked={checked} />\n  </Fragment>\n)\n\nconst fieldZonesComposed = compose<TComposeInner, {}>(\n  inject('zones', 'tabs'),\n  observer,\n  withProps<TPRopsInner, TPropsOuter>(({\n    tabs: { active },\n    zones: { checked },\n  }) => {\n    const side = active === 'serve' ? 'top' : 'bottom'\n\n    return {\n      side,\n      zonesList: get(zones, [side, checked], []),\n    }\n  }),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    getZonesClassName: ({ side, zones: { checked } }) => () =>\n      cx(\n        'map-block__zones',\n        `map-block__zones_${checked.split('_')[0]}-${side}`,\n      ),\n  }),\n)\n\nexport const FieldZones = fieldZonesComposed(FieldZonesComponent)\n","\nimport React from 'react'\nimport { observer, inject } from 'mobx-react'\n\nimport { compose, lifecycle } from 'recompose'\nimport get from 'lodash/get'\nimport isString from 'lodash/isString'\nimport isEmpty from 'lodash/isEmpty'\n\nimport { PlayingField } from 'react-sport'\n\nimport { Markers } from 'features/components/common/map/Markers'\nimport { MapFieldControls } from 'features/MapControls/components'\n\nimport { FieldZones } from './FieldZones'\n\nimport {\n  TProps,\n  TPrevProps,\n  TComposeInner,\n  TComposeOuter,\n} from './types/mapFieldTypes'\n\nexport const MapFieldComponent = ({ markers: { select, setRect } }: TProps) => (\n  <div className='main-page__map-wrapper'>\n    <MapFieldControls />\n    <div className='map-block__map-field-outer'>\n      <div className='map-block__map-field-inner'>\n        <div id='map' className='map-block__map-field-zones' />\n        <FieldZones />\n        <div className='main-page__map-shots'>\n          {select && (\n            <PlayingField.SelectionField\n              wrapperClass='selection_field'\n              width={360}\n              height={700}\n              onSelect={rect => setRect(rect || {}, 360, 700, 313, 631)}\n            />\n          )}\n          <Markers />\n        </div>\n      </div>\n    </div>\n  </div>\n)\n\nconst mapFieldComposed = compose<TComposeOuter, TComposeInner>(\n  inject(\n    'markers',\n    'matches',\n    'selectedMatches',\n    'lexics',\n    'zones',\n  ),\n  lifecycle<TPrevProps, {}>({\n    componentDidUpdate(prevProps) {\n      const {\n        lexics: { page },\n        markers: { fetch },\n        matchId,\n        pageId,\n        selectedMatches,\n        tab,\n        zones,\n      } = this.props\n      const currentMatches = page === 'match'\n        ? [matchId]\n        : get(selectedMatches, [page, pageId])\n\n      if (prevProps.tab === tab || isEmpty(currentMatches)) return null\n\n      if (!isString(currentMatches)) {\n        fetch(pageId, currentMatches)\n        zones.fetch(pageId, currentMatches)\n      }\n    },\n  }),\n  observer,\n)\n\nexport const MapField = mapFieldComposed(MapFieldComponent)\n","// Список фильтров для каждой вкладки на карте ударов\n\ntype TFiltersConfig = {\n  [key: string]: Array<{\n    data?: Array<{\n      columnTitleId?: number | false,\n      ids?: Array<number>,\n      zoneId?: number,\n      zoneNumber?: number,\n    } | number>,\n    style? : string,\n    title: number,\n    type: string,\n  }>,\n}\n\nexport const filterPopupByTab: TFiltersConfig = {\n  attack: [\n    {\n      type: 'popupWithColumns',\n      title: 10584, // результат\n      data: [\n        {\n          columnTitleId: 1, // выигранное очко\n          ids: [2, 3, 4],\n        },\n        {\n          columnTitleId: 5, // проигранное очко\n          ids: [6, 7, 276, 274, 8, 9],\n        },\n        {\n          columnTitleId: 49, // нулевая атака\n          ids: [298, 299],\n        },\n      ],\n    },\n    {\n      type: 'popupWithHomePlayers',\n      title: 10655, // атакующий\n    },\n    {\n      type: 'popupSimple',\n      title: 10656, // амплуа атакующего\n      data: [264, 263, 265, 266],\n    },\n    {\n      type: 'popupSimple',\n      title: 8556, // комбинация\n      data: [16, 17, 10, 22, 14, 13, 12, 18, 19, 21, 20],\n    },\n    {\n      type: 'popupSimple',\n      title: 10657, // атаки с первого мяча\n      data: [307, 308, 309, 310, 311, 312],\n    },\n    {\n      type: 'popupSimple',\n      title: 8341, // разновидность атаки\n      data: [24, 25, 26, 28],\n    },\n    {\n      type: 'popupWithZones',\n      title: 10658, // направление атаки\n      data: [\n        {\n          zoneId: 41,\n          zoneNumber: 1,\n        },\n        {\n          zoneId: 46,\n          zoneNumber: 6,\n        },\n        {\n          zoneId: 45,\n          zoneNumber: 5,\n        },\n        {\n          zoneId: 42,\n          zoneNumber: 2,\n        },\n        {\n          zoneId: 43,\n          zoneNumber: 3,\n        },\n        {\n          zoneId: 44,\n          zoneNumber: 4,\n        },\n      ],\n    },\n    {\n      type: 'popupSimple',\n      title: 10668, // тип блока\n      data: [29, 30, 31, 32],\n    },\n  ],\n  attack_reception: [\n    {\n      type: 'popupSimple',\n      title: 10669, // результат приема\n      data: [304, 305, 166],\n    },\n    {\n      type: 'popupWithHomePlayers',\n      title: 10642, // принимающий\n    },\n    {\n      type: 'popupSimple',\n      title: 10643, // амплуа принимающего\n      data: [267, 270, 268, 269],\n    },\n    {\n      type: 'popupSimple',\n      title: 8366, // тип приема\n      data: [199, 198, 200],\n    },\n  ],\n  block: [\n    {\n      type: 'popupWithColumns',\n      title: 10584, // Результат\n      data: [\n        {\n          columnTitleId: 50, // выигранное очко\n          ids: [51, 53],\n        },\n        {\n          columnTitleId: 232, // проигранное очко\n          ids: [58, 55, 54, 56, 57],\n        },\n        {\n          columnTitleId: 10664, // нулевой блок\n          ids: [59, 60],\n        },\n      ],\n    },\n    {\n      type: 'popupWithHomePlayers',\n      title: 10665, // блокирующий\n    },\n    {\n      type: 'popupSimple',\n      title: 10666, // амплуа блокирующего\n      data: [300, 301, 302, 303],\n    },\n    {\n      type: 'popupSimple',\n      title: 10668, // тип блока\n      data: [71, 72, 73],\n    },\n    {\n      type: 'popupSimple',\n      title: 8343, // характеристика блока\n      data: [74, 75],\n    },\n  ],\n  pass: [\n    {\n      type: 'popupWithColumns',\n      title: 10584, // Результат\n      data: [\n        {\n          columnTitleId: 105, // ассист\n          ids: [289, 290],\n        },\n        {\n          columnTitleId: 104, // ошибка\n          ids: [103, 102],\n        },\n        {\n          columnTitleId: 306, // нулевая атака\n          ids: [291, 292],\n        },\n      ],\n    },\n    {\n      type: 'popupWithHomePlayers',\n      title: 10645, // пасующий\n    },\n    {\n      type: 'popupSimple',\n      title: 10646, // амплуа пасующего\n      data: [293, 294, 295, 296, 297],\n    },\n    {\n      type: 'popupSimple',\n      title: 10647, // тип передачи\n      data: [106, 107],\n    },\n    {\n      style: 'home', // home - сторона поля своей команды\n      type: 'popupWithZones',\n      title: 10648, // направление передачи\n      data: [\n        {\n          zoneId: 131,\n          zoneNumber: 4,\n        },\n        {\n          zoneId: 130,\n          zoneNumber: 3,\n        },\n        {\n          zoneId: 129,\n          zoneNumber: 2,\n        },\n        {\n          zoneId: 132,\n          zoneNumber: 5,\n        },\n        {\n          zoneId: 133,\n          zoneNumber: 6,\n        },\n        {\n          zoneId: 128,\n          zoneNumber: 1,\n        },\n      ],\n    },\n    {\n      style: 'home',\n      type: 'popupWithZones',\n      title: 10649, // зона передачи\n      data: [\n        {\n          zoneId: 137,\n          zoneNumber: 4,\n        },\n        {\n          zoneId: 136,\n          zoneNumber: 3,\n        },\n        {\n          zoneId: 135,\n          zoneNumber: 2,\n        },\n        {\n          zoneId: 138,\n          zoneNumber: 5,\n        },\n        {\n          zoneId: 139,\n          zoneNumber: 6,\n        },\n        {\n          zoneId: 134,\n          zoneNumber: 1,\n        },\n      ],\n    },\n  ],\n  serve: [\n    {\n      type: 'popupWithColumns',\n      title: 10584, // результат\n      data: [\n        {\n          columnTitleId: 10585, // Эйс\n          ids: [145, 146, 147],\n        },\n        {\n          columnTitleId: 278, // Ошибка\n          ids: [149, 148, 150, 151],\n        },\n        {\n          columnTitleId: 279, // Нулевая подача\n          ids: [143, 142],\n        },\n      ],\n    },\n    {\n      type: 'popupWithHomePlayers',\n      title: 10518, // подающий\n    },\n    {\n      type: 'popupSimple',\n      title: 8367, // тип подачи\n      data: [162, 163],\n    },\n    {\n      type: 'popupSimple',\n      title: 10596, // характеристика\n      data: [154, 153, 152],\n    },\n    {\n      type: 'popupWithZones',\n      title: 8882,\n      data: [\n        {\n          zoneId: 156,\n          zoneNumber: 1,\n        },\n        {\n          zoneId: 161,\n          zoneNumber: 6,\n        },\n        {\n          zoneId: 160,\n          zoneNumber: 5,\n        },\n        {\n          zoneId: 157,\n          zoneNumber: 2,\n        },\n        {\n          zoneId: 158,\n          zoneNumber: 3,\n        },\n        {\n          zoneId: 159,\n          zoneNumber: 4,\n        },\n      ],\n    },\n    {\n      type: 'popupSimple',\n      title: 10602, // направление\n      data: [280, 281, 282, 283, 284, 285],\n    },\n  ],\n  serve_reception: [\n    {\n      type: 'popupSimple',\n      title: 10584, // Результат\n      data: [208, 209, 210],\n    },\n    {\n      type: 'popupWithHomePlayers',\n      title: 10642, // Принимающий (список команд с игроками)\n    },\n    {\n      type: 'popupSimple',\n      title: 10643, // амплуа принимающего\n      data: [271, 272, 286, 287, 288],\n    },\n    {\n      type: 'popupSimple',\n      title: 8375, // тип приема\n      data: [218, 217, 219],\n    },\n    {\n      type: 'popupWithPlayers',\n      title: 8833, // Кто подает\n    },\n    {\n      type: 'popupSimple',\n      title: 10591, // расстановка\n      data: [313, 314, 315, 316, 317, 318],\n    },\n  ],\n}\n\nexport const filterPopupByTabForPlayer: TFiltersConfig = {\n  attack: [\n    {\n      type: 'popupWithColumns',\n      title: 10584, // результат\n      data: [\n        {\n          columnTitleId: 1, // выигранное очко\n          ids: [2, 3, 4],\n        },\n        {\n          columnTitleId: 5, // проигранное очко\n          ids: [6, 7, 276, 274, 8, 9],\n        },\n        {\n          columnTitleId: 49, // нулевая атака\n          ids: [298, 299],\n        },\n      ],\n    },\n    {\n      type: 'popupSimple',\n      title: 8556, // комбинация\n      data: [16, 17, 10, 22, 14, 13, 12, 18, 19, 21, 20],\n    },\n    {\n      type: 'popupSimple',\n      title: 10657, // атаки с первого мяча\n      data: [307, 308, 309, 310, 311, 312],\n    },\n    {\n      type: 'popupSimple',\n      title: 8341, // разновидность атаки\n      data: [24, 25, 26, 28],\n    },\n    {\n      type: 'popupWithZones',\n      title: 10658, // направление атаки\n      data: [\n        {\n          zoneId: 41,\n          zoneNumber: 1,\n        },\n        {\n          zoneId: 46,\n          zoneNumber: 6,\n        },\n        {\n          zoneId: 45,\n          zoneNumber: 5,\n        },\n        {\n          zoneId: 42,\n          zoneNumber: 2,\n        },\n        {\n          zoneId: 43,\n          zoneNumber: 3,\n        },\n        {\n          zoneId: 44,\n          zoneNumber: 4,\n        },\n      ],\n    },\n    {\n      type: 'popupSimple',\n      title: 10668, // тип блока\n      data: [29, 30, 31, 32],\n    },\n  ],\n  attack_reception: [\n    {\n      type: 'popupSimple',\n      title: 10669, // результат приема\n      data: [304, 305, 166],\n    },\n    {\n      type: 'popupSimple',\n      title: 8366, // тип приема\n      data: [199, 198, 200],\n    },\n    {\n      type: 'popupWithZones',\n      style: 'home', // home - сторона поля своей команды\n      title: 8363, // Приемы атак в зоне\n      data: [\n        {\n          zoneId: 195,\n          zoneNumber: 4,\n        },\n        {\n          zoneId: 194,\n          zoneNumber: 3,\n        },\n        {\n          zoneId: 193,\n          zoneNumber: 2,\n        },\n        {\n          zoneId: 196,\n          zoneNumber: 5,\n        },\n        {\n          zoneId: 197,\n          zoneNumber: 6,\n        },\n        {\n          zoneId: 192,\n          zoneNumber: 1,\n        },\n      ],\n    },\n    {\n      type: 'popupSimple',\n      title: 8342, // Число блокирующих\n      data: [202, 203, 204, 205],\n    },\n  ],\n  block: [\n    {\n      type: 'popupWithColumns',\n      title: 10584, // Результат\n      data: [\n        {\n          columnTitleId: 50, // выигранное очко\n          ids: [51, 53],\n        },\n        {\n          columnTitleId: 232, // проигранное очко\n          ids: [58, 55, 54, 56, 57],\n        },\n        {\n          columnTitleId: 10664, // нулевой блок\n          ids: [59, 60],\n        },\n      ],\n    },\n    {\n      type: 'popupWithHomePlayers',\n      title: 10665, // блокирующий\n    },\n    {\n      type: 'popupSimple',\n      title: 10666, // амплуа блокирующего\n      data: [300, 301, 302, 303],\n    },\n    {\n      type: 'popupSimple',\n      title: 10668, // тип блока\n      data: [71, 72, 73],\n    },\n    {\n      type: 'popupSimple',\n      title: 8343, // характеристика блока\n      data: [74, 75],\n    },\n  ],\n  pass: [\n    {\n      type: 'popupWithColumns',\n      title: 10584, // Результат\n      data: [\n        {\n          columnTitleId: 105, // ассист\n          ids: [289, 290],\n        },\n        {\n          columnTitleId: 104, // ошибка\n          ids: [103, 102],\n        },\n        {\n          columnTitleId: 306, // нулевая атака\n          ids: [291, 292],\n        },\n      ],\n    },\n    {\n      type: 'popupWithHomePlayers',\n      title: 10645, // пасующий\n    },\n    {\n      type: 'popupSimple',\n      title: 10646, // амплуа пасующего\n      data: [293, 294, 295, 296, 297],\n    },\n    {\n      type: 'popupSimple',\n      title: 10647, // тип передачи\n      data: [106, 107],\n    },\n    {\n      style: 'home', // home - сторона поля своей команды\n      type: 'popupWithZones',\n      title: 10648, // направление передачи\n      data: [\n        {\n          zoneId: 131,\n          zoneNumber: 4,\n        },\n        {\n          zoneId: 130,\n          zoneNumber: 3,\n        },\n        {\n          zoneId: 129,\n          zoneNumber: 2,\n        },\n        {\n          zoneId: 132,\n          zoneNumber: 5,\n        },\n        {\n          zoneId: 133,\n          zoneNumber: 6,\n        },\n        {\n          zoneId: 128,\n          zoneNumber: 1,\n        },\n      ],\n    },\n    {\n      style: 'home',\n      type: 'popupWithZones',\n      title: 10649, // зона передачи\n      data: [\n        {\n          zoneId: 137,\n          zoneNumber: 4,\n        },\n        {\n          zoneId: 136,\n          zoneNumber: 3,\n        },\n        {\n          zoneId: 135,\n          zoneNumber: 2,\n        },\n        {\n          zoneId: 138,\n          zoneNumber: 5,\n        },\n        {\n          zoneId: 139,\n          zoneNumber: 6,\n        },\n        {\n          zoneId: 134,\n          zoneNumber: 1,\n        },\n      ],\n    },\n  ],\n  serve: [\n    {\n      type: 'popupWithColumns',\n      title: 10584, // результат\n      data: [\n        {\n          columnTitleId: 10585, // Эйс\n          ids: [145, 146, 147],\n        },\n        {\n          columnTitleId: 278, // Ошибка\n          ids: [149, 148, 150, 151],\n        },\n        {\n          columnTitleId: 279, // Нулевая подача\n          ids: [143, 142],\n        },\n      ],\n    },\n    {\n      type: 'popupSimple',\n      title: 8367, // тип подачи\n      data: [162, 163],\n    },\n    {\n      type: 'popupSimple',\n      title: 10596, // характеристика\n      data: [154, 153, 152],\n    },\n    {\n      type: 'popupWithZones',\n      title: 8882,\n      data: [\n        {\n          zoneId: 156,\n          zoneNumber: 1,\n        },\n        {\n          zoneId: 161,\n          zoneNumber: 6,\n        },\n        {\n          zoneId: 160,\n          zoneNumber: 5,\n        },\n        {\n          zoneId: 157,\n          zoneNumber: 2,\n        },\n        {\n          zoneId: 158,\n          zoneNumber: 3,\n        },\n        {\n          zoneId: 159,\n          zoneNumber: 4,\n        },\n      ],\n    },\n    {\n      type: 'popupSimple',\n      title: 10602, // направление\n      data: [280, 281, 282, 283, 284, 285],\n    },\n  ],\n  serve_reception: [\n    {\n      type: 'popupSimple',\n      title: 10584, // Результат\n      data: [208, 209, 210],\n    },\n    {\n      type: 'popupSimple',\n      title: 8375, // тип приема\n      data: [218, 217, 219],\n    },\n    {\n      type: 'popupWithPlayers',\n      title: 8833, // Кто подает\n    },\n    {\n      type: 'popupSimple',\n      title: 10591, // расстановка\n      data: [313, 314, 315, 316, 317, 318],\n    },\n  ],\n}\n","export const lexic: {[key: number]: string} = {\n  1: '7726',\n  2: '7727',\n  3: '10650',\n  4: '10651',\n  5: '7730',\n  6: '7731',\n  7: '8710',\n  8: '10654',\n  9: '8711',\n  10: '7736',\n  12: '966',\n  13: '7738',\n  14: '7739',\n  16: '7741',\n  17: '7742',\n  18: '7743',\n  19: '7744',\n  20: '7745',\n  21: '7746',\n  22: '9884',\n  24: '7747',\n  25: '7748',\n  26: '7749',\n  28: '7751',\n  29: '7752',\n  30: '7753',\n  31: '7754',\n  32: '7755',\n  41: '7758',\n  42: '7759',\n  43: '7760',\n  44: '7761',\n  45: '7762',\n  46: '7763',\n  49: '10644',\n  50: '7726',\n  51: '8656',\n  53: '7737',\n  54: '10654',\n  55: '8711',\n  56: '10663',\n  57: '7773',\n  58: '8659',\n  59: '9880',\n  60: '8577',\n  70: '7752',\n  71: '7753',\n  72: '7754',\n  73: '7755',\n  74: '7756',\n  75: '7757',\n  102: '7780',\n  103: '7781',\n  104: '737',\n  105: '7783',\n  106: '7784',\n  107: '7785',\n  128: '7758',\n  129: '7759',\n  130: '7760',\n  131: '7761',\n  132: '7762',\n  133: '7763',\n  134: '7758',\n  135: '7759',\n  136: '7760',\n  137: '7761',\n  138: '7762',\n  139: '7763',\n  142: '7786',\n  143: '7787',\n  144: '10585',\n  145: '7789',\n  146: '7790',\n  147: '7791',\n  148: '8709',\n  149: '8710',\n  150: '8711',\n  151: '8650',\n  152: '8371',\n  153: '8372',\n  154: '8373',\n  156: '7758',\n  157: '7759',\n  158: '7760',\n  159: '7761',\n  160: '7762',\n  161: '7763',\n  162: '8368',\n  163: '8369',\n  166: '737',\n  186: '7758',\n  187: '7759',\n  188: '7760',\n  189: '7761',\n  190: '7762',\n  191: '7763',\n  192: '7758',\n  193: '7759',\n  194: '7760',\n  195: '7761',\n  196: '7762',\n  197: '7763',\n  198: '7784',\n  199: '7785',\n  200: '7802',\n  202: '7752',\n  203: '7753',\n  204: '7754',\n  205: '7755',\n  208: '7786',\n  209: '7787',\n  210: '737',\n  217: '7784',\n  218: '7785',\n  219: '7802',\n  232: '7730',\n  263: '7776',\n  264: '7778',\n  265: '7777',\n  266: '7779',\n  267: '7776',\n  268: '7778',\n  269: '7779',\n  270: '7887',\n  271: '7776',\n  272: '7887',\n  274: '10653',\n  275: '10659',\n  276: '8709',\n  278: '737',\n  279: '10785',\n  280: '9862',\n  281: '9863',\n  282: '9864',\n  283: '9865',\n  284: '9866',\n  285: '9867',\n  286: '7778',\n  287: '7777',\n  288: '7779',\n  289: '7781',\n  290: '7780',\n  291: '7781',\n  292: '7780',\n  293: '7779',\n  294: '7887',\n  295: '7776',\n  296: '7778',\n  297: '7777',\n  298: '8653',\n  299: '8577',\n  300: '7777',\n  301: '7778',\n  302: '7776',\n  303: '7779',\n  304: '10670',\n  305: '10671',\n  306: '10644',\n  307: '9862',\n  308: '9863',\n  309: '9864',\n  310: '9865',\n  311: '9866',\n  312: '9867',\n  313: '9862',\n  314: '9863',\n  315: '9864',\n  316: '9865',\n  317: '9866',\n  318: '9867',\n}\n","import { inject, observer } from 'mobx-react'\nimport { compose, withHandlers } from 'recompose'\nimport some from 'lodash/some'\nimport cx from 'classnames'\nimport { lexic } from 'config/lexics/filtersById'\n\ntype TPopupHoc = {\n  filters: {\n    tempSelectedFilters: {[key: number]: {}},\n  },\n}\n// Для попапа с основной общей логикой для попап окон в блоке фильтров\nexport const PopupHOC = (wrappedComponent: any) =>\n  compose(\n    inject('filters'),\n    withHandlers<TPopupHoc, {}>({\n      getFilterLexics: () => (id: number) => lexic[id] || id,\n      getItemClassName: ({\n        filters: { tempSelectedFilters },\n      }) => (id: number) =>\n        cx('popup-column__item', {\n          'popup-column__item_checked': tempSelectedFilters[id],\n        }),\n      getTitleClassName: ({ filters: { tempSelectedFilters } }) => (\n        (ids: Array<number>) => (\n          cx('popup-column__title', {\n            'popup-column__title_checked': some(\n              ids,\n              id => tempSelectedFilters[id],\n            ),\n          })\n        )\n      ),\n    }),\n    observer,\n  )(wrappedComponent)\n","import React, { Fragment } from 'react'\n\nimport map from 'lodash/map'\n\nimport { T9n } from 'react-sport'\n\nimport { PopupHOC } from '../PopupHOC'\n\nimport { TPropsCommon } from '../types'\n\ntype TProps = TPropsCommon & {\n  data: Array<{\n    columnTitleId: number | false,\n    ids: Array<number>,\n    zoneId: number,\n    zoneNumber: number,\n  }>,\n}\n\n// Попап с фильтрами, которые разбиты по группам (в колонку) с заголовком у каждой группы\n// Если нет заголовка, то отображаем просто список фильтров\nconst ColumnsPopupComponent = ({\n  data,\n  filters: { handleAllTempCheck, handleTempCheck },\n  getFilterLexics,\n  getItemClassName,\n  getTitleClassName,\n  toggleOpenClose,\n}: TProps) => (\n  <Fragment>\n    <div className='popup-column__wrapper'>\n      {map(data, ({ columnTitleId, ids }, idx) => (\n        <div className='popup-column__container' key={columnTitleId || idx}>\n          {columnTitleId && (\n            <div\n              className={getTitleClassName(ids)}\n              onClick={() => handleAllTempCheck(ids)}\n            >\n              <T9n t={getFilterLexics(columnTitleId)} />\n            </div>\n          )}\n          <ul className='popup-column__list'>\n            {map(ids, id => (\n              <li\n                className={getItemClassName(id)}\n                key={id}\n                onClick={() => handleTempCheck(id)}\n              >\n                <T9n t={getFilterLexics(id)} />\n              </li>\n            ))}\n          </ul>\n        </div>\n      ))}\n    </div>\n    <button className='map-block__popup-button' onClick={toggleOpenClose}>\n        OK\n    </button>\n  </Fragment>\n)\n\nexport const ColumnsPopup = PopupHOC(ColumnsPopupComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withHandlers,\n  withProps,\n} from 'recompose'\nimport cx from 'classnames'\nimport map from 'lodash/map'\n\nimport { PopupHOC } from '../PopupHOC'\n\nimport {\n  TProps,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n  TComposeInner,\n  TWithPropsInner,\n  TWithPropsOuter,\n} from './types'\n\n// Попап с зонами поля\nconst ZonesPopupComponent = ({\n  data,\n  fieldClassName,\n  filters: { handleTempCheck },\n  getZoneClassName,\n  toggleOpenClose,\n}: TProps) => (\n  <div className='map-block__popup'>\n    <ul className={fieldClassName}>\n      {map(data, ({ zoneId, zoneNumber }) => (\n        <li\n          className={getZoneClassName(zoneId)}\n          key={zoneId}\n          onClick={() => handleTempCheck(zoneId)}\n        >\n          {zoneNumber}\n        </li>\n      ))}\n    </ul>\n    <button className='map-block__popup-button' onClick={toggleOpenClose}>\n        OK\n    </button>\n  </div>\n)\n\nconst zonesPopupComposed = compose<TComposeInner, {}>(\n  inject('filters'),\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(({\n    style,\n  }) => ({\n    fieldClassName: cx('map-block__popup-zone-list', {\n      'map-block__popup-zone-list_home': style === 'home',\n    }),\n  })),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    getZoneClassName: ({ filters: { tempSelectedFilters } }) => id =>\n      cx('map-block__popup-zone', {\n        'map-block__popup-zone_active': tempSelectedFilters[id],\n      }),\n  }),\n  PopupHOC,\n)\n\nexport const ZonesPopup = zonesPopupComposed(ZonesPopupComponent)\n","import React, { Fragment } from 'react'\nimport map from 'lodash/map'\nimport { T9n } from 'react-sport'\nimport { PopupHOC } from '../PopupHOC'\nimport { TPropsCommon } from '../types'\n\ntype TProps = TPropsCommon & {\n  data: Array<number>,\n}\n\n// Обычный попап с фильтрами в столбик\nconst PopupSimpleComponent = ({\n  data,\n  filters: { handleTempCheck },\n  getFilterLexics,\n  getItemClassName,\n  toggleOpenClose,\n}: TProps) => (\n  <Fragment>\n    <div className='popup-column__wrapper'>\n      <div className='popup-column__container'>\n        <ul className='popup-column__list'>\n          {map(data, id => (\n            <li\n              className={getItemClassName(id)}\n              key={id}\n              onClick={() => handleTempCheck(id)}\n            >\n              <T9n t={getFilterLexics(id)} />\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n    <button className='map-block__popup-button' onClick={toggleOpenClose}>\n      OK\n    </button>\n  </Fragment>\n)\n\nexport const PopupSimple = PopupHOC(PopupSimpleComponent)\n","import React, { Fragment } from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withProps,\n  withHandlers,\n} from 'recompose'\nimport cx from 'classnames'\nimport map from 'lodash/map'\nimport size from 'lodash/size'\n\nimport { getLongSuffix } from 'module/utils/helpers'\nimport {\n  TProps,\n  TWithPropsOuter,\n  TWithPropsInner,\n  TPlayer,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n  TPropsOuter,\n} from './types'\n\nimport { PopupHOC } from '../PopupHOC'\n\n// Попап со списком игроков разбитым по командам\nconst PopupWithPlayersComponent = ({\n  filters: { handleAllTempCheck, handleTempCheck },\n  getFullName,\n  getItemClassName,\n  getPlayersId,\n  getTitleClassName,\n  mapShoot: { data },\n  suffix,\n  toggleOpenClose,\n  type,\n}: TProps) => (\n  <Fragment>\n    <div\n      className={cx(\n        'popup-column__wrapper',\n        { 'popup-column__wrapper_wide': size(data) >= 3 },\n        { 'popup-column__wrapper_narrow': size(data) < 2 },\n      )}\n    >\n      {map(data, ({\n        f_team: teamId,\n        prop_player: playersList,\n        ...team\n      }) => (\n        <div className='popup-column__container' key={teamId}>\n          <div\n            className={getTitleClassName(getPlayersId(playersList))}\n            onClick={() =>\n              handleAllTempCheck(getPlayersId(playersList), type)\n            }\n          >\n            <span>{team[`name_${suffix}`]}</span>\n          </div>\n          <ul className='popup-column__list'>\n            {map(playersList, ({ player_id: playerId, ...player }) => (\n              <li\n                className={getItemClassName(`${playerId}_player`)}\n                key={playerId}\n                onClick={() => handleTempCheck(`${playerId}_player`, type)}\n              >\n                <span>{getFullName(player)}</span>\n              </li>\n            ))}\n          </ul>\n        </div>\n      ))\n      }\n    </div>\n    <button className='map-block__popup-button' onClick={toggleOpenClose}>\n      OK\n    </button>\n  </Fragment>\n)\n\nconst popupWithPlayersComposed = compose<TProps, TPropsOuter>(\n  inject('mapShoot', 'lexics'),\n  withProps<TWithPropsInner, TWithPropsOuter>(({ lexics: { lang } }) => ({\n    suffix: getLongSuffix(lang),\n  })),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    getFullName: ({ suffix }) => (player: TPlayer) =>\n      `${player[`firstname_${suffix}`]} ${player[`lastname_${suffix}`]}`,\n\n    getPlayersId: () => (players: Array<{player_id: number}>) =>\n      map(players, ({ player_id }) => `${player_id}_player`),\n  }),\n  PopupHOC,\n  observer,\n)\n\nexport const PopupWithPlayers = popupWithPlayersComposed(PopupWithPlayersComponent)\n","import React, { Fragment } from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withProps,\n  withHandlers,\n} from 'recompose'\nimport map from 'lodash/map'\nimport filter from 'lodash/filter'\n\nimport { getLongSuffix } from 'module/utils/helpers'\nimport { PopupHOC } from '../PopupHOC'\n\nimport {\n  TProps,\n  TWithPropsInner,\n  TWithHandlersOuter,\n  TWithPropsOuter,\n  TPlayer,\n  TComposeOuter,\n} from './types'\n\n// Попап со списком игроков разбитым по командам\nconst PopupWithHomePlayersComponent = ({\n  filters: { handleTempCheck },\n  getFullName,\n  getItemClassName,\n  playersList,\n  toggleOpenClose,\n  type,\n}: TProps) => (\n  <Fragment>\n    <div className='popup-column__wrapper'>\n      <ul className='popup-column__list'>\n        {map(playersList, ({ f_player: playerId, prop_player: player }) => (\n          <li\n            className={getItemClassName(`${playerId}_player`)}\n            key={playerId}\n            onClick={() => handleTempCheck(`${playerId}_player`, type)}\n          >\n            <span>{getFullName(player[0])}</span>\n          </li>\n        ))}\n      </ul>\n    </div>\n    <button className='map-block__popup-button' onClick={toggleOpenClose}>\n      OK\n    </button>\n  </Fragment>\n)\n\nconst popupWitHomePlayersComposed = compose<TComposeOuter, TProps>(\n  inject(\n    'playerInfo',\n    'lexics',\n    'playerProfile',\n  ),\n  observer,\n  withProps<TWithPropsOuter, TWithPropsInner>(\n    ({\n      lexics: { lang },\n      playerInfo: { basicData },\n      playerProfile: { profile },\n    }) => ({\n      playersList: profile\n        ? filter(\n          basicData, ({ f_player }: {f_player: number}) => f_player !== profile.id,\n        )\n        : basicData,\n      suffix: getLongSuffix(lang),\n    }),\n  ),\n  withHandlers<TWithPropsOuter, TWithHandlersOuter>({\n    getFullName: ({ suffix }) => (player: TPlayer) =>\n      `${player[`firstname_${suffix}`]} ${player[`lastname_${suffix}`]}`,\n  }),\n  PopupHOC,\n  observer,\n)\n\nexport const PopupWithHomePlayers = popupWitHomePlayersComposed(PopupWithHomePlayersComponent)\n","import React from 'react'\nimport { compose } from 'recompose'\n\nimport { OutsideClick } from 'react-sport'\nimport { ColumnsPopup } from './FilterPopup/ColumnsPopup'\nimport { ZonesPopup } from './FilterPopup/ZonesPopup'\nimport { PopupSimple } from './FilterPopup/PopupSimple'\nimport { PopupWithPlayers } from './FilterPopup/PopupWithPlayers'\nimport { PopupWithHomePlayers } from './FilterPopup/PopupWithHomePlayers'\nimport './FilterPopup/filterPopup.scss'\n\nconst FilterMenuComponent = ({ type, ...props }: {type: string}) => (\n  <div className='map-block__menu'>\n    {type === 'popupWithColumns' && <ColumnsPopup {...props} />}\n    {type === 'popupWithZones' && <ZonesPopup {...props} />}\n    {type === 'popupSimple' && <PopupSimple {...props} />}\n    {type === 'popupWithPlayers' && (\n      <PopupWithPlayers type={type} {...props} />\n    )}\n    {type === 'popupWithHomePlayers' && (\n      //@ts-ignore\n      <PopupWithHomePlayers type={type} {...props} />\n    )}\n  </div>\n)\n\nconst filterMenuComposed = compose<{type: string}, {}>(\n  OutsideClick,\n)\n\nexport const FilterMenu = filterMenuComposed(FilterMenuComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers } from 'recompose'\nimport find from 'lodash/find'\nimport map from 'lodash/map'\n\nimport { T9n } from 'react-sport'\n\nimport { getLongSuffix } from 'module/utils/helpers'\n\nimport { lexic } from 'config/lexics/filtersById'\n\nimport {\n  TProps,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n  TPlayer,\n  TComposeOuter,\n  TComposeInner,\n} from './types'\n\nconst FilterSubMenuComponent = ({\n  checkedInGroup,\n  getFullName,\n  handleUncheck,\n}: TProps) => (\n  <ul className='checked-list'>\n    {map(checkedInGroup, ({ id, player_id }) => (\n      <li className='checked-list__item' key={id || player_id}>\n        {player_id ? (\n          <span className='checked-list__item-name'>\n            {getFullName(player_id)}\n          </span>\n        ) : (\n          <T9n className='checked-list__item-name' t={lexic[Number(id)]} />\n        )}\n        <i\n          className='checked-list__item-remove'\n          onClick={() => handleUncheck(id || `${player_id}_player`)}\n        />\n      </li>\n    ))}\n  </ul>\n)\n\nconst filterSubMenuComposed = compose<TComposeInner, TComposeOuter>(\n  inject('lexics'),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    getFullName: ({\n      checkedInGroup,\n      lexics: { lang },\n    }) => (playerId) => {\n      const suffix = getLongSuffix(lang)\n      const player: TPlayer = find(checkedInGroup, { player_id: playerId }) || {}\n      const fullName = `${player[`firstname_${suffix}`]} ${\n        player[`lastname_${suffix}`]\n      }`\n      return fullName\n    },\n  }),\n  observer,\n)\n\nexport const FilterSubMenu = filterSubMenuComposed(FilterSubMenuComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withProps,\n  withState,\n  withHandlers,\n} from 'recompose'\nimport includes from 'lodash/includes'\nimport filter from 'lodash/filter'\nimport cx from 'classnames'\n\nimport { T9n } from 'react-sport'\n\nimport { getCheckedFiltersSubMenu } from 'module/utils/helpers'\nimport { FilterMenu } from './FilterMenu'\nimport { FilterSubMenu } from './FilterSubMenu'\n\nimport {\n  TProps,\n  TWithHandlersOuter,\n  TWithPropsOuter,\n  TComposeInner,\n  TWithHandlersInner,\n  TWithPropsInner,\n} from './types'\n\nconst FilterItemComponent = ({\n  checkedInGroup,\n  clickOutside,\n  data,\n  filters: {\n    handleUncheck,\n  },\n  getMenuClassName,\n  menuOpened,\n  style,\n  title,\n  toggleOpenClose,\n  type,\n}: TProps) => (\n  <div className='map-block__filters-row'>\n    <span className={getMenuClassName()} onClick={toggleOpenClose}>\n      <T9n t={title} />\n    </span>\n    {menuOpened\n        && (\n          //@ts-ignore\n          <FilterMenu\n            type={type}\n            data={data}\n            style={style}\n            clickOutside={clickOutside}\n            toggleOpenClose={toggleOpenClose}\n          />\n        )\n    }\n    <FilterSubMenu\n      checkedInGroup={checkedInGroup}\n      handleUncheck={handleUncheck}\n    />\n  </div>\n)\n\nconst filterItemComposed = compose<TComposeInner, TProps>(\n  inject(\n    'filters',\n    'mapShoot',\n    'playerInfo',\n  ),\n  withState('menuOpened', 'menuToggle', false),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    clickOutside: ({\n      filters: { toggleOpenMenu },\n      menuOpened,\n      menuToggle,\n    }) => () => {\n      menuToggle(!menuOpened)\n      toggleOpenMenu('reset')\n    },\n    getMenuClassName: ({ menuOpened }) => () => cx(\n      'map-block__title',\n      { 'map-block__title_active': menuOpened },\n    ),\n    toggleOpenClose: ({\n      filters: { toggleOpenMenu },\n      menuOpened,\n      menuToggle,\n    }) => () => {\n      menuToggle(!menuOpened)\n      toggleOpenMenu()\n    },\n  }),\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(({\n    data: idsFromConfig,\n    filters: { checked },\n    mapShoot,\n    playerInfo,\n    type,\n  }) => {\n    const getIds = () => {\n      switch (type) {\n        case 'popupWithPlayers':\n          return mapShoot.playersIds\n        case 'popupWithHomePlayers':\n          return playerInfo.playersIds\n        default:\n          return idsFromConfig\n      }\n    }\n    const ids = getIds()\n    const filtered = getCheckedFiltersSubMenu(ids, type)\n    const keyNormalized = (key: string) => (\n      includes(['popupWithPlayers', 'popupWithHomePlayers'], type)\n        ? key\n        : Number(key)\n    )\n    const checkedInGroup = filter(checked, (value, key) => (\n      includes(filtered, keyNormalized(key))))\n\n    return { checkedInGroup }\n  }),\n  observer,\n)\n\nexport const FilterItem = filterItemComposed(FilterItemComponent)\n","import React, { Fragment } from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  lifecycle,\n  withProps,\n} from 'recompose'\nimport map from 'lodash/map'\n\nimport {\n  TWithPropsInner,\n  TComposeInner,\n  TWithPropsOuter,\n  TLifeCycle,\n} from './types'\nimport { filterPopupByTab, filterPopupByTabForPlayer } from './config'\n\nimport { FilterItem } from './FilterItem'\n\n\nconst MapFiltersComponent = ({ filtersList }: TWithPropsInner) => (\n  <Fragment>\n    {map(\n      filtersList,\n      ({\n        data,\n        style,\n        title,\n        type,\n      }) => (\n      //@ts-ignore\n        <FilterItem\n          key={title}\n          type={type}\n          title={title}\n          data={data}\n          style={style}\n        />\n      ),\n    )}\n  </Fragment>\n)\n\nconst mapFiltersComposed = compose<TComposeInner, {}>(\n  inject(\n    'tabs',\n    'filters',\n    'lexics',\n  ),\n  withProps<TWithPropsInner, TWithPropsOuter>(({\n    lexics: { page },\n    tabs: { active },\n  }) => ({\n    filtersList: page === 'player'\n      ? filterPopupByTabForPlayer[active]\n      : filterPopupByTab[active],\n  })),\n  lifecycle<TLifeCycle, {}>({\n    componentDidMount() {\n      const { fetch, loaded } = this.props.filters\n      if (!loaded) {\n        fetch()\n      }\n    },\n  }),\n  observer,\n)\n\nexport const MapFilters = mapFiltersComposed(MapFiltersComponent)\n","import get from 'lodash/get'\n\n// @ts-ignore\nimport { getLongSuffix, getSuffix } from 'module/utils/helpers'\n\n/** Получение полного имени игрока (англ/русский)\n * @param {object} player - объект игрока\n * @param {string} lang - язык (ru, rus, en, eng)\n * @param {bool} long - форма языка (прим. ru или rus)\n */\nexport function getPlayerFullName({\n  lang,\n  long,\n  player,\n}: {\n  player: {},\n  lang: string,\n  //@ts-ignore\n  long: bool,\n}): string {\n  const suffix = long ? getLongSuffix(lang) : getSuffix(lang)\n  const firstName = get(player, `firstname_${suffix}`, '')\n  const lastName = get(player, `lastname_${suffix}`, '')\n\n  return `${firstName} ${lastName}`\n}\n","\nimport React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose } from 'recompose'\n\n// @ts-ignore\nimport { getPlayerFullName } from 'module/utils/helpers/getPlayerFullName'\n\ntype TProps = {\n  player: {},\n  lexics: { lang: string },\n};\n\nconst PlayerNameComponent = ({ lexics: { lang }, player }: TProps) => (\n  <span>{getPlayerFullName({ player, lang, long: true })}</span>\n)\n\nconst playerNameComposed = compose(\n  inject('lexics'),\n  observer,\n)\n\n// @ts-ignore\nexport const PlayerName = playerNameComposed(PlayerNameComponent)\n","import React from 'react'\nimport { observer, inject } from 'mobx-react'\n\nimport { withHandlers, compose, withProps } from 'recompose'\nimport map from 'lodash/map'\nimport flatten from 'lodash/flatten'\nimport values from 'lodash/values'\nimport get from 'lodash/get'\nimport find from 'lodash/find'\nimport head from 'lodash/head'\nimport includes from 'lodash/includes'\nimport pipe from 'lodash/fp/pipe'\n\nimport { SimpleDropdown } from 'react-sport'\n\n// @ts-ignore\nimport { getPlayerFullName } from 'module/utils/helpers/getPlayerFullName'\n\nimport { PlayerName } from './PlayerName'\n\ntype TProps = {\n  matchTable: {\n    playerList: {},\n  },\n  team1: number,\n  team2: number,\n  playersCompareWidget: {\n    selectedPlayers: {},\n  },\n  getPlayerNumber: (playerId: number) => number,\n  selectPlayer: (player: {}) => void,\n  getPlaceholder: (arg: Array<{ f_player: number }>) => string,\n  getTeamPlayers: (value: number) => Array<{ f_player: number }>,\n}\n\n// Компонент с двумя выпадающими меню, игроки команд в профиле матча\nconst PlayersSelectComponent = ({\n  getPlaceholder,\n  getPlayerNumber,\n  getTeamPlayers,\n  selectPlayer,\n  team1,\n  team2,\n}: TProps) => (\n  <div className='t-compare__teams'>\n    {map([team1, team2], team => (\n      <div key={team} className='t-compare__player'>\n        {/*\n        //@ts-ignore */}\n        <SimpleDropdown placeholder={getPlaceholder(getTeamPlayers(team))}>\n          {map(getTeamPlayers(team), player => (\n            //@ts-ignore\n            <div key={player.f_player} onClick={selectPlayer(player)}>\n              <span className='t-compare__player-num'>\n                {getPlayerNumber(player.f_player)}\n              </span>\n              <span className='t-compare__player-name'>\n                {/*\n                //@ts-ignore */}\n                <PlayerName player={player} />\n              </span>\n            </div>\n          ))}\n        </SimpleDropdown>\n      </div>\n    ))}\n  </div>\n)\n\nconst playersSelectComposed = compose(\n  inject('lexics', 'playersCompareWidget', 'matchTable', 'matchProfile'),\n  observer,\n  //@ts-ignore\n  withProps(({ lexics: { lang } }) => ({ lang })),\n  //@ts-ignore\n  withHandlers({\n    getPlayerNumber: ({\n      matchTable: { playerList },\n      //@ts-ignore\n    }) => (playerId) => {\n      const players = pipe(\n        values,\n        flatten,\n      )(playerList)\n\n      //@ts-ignore\n      return get(find(players, { f_player: playerId }, {}), 'num', '')\n    },\n    selectPlayer: ({\n      lexics: { lang },\n      matchProfile: { matchId },\n      playersCompareWidget: { selectedPlayers, updateSelectedPlayers },\n      //@ts-ignore\n    }) => player => () => {\n      if (!includes(values(selectedPlayers), player.f_player)) {\n        updateSelectedPlayers({\n          lang,\n          matchId,\n          players: [player],\n        })\n      }\n    },\n  }),\n  //@ts-ignore\n  withHandlers({\n    getTeamPlayers: ({ matchTable: { playerList } }) =>\n      //@ts-ignore\n      team => get(playerList, `${team}`, []),\n    getPlaceholder: ({\n      getPlayerNumber,\n      lexics: { lang },\n      //@ts-ignore\n    }) => (players) => {\n      const defaultPlayer = head(players) || {}\n      const fullName = getPlayerFullName({\n        //@ts-ignore\n        player: defaultPlayer,\n        lang,\n        long: true,\n      })\n      const number = getPlayerNumber(get(defaultPlayer, 'f_player'))\n      return (\n        <div key={number}>\n          <span className='t-compare__player-num'>{number}</span>\n          <span className='t-compare__player-name'>{fullName}</span>\n        </div>\n      )\n    },\n  }),\n  observer,\n)\n\n// @ts-ignore\nexport const PlayersSelect = playersSelectComposed(PlayersSelectComponent)\n","import React from 'react'\n\ntype TProps = {\n  stats: Array<{\n    param: number,\n    //@ts-ignore\n    param_name: string | null,\n    //@ts-ignore\n    param_name_short: string | null,\n  }>,\n  selectedPlayers: {},\n  team1: number,\n  team2: number,\n  getStatValue: (param: number, playerId: number) => number | string,\n  getClassName: (param: number, playerId: number) => string,\n  getExtLink: (\n    param: number,\n    param_name: string,\n    playerId: number\n  ) => void,\n}\n\nexport const PlayersStats = ({\n  getClassName,\n  getExtLink,\n  getStatValue,\n  selectedPlayers,\n  stats,\n  team1,\n  team2,\n}: TProps) => (\n  <div className='t-compare__stats-container'>\n    {stats.map(({\n      param,\n      param_name,\n      param_name_short,\n    }, index) => (\n      <div\n        key={`${param}_${param_name_short}_${index}`}\n        className='t-compare__stats-row'\n      >\n        <span\n          //@ts-ignore\n          className={getClassName(param, selectedPlayers[team1])}\n              //@ts-ignore\n          onClick={() => getExtLink(param, param_name, selectedPlayers[team1])}\n        >\n          {/*\n          //@ts-ignore */}\n          {getStatValue(param, selectedPlayers[team1])}\n        </span>\n        <span className='t-compare__stats-name'>{param_name}</span>\n        <span\n          //@ts-ignore\n          className={getClassName(param, selectedPlayers[team2])}\n              //@ts-ignore\n          onClick={() => getExtLink(param, param_name, selectedPlayers[team2])}\n        >\n          {/*\n          //@ts-ignore */}\n          {getStatValue(param, selectedPlayers[team2])}\n        </span>\n      </div>\n    ))}\n  </div>\n)\n\nexport default PlayersStats\n","import { inject, observer } from 'mobx-react'\n\nimport {\n  withHandlers,\n  compose,\n\n} from 'recompose'\nimport cx from 'classnames'\nimport find from 'lodash/find'\nimport get from 'lodash/get'\n\nimport { getLongSuffix } from 'module/utils/helpers'\n\nimport { TOuterProps, TInnerProps } from './types'\n\nexport const playersInfoComposed = compose<TOuterProps, TInnerProps>(\n  inject(\n    'lexics',\n    'videoLink',\n    'shootsRange',\n    'matchTable',\n    'playersCompareWidget',\n  ),\n  //@ts-ignore\n  withHandlers({\n    getPlayerParams: ({\n      playersCompareWidget: { playersInfo },\n      //@ts-ignore\n    }) => playerId => get(playersInfo, [playerId, 'params'], []),\n  }),\n  //@ts-ignore\n  withHandlers({\n    getImage: ({\n      playersCompareWidget: { playersInfo },\n      //@ts-ignore\n    }) => playerId => key => get(playersInfo, [playerId, key], ''),\n    //@ts-ignore\n    getStatValue: ({ getPlayerParams }) => (param, playerId) => {\n      const value = get(\n        find(getPlayerParams(playerId), { param }), 'value',\n      )\n      return value ? value.toFixed() : '-'\n    },\n    //@ts-ignore\n    getClassName: ({ getPlayerParams }) => (param, playerId) => {\n      const hasVideo = get(\n        find(getPlayerParams(playerId), { param }),\n        'f_match_event_ids',\n      )\n\n      return cx(\n        't-compare__stats-num',\n        { 't-compare__clickable-cell': hasVideo },\n      )\n    },\n\n    getExtLink: ({\n      getPlayerParams,\n      lexics: { lang },\n      playersCompareWidget: { playerList },\n      shootsRange,\n      videoLink: { request },\n    }) => (\n      //@ts-ignore\n      param,\n      //@ts-ignore\n      param_name,\n      //@ts-ignore\n      playerId,\n    ) => {\n      //@ts-ignore\n      const events: Array<any> = get(\n        find(getPlayerParams(playerId), { param }),\n        'f_match_event_ids',\n      )\n      const player = get(\n        find(playerList, { f_player: playerId }),\n        'prop_player[0]',\n        {},\n      )\n      const suffix = getLongSuffix(lang)\n\n      if (events) {\n        request({\n          events,\n          range: shootsRange,\n          lang,\n          playerInfo: `${player[`firstname_${suffix}`]} ${player[`lastname_${suffix}`]}`,\n          lexical_formula: param_name,\n          type: 'widgets',\n          widgetType: 'playersCompare',\n        })\n      }\n    },\n  }),\n  observer,\n)\n","import React, { Fragment } from 'react'\n\nimport { T9n, utils } from 'react-sport'\n\nimport { TOuterProps } from './types'\nimport PlayersStats from '../PlayersStats'\nimport { playersInfoComposed } from './composed'\n\nconst {\n  helpers: { onProfileImageError },\n} = utils\n\nconst PlayersInfoComponent = ({\n  getClassName,\n  getExtLink,\n  getImage,\n  getStatValue,\n  playersCompareWidget: { sortedStats },\n  selectedPlayers,\n  team1,\n  team2,\n}: TOuterProps) => (\n  <Fragment>\n    <div className='t-compare__control-row'>\n      <div className='t-compare__logo-container t-compare__logo-container_player'>\n        <img\n          className='t-compare__logo t-compare__logo_player'\n          //@ts-ignore\n          src={getImage(selectedPlayers[team1])('photo_team')}\n          alt='logoTeam'\n          onError={e => onProfileImageError(e, 'team')}\n        />\n        <img\n          className='t-compare__logo'\n          //@ts-ignore\n          src={getImage(selectedPlayers[team1])('photo_player')}\n          alt='logoPlayer'\n          onError={onProfileImageError}\n        />\n      </div>\n\n      <div className='t-compare__controls t-compare__controls_player'>\n        <T9n className='t-compare__toggler' t='match' />\n      </div>\n\n      <div className='t-compare__logo-container t-compare__logo-container_player'>\n        <img\n          className='t-compare__logo t-compare__logo_player t-compare__logo_player-right'\n          //@ts-ignore\n          src={getImage(selectedPlayers[team2])('photo_team')}\n          alt='logoTeam'\n          onError={e => onProfileImageError(e, 'team')}\n        />\n        <img\n          className='t-compare__logo'\n          //@ts-ignore\n          src={getImage(selectedPlayers[team2])('photo_player')}\n          alt='logoPlayer'\n          onError={onProfileImageError}\n        />\n      </div>\n    </div>\n\n    <PlayersStats\n      //@ts-ignore\n      stats={sortedStats}\n      team1={team1}\n      team2={team2}\n      getStatValue={getStatValue}\n      getClassName={getClassName}\n      getExtLink={getExtLink}\n      selectedPlayers={selectedPlayers}\n    />\n  </Fragment>\n)\n\nexport const PlayersInfo = playersInfoComposed(PlayersInfoComponent)\n","import React from 'react'\nimport { T9n } from 'react-sport'\n\nimport { DndParams, GearTable } from 'features/GearPopup/'\n\nimport { PlayersComparePupupComposed } from './PlayersComparePopupComposed'\n\ntype TProps = {\n  //@ts-ignore\n  lexics: { getLexics: (string) => string },\n  onApply: () => void,\n  //@ts-ignore\n  onClose: (value: string | null) => void,\n  playersCompareWidget: {},\n}\n\n// Попап окно с параметрами (шестеренка)\nexport const PlayersComparePopupComponent = ({\n  lexics: { getLexics },\n  onApply,\n  onClose,\n  playersCompareWidget,\n}: TProps) => (\n  <div className='popup popup-modern popup-modern_position-left popup-modern_active'>\n    <div className='popup-inner'>\n      <div className='popup-row-header'>\n        <h3 className='popup-title'>\n          <T9n t='main_statisctic' />\n        </h3>\n        {/*\n          //@ts-ignore */}\n        <span className='popup-close' onClick={onClose} />\n\n      </div>\n      <div className='popup-row-container'>\n        <GearTable\n          currentStore={playersCompareWidget}\n          ampluaId={0}\n        />\n      </div>\n      <div className='popup-column-aside'>\n        <DndParams />\n      </div>\n      <div className='popup-row-footer'>\n        <div className='popup-buttons'>\n          <input\n            //@ts-ignore\n            onClick={onClose}\n            type='button'\n            value={getLexics('cancel')}\n            className='popup-cancel'\n          />\n          <input\n            onClick={onApply}\n            type='button'\n            value={getLexics('ok')}\n            className='popup-submit'\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n)\n\n//@ts-ignore\nexport const PlayersComparePopup = PlayersComparePupupComposed(PlayersComparePopupComponent)\n","\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers, lifecycle } from 'recompose'\n\ntype TInnerProps = {\n  handlePopupAction: () => void,\n};\n\ntype TOuterProps = {\n  matchProfile: {},\n  teamProfile: {},\n  matchTable: {},\n  lexics: {},\n  playersCompareWidget: {},\n  gearPopupStore: {},\n  onApply: () => void,\n  onClose: () => void,\n};\n\nexport const PlayersComparePupupComposed = compose<\nTOuterProps & TInnerProps,\nTInnerProps\n>(\n  inject(\n    'matchProfile',\n    'teamProfile',\n    'matchTable',\n    'lexics',\n    'playersCompareWidget',\n    'gearPopupStore',\n  ),\n  //@ts-ignore\n  withHandlers({\n    /**\n     * Запись в стор выбранных параметров в попапе шестеренки\n     * @param {func} saveTempParams - функция сохранения параметров\n     * @param {func} handlePopupAction - функция закрытия попапа\n     * @param {string} lang - выбранный язык\n     * @param {string} matchId - id матча\n     */\n    onApply: ({\n      gearPopupStore: { tempSelected },\n      handlePopupAction,\n      lexics: { lang },\n      matchProfile: { matchId },\n      playersCompareWidget: { saveTempParams },\n    }) => () => {\n      saveTempParams({\n        lang,\n        matchId,\n        params: tempSelected,\n      })\n      handlePopupAction()\n    },\n    /**\n     * Закрытие попапа шестеренки\n     * @param {func} editTempSelected - функция очищения выбранных параметров\n     * @param {func} handlePopupAction - функция закрытия попапа\n     *\n     */\n    onClose: ({\n      gearPopupStore: { eraseTempSelected },\n      handlePopupAction,\n    }) => () => {\n      eraseTempSelected()\n      handlePopupAction()\n    },\n  }),\n  lifecycle({\n    componentDidMount() {\n      const {\n        //@ts-ignore\n        gearPopupStore: { fillTempSelected },\n        //@ts-ignore\n        playersCompareWidget: { selectedParams },\n      } = this.props\n      fillTempSelected(selectedParams)\n    },\n  }),\n  observer,\n)\n","\nimport React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withHandlers, withState } from 'recompose'\n\nimport { T9n } from 'react-sport'\n\nimport { PlayersComparePopup } from './PlayersComparePopup'\n\ntype TProps = {\n  handlePopupAction: () => void,\n  popupOpened: boolean,\n};\n\nconst PlayerCompareHeader = ({ handlePopupAction, popupOpened }: TProps) => (\n  <div className='t-compare__header'>\n    <T9n className='t-compare__title' t='players_table' />\n    <a className='t-compare__gear-options' onClick={handlePopupAction}>\n      <i className='icon-settings' />\n    </a>\n    {popupOpened && (\n      <PlayersComparePopup handlePopupAction={handlePopupAction} />\n    )}\n  </div>\n)\n\nconst PlayerCompareHeaderComposed = compose(\n  inject('lexics', 'videoLink', 'shootsRange', 'matchTable'),\n  withState('popupOpened', 'openPopup', false),\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    handlePopupAction: ({ openPopup }) => () => openPopup(n => !n),\n  }),\n  observer,\n  //@ts-ignore\n)(PlayerCompareHeader)\n\nexport default PlayerCompareHeaderComposed\n","export const defaultParams = [\n  239,\n  219,\n  102,\n  101,\n  103,\n  175,\n  124,\n  137,\n  158,\n  142,\n  235,\n  236,\n]\n","import React from 'react'\nimport { observer, inject } from 'mobx-react'\n\nimport { compose, lifecycle, withProps } from 'recompose'\n\nimport { PlayersSelect } from './PlayersSelect'\nimport { PlayersInfo } from './PlayersInfo'\nimport PlayerCompareHeader from './PlayerCompareHeader'\n\nimport { defaultParams } from './config'\n\ntype TProps = {\n  playersCompareWidget: {\n    isLoaded: boolean,\n    selectedPlayers: {},\n  },\n  matchProfile: {\n    data: {\n      team1_id: number,\n      team2_id: number,\n    },\n  },\n}\n\nexport const PlayersCompareComponent = ({\n  matchProfile: {\n    data: { team1_id, team2_id },\n  },\n  playersCompareWidget: { isLoaded, selectedPlayers },\n}: TProps) => (\n  <div className='t-compare'>\n    <PlayerCompareHeader />\n    <div className='t-compare__container'>\n      {/*\n      //@ts-ignore */}\n      <PlayersSelect team1={team1_id} team2={team2_id} />\n      {isLoaded ? (\n        <PlayersInfo\n          team1={team1_id}\n          team2={team2_id}\n          selectedPlayers={selectedPlayers}\n        />\n      ) : (\n        <div className='loading' />\n      )}\n    </div>\n  </div>\n)\n\nconst PlayersCompareComposed = compose<TProps, {}>(\n  inject('lexics', 'playersCompareWidget', 'matchProfile'),\n  observer,\n  //@ts-ignore\n  withProps(({ lexics: { lang } }) => ({\n    lang,\n  })),\n  lifecycle({\n    componentDidMount() {\n      const {\n        //@ts-ignore\n        lang,\n        //@ts-ignore\n        matchProfile: { matchId },\n        //@ts-ignore\n        playersCompareWidget: { basicFetch },\n      } = this.props\n\n      basicFetch({\n        lang,\n        matchId,\n        params: defaultParams,\n      })\n    },\n    componentDidUpdate(prevProps) {\n      const {\n        //@ts-ignore\n        lang,\n        //@ts-ignore\n        matchProfile: { matchId },\n        //@ts-ignore\n        playersCompareWidget: { fetch, getParamsIds },\n      } = this.props\n\n      //@ts-ignore\n      if (prevProps.lang !== lang) {\n        fetch({\n          lang,\n          matchId,\n          params: getParamsIds,\n        })\n      }\n    },\n  }),\n  observer,\n)\n\nexport const PlayersCompare = PlayersCompareComposed(PlayersCompareComponent)\n","\nimport React, { Fragment } from 'react'\n\n// @ts-ignore\nimport { TeamsCompare } from 'features/TeamsCompareWidget/components/TeamsCompare'\nimport { PlayersCompare } from '../PlayersCompare'\n\nexport const MatchWidgets = () => (\n  <Fragment>\n    <TeamsCompare />\n    <PlayersCompare />\n  </Fragment>\n)\n","import React from 'react'\n\nimport { MatchWidgets } from './MatchWidgets'\n\ntype TProps = {\n  //@ts-ignore\n  page: string | null,\n}\n\nexport const Widgets = ({ page }: TProps) => (\n  <div className='main-page__widgets'>\n    {page === 'match' && <MatchWidgets />}\n  </div>\n)\n","import React from 'react'\nimport { observer, inject } from 'mobx-react'\n\nimport { lifecycle, compose } from 'recompose'\nimport get from 'lodash/get'\n\nimport { Header } from 'features/components/common/player/Header'\nimport { MapField } from 'features/MapField/components/MapField'\nimport { MapFilters } from 'features/MapFilters/components'\nimport { Widgets } from 'features/components/common/widgets/Widgets'\n\nimport './PlayerField.scss'\n\ntype TProps = {\n  selectedMatches: {},\n  lexics: { page: string },\n  tabs: { active: string },\n};\n\nconst PlayerFieldComponent = ({\n  lexics: { page },\n  tabs: { active },\n  ...props\n}: TProps) => (\n  <div className='main-page__left'>\n    <div className='main-page__content'>\n      {/*\n      //@ts-ignore */}\n      <Header {...props} />\n      <div className='main-page__side'>\n        <div className='main-page__filters-wrapper'>\n          <MapFilters />\n        </div>\n        {/*\n        //@ts-ignore */}\n        <MapField tab={active} {...props} />\n      </div>\n    </div>\n    <Widgets page={page} />\n  </div>\n)\n\nconst playerFieldComposed = compose(\n  inject('lexics', 'markers', 'selectedMatches', 'tabs', 'tooltips', 'zones'),\n  lifecycle({\n    componentDidMount() {\n      const {\n        //@ts-ignore\n        lexics: { page },\n        //@ts-ignore\n        markers,\n        //@ts-ignore\n        matchId,\n        //@ts-ignore\n        pageId,\n        //@ts-ignore\n        selectedMatches,\n        //@ts-ignore\n        tooltips,\n        //@ts-ignore\n        zones,\n      } = this.props\n      const matchesList = matchId\n        ? [matchId]\n        : get(selectedMatches, [page, pageId])\n      markers.fetch(pageId, matchesList)\n      zones.fetch(pageId, matchesList)\n      tooltips.fetch()\n    },\n  }),\n  observer,\n)\n\n// @ts-ignore\nexport const PlayerField = playerFieldComposed(PlayerFieldComponent)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n// @ts-ignore\nimport { noImages } from 'module/utils/helpers'\n\n// @ts-ignore\n// @ts-ignore\nconst Avatar = ({ image, name }) => {\n  //@ts-ignore\n  const noImage = name ? noImages[name] : noImages.player\n  return (\n    <img\n      src={image}\n      onError={(e) => {\n        //@ts-ignore\n        e.target.src = noImage\n      }}\n      alt={name}\n    />\n  )\n}\n\nAvatar.propTypes = {\n  name: PropTypes.string,\n  image: PropTypes.string,\n}\n\nexport default Avatar\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { observer, inject } from 'mobx-react'\nimport { T9n } from 'react-sport'\n\n// @ts-ignore\nconst InfoItem = (props) => {\n  const { infoItem, t, tooltips, variants } = props\n  const { clickCnt, clickHandle } = infoItem\n  return (\n    <span\n      onClick={e => clickHandle(e, tooltips)}\n      className='player-label tooltip-trigger'\n    >\n      {variants[clickCnt]} <T9n t={t[clickCnt]} />\n      <div className='hover-tooltip'>\n        <T9n t={tooltips[clickCnt]} />\n      </div>\n    </span>\n  )\n}\n\nInfoItem.propTypes = {\n  variants: PropTypes.array,\n  tooltips: PropTypes.array,\n  t: PropTypes.array,\n  infoItem: PropTypes.object,\n}\n\nexport default inject('infoItem')(observer(InfoItem))\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { inject, observer } from 'mobx-react'\n\nimport cx from 'classnames'\n\nimport { compose, withProps } from 'recompose'\nimport {\n  cmToFt,\n  getLongSuffix,\n  kgToPounds,\n} from 'module/utils/helpers'\n\nimport Avatar from 'features/components/common/Avatar'\nimport InfoItem from 'features/components/common/InfoItem'\n\nimport {\n  TProps,\n  TWithPropsOuter,\n  TWithPropsInner,\n} from './types'\n\nconst PlayerCardComponent = ({\n  playerProfile: {\n    isFetching,\n    profile,\n  },\n  suffix,\n}: TProps) => (\n  <div\n    className={cx(\n      'player-card-left',\n      { 'player-card-left_loader': isFetching },\n    )}\n  >\n    <div className='player-column player-column-avatar'>\n      <div className='player-card-avatar'>\n        {/*\n          //@ts-ignore */}\n        {profile && <Avatar image={profile.photo} />}\n      </div>\n    </div>\n    {profile && (\n      <div className='player-column player-column-name'>\n        <h1 className='player-card-title'>\n          <span>{profile[`short_name_${suffix}`]}</span>\n        </h1>\n        <div className='player-card-team'>\n          {profile.team.id && (\n            <Link target='_blank' to={`/teams/${profile.team.id}`}>\n              {profile.team[`name_${suffix}`]}\n            </Link>\n          )}\n          {profile.team.id && profile.national_team.id && ', '}\n          {profile.national_team.id && (\n            <Link target='_blank' to={`/teams/${profile.national_team.id}`}>\n              {profile.national_team[`name_${suffix}`]}\n            </Link>\n          )}\n        </div>\n        <div className='player-card-labels'>\n          {profile.citizenship.short && (\n            <span className='player-label tooltip-trigger'>\n              <i\n                className={`flag-icon flag-icon-24x16 flag-icon-${profile.citizenship.short.toLowerCase()}`}\n              />\n              <div className='hover-tooltip'>\n                <span>{profile.citizenship[`name_${suffix}`]}</span>\n              </div>\n            </span>\n          )}\n          {profile.age && (\n            <InfoItem\n              variants={[profile.age, profile.birthday]}\n              tooltips={['header_card_age', 'header_card_birth_data']}\n              t={['stat_year', '']}\n            />\n          )}\n          {profile.height && (\n            <InfoItem\n              variants={[profile.height, cmToFt(profile.height)]}\n              tooltips={['tp_stat_height_sm', 'tp_stat_height_foot']}\n              t={['stat_sm', '']}\n            />\n          )}\n          {profile.weight && (\n            <InfoItem\n              variants={[profile.weight, kgToPounds(profile.weight)]}\n              tooltips={['tp_stat_weght_kg', 'tp_stat_weght_lbs']}\n              t={['stat_kg', 'stat_pound']}\n            />\n          )}\n          {profile.active_hand && (\n            <span className='player-label'>{profile.active_hand} </span>\n          )}\n          {profile.amplua.id && (\n            <span className='player-label'>\n              {profile.amplua[`name_${suffix}`]}\n            </span>\n          )}\n        </div>\n      </div>\n    )}\n  </div>\n)\n\nconst playerCardComposed = compose<TProps, {}>(\n  inject('playerProfile', 'lexics'),\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(\n    ({ lexics: { lang } }) => ({ suffix: getLongSuffix(lang) }),\n  ),\n  observer,\n)\n\nexport const PlayerCard = playerCardComposed(PlayerCardComponent)\n","import React from 'react'\nimport { T9n } from 'react-sport'\n// @ts-ignore\nimport { indexLexic } from 'config/lexics'\n\nconst ToolTip = () => (\n  <div className='header-stats-item__tooltip'>\n    <T9n t={indexLexic.boxscore_play_video} />\n  </div>\n)\n\nexport default ToolTip\n","\nimport React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withHandlers,\n  withState,\n  withProps,\n} from 'recompose'\nimport cx from 'classnames'\nimport isEmpty from 'lodash/isEmpty'\n\nimport { T9n } from 'react-sport'\n\nimport ToolTip from './ToolTip'\n\nimport {\n  TProps,\n  TPropsOuter,\n  TWithHandlersInner,\n  TWithHandlersOuter,\n  TWithPropsInner,\n  TWithPropsOuter,\n} from './types'\nimport './styles.scss'\n\nexport const HeaderStatsItemComponent = ({\n  events,\n  getExtLink,\n  itemClassName,\n  lexicId,\n  statsIsFetching,\n  statValue,\n  toggleTooltip,\n  toolTipIsVisible,\n  valueBlockClassName,\n}: TProps) => (\n  <div className='header-stats-item-wrapper'>\n    <div\n      onClick={getExtLink(events, lexicId)}\n      onMouseEnter={toggleTooltip}\n      onMouseLeave={toggleTooltip}\n      className={itemClassName}\n    >\n      <div className='header-stats-item__label'>\n        <T9n t={lexicId} />\n      </div>\n      <div className={valueBlockClassName}>\n        <span>{statValue}</span>\n      </div>\n      {statsIsFetching && <div className='header-stats-item__loader' />}\n      {toolTipIsVisible && !statsIsFetching && <ToolTip />}\n    </div>\n  </div>\n)\n\nconst headerStatsItemComposed = compose<TProps, TPropsOuter>(\n  inject('lexics', 'videoLink', 'shootsRange'),\n  withState('toolTipIsVisible', 'toggleVisible', false),\n  withState('statsIsFetching', 'setLoader', false),\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(({\n    percent,\n    statsIsFetching,\n    toolTipIsVisible,\n  }) => ({\n    itemClassName: cx('header-stats-item', {\n      'header-stats-item_clickable': toolTipIsVisible && !statsIsFetching,\n      'header-stats-item_loading': statsIsFetching,\n    }),\n    valueBlockClassName: cx('header-stats-item__value', {\n      'header-stats-item__value_percentage': percent,\n    }),\n  })),\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    getExtLink: ({\n      lexics: { lang },\n      setLoader,\n      shootsRange,\n      videoLink: { request },\n    }) => (events, lexicId) => () => {\n      if (!isEmpty(events)) {\n        setLoader(true)\n        request({\n          events,\n          lang,\n          lexical_formula: lexicId,\n          range: shootsRange,\n          type: 'headerStats',\n        }).then(() => setLoader(false))\n      }\n    },\n    toggleTooltip: ({\n      events,\n      toggleVisible,\n      toolTipIsVisible,\n    }) => () => {\n      if (events.length) toggleVisible(!toolTipIsVisible)\n    },\n  }),\n)\n\nexport const HeaderStatsItem = headerStatsItemComposed(HeaderStatsItemComponent)\n","import React, { Fragment } from 'react'\nimport { observer } from 'mobx-react'\n\nimport {\n  compose,\n  withHandlers,\n} from 'recompose'\nimport map from 'lodash/map'\nimport reduce from 'lodash/reduce'\nimport concat from 'lodash/concat'\n\nimport { getSummaryStatValue } from 'module/utils/helpers/getSummaryStatValue'\n\nimport { HeaderStatsItem } from 'features/HeaderStatsItem'\n\nimport {\n  TComposeInner,\n  TPropsOuter,\n  TWithHandlersInner,\n  TStat,\n} from './types'\n\n/**\n * Отображение блока со статистикой в шапке профиля\n */\nconst HeaderStatsListComponent = ({\n  getEvents,\n  params,\n  stats,\n}: TComposeInner) => (\n  <Fragment>\n    {map(\n      params,\n      ({\n        lexic_id,\n        param_id,\n        percent,\n      }) => (\n        <HeaderStatsItem\n          key={param_id}\n          paramId={param_id}\n          lexicId={lexic_id}\n          percent={percent}\n          events={getEvents(param_id)}\n          statValue={getSummaryStatValue(param_id, stats, 'average_for_match')}\n        />\n      ),\n    )}\n  </Fragment>\n)\n\nconst headerStatsListComposed = compose<TComposeInner, TPropsOuter>(\n  withHandlers<TPropsOuter, TWithHandlersInner>({\n    getEvents: ({ stats }) => param_id => (\n      reduce(\n        stats,\n        (acc: Array<number>, curr: TStat) => {\n          if (curr.f_param === param_id && curr.f_match_event_ids_json) {\n            return concat(acc, curr.f_match_event_ids_json)\n          }\n          return acc\n        }, [],\n      )\n    ),\n  }),\n  observer,\n)\n\nexport const HeaderStatsList = headerStatsListComposed(HeaderStatsListComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  lifecycle,\n} from 'recompose'\nimport get from 'lodash/get'\n\nimport { headerPlayerParams } from 'config/params'\n\nimport Loader from 'features/components/common/loader/Loader'\nimport { HeaderStatsList } from 'features/HeaderStatsList'\n\nimport {\n  TPropsOuter,\n  TPropsInner,\n} from './types'\n/**\n * Отображение блока со статистикой в шапке профиля\n */\nexport const PlayerStatsWrapperComponent = ({\n  playerProfile: {\n    profile,\n  },\n  playerStats: {\n    isFetching,\n    stats,\n  },\n}: TPropsInner) => (\n  <div className='player-card-stats-list'>\n    {isFetching ? (\n      <Loader />\n    ) : (\n      <HeaderStatsList\n        params={headerPlayerParams[profile.amplua.id]}\n        stats={stats}\n      />\n    )}\n  </div>\n)\n\nconst playerStatsComposed = compose<TPropsInner, TPropsOuter>(\n  inject(\n    'playerProfile',\n    'playerStats',\n    'selectedMatches',\n  ),\n  lifecycle<TPropsInner>({\n    componentDidMount() {\n      const {\n        page,\n        pageId,\n        playerProfile: {\n          profile: {\n            amplua: { id },\n          },\n        },\n        playerStats: { fetch },\n        selectedMatches,\n      } = this.props\n      fetch(\n        pageId,\n        get(selectedMatches, [page, pageId], []),\n        id,\n      )\n    },\n  }),\n  observer,\n)\n\nexport const PlayerStatsWrapper = playerStatsComposed(PlayerStatsWrapperComponent)\n","import m from 'moment'\n\n/**\n * Функция получения текущего года или любого, для теста\n * @param {any} test - флаг, если нужен год, отличный от текущего в бОльшую сторону\n * @param {number} changeYear - число, прибавляемое к текущему году\n */\nfunction getYear(test: any, changeYear: number): number {\n  return test ? m().year() + changeYear : m().year()\n}\n\n/**\n * Функция получения текущей даты\n * @param {string} format - формат выводимой даты, если требуется\n */\nexport function getNow(format?: string): string {\n  return m().format(format)\n}\n\n/**\n * Функция получения начала года\n * @param {string} format - формат выводимой даты, если требуется\n */\nexport function getStartYear(format?: string): string {\n  return m([m().year(), 0, 1]).format(format)\n}\n\n/**\n * Функция получения начала сезона\n * @param {string} format - формат выводимой даты, если требуется\n */\nexport function getStartSeason(format?: string): string {\n  /** Сезон начинается с 1 июля **/\n  return m([getYear(m().month() < 6, -1), 6, 1]).format(format)\n}\n\n/**\n * Функция получения конца сезона\n * @param {string} format - формат выводимой даты, если требуется\n */\nexport function getEndOfSeason(format?: string): string {\n  /** Сезон кончается 30 июня **/\n  return m([getYear(m().month() > 6, 1), 5, 30]).format(format)\n}\n\n/**\n * Функция форматирования любой даты (прим. 5:15 или 5:03) с секундами и минутами\n * @param {number} minutes - минуты\n * @param {number} seconds - секунды\n */\nexport function formatTime({\n  minutes,\n  seconds,\n}: {\n  minutes: number,\n  seconds: number,\n}): string {\n  return `${minutes}:${seconds > 10 ? seconds : `0${seconds}`}`\n}\n","const selectConfig = {\n  3: 'match_select_3',\n  5: 'match_select_5',\n  10: 'match_select_10',\n  season: 'match_select_all_season',\n  year: 'match_select_this_year',\n}\n\nexport default selectConfig\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport isArray from 'lodash/isArray'\nimport { T9n } from 'react-sport'\nimport names from 'config/matchesSelection'\n\nconst SelectLabel = ({ selected = names[3] }) =>\n  (isArray(selected) ? (\n    <span>\n      <T9n t='match_selected' />: {selected.length}\n    </span>\n  ) : (\n  //@ts-ignore\n    <T9n t={names[selected]} />\n  ))\n\nSelectLabel.propTypes = {\n  selected: PropTypes.any,\n}\n\nexport default SelectLabel\n","import React, { Fragment } from 'react'\n\nimport cx from 'classnames'\nimport { getSuffix } from 'module/utils/helpers'\n\ntype TProps = {\n  lang: string,\n  match: {\n    [key: string]: string | number,\n    home_match: string,\n    opponent_score: number,\n    score: number,\n  },\n}\n\nexport const MatchCheckBox = ({ lang, match }:TProps) => (\n  <Fragment>\n    <span className='title'>\n      {match.home_match} {match[`name_opponent_${getSuffix(lang)}`]}\n    </span>\n    <span className={cx(\n      'title__score',\n      { title__score_lose: match.opponent_score > match.score },\n      { title__score_win: match.opponent_score < match.score },\n    )}\n    >{match.score}{' '} - {match.opponent_score}\n    </span>\n  </Fragment>\n)\n","import React from 'react'\n\nexport const InfinityLoad = () => (\n  <div className='loading-block'>\n    <div className='loading' />\n  </div>\n)\n","import React from 'react'\nimport { observer, inject } from 'mobx-react'\n\nimport { compose, withProps } from 'recompose'\nimport get from 'lodash/get'\nimport isArray from 'lodash/isArray'\nimport cx from 'classnames'\n\nimport { MatchCheckBox } from 'features/components/common/MatchCheckBox'\n\nimport { InfinityLoad } from 'module/utils/InfinityLoad'\nimport { dateWithYear } from 'module/utils/helpers'\n\nimport { TLexics } from 'react-sport'\n\nexport const MatchSelectListComponent = ({\n  lexics: { lang },\n  matches: { isFetching },\n  matchesList,\n  selected,\n  selectItem,\n}: TComposeInner) => (\n  <ul\n    className={cx(\n      'player-card-stats-dropdown-list',\n      'player-card-stats-dropdown_dates',\n      'player-card-stats-dropdown_checkboxes',\n    )}\n  >\n    {matchesList.map(m => (\n      <li\n        key={m.f_match}\n        className={cx('', {\n          active: isArray(selected) && selected.includes(m.f_match),\n        })}\n        onClick={e => selectItem(e, m.f_match)}\n      >\n        <MatchCheckBox lang={lang} match={m} />\n        <span className='date'>{dateWithYear(m.match_date)}</span>\n      </li>\n    ))}\n    {isFetching && <InfinityLoad />}\n  </ul>\n)\n\ntype TComposeInner = TPropsOuter & TWithPropsInner & {\n  lexics: TLexics,\n  matches: {\n    isFetching: boolean,\n    list: {\n      [key: string]: {},\n    },\n  },\n}\n\ntype TPropsOuter = {\n  pageId: string,\n  selectItem: (e: React.SyntheticEvent<EventTarget>, matchId: number) => void,\n  selected: string | Array<number>,\n}\n\ntype TWithPropsOuter = {\n  matches: {\n    list: {\n      [key: string]: {},\n    },\n  },\n  pageId: string,\n}\n\ntype TWithPropsInner = {\n  matchesList: Array<{\n    [key: string]: string | number,\n    f_match: number,\n    home_match: string,\n    match_date: string,\n    opponent_score: number,\n    score: number,\n  }>,\n}\n\nconst matchSelectListComposed = compose<TComposeInner, TPropsOuter>(\n  inject('matches', 'lexics'),\n  observer,\n  withProps<TWithPropsInner, TWithPropsOuter>(({\n    matches: { list },\n    pageId,\n  }) => ({\n    matchesList: get(list[pageId], 'matches', []),\n  })),\n)\n\nexport const MatchSelectList = matchSelectListComposed(MatchSelectListComponent)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { withHandlers, compose } from 'recompose'\nimport map from 'lodash/map'\nimport get from 'lodash/get'\n\nimport cx from 'classnames'\n\nimport { T9n, OutsideClick } from 'react-sport'\n\nimport SelectLabel from 'features/components/common/SelectLabel'\nimport { MatchSelectList } from 'features/components/common/MatchSelectList'\n\nimport names from 'config/matchesSelection'\n\nimport {\n  TComposeInner,\n  TPropsOuter,\n  TWithHandlersOuter,\n  TWithHandlersInner,\n} from './types'\n\nconst MatchSelectContainerComponent = ({\n  dropDownClick,\n  extendedSelectItem,\n  getSelected,\n  matches: { isFetching },\n  pageId,\n  scrollHandle,\n  selectedMatches,\n  selectItem,\n}: TComposeInner) => (\n  <div className='player-card-stats-dropdown'>\n    <div className='player-card-dropdown'>\n      <a\n        className='selectBox selectBox-dropdown'\n        //@ts-ignore\n        tabIndex='0'\n        title=''\n        onClick={dropDownClick}\n      >\n        <span className='selectBox-label'>\n          {/*\n            //@ts-ignore */}\n          <SelectLabel selected={getSelected()} />\n        </span>\n        <span className='selectBox-arrow' />\n      </a>\n      {selectedMatches.opened && (\n        <div\n          onScroll={scrollHandle}\n          className={cx('player-card-stats-dropdown-inner', 'loading-active', {\n            'loading-active_global': isFetching,\n          })}\n        >\n          <ul\n            className={cx(\n              'player-card-stats-dropdown-list',\n              'player-card-stats-dropdown_dates',\n              'player-card-stats-dropdown_checkboxes',\n            )}\n          >\n            {map(names, (name, key) => (\n              <li key={key} onClick={e => extendedSelectItem(e, key)}>\n                {/*\n                  //@ts-ignore */}\n                <T9n t={names[key]} />\n              </li>\n            ))}\n          </ul>\n          <hr className='player-card-stats-dropdown-list-hr' />\n          <MatchSelectList\n            pageId={pageId}\n            selectItem={selectItem}\n            selected={getSelected()}\n          />\n        </div>\n      )}\n    </div>\n  </div>\n)\n\nconst matchSelectContainerComposed = compose<TComposeInner, TPropsOuter>(\n  inject(\n    'lexics',\n    'matches',\n    'selectedMatches',\n  ),\n  OutsideClick,\n  withHandlers<TWithHandlersOuter, TWithHandlersInner>({\n    getSelected: ({\n      lexics: { page },\n      pageId,\n      selectedMatches,\n    }) => () => {\n      const selected = selectedMatches.opened\n        ? selectedMatches.tempSelected\n        : selectedMatches.selectedPeriod\n        || get(selectedMatches[page], `${pageId}`, [])\n\n      return selected ? selected.slice() : []\n    },\n  }),\n  observer,\n)\n\nexport const MatchSelectContainer = matchSelectContainerComposed(MatchSelectContainerComponent)\n","\nimport React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  lifecycle,\n  withHandlers,\n  compose,\n} from 'recompose'\nimport map from 'lodash/map'\nimport get from 'lodash/get'\nimport includes from 'lodash/includes'\nimport filter from 'lodash/filter'\nimport slice from 'lodash/slice'\n\nimport {\n  getStartYear,\n  getNow,\n  getStartSeason,\n  getEndOfSeason,\n} from 'module/utils/dateHelpers'\n\nimport { MatchSelectContainer } from 'features/components/common/MatchSelectContainer'\n\ntype TProps = {\n  pageId: string,\n  clickOutside: () => void,\n  dropDownClick: (e: {}) => void,\n  selectItem: (e: {}, id: number | string) => void,\n  extendedSelectItem: (e: {}, period: string | number) => void,\n  scrollHandle: (e: {}) => void,\n};\n\nconst MatchSelect = ({\n  clickOutside,\n  dropDownClick,\n  extendedSelectItem,\n  pageId,\n  scrollHandle,\n  selectItem,\n}: TProps) => (\n  <MatchSelectContainer\n    pageId={pageId}\n    clickOutside={clickOutside}\n    dropDownClick={dropDownClick}\n    selectItem={selectItem}\n    extendedSelectItem={extendedSelectItem}\n    scrollHandle={scrollHandle}\n  />\n)\n\nconst MatchSelectComposed = compose<any, TProps>(\n  inject('lexics', 'matches', 'selectedMatches'),\n  lifecycle({\n    componentDidMount() {\n      //@ts-ignore\n      const {\n      //@ts-ignore\n        matches: { list },\n        //@ts-ignore\n        pageId,\n        //@ts-ignore\n        selectedMatches,\n      } = this.props\n      const matches = get(list, [pageId, 'matches'], [])\n      const matchesIds = map(matches, 'f_match')\n      selectedMatches.setSelected(slice(matchesIds, 0, 3), pageId)\n    },\n  }),\n  //@ts-ignore\n  withHandlers({\n    handleInfiniteLoad: ({ matches, pageId }) => () => matches.addOffset(pageId),\n  }),\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    scrollHandle: ({ handleInfiniteLoad }) => (e) => {\n      const { offsetHeight, scrollHeight, scrollTop } = e.target\n      if (scrollTop - scrollHeight + offsetHeight === 1) {\n        handleInfiniteLoad()\n      }\n    },\n    //@ts-ignore\n    dropDownClick: ({ pageId, selectedMatches }) => (e) => {\n      e.preventDefault()\n      selectedMatches.setOpened(pageId)\n    },\n    clickOutside: ({ pageId, selectedMatches }) => () => {\n      if (selectedMatches.opened) {\n        selectedMatches.setOpened(pageId)\n      }\n    },\n    //@ts-ignore\n    //@ts-ignore\n    selectItem: ({ lexics, pageId, selectedMatches }) => (e, id) => {\n      e.preventDefault()\n      selectedMatches.setPeriod(null)\n      let ids: Array<number> = selectedMatches.opened\n        ? selectedMatches.tempSelected\n        : get(selectedMatches[lexics.page], `${pageId}`, [])\n      //@ts-ignore\n      ids = includes(['year', 'season'], ids) ? [] : ids\n      ids = ids ? ids.slice() : []\n\n      if (!includes(ids, id)) {\n        ids.push(id)\n      } else {\n        ids = filter(ids, item => item !== id)\n      }\n      selectedMatches.setTempSelected(ids, pageId)\n    },\n    extendedSelectItem: ({\n      lexics: { page },\n      matches: { fetch, list },\n      pageId,\n      selectedMatches: { setOpened, setPeriod, setTempSelected },\n      //@ts-ignore\n      //@ts-ignore\n    }) => (e, period) => {\n      e.preventDefault()\n      const matches: Array<{ f_match: number }> = get(list[pageId], 'matches')\n      if (includes(['year', 'season'], period)) {\n        const isYear: boolean = period === 'year'\n        const dateFrom: string = isYear ? getStartYear() : getStartSeason()\n        const dateTo: string = isYear ? getNow() : getEndOfSeason()\n        setPeriod(period)\n        fetch(\n          page,\n          pageId,\n          0,\n          null,\n          dateFrom,\n          dateTo,\n          setTempSelected,\n          setOpened,\n        )\n      } else {\n        const ids = matches.reduce((result, { f_match }, idx) => {\n          if (idx < period) {\n            //@ts-ignore\n            result.push(f_match)\n          }\n          return result\n        }, [])\n        setPeriod()\n        setTempSelected(ids, pageId)\n        setOpened(pageId)\n      }\n    },\n  }),\n  observer,\n)(MatchSelect)\n\nexport default MatchSelectComposed\n","import React from 'react'\nimport { observer, inject } from 'mobx-react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport { T9n } from 'react-sport'\nimport toString from 'lodash/toString'\nimport { compose, withProps, withHandlers, withState } from 'recompose'\n\nconst FilterCheckbox = ({\n  //@ts-ignore\n  clickHandler,\n  //@ts-ignore\n  filter: {\n    //@ts-ignore\n    checked,\n    //@ts-ignore\n    lexical_formula,\n  },\n  //@ts-ignore\n  getClassName,\n}) => (\n  <li onClick={clickHandler} className={getClassName(checked)}>\n    <T9n t={toString(lexical_formula)} />\n  </li>\n)\n\nconst FilterCheckboxComposed = compose(\n  inject('playersVS', 'teamsVS'),\n  withState('isOpened', 'onOutsideClick', false),\n  //@ts-ignore\n  withProps(({ pageType, ...props }) => ({\n    videoSummaries: props[`${pageType}VS`],\n  })),\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    getClassName: () => checked => cx({ active: checked }),\n    clickHandler: ({ filter, setActive }) => () => setActive(filter),\n  }),\n  observer,\n  //@ts-ignore\n)(FilterCheckbox)\n\nFilterCheckbox.propTypes = {\n  filter: PropTypes.shape({\n    checked: PropTypes.bool,\n    lexical_formula: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  }),\n  getClassName: PropTypes.func.isRequired,\n  clickHandler: PropTypes.func.isRequired,\n}\n\nexport default FilterCheckboxComposed\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { OutsideClick } from 'react-sport'\nimport { compose } from 'recompose'\n\nimport FilterCheckbox from './FilterCheckbox'\n\nconst FilterPopup = ({\n  button: {\n    //@ts-ignore\n    setActive,\n  },\n  //@ts-ignore\n  button,\n  //@ts-ignore\n  pageType,\n}) => (\n  <div className='episodes-table-button-popup'>\n    <ul>\n        //@ts-ignore\n      {button.popupItems.map((filter, idx) => (\n        //@ts-ignore\n        <FilterCheckbox\n          key={idx}\n          setActive={setActive}\n          filter={filter}\n          pageType={pageType}\n        />\n      ))}\n    </ul>\n  </div>\n)\n\nconst FilterPopupComposed = compose(\n  OutsideClick,\n  observer,\n  //@ts-ignore\n)(FilterPopup)\n\nexport default FilterPopupComposed\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { observer } from 'mobx-react'\nimport { T9n } from 'react-sport'\nimport isEmpty from 'lodash/isEmpty'\nimport toString from 'lodash/toString'\n\nconst Checked = ({\n  button: {\n    //@ts-ignore\n    checkedFilters,\n  },\n}) => (\n  <span className='text'>\n    {!isEmpty(checkedFilters) ? (\n      checkedFilters.length < 3 ? (\n      //@ts-ignore\n        checkedFilters.map((filter, idx) => (\n          <T9n key={idx} t={toString(filter.lexicalFormula)} />\n        ))\n      ) : (\n        <span>{checkedFilters.length} items</span>\n      )\n    ) : (\n      <span className='text' />\n    )}\n  </span>\n)\n\nChecked.propTypes = {\n  button: PropTypes.shape({\n    checkedFilters: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),\n  }),\n}\n\nexport default observer(Checked)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport toString from 'lodash/toString'\nimport isEmpty from 'lodash/isEmpty'\n\nimport cx from 'classnames'\nimport { observer, inject } from 'mobx-react'\nimport { T9n } from 'react-sport'\nimport { compose, withHandlers, withState } from 'recompose'\n\nimport FilterPopup from './FilterPopup'\nimport Checked from './Checked'\n\n// @ts-ignore\nconst FilterElement = (props) => {\n  const {\n    button: { lexical_formula },\n    button,\n    getClassName,\n    handleClick,\n    isOpened,\n    onOutsideClick,\n  } = props\n  return (\n    <li className={getClassName()}>\n      <T9n\n        t={toString(lexical_formula)}\n        className='title'\n        onClick={() => handleClick()}\n      />\n      <Checked button={button} />\n      {isOpened && (\n        <FilterPopup\n          clickOutside={() => onOutsideClick(!isOpened)}\n          {...props}\n        />\n      )}\n    </li>\n  )\n}\n\nconst FilterElementComposed = compose(\n  inject('playersVS', 'teamsVS'),\n  withState('isOpened', 'onOutsideClick', false),\n  //@ts-ignore\n  withHandlers({\n    getClassName: ({ button: { checkedFilters } }) => () =>\n      cx('episodes-table-button', { active: !isEmpty(checkedFilters) }),\n    handleClick: ({ isOpened, onOutsideClick }) => () =>\n      onOutsideClick(!isOpened),\n  }),\n  observer,\n)(FilterElement)\n\nFilterElement.propTypes = {\n  isOpened: PropTypes.bool,\n  onOutsideClick: PropTypes.func.isRequired,\n  getClassName: PropTypes.func.isRequired,\n  handleClick: PropTypes.func.isRequired,\n  button: PropTypes.shape({\n    lexical_formula: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    checkedFilters: PropTypes.array,\n    checked: PropTypes.bool,\n  }),\n}\n\nexport default FilterElementComposed\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { observer } from 'mobx-react'\nimport { T9n } from 'react-sport'\nimport orderByLodash from 'lodash/orderBy'\n\nimport FilterElement from './FilterElement'\n\n/** Компонент для таблицы с кнопками\n * @param {String} playerId id игрока\n * @param {String} className часть строки css класса\n * @param {Array} orderBy массив из кнопок\n * @param {String} title заголовок таблицы\n * @param {Array} checked массив чекнутых кнопок\n * @param {Function} uncheckAllPlayers сброс выбранных игроков\n */\n\nconst TableButtons = ({\n  //@ts-ignore\n  checked,\n  //@ts-ignore\n  className,\n  //@ts-ignore\n  orderBy,\n  //@ts-ignore\n  pageType,\n  //@ts-ignore\n  playerId,\n  //@ts-ignore\n  title,\n  //@ts-ignore\n  uncheckAllPlayers,\n}) => (\n  <div className={`episodes-table-column ${className}`}>\n    <div className='episodes-table-column-title'>\n      <T9n t={title} />\n    </div>\n    <ul>\n      {orderByLodash(orderBy, ['sort_order'], ['asc']).map((btn, idx) => (\n        //@ts-ignore\n        <FilterElement\n          key={idx}\n          button={btn}\n          playerId={playerId}\n          checked={checked}\n          uncheckAllPlayers={uncheckAllPlayers}\n          pageType={pageType}\n        />\n      ))}\n    </ul>\n  </div>\n)\n\nTableButtons.propTypes = {\n  pageType: PropTypes.oneOf(['players', 'teams']).isRequired,\n  playerId: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n    .isRequired,\n  className: PropTypes.string.isRequired,\n  orderBy: PropTypes.array.isRequired,\n  title: PropTypes.string.isRequired,\n  checked: PropTypes.array.isRequired,\n  uncheckAllPlayers: PropTypes.func.isRequired,\n}\n\nexport default observer(TableButtons)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport get from 'lodash/get'\nimport toString from 'lodash/toString'\nimport isEmpty from 'lodash/isEmpty'\nimport filter from 'lodash/filter'\nimport map from 'lodash/map'\n\n\nimport { T9n, Range, VideoCutPlayers } from 'react-sport'\nimport { observer, inject } from 'mobx-react'\nimport { compose, lifecycle, withProps, withHandlers } from 'recompose'\n\nimport TableButtons from './TableButtons'\n\n/** Компонент для создания видеонарезок\n * @param {Object} selected Выбранные матчи\n * @param {String} pageType Типа страницы\n * @param {Object} playersVS стор для видеонарезок игроков\n * @param {Object} videoSummaries стор для видеонарезок по выбору либо команды, либо игроки\n * @param {Function} getCheckedBtn получает список чекнутых кнопок\n * @param {Function} handleVideoExternal отправляет запрос\n * @param {Array} partners список игроков\n * @param {Array} opponents список игроков\n * @param {Object} duration длительность общего количества нарезок\n * @param {Number} seconds количество секунд\n */\n// @ts-ignore\nconst VideoCuts = (props) => {\n  const {\n    getCheckedBtn,\n    getGroupedBtns,\n    handleVideoExternal,\n    selected,\n    totalTime,\n    videoSummaries: {\n      isFetching,\n      players: { playersChecked },\n      range,\n      reloadCount,\n      resetFilters,\n    },\n    videoSummaries,\n  } = props\n  return (\n    <div className='block-content clearfix'>\n      <div className='episodes-table'>\n        <div className='episodes-table-header'>\n          <div className='episodes-table-header-title'>\n            <a\n              onClick={() => reloadCount(selected)}\n              className='episodes-table__reload'\n            >\n              <i className='icon-reload' />\n              <T9n className='episodes-table__text' t='video_reload' />\n            </a>\n            <div className='episodes-table-header-count'>\n              <div className='episodes-table-header-count__row'>\n                <div\n                  style={{ cursor: 'pointer' }}\n                  className={cx('episodes-table-header-title-play', {\n                    'episodes-table-header-title-play_loader': isFetching,\n                  })}\n                  onClick={handleVideoExternal}\n                >\n                  <span className='icon' />\n                  <span className='episodes-table-header-count__num'>\n                    {get(videoSummaries, ['events', 'length'], 0)}\n                  </span>\n                </div>\n                <span className='episodes-table-header-count__num episodes-table-header-count__num_light'>\n                  {totalTime}\n                </span>\n              </div>\n            </div>\n            <div className='episodes-table-header-buttons'>\n              <a onClick={resetFilters} className='episodes-table__reset'>\n                <i className='icon-reset' />\n                <T9n className='episodes-table__text' t='video_reset_filters' />\n              </a>\n              <Range range={range} />\n            </div>\n          </div>\n        </div>\n        <div className='episodes-table__container'>\n          <div className='episodes-table-content clearfix'>\n            <div className='episodes-table-column__title'>\n              <h3 className='episodes-table-column__heading'>\n                <T9n t='video_actions' />\n              </h3>\n              <T9n\n                className='episodes-table-column__subheading'\n                t='video_select_all_actions'\n              />\n            </div>\n            {getGroupedBtns()\n              //@ts-ignore\n              && map(getGroupedBtns(), ({ buttons, lexic_id }, idx) => (\n                <TableButtons\n                  key={idx}\n                  orderBy={buttons}\n                  className='episodes-table-column_group'\n                  title={toString(lexic_id)}\n                  checked={getCheckedBtn()}\n                  {...props}\n                />\n              ))}\n          </div>\n          <div className='episodes-table__summary'>\n            <VideoCutPlayers\n              name='partner'\n              playersCount={get(playersChecked, ['partners', 'length'])}\n              checked={getCheckedBtn()}\n              {...props}\n            />\n            <VideoCutPlayers\n              name='opponent'\n              playersCount={get(playersChecked, ['opponents', 'length'])}\n              checked={getCheckedBtn()}\n              {...props}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst VideoCutsCompose = compose(\n  inject('playersVS', 'teamsVS', 'shootsRange', 'lexics', 'markers'),\n  //@ts-ignore\n  withProps(({ pageType, playerId, ...props }) => {\n    const videoSummaries = props[`${pageType}VS`]\n    const minutes = get(videoSummaries, ['duration', 'minutes'])\n    const seconds = get(videoSummaries, ['duration', 'seconds'])\n    const totalTime = !isEmpty(videoSummaries.events)\n      && `${minutes()}:${seconds() > 9 ? seconds() : `0${seconds()}`}`\n    return {\n      playersChecked: get(videoSummaries, ['players', 'playersChecked']),\n      players: videoSummaries.players,\n      pageId: playerId,\n      uncheckAllPlayers: () => videoSummaries.players.uncheckAll(),\n      videoSummaries,\n      totalTime,\n    }\n  }),\n  //@ts-ignore\n  withHandlers({\n    /** Проходим по блокам атаки и защиты, и собираем чекнутые **/\n    getCheckedBtn: ({ videoSummaries }) => () => {\n      const { buttons } = videoSummaries\n      //@ts-ignore\n      return filter(buttons, ({ checkedFilters }) => !isEmpty(checkedFilters))\n    },\n  }),\n  //@ts-ignore\n  withHandlers({\n    /** Группируем кнопки **/\n    getGroupedBtns: ({ videoSummaries }) => () => {\n      const { buttons, groups } = videoSummaries\n      //@ts-ignore\n      return map(Object.values(groups), ({ group, group_lexical_formula }) => ({\n        lexic_id: group_lexical_formula,\n        buttons: filter(buttons, ['group', group]),\n      }))\n    },\n\n    handleVideoExternal: ({\n      lexics: { lang },\n      shootsRange,\n      videoSummaries,\n    }) => () => {\n      const events = map(videoSummaries.events, 'id')\n      if (isEmpty(events)) return null\n\n      videoSummaries.request({\n        range: shootsRange,\n        events,\n        lang,\n      })\n    },\n  }),\n  lifecycle({\n    componentWillUnmount() {\n      //@ts-ignore\n      const { videoSummaries } = this.props\n      videoSummaries.resetFilters()\n      videoSummaries.changeCount(0)\n    },\n\n    componentDidMount() {\n      //@ts-ignore\n      const { videoSummaries } = this.props\n      videoSummaries.fetchButtons()\n    },\n  }),\n  observer,\n)(VideoCuts)\n\nVideoCuts.propTypes = {\n  pageType: PropTypes.oneOf(['players', 'teams']).isRequired,\n  selected: PropTypes.array,\n  playersVS: PropTypes.object.isRequired,\n  teamsVS: PropTypes.object.isRequired,\n  playerId: PropTypes.string.isRequired,\n  videoSummaries: PropTypes.object.isRequired,\n  getCheckedBtn: PropTypes.func.isRequired,\n  getGroupedBtns: PropTypes.func,\n  handleVideoExternal: PropTypes.func.isRequired,\n  duration: PropTypes.object.isRequired,\n  partners: PropTypes.array,\n  opponents: PropTypes.array,\n  totalTime: PropTypes.string,\n  seconds: PropTypes.number.isRequired,\n}\n\nexport default VideoCutsCompose\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport get from 'lodash/get'\nimport { toJS } from 'mobx'\nimport { inject, observer } from 'mobx-react'\nimport { compose, withHandlers } from 'recompose'\n\n// @ts-ignore\nimport Loader from 'features/components/common/loader/Loader'\nimport VideoCuts from './VideoCutsContainer'\nimport './VideoCuts.scss'\n\n// @ts-ignore\nconst VideoCutsContainer = (props) => {\n  const {\n    getSelectedMatches,\n    matches: { isFetching },\n    page,\n  } = props\n  if (page !== 'match' && isFetching) return <Loader />\n  return <VideoCuts selected={getSelectedMatches()} {...props} />\n}\n\nVideoCutsContainer.propTypes = {\n  matches: PropTypes.shape({\n    isFetching: PropTypes.bool,\n  }),\n  getSelectedMatches: PropTypes.func,\n}\n\nconst VideoCutsComposed = compose(\n  inject('lexics', 'selectedMatches', 'matches'),\n  //@ts-ignore\n  withHandlers({\n    getSelectedMatches: ({\n      matchId,\n      page,\n      playerId,\n      selectedMatches,\n    }) => () => {\n      if (page === 'match') return [matchId]\n      //@ts-ignore\n      return toJS(get(selectedMatches, [page, playerId]))\n    },\n  }),\n  observer,\n)(VideoCutsContainer)\n\nexport default VideoCutsComposed\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, lifecycle } from 'recompose'\nimport get from 'lodash/get'\n\nimport { tableTypes } from 'config/tables'\n\nimport { Tables } from 'features/Table'\nimport Loader from 'features/components/common/loader/Loader'\n\ntype TProps = {\n  pageId: string,\n}\n\ntype TPropsInner = TProps & {\n  playerTable: {\n    isLoaded: boolean,\n    tables: {},\n  },\n}\n\ntype TLifecycle = TProps & {\n  playerProfile: {},\n  playerTable: {\n    fetchPlayerMatches : (param: {\n      ampluaId: number,\n      matches: Array<number>,\n      playerId: string,\n    }) => void,\n  },\n  selectedMatches: {},\n}\n\nconst PlayerPageMatchesComponent = ({\n  pageId,\n  playerTable: {\n    isLoaded,\n    tables,\n  },\n}: TPropsInner) => (\n  <div>\n    {isLoaded\n      ? (\n        <Tables\n          tableType={tableTypes.playerMatches}\n          tables={tables}\n          pageId={pageId}\n        />\n      )\n      : <Loader />}\n  </div>\n)\n\nconst playerPageMatchesComposed = compose<TPropsInner, TProps>(\n  inject(\n    'playerTable',\n    'selectedMatches',\n    'playerProfile',\n  ),\n  lifecycle<TLifecycle, TProps>({\n    componentDidMount() {\n      const {\n        pageId,\n        playerProfile,\n        playerTable: { fetchPlayerMatches },\n        selectedMatches,\n      } = this.props\n      const matches = get(selectedMatches, ['player', pageId])\n      const ampluaId = get(playerProfile, ['profile', 'amplua', 'id'])\n\n      fetchPlayerMatches({\n        ampluaId,\n        matches,\n        playerId: pageId,\n      })\n    },\n  }),\n  observer,\n)\n\nexport const PlayerPageMatches = playerPageMatchesComposed(PlayerPageMatchesComponent)\n","import { observer, inject } from 'mobx-react'\nimport {\n  compose,\n  withHandlers,\n  lifecycle,\n} from 'recompose'\n\nimport {\n  indexLexic,\n  playerLexic,\n  filtersLexic,\n  markersLexic,\n  tableParamsLexic,\n  tableParamsLexicShort,\n  tableParamsNumLexic,\n  videoCutsLexic,\n} from 'config/lexics'\n\nexport const playerPageComposed = compose(\n  inject(\n    'lexics',\n    'matches',\n    'playerProfile',\n    'selectedMatches',\n    'playerTable',\n  ),\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    getPlayerProfile: ({ playerProfile }) => (id) => {\n      playerProfile.fetch(id)\n    },\n    //@ts-ignore\n    getGearParams: ({ playerTable }) => (id) => {\n      playerTable.fetchParams(id)\n    },\n  }),\n  lifecycle(\n    {\n      componentDidMount() {\n        const {\n          getPlayerProfile,\n          lexics,\n          match: {\n            params: { playerId },\n          },\n          matches: { fetch },\n        } = this.props\n        lexics.appPage = {\n          page: 'player',\n          phrases: {\n            ...indexLexic,\n            ...playerLexic,\n            ...filtersLexic,\n            ...markersLexic,\n            ...tableParamsLexic,\n            ...tableParamsLexicShort,\n            ...tableParamsNumLexic,\n            ...videoCutsLexic,\n          },\n        }\n        getPlayerProfile(playerId)\n        fetch('player', playerId, 0, 20)\n      },\n    },\n    //@ts-ignore\n    {\n      //@ts-ignore\n      componentDidUpdate(prevProps) {\n        const {\n          getPlayerProfile,\n          match: {\n            params: { playerId },\n          },\n        } = this.props\n        if (prevProps.playerId !== playerId) {\n          getPlayerProfile(playerId)\n        }\n      },\n    },\n  ),\n  observer,\n)\n","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\n\nimport isEmpty from 'lodash/isEmpty'\n\nimport { EventPlayer as VideoPlayer, Popup } from 'react-sport'\n\nimport { StatsTabs } from 'features/components/common/stats-tabs/StatsTabs'\nimport { PlayerField } from 'features/components/common/player/PlayerField'\nimport { PlayerCard } from 'features/components/PlayerPage/PlayerCard'\nimport { PlayerStatsWrapper } from 'features/components/PlayerPage/PlayerStatsWrapper'\nimport MatchSelect from 'features/components/common/MatchSelect'\nimport VideoCuts from 'features/components/common/video-cuts/VideoCuts'\nimport Loader from 'features/components/common/loader/Loader'\n\nimport { PlayerPageMatches } from 'features/PlayerPageMatches/components'\n\nimport { playerPageComposed } from './PlayerPageComposed'\n\nimport 'features/components/common/MainPage.scss'\nimport 'features/components/common/PageCard.scss'\nimport 'features/components/common/Shot.scss'\nimport 'features/components/common/Zones.scss'\n\nimport 'features/components/App/magnific-popup.css'\nimport 'features/components/App/video-player.scss'\nimport 'features/components/common/player-card/player.scss'\nimport 'features/components/common/player-card/PlayerCard.scss'\nimport 'features/components/common/player-stats/PlayerStats.scss'\nimport 'features/components/common/player-stats/PlayerStatsDropdown.scss'\n\nexport type TProps = {\n  getGearParams: (id: number | string) => void,\n  match: {\n    params: { playerId: string },\n    url: string,\n  },\n  matches: {\n    firstLoad: boolean,\n  },\n  playerProfile: { profile: {} | null },\n  selectedMatches: {\n    player: {\n      [key: string]: Array<{}>,\n    },\n  },\n}\n\nconst PlayerPageComponent = ({\n  match: {\n    params: { playerId },\n  },\n  match,\n  matches: { firstLoad },\n  playerProfile: { profile },\n  selectedMatches,\n}: TProps) => (\n  <article className='player for-player'>\n    {/*\n      //@ts-ignore */}\n    <Popup>\n      {/*\n        //@ts-ignore */}\n      <VideoPlayer appName='volleyball' />\n    </Popup>\n    <section className='player-card'>\n      <div className='container-fluid'>\n        <div className='player-card-wrapper'>\n          {profile && <PlayerCard />}\n          <div className='player-card-responsive'>\n            {!firstLoad ? (\n              //@ts-ignore\n              <MatchSelect\n                page='player'\n                pageId={playerId}\n                selectedMatches={selectedMatches}\n              />\n            ) : (\n              <Loader />\n            )}\n          </div>\n          <div className='player-card-right'>\n            {!isEmpty(profile) && !firstLoad ? (\n              <PlayerStatsWrapper page='player' pageId={playerId} />\n            ) : (\n              <Loader />\n            )}\n          </div>\n        </div>\n      </div>\n    </section>\n    <section className='main-page__details'>\n      {/*\n        //@ts-ignore */}\n      {!firstLoad ? <PlayerField pageId={playerId} /> : <Loader />}\n      <div className='main-page__responsive'>\n        <div className='main-page__content'>\n          <div className='main-page__content-header'>\n            <StatsTabs match={match} isStats />\n          </div>\n          {/*\n          //@ts-ignore */}\n          <Switch>\n            {Boolean(selectedMatches.player[playerId]\n            && profile)\n            && (\n              <Route\n                path='/players/:playerId/'\n                exact\n                render={() => <PlayerPageMatches pageId={playerId} />\n                }\n              />\n            )}\n            <Route\n              path='/players/:playerId/video'\n              render={() => (\n                //@ts-ignore\n                <VideoCuts\n                  page='player'\n                  pageType='players'\n                  playerId={playerId}\n                />\n              )}\n            />\n          </Switch>\n        </div>\n      </div>\n    </section>\n  </article>\n)\n\n//@ts-ignore\nexport const PlayerPage = playerPageComposed(PlayerPageComponent)\n","import { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  withHandlers,\n  withProps,\n} from 'recompose'\n\nimport get from 'lodash/get'\nimport find from 'lodash/find'\n\nimport { utils } from 'react-sport'\n\nimport { clickableClassNameHOC } from 'hocs/getClickableTdClassNameHoc'\n\nconst PlayerTrComposed = compose(\n  inject(\n    'videoLink',\n    'lexics',\n    'shootsRange',\n    'matchLinks',\n    'teamPlayers',\n    'teamProfile',\n    'selectedMatches',\n    'shootsRange',\n  ),\n  clickableClassNameHOC,\n  //@ts-ignore\n  withProps(({ player: { f_player } }) => {\n    const {\n      helpers: { getLogo },\n    } = utils\n    const avatarUrl = getLogo({\n      type: 'players_volleyball',\n      id: f_player,\n    })\n    return { avatarUrl }\n  }),\n  //@ts-ignore\n  withHandlers({\n    handleClick: ({\n      lexics: { lang, page },\n      selectedMatches,\n      shootsRange,\n      teamPlayers: { fetchEvents },\n      teamProfile: {\n        profile: { id },\n      },\n      videoLink: { request },\n    }) => (\n      //@ts-ignore\n      paramId,\n      //@ts-ignore\n      lexical_formula,\n      //@ts-ignore\n      playerId,\n    ) => fetchEvents(\n      lang,\n      lexical_formula,\n      playerId,\n      paramId,\n      request,\n      selectedMatches[page][id],\n      shootsRange,\n    ),\n    getParamValue: ({\n      player: { params },\n      teamPlayers: { tables },\n      //@ts-ignore\n    }) => ({ param_id }, position) => {\n      const playerParam = find(params, { param: param_id })\n      const value = get(tables, `${position}.summaryType`) === 'average_for_match'\n        ? get(playerParam, 'averageValue')\n        : get(playerParam, 'value')\n\n      if (value) return value.toFixed()\n      return '—'\n    },\n  }),\n  observer,\n)\n\nexport default PlayerTrComposed\n","import {\n  compose,\n  withState,\n  withHandlers,\n} from 'recompose'\n\nimport { TdComponent } from 'features/Table/components/Td'\nimport {\n  TPropsInner,\n  TPropsOuter,\n  TWIthHandlersOuter,\n  TWithHandlersInner,\n} from './types'\n\nconst tdComposed = compose<TPropsInner, TPropsOuter>(\n  withState('linkIsFetching', 'toggleLinkIsFetching', false),\n  withHandlers<TWIthHandlersOuter, TWithHandlersInner>({\n    handleClick: ({\n      handleClick,\n      param,\n      player,\n      toggleLinkIsFetching,\n    }) => () => {\n      toggleLinkIsFetching(true)\n      handleClick(\n        param.param_id,\n        param.lexical_formula,\n        player.f_player,\n      )\n        .then(() => toggleLinkIsFetching(false))\n    },\n  }),\n)\n\nexport const Td = tdComposed(TdComponent)\n","import React from 'react'\n\nimport get from 'lodash/get'\nimport map from 'lodash/map'\n\nimport { utils } from 'react-sport'\n\nimport { getLongSuffix } from 'module/utils/helpers'\n\nimport PlayerTrComposed from './PlayerTrComposed'\nimport { Td } from './TdWrapper'\n\ntype TProps = {\n  avatarIsVisible: boolean,\n  avatarUrl: string,\n  player: {\n    shirt_num: string,\n    f_player: number,\n  },\n  activeId: string,\n  getClassName: (param: {}, activeId: string) => string,\n  lexics: {\n    lang: string,\n  },\n  selectedParams: Array<{\n    param_id: number,\n    gear_group_id: number,\n    lexical_formula: string,\n  }>,\n  getParamValue: (param: {}, position: number) => string,\n  handleClick: (\n    paramId: number,\n    lexical_formula: string,\n    playerId: number\n  ) => void,\n  position: number,\n};\n\n/** Компонент строки в траблице со списком игроков в команде\n * @param {object} player - объект текущего игрока\n * @param {string} activeId - активный параметр, по которому идет сортировка внутри таблицы\n * @param {func} getClassName - функция получения класса (разные классы для параметров % и обычных)\n * @param {string} lang - выбранный язык пользователя\n * @param {array} selectedParams - выбранные параметры, которые отображаем в таблице\n * @param {func} getParamValue - функция получения значения для конкретного параметра в ячейке\n */\n\nconst {\n  helpers: { onProfileImageError },\n} = utils\n\nexport const PlayerTr = ({\n  activeId,\n  avatarIsVisible,\n  avatarUrl,\n  getClassName,\n  getParamValue,\n  handleClick,\n  lexics: { lang },\n  player,\n  position,\n  selectedParams,\n}: TProps) => (\n  <tr className='stats-table__table-row'>\n    <td className='left-side-tr'>\n      <div className='stats-cell'>\n        <div className='stats-cell__player'>\n          {avatarIsVisible && (\n            <div className='results__avatar'>\n              <img\n                alt='logo'\n                className='results__avatar-pic'\n                src={avatarUrl}\n                onError={onProfileImageError}\n              />\n            </div>\n          )}\n          <div className='match-table__player-number'>{player.shirt_num}</div>\n          <div className='match-table__player-name'>\n            <a\n              target='_blank'\n              rel='noopener noreferrer'\n              href={`/players/${get(player, 'f_player', '')}`}\n            >\n              {get(player, `short_name_${getLongSuffix(lang)}`, '')}\n            </a>\n          </div>\n        </div>\n      </div>\n    </td>\n    {map(selectedParams, param => (\n      <td\n        key={`${param.param_id}_${param.gear_group_id}`}\n        className={getClassName(param, activeId)}\n      >\n        <table>\n          <tbody>\n            <tr>\n              <Td\n                param={param}\n                value={getParamValue(param, position)}\n                handleClick={handleClick}\n                player={player}\n              />\n            </tr>\n          </tbody>\n        </table>\n      </td>\n    ))}\n  </tr>\n)\n\n// @ts-ignore\nexport default PlayerTrComposed(PlayerTr)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\nimport { compose, withHandlers } from 'recompose'\n\nimport get from 'lodash/get'\nimport find from 'lodash/find'\nimport orderBy from 'lodash/orderBy'\n\nimport PlayerTr from './PlayerTr'\n\ntype TProps = {\n  avatarIsVisible: boolean,\n  selectedParams: Array<{}>,\n  activeId: string,\n  getPlayersList: (\n    sortAsc: boolean,\n    activeId: string,\n    position: number\n  ) => Array<{ f_player: number }>,\n  sortAsc: boolean,\n  position: number,\n};\n\nconst PlayersList = ({\n  activeId,\n  avatarIsVisible,\n  getPlayersList,\n  position,\n  selectedParams,\n  sortAsc,\n}: TProps) => (\n  <tbody>\n    {getPlayersList(sortAsc, activeId, position).map(player => (\n      <PlayerTr\n        key={player.f_player}\n        player={player}\n        activeId={activeId}\n        selectedParams={selectedParams}\n        avatarIsVisible={avatarIsVisible}\n        position={position}\n      />\n    ))}\n  </tbody>\n)\n\nconst PlayersListComposed = compose<any, TProps>(\n  inject('teamPlayers'),\n  //@ts-ignore\n  withHandlers({\n    /**\n     * Получение списка игроков, отсортированного по значению выбранного параметра\n     * @param {boolean} sortAsc - флаг для сортировки (по убыванию или по возрастанию)\n     */\n    getPlayersList: ({ teamPlayers: { players, tables } }) => (\n      sortAsc: boolean,\n      activeId: string,\n      position: number,\n    ) => {\n      if (!activeId) return players\n      const field: string = get(tables, `${position}.summaryType`) === 'average_for_match'\n        ? 'averageValue'\n        : 'value'\n      const id: string = activeId.split('_')[0]\n      //@ts-ignore\n      const value = player =>\n        get(find(player.params, { param: Number(id) }), field, 0)\n      const sortType = sortAsc ? 'asc' : 'desc'\n      return orderBy(players, value, sortType)\n    },\n  }),\n  observer,\n)(PlayersList)\n\nexport default PlayersListComposed\n","import { compose, withHandlers, withState, withProps } from 'recompose'\nimport { inject, observer } from 'mobx-react'\n\nimport { setSortedIdHOC } from 'hocs'\n\ntype TProps = {\n  activeId: string | void,\n  deleteTable: () => void,\n  handlePopupAction: () => void,\n  handleNewPopupAction: () => void,\n  links: Array<any>,\n  moveTableUp: () => void,\n  moveTableDown: () => void,\n  newPopupOpened: () => boolean,\n  popupOpened: () => boolean,\n  resetTable: () => void,\n  setSortedId: () => void,\n  setType: (value: string) => string,\n  teamPlayers: {\n    isFetching: boolean,\n    gearParams: Array<{}>,\n    editTempSelected: () => void,\n    tempSelected: Array<{}>,\n  },\n};\n\nexport const playersTableComposed = compose<any, TProps>(\n  inject('lexics', 'teamPlayers', 'tableReportsMST'),\n  withState('popupOpened', 'openPopup', false),\n  withState('newPopupOpened', 'openNewPopup', false),\n  // Хок хендлера сортировки\n  setSortedIdHOC,\n  observer,\n  //@ts-ignore\n  withProps(\n    //@ts-ignore\n    ({\n      param: { gear_group_id, param_id },\n      tableReportsMST: { pdfIsFetching, xlsIsFetching },\n    }) => ({\n      activeId: `${param_id}_${gear_group_id}`,\n      // Пока действий на клик нет, то не нужен и loader, ставим false.\n      links: [{ xls: xlsIsFetching }, { pdf: pdfIsFetching }],\n    }),\n  ),\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    handlePopupAction: ({ openPopup }) => () => openPopup(n => !n),\n    //@ts-ignore\n    handleNewPopupAction: ({ openNewPopup }) => () => openNewPopup(n => !n),\n    // Дополняем метод записью в сторе для таблицы\n    // Устанавливаем активный параметр - по нему идет сортировка в таблице\n    handleSetActiveParam: ({\n      changeActiveParam,\n      table,\n      teamPlayers: { setActiveParam },\n      //@ts-ignore\n    }) => (param) => {\n      // Запускаем функцию из setSortedIdHOC.\n      changeActiveParam({\n        newParam: param,\n        storeAction: setActiveParam,\n        table,\n      })\n    },\n  }),\n  observer,\n)\n","import React from 'react'\n\nimport {\n  TableHeaderSettingsButton,\n  T9n,\n  DownloadLinksComponent,\n  SimpleDropdown,\n} from 'react-sport'\n\n// @ts-ignore\nimport { EditTableName } from 'features/TableName/components/EditTableName'\n// @ts-ignore\nimport { tableHeaderButtons } from 'module/utils/helpers'\n// @ts-ignore\nimport { tableTypes } from 'config/tables'\nimport { playersTableHeaderComposed } from './composed'\n\ntype TProps = {\n  deleteTable: () => void,\n  getClassName: (avatarIsVisible: boolean) => string,\n  handlePopupAction: () => void,\n  handleNewPopupAction: () => void,\n  links: Array<any>,\n  moveTableUp: () => void,\n  moveTableDown: () => void,\n  resetTable: () => void,\n  setType: (value: string, position: number) => string,\n  table: {\n    position: number,\n    avatarIsVisible: boolean,\n    summaryType: string,\n  },\n  showAvatarToggle: (position: number) => void,\n  teamPlayers: {\n    tables: any,\n  },\n  saveReport: () => void,\n  getDropdownBtns: (\n    valueType: string,\n    setType: (value: string, position: number) => string,\n    position: number,\n  ) => Array<any>,\n}\n\nconst PlayersTableHeaderComponent = ({\n  deleteTable,\n  getClassName,\n  getDropdownBtns,\n  handleNewPopupAction,\n  handlePopupAction,\n  links,\n  moveTableDown,\n  moveTableUp,\n  resetTable,\n  saveReport,\n  setType,\n  showAvatarToggle,\n  table,\n  table: { avatarIsVisible, position, summaryType },\n  teamPlayers,\n}: TProps) => (\n  <div className='stats-table__header'>\n    <div className='stats-table__header-left'>\n      {/*\n      //@ts-ignore */}\n      <SimpleDropdown placeholder={<T9n t='average_for_match' />}>\n        {/*\n          //@ts-ignore */}\n        {getDropdownBtns({\n          summaryType,\n          position,\n          onClick: setType,\n        })}\n      </SimpleDropdown>\n      <a\n        className={getClassName(avatarIsVisible)}\n        onClick={() => showAvatarToggle(position)}\n      >\n        <T9n t='show_photo' />\n      </a>\n    </div>\n    <div className='stats-table__name'>\n      <EditTableName\n        table={table}\n        tableType={tableTypes.teamPlayers}\n        currentStore={teamPlayers}\n      />\n    </div>\n    <div className='stats-table__actions'>\n      {/*\n      //@ts-ignore */}\n      <DownloadLinksComponent links={links} reportHandle={saveReport} />\n      {tableHeaderButtons(\n        handleNewPopupAction,\n        deleteTable,\n        moveTableUp,\n        moveTableDown,\n        resetTable,\n        teamPlayers.tables,\n      ).map(({ action, buttonType, t }) => (\n        <TableHeaderSettingsButton\n          onClick={action}\n          buttonType={buttonType}\n          key={t}\n        >\n          <T9n t={t} />\n        </TableHeaderSettingsButton>\n      ))}\n      <a className='stats-table__action-link' onClick={handlePopupAction}>\n        <i className='icon-settings' />\n      </a>\n    </div>\n  </div>\n)\n\nexport const PlayersTableHeader = playersTableHeaderComposed(\n  PlayersTableHeaderComponent,\n)\n","import { inject, observer } from 'mobx-react'\nimport { compose, withHandlers } from 'recompose'\n\nimport map from 'lodash/map'\nimport values from 'lodash/values'\nimport reduce from 'lodash/reduce'\n\nimport m from 'moment'\nimport cx from 'classnames'\n\n// @ts-ignore\nimport { getDropdownBtnsHoc } from 'hocs/getDropdownBtnsHoc'\n\n// TODO убрать тип any при рефакторинге стора игроков на профиле команды\nexport const playersTableHeaderComposed = compose<any, any>(\n  inject(\n    'lexics',\n    'teamPlayers',\n    'selectedMatches',\n    'tableReportsMST',\n    'teamProfile',\n  ),\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    getClassName: () => checked => cx('team-stats-show-avatar', { checked }),\n    deleteTable: ({\n      table: { position },\n      teamPlayers: { deleteTable },\n    }) => () => deleteTable(position),\n    /**\n     * Поднятие таблицы в списке\n     */\n    moveTableUp: ({\n      table: { position },\n      teamPlayers: { moveTable },\n    }) => () => {\n      if (position === 1) return null\n      return moveTable(position, 'up')\n    },\n    /**\n     * Спуск таблицы вниз по списку\n     */\n    moveTableDown: ({\n      table: { position },\n      teamPlayers: { moveTable },\n    }) => () => moveTable(position, 'down'),\n    /**\n     * Функция возврата таблице значений по-умолчанию\n     */\n    resetTable: ({ table: { position }, teamPlayers: { resetTable } }) => () =>\n      resetTable(position),\n    showAvatarToggle: ({ teamPlayers: { showAvatarToggle } }) =>\n      //@ts-ignore\n      position => showAvatarToggle(position),\n    setType: ({ teamPlayers: { changeValueType } }) => (\n      type: string,\n      position: number,\n    ) => () => {\n      changeValueType(type, position)\n    },\n    saveReport: ({\n      lexics: { getLexics, lang },\n      selectedMatches: { team },\n      tableReportsMST: { fetchData },\n      teamPlayers,\n      teamProfile: { profile },\n      //@ts-ignore\n      //@ts-ignore\n    }) => (e, key) => {\n      const { id, name_eng } = profile\n      const tables = reduce(\n        values(teamPlayers.tables),\n        (\n          acc,\n          {\n            activeId,\n            avatarIsVisible,\n            selectedParams,\n            sortAsc,\n            summaryType,\n            tableName,\n            //@ts-ignore\n          },\n        ) =>\n          //@ts-ignore\n          [\n            ...acc,\n            {\n              name: getLexics(tableName) || tableName,\n              params: map(selectedParams, 'param_id'),\n              is_total: Number(summaryType === 'total'),\n              is_avatar: Number(avatarIsVisible && key === 'pdf'),\n              sortby: {\n                param: activeId,\n                flag: sortAsc ? 'ASC' : 'DESC',\n              },\n            },\n          ],\n        [],\n      )\n      const options = {\n        lang_id: lang,\n        team: id,\n        matches: team[id],\n        tables,\n      }\n      fetchData(e, key, options)\n        //@ts-ignore\n        .then((response) => {\n          if (response) {\n            const link: any = document.getElementById('download-link')\n            link.href = URL.createObjectURL(response)\n            link.download = `${m().format(\n              'DD-MM-YY',\n            )}_${name_eng}_players.${key}`\n            link.click()\n          }\n        })\n    },\n  }),\n  // Получаем список кнопок для выпадащего меню\n  getDropdownBtnsHoc,\n  observer,\n)\n","import React from 'react'\n\nimport { TableUI } from 'react-sport'\n\nimport { GearPopup } from 'features/GearPopup'\nimport { THead } from 'features/Table'\n\nimport PlayersList from '../PlayersList'\nimport { playersTableComposed } from './composed'\nimport { PlayersTableHeader } from './PlayersTableHeader'\n\ntype TProps = {\n  activeId: string | void,\n  handleNewPopupAction: () => void,\n  handlePopupAction: () => void,\n  handleSetActiveParam: () => void,\n  lexics: {\n    page: string,\n  },\n  links: Array<any>,\n  newPopupOpened: boolean,\n  popupOpened: boolean,\n  sortAsc: boolean,\n  table: {\n    avatarIsVisible: boolean,\n    position: number,\n    selectedParams: Array<{}>,\n    summaryType: string,\n  },\n  teamPlayers: {\n    editTempSelected: () => void,\n    gearParams: Array<{}>,\n    isFetching: boolean,\n    tables: any,\n    tempSelected: Array<{}>,\n  },\n}\n\n/** Компонент Таблица со списком игроков в команде\n* @param {string} activeId - выбранный айди параметра по которому сортируем\n* @param {func} handlePopupAction - функция для отображение попап шестеренки\n* @param {func} handleNewPopupAction - функция для отображение попап шестеренки для новой таблицы\n* @param {func} newPopupOpened - открыт попап с новой таблицей\n* @param {func} popupOpened - открыт попап с редактированием параметров для таблицы\n* @param {array} links - ссылки для использования для скачивания отчета\n* @param {func} setSortedId - при клике на шапку в таблице указываем\nайди по которому будем сортировать игроков\n* @param {object} table - объект таблицы со свойствами\n* @param {bool} sortAsc - сортируем по убыванию или по возрастанию значения\n* @param {bool} isFetching - флаг для отображения лоадера\n*/\nconst PlayersTableComponent = ({\n  activeId,\n  handleNewPopupAction,\n  handlePopupAction,\n  handleSetActiveParam,\n  links,\n  newPopupOpened,\n  popupOpened,\n  sortAsc,\n  table: { avatarIsVisible, position, selectedParams },\n  table,\n  teamPlayers,\n  teamPlayers: { isFetching },\n}: TProps) => (\n  <div className='stats-table'>\n    <PlayersTableHeader\n      table={table}\n      links={links}\n      handlePopupAction={handlePopupAction}\n      handleNewPopupAction={handleNewPopupAction}\n    />\n    {(popupOpened || newPopupOpened) && (\n      <GearPopup\n        table={table}\n        handlePopupAction={handlePopupAction}\n        handleNewPopupAction={handleNewPopupAction}\n        popupOpened={popupOpened}\n        newPopupOpened={newPopupOpened}\n        currentStore={teamPlayers}\n        newPopup={newPopupOpened}\n      />\n    )}\n    <div className='stats-table__wrapper'>\n      <table className='stats-table__table'>\n        <TableUI.Thead>\n          {/*\n              //@ts-ignore */}\n          <THead table={table} setSortedId={handleSetActiveParam} />\n        </TableUI.Thead>\n        {isFetching\n          ? <tbody className='loading' />\n          : (\n            <PlayersList\n              selectedParams={selectedParams}\n                //@ts-ignore\n              activeId={activeId}\n              sortAsc={sortAsc}\n              avatarIsVisible={avatarIsVisible}\n              position={position}\n            />\n          )\n        }\n      </table>\n    </div>\n  </div>\n)\n\nexport const PlayersTable = playersTableComposed(PlayersTableComponent)\n","\nimport React, { Fragment } from 'react'\nimport { inject, observer } from 'mobx-react'\nimport { compose, lifecycle } from 'recompose'\nimport { PlayersTable } from './PlayersTable'\n\ntype TProps = {\n  teamPlayers: {\n    tables: {},\n  },\n};\n\nconst TeamPlayers = ({ teamPlayers: { tables } }: TProps) => (\n  <Fragment>\n    {Object.values(tables)\n      .sort((a: any, b: any) => a.position - b.position)\n      .map((table: any) => (\n        // @ts-ignore\n        <PlayersTable key={table.position} table={table} />\n      ))}\n  </Fragment>\n)\n\nconst TeamPlayersComposed = compose<any, TProps>(\n  inject('teamPlayers', 'teamProfile', 'selectedMatches'),\n  lifecycle({\n    componentDidMount() {\n      const {\n        // @ts-ignore\n        selectedMatches,\n        // @ts-ignore\n        teamPlayers: { fetchParams },\n        // @ts-ignore\n        teamProfile: {\n          profile: { id },\n        },\n      } = this.props\n      fetchParams(id, selectedMatches)\n    },\n  }),\n  observer,\n)(TeamPlayers)\n\nexport default TeamPlayersComposed\n","import { inject, observer } from 'mobx-react'\nimport { compose, withHandlers, lifecycle } from 'recompose'\nimport {\n  indexLexic,\n  teamLexic,\n  filtersLexic,\n  markersLexic,\n  tableParamsLexic,\n  tableParamsLexicShort,\n  tableParamsNumLexic,\n  videoCutsLexic,\n  //@ts-ignore\n} from 'config/lexics'\n\nexport const teamPageComposed = compose(\n  inject(\n    'lexics',\n    'matches',\n    'teamProfile',\n    'teamTable',\n    'selectedMatches',\n  ),\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    getTeamProfile: ({ teamProfile: { fetch } }) => (id) => {\n      fetch(id)\n    },\n  }),\n  lifecycle(\n    {\n      componentDidMount() {\n        const {\n          getTeamProfile,\n          lexics,\n          match: {\n            params: { teamId },\n          },\n          matches,\n        } = this.props\n        lexics.appPage = {\n          page: 'team',\n          phrases: {\n            ...indexLexic,\n            ...teamLexic,\n            ...filtersLexic,\n            ...markersLexic,\n            ...tableParamsLexic,\n            ...tableParamsLexicShort,\n            ...tableParamsNumLexic,\n            ...videoCutsLexic,\n          },\n        }\n        getTeamProfile(teamId)\n        matches.fetch('team', teamId, 0, 20)\n      },\n      //@ts-ignore\n    },\n    //@ts-ignore\n    {\n      //@ts-ignore\n      componentDidUpdate(prevProps) {\n        const {\n          getTeamProfile,\n          match: {\n            params: { teamId },\n          },\n        } = this.props\n        if (prevProps.teamId !== teamId) {\n          getTeamProfile(teamId)\n        }\n      },\n    },\n  ),\n  observer,\n)\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\nimport { compose, withProps } from 'recompose'\n// @ts-ignore\nimport { getLongSuffix, isNationalTeam } from 'module/utils/helpers'\nimport cx from 'classnames'\n\n// @ts-ignore\nimport Avatar from 'features/components/common/Avatar'\n\ntype TProps = {\n  teamProfile: {\n    profile: {\n      country_id: number,\n      team_type: number,\n      photo: string,\n    },\n    isLoaded: boolean,\n  },\n  suffix: string,\n}\n\nexport const TeamCard = ({\n  suffix,\n  teamProfile: { isLoaded, profile },\n}: TProps) => {\n  const { country_id, photo, team_type } = profile\n  return (\n    <div\n      className={cx({\n        'player-card-left': isLoaded,\n        'player-card-left player-card-left_loader': !isLoaded,\n      })}\n    >\n      <div className='player-column player-column-avatar'>\n        <div\n          className={cx('player-card-avatar', {\n            'player-card-avatar_national': isNationalTeam(team_type),\n          })}\n        >\n          <Avatar image={photo} name='team' />\n        </div>\n      </div>\n      <div className='player-column player-column-name'>\n        <h1 className='player-card-title'>\n          <span>\n            {/*\n            //@ts-ignore */}\n            {profile[`short_name_${suffix}`] || profile[`name_${suffix}`]}\n          </span>\n        </h1>\n        <div className='player-card-team'>\n          {/*\n          //@ts-ignore */}\n          {country_id && <a>{profile[`country_name_${suffix}`]}</a>}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst TeamCardComposed = compose(\n  inject('teamProfile', 'lexics'),\n  observer,\n  //@ts-ignore\n  withProps(({ lexics: { lang } }) => ({\n    suffix: getLongSuffix(lang),\n  })),\n  //@ts-ignore\n)(TeamCard)\n\nexport default TeamCardComposed\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  compose,\n  lifecycle,\n} from 'recompose'\nimport get from 'lodash/get'\n\nimport { team_params } from 'config/params'\n\nimport Loader from 'features/components/common/loader/Loader'\nimport { HeaderStatsList } from 'features/HeaderStatsList'\n\nimport {\n  TComposeInner,\n  TPropsOuter,\n  TLifecycle,\n} from './types'\n/**\n * Отображение блока со статистикой в шапке профиля\n */\nexport const TeamStatsWrapperComponent = ({\n  teamStats: {\n    isFetching,\n    stats,\n  },\n}: TComposeInner) => (\n  <div className='player-card-stats-list'>\n    {isFetching ? (\n      <Loader />\n    ) : (\n      <HeaderStatsList\n        params={team_params}\n        stats={stats}\n      />\n    )}\n  </div>\n)\n\nconst teamStatsComposed = compose<TComposeInner, TPropsOuter>(\n  inject('teamStats', 'selectedMatches'),\n  lifecycle<TLifecycle, {}>({\n    componentDidMount() {\n      const {\n        page,\n        pageId,\n        selectedMatches,\n        teamStats: { fetch },\n      } = this.props\n      /**\n       * Получение данных по выбранным матчам.\n       * @param {number} pageId - id профиля команды\n       * @param {array} selectedMatches[page][pageId] - id матчей для запроса\n       */\n      fetch(pageId, get(selectedMatches, [page, pageId], []))\n    },\n  }),\n  observer,\n)\n\nexport const TeamStatsWrapper = teamStatsComposed(TeamStatsWrapperComponent)\n","import React from 'react'\nimport TeamCard from 'features/TeamPage/components/TeamCard'\nimport MatchSelect from 'features/components/common/MatchSelect'\nimport Loader from 'features/components/common/loader/Loader'\nimport { TeamStatsWrapper } from './TeamStatsWrapper'\n\ntype TProps = {\n  firstLoad: boolean,\n  profile: {},\n  teamId: string,\n}\n\nexport const TeamPageHeader = ({\n  firstLoad,\n  profile,\n  teamId,\n}: TProps) => (\n  <section className='player-card'>\n    <div className='container-fluid'>\n      <div className='player-card-wrapper'>\n        {profile && <TeamCard />}\n        <div className='player-card-responsive'>\n          {!firstLoad\n            ? (\n          //@ts-ignore\n              <MatchSelect\n                page='team'\n                pageId={teamId}\n              />\n            )\n            : <Loader />}\n        </div>\n        <div className='player-card-right'>\n          {profile && !firstLoad\n            ? (\n              <TeamStatsWrapper\n                page='team'\n                pageId={teamId}\n              />\n            )\n            : <Loader />\n          }\n        </div>\n      </div>\n    </div>\n  </section>\n)\n","import React, { Fragment } from 'react'\nimport { Switch, Route } from 'react-router-dom'\n\nimport { EventPlayer as VideoPlayer, Popup } from 'react-sport'\n\nimport { StatsTabs } from 'features/components/common/stats-tabs/StatsTabs'\nimport TeamPlayers from 'features/TeamPage/components/TeamPlayers'\nimport VideoCuts from 'features/components/common/video-cuts/VideoCuts'\nimport Loader from 'features/components/common/loader/Loader'\nimport { PlayerField } from 'features/components/common/player/PlayerField'\nimport { TeamPageMatches } from 'features/TeamPageMatches'\n\nimport { teamPageComposed } from './teamPageComposed'\nimport { TeamPageHeader } from './TeamPageHeader'\n\nimport 'features/components/common/MainPage.scss'\nimport 'features/components/common/PageCard.scss'\nimport 'features/components/common/Shot.scss'\nimport 'features/components/common/Zones.scss'\n\nimport 'features/components/App/magnific-popup.css'\nimport 'features/components/App/video-player.scss'\nimport 'features/components/common/player-card/player.scss'\nimport 'features/components/common/player-card/PlayerCard.scss'\nimport 'features/components/common/player-stats/PlayerStats.scss'\nimport 'features/components/common/player-stats/PlayerStatsDropdown.scss'\n\ntype TProps = {\n  lexics: { page: string | null },\n  match: {\n    params: {\n      teamId: string,\n    },\n    url: string,\n  },\n  matches: {\n    firstLoad: boolean,\n  },\n  selectedMatches: {\n    team: {\n      [key: string]: Array<{}>,\n    },\n  },\n  teamProfile: { profile: {} },\n  teamTable: {\n    gearParams: {},\n    tables: {},\n  },\n}\n\nexport const TeamPageComponent = ({\n  match: {\n    params: {\n      teamId,\n    },\n  },\n  match,\n  matches: { firstLoad },\n  selectedMatches,\n  teamProfile: { profile },\n}: TProps) => (\n  <article className='player for-player'>\n    {/*\n      //@ts-ignore */}\n    <Popup>\n      {/*\n        //@ts-ignore */}\n      <VideoPlayer\n        appName='volleyball'\n      />\n    </Popup>\n    <TeamPageHeader\n      profile={profile}\n      firstLoad={firstLoad}\n      teamId={teamId}\n    />\n    <section className='main-page__details'>\n      {!firstLoad\n      //@ts-ignore\n        ? <PlayerField pageId={teamId} />\n        : <Loader />\n      }\n      <div className='main-page__responsive'>\n        <div className='main-page__content'>\n          <div className='main-page__content-header'>\n            <StatsTabs\n              match={match}\n              isStats\n            />\n          </div>\n          <Switch>\n            <Route\n              path='/teams/:teamId/'\n              exact\n              render={() => <TeamPageMatches pageId={teamId} />}\n            />\n            <Route\n              path='/teams/:teamId/video'\n              render={props => (\n                //@ts-ignore\n                <VideoCuts\n                  page='team'\n                  pageType='teams'\n                  playerId={teamId}\n                  {...props}\n                />\n              )}\n            />\n            <Route\n              path='/teams/:teamId/players'\n              exact\n              render={() => (\n                <Fragment>\n                  {/*\n                    //@ts-ignore */}\n                  {profile && selectedMatches && <TeamPlayers />}\n                </Fragment>\n              )}\n            />\n          </Switch>\n        </div>\n      </div>\n    </section>\n  </article>\n)\n\n//@ts-ignore\nexport const TeamPage = teamPageComposed(TeamPageComponent)\n","\nimport React, { Fragment } from 'react'\nimport { T9n } from 'react-sport'\nimport map from 'lodash/map'\n\ntype TProps = {\n  headerVideoButtons: Array<{\n    link: string,\n    id: string,\n    t: string,\n  }>,\n};\n\nconst VideoLinks = ({ headerVideoButtons }: TProps) => (\n  <Fragment>\n    {map(headerVideoButtons, ({ id, link, t }) => (\n      <a key={id} href={link} className='match-header__play-button'>\n        <T9n t={t} />\n      </a>\n    ))}\n  </Fragment>\n)\n\nexport default VideoLinks\n","\nimport React from 'react'\nimport get from 'lodash/get'\nimport find from 'lodash/find'\n\nimport { compose, withHandlers } from 'recompose'\n\ntype TProps = {\n  periods: Array<any>,\n  getScoreByPeriods: (period: {}, team1_id: number, team2_id: number) => string,\n  team1_id: number,\n  team2_id: number,\n};\n\nexport const MatchScore = ({\n  getScoreByPeriods,\n  periods,\n  team1_id,\n  team2_id,\n}: TProps) => (\n  <div className='match-header__periods-wrapper'>\n    {periods.map(period => (\n      <span key={period[0].period} className='match-header__periods'>\n        {getScoreByPeriods(period, team1_id, team2_id)}\n      </span>\n    ))}\n  </div>\n)\n\nconst MatchScoreComposed = compose(\n  withHandlers({\n    //@ts-ignore\n    //@ts-ignore\n    //@ts-ignore\n    getScoreByPeriods: () => (period, team1_id, team2_id) => {\n      const scoreTeam = get(find(period, { team: team1_id }), 'value')\n      const scoreOppTeam = get(find(period, { team: team2_id }), 'value')\n      return `${scoreTeam} : ${scoreOppTeam}`\n    },\n  }),\n)\n\n// @ts-ignore\nexport default MatchScoreComposed(MatchScore)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport MatchScore from './MatchScore/MatchScore'\n\ntype TProps = {\n  matchProfile: {\n    periods: Array<{}>,\n    //@ts-ignore\n    data: {},\n    //@ts-ignore\n    //@ts-ignore\n    data: {\n      match_date: string,\n      score_team1: number,\n      score_team2: number,\n      team1_id: number,\n      team2_id: number,\n    },\n  },\n  suffix: string,\n}\n\nconst MatchInfo = ({\n  matchProfile: {\n    data,\n    data: {\n      //@ts-ignore\n      match_date,\n      //@ts-ignore\n      score_team1,\n      //@ts-ignore\n      score_team2,\n      //@ts-ignore\n      team1_id,\n      //@ts-ignore\n      team2_id,\n    },\n    periods,\n  },\n  suffix,\n}: TProps) => (\n  <div className='match-header__main'>\n    <div className='match-header__event'>\n      <span className='match-header__date'>{match_date}</span>\n    </div>\n    <h1 className='match-header__teams'>\n      <span className='match-header__home'>\n        <Link target='_blank' to={`/teams/${team1_id}`}>\n          {/*\n            //@ts-ignore */}\n          {data[`team1_name_${suffix}`]}\n        </Link>\n      </span>\n      <span className='match-header__score'>\n        {score_team1}:{score_team2}\n      </span>\n      <span className='match-header__away'>\n        <Link target='_blank' to={`/teams/${team2_id}`}>\n          {/*\n          //@ts-ignore */}\n          {data[`team2_name_${suffix}`]}\n        </Link>\n      </span>\n    </h1>\n    <div className='match-header__event'>\n      <span className='match-header__place'>\n        {/*\n        //@ts-ignore */}\n        {data[`tournament_name_${suffix}`]}\n      </span>\n    </div>\n    <MatchScore periods={periods} team1_id={team1_id} team2_id={team2_id} />\n  </div>\n)\n\nexport default MatchInfo\n","\nimport React from 'react'\nimport { inject, observer } from 'mobx-react'\nimport { compose, withProps } from 'recompose'\nimport get from 'lodash/get'\n\n// @ts-ignore\nimport { getSuffix } from 'module/utils/helpers'\nimport VideoLinks from './VideoLinks/VideoLinks'\nimport MatchInfo from './MatchInfo/MatchInfo'\n\ntype TProps = {\n  headerVideoButtons: Array<{\n    link: string,\n    id: string,\n    t: string,\n  }>,\n  suffix: string,\n  lexics: { lang: string },\n  matchProfile: {\n    periods: Array<{}>,\n    //@ts-ignore\n    data: {},\n    //@ts-ignore\n    //@ts-ignore\n    data: {\n      match_date: string,\n      score_team1: number,\n      score_team2: number,\n      team1_id: number,\n      team2_id: number,\n    },\n  },\n};\n\nexport const HeaderComponent = ({\n  headerVideoButtons,\n  matchProfile,\n  suffix,\n}: TProps) => (\n  <div className='match-header'>\n    <div className='match-header__container'>\n      <MatchInfo matchProfile={matchProfile} suffix={suffix} />\n      <div className='match-header__info'>\n        <div className='match-header__play'>\n          <VideoLinks headerVideoButtons={headerVideoButtons} />\n        </div>\n      </div>\n    </div>\n  </div>\n)\n\nconst HeaderComposed = compose(\n  inject('lexics', 'matchProfile'),\n  observer,\n  //@ts-ignore\n  withProps(({ lexics: { lang }, matchProfile: { videoLinks } }) => ({\n    suffix: getSuffix(lang),\n    headerVideoButtons: [\n      {\n        id: 'full_game',\n        link: get(videoLinks, 'full_game.link', ''),\n        t: 'match_popup_full_game',\n      },\n      {\n        id: 'ball_in_play',\n        link: get(videoLinks, 'ball_in_play.link', ''),\n        t: 'match_popup_ball_in_play',\n      },\n    ],\n  })),\n)\n\n// @ts-ignore\nexport const Header = HeaderComposed(HeaderComponent)\n","\nimport { compose, withHandlers, withProps, lifecycle } from 'recompose'\nimport get from 'lodash/get'\nimport { inject, observer } from 'mobx-react'\nimport {\n  indexLexic,\n  matchLexic,\n  filtersLexic,\n  markersLexic,\n  tableParamsLexic,\n  tableParamsLexicShort,\n  tableParamsNumLexic,\n  videoCutsLexic,\n  //@ts-ignore\n} from 'config/lexics'\n\nconst MatchPageComposed = compose(\n  inject('lexics', 'matchProfile'),\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    getMatchProfile: ({ matchProfile: { fetch } }) => (matchId) => {\n      fetch(matchId)\n    },\n\n    //@ts-ignore\n    //@ts-ignore\n    editTempSelected: ({ matchTable: { editTempSelected } }) => (\n      //@ts-ignore\n      action,\n      //@ts-ignore\n      param,\n    ) => {\n      editTempSelected(action, param)\n    },\n  }),\n  //@ts-ignore\n  withProps(({ match }) => {\n    const matchId = get(match, 'params.matchId')\n    return {\n      matchId,\n    }\n  }),\n  lifecycle({\n    componentDidMount() {\n      const {\n        //@ts-ignore\n        getMatchProfile,\n        //@ts-ignore\n        lexics,\n        //@ts-ignore\n        matchId,\n      } = this.props\n      lexics.appPage = {\n        page: 'match',\n        phrases: {\n          ...indexLexic,\n          ...matchLexic,\n          ...filtersLexic,\n          ...markersLexic,\n          ...tableParamsLexic,\n          ...tableParamsLexicShort,\n          ...tableParamsNumLexic,\n          ...videoCutsLexic,\n        },\n      }\n      getMatchProfile(matchId)\n    },\n  }),\n  observer,\n)\n\nexport default MatchPageComposed\n","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\n\nimport { tableTypes } from 'config/tables'\n\nimport { Tables } from 'features/Table'\nimport { StatsTabs } from 'features/components/common/stats-tabs/StatsTabs'\nimport VideoCuts from 'features/components/common/video-cuts/VideoCuts'\nimport { PlayerField } from 'features/components/common/player/PlayerField'\n\nimport { mainContentComposed } from './composed'\n\n\nexport const MainContentComponent = ({\n  //@ts-ignore\n  lexics: { page },\n  //@ts-ignore\n  match,\n  //@ts-ignore\n  matchId,\n  matchTable: {\n    //@ts-ignore\n    isLoaded,\n    //@ts-ignore\n    tables,\n  },\n  //@ts-ignore\n  pageId,\n}) => (\n  <section className='main-page__details'>\n    {/*\n      //@ts-ignore */}\n    <PlayerField pageId={pageId} matchId={matchId} />\n    <div className='main-page__responsive'>\n      <div className='main-page__content'>\n        <div className='main-page__content-header'>\n          <StatsTabs match={match} isStats />\n        </div>\n        <Switch>\n          <Route\n            path='/matches/:matchId/'\n            exact\n            render={() =>\n              (isLoaded ? (\n                <Tables\n                  tableType={tableTypes.matchPlayersTable}\n                  tables={tables}\n                  pageId={matchId}\n                />\n              ) : (\n                <div className='loading' />\n              ))\n            }\n          />\n          <Route\n            path='/matches/:matchId/video'\n            render={props => (\n              //@ts-ignore\n              <VideoCuts\n                page='match'\n                pageType='teams'\n                playerId={pageId}\n                {...props}\n              />\n            )}\n          />\n        </Switch>\n      </div>\n    </div>\n  </section>\n)\n\n// @ts-ignore\nexport const MainContent = mainContentComposed(MainContentComponent)\n","\nimport { inject, observer } from 'mobx-react'\n\nimport { compose, withProps, lifecycle } from 'recompose'\n\nimport get from 'lodash/get'\n\nexport const mainContentComposed = compose(\n  inject('lexics', 'matchProfile', 'matches', 'matchTable'),\n  observer,\n  //@ts-ignore\n  withProps(({ matches: { active }, matchProfile }) => {\n    const pageId = get(matchProfile, `data.${active}_id`)\n    return {\n      pageId,\n    }\n  }),\n  lifecycle({\n    componentDidMount() {\n      const {\n        //@ts-ignore\n        matchProfile: { matchId },\n        //@ts-ignore\n        matchTable: { fetchMatchesInfo },\n      } = this.props\n      fetchMatchesInfo(+matchId)\n    },\n  }),\n  observer,\n)\n","import React, { Fragment } from 'react'\nimport { EventPlayer as VideoPlayer, Popup } from 'react-sport'\n\n// @ts-ignore\nimport Loader from 'features/components/common/loader/Loader'\nimport { Header } from './Header'\nimport MatchPageComposed from './MatchPageComposed'\nimport { MainContent } from './MainContent'\n\nimport 'features/components/common/MainPage.scss'\nimport 'features/components/common/PageCard.scss'\nimport 'features/components/common/MatchCard.scss'\nimport 'features/components/common/Shot.scss'\nimport 'features/components/common/Zones.scss'\n\nimport 'features/components/common/player-card/player.scss'\nimport 'features/components/common/player-card/PlayerCard.scss'\nimport 'features/components/common/player-stats/PlayerStats.scss'\nimport 'features/components/common/player-stats/PlayerStatsDropdown.scss'\n\ntype TProps = {\n  match: {},\n  matchId: string,\n  matchProfile: { isFetching: boolean },\n}\n\nexport const MainPage = ({\n  match,\n  matchId,\n  matchProfile: { isFetching },\n}: TProps) => (\n  <div className='match-container'>\n    {/*\n      //@ts-ignore */}\n    <Popup>\n      {/*\n        //@ts-ignore */}\n      <VideoPlayer appName='volleyball' />\n    </Popup>\n    {isFetching ? (\n      <Loader />\n    ) : (\n      <Fragment>\n        <Header />\n        {/*\n            //@ts-ignore */}\n        <MainContent match={match} matchId={matchId} />\n      </Fragment>\n    )}\n  </div>\n)\n\n// @ts-ignore\nexport default MatchPageComposed(MainPage)\n","\nimport React from 'react'\nimport { compose, withHandlers, withProps, withState } from 'recompose'\n\ntype TProps = {\n  child: any,\n  listItemStyle: {},\n  handleMouseHover: () => void,\n};\n\nconst DropDownItem = ({ child, handleMouseHover, listItemStyle }: TProps) => (\n  <div\n    onMouseEnter={handleMouseHover}\n    onMouseLeave={handleMouseHover}\n    style={listItemStyle}\n  >\n    {child}\n  </div>\n)\n\nconst DropDownItemComposed = compose(\n  withState('isHovered', 'toggleHover', false),\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    handleMouseHover: ({ toggleHover }) => () => toggleHover(n => !n),\n  }),\n  //@ts-ignore\n  withProps(({ isHovered, primaryColor }) => ({\n    listItemStyle: {\n      backgroundColor: isHovered ? primaryColor : '#fff',\n      padding: '5px 10px',\n    },\n  })),\n  //@ts-ignore\n)(DropDownItem)\n\nexport default DropDownItemComposed\n","import * as React from 'react'\nimport { compose, withHandlers, withProps, withState } from 'recompose'\nimport cx from 'classnames'\nimport { OutsideClick } from 'react-sport'\nimport './index.scss'\nimport DropDownItem from './DropDownItem'\n\n/**\n * Компонент Dropdown - простой выпадающий список с возможностью кастомизации\n *\n * Работает так\n *  <Dropdown onClick={() => onClick()}>\n *    <ChildFirst/>\n *    <ChildSecond/>\n *  </Dropdown>\n *\n * @property {React, Component, Array} children - компоненты которые являются пунктами выпадашки\n * @property {function} onClick - действие при клике на пункт выпадашки\n * @property {function} handleClick - открытие/закрытие списка\n * @property {React, Component, string} placeholder - выбранный пункт выпадашки\n * @property {function} changePlaceholder - изменение заголовка\n * @property {object} settings - кастомизированные настройки выпадающего меню\n  (основной цвет, отступы, шрифт и тд) не обязательно\n  Прим. settings = {\n    [key]: string\n  }\n */\n\ntype TProps = {\n  children: any,\n  handleClick: () => void,\n  //@ts-ignore\n  placeholder: React.Node,\n  //@ts-ignore\n  statePlaceholder: React.Node,\n  isOpened: boolean,\n  inlineStyles: {\n    placeHolder: {},\n    listItem: {},\n  },\n  primaryColor: string,\n  //@ts-ignore\n  itemClick: (arg: React.Node) => () => void,\n}\n\nconst DropDownSimple = ({\n  children,\n  handleClick,\n  inlineStyles,\n  isOpened,\n  itemClick,\n  placeholder,\n  primaryColor,\n  statePlaceholder,\n}: TProps) => (\n  <div\n    className={cx('dropdown-container', {\n      'dropdown-container__opened': isOpened,\n    })}\n  >\n    {children && (\n      <div className='dropdown-control' onClick={handleClick}>\n        <span style={inlineStyles.placeHolder}>\n          {statePlaceholder || placeholder}\n        </span>\n        <ul\n          className={cx('dropdown-list', {\n            'dropdown-list__hidden': !isOpened,\n          })}\n        >\n          {React.Children.map(children, (child, i) => (\n            <li\n              key={i}\n              className='dropdown-list__item'\n              style={inlineStyles.listItem}\n              onClick={itemClick(child)}\n            >\n              {/*\n              //@ts-ignore */}\n              <DropDownItem primaryColor={primaryColor} child={child} />\n            </li>\n          ))}\n        </ul>\n      </div>\n    )}\n  </div>\n)\n\nconst DropDownSimpleComposed = compose(\n  withState('isOpened', 'handleOpen', false),\n  withState('statePlaceholder', 'changePlaceholder', ''),\n  //@ts-ignore\n  withHandlers({\n    //@ts-ignore\n    handleClick: ({ handleOpen }) => () => handleOpen(n => !n),\n    clickOutside: ({ handleOpen }) => () => handleOpen(false),\n    //@ts-ignore\n    itemClick: ({ changePlaceholder, onClick }) => child => () => {\n      changePlaceholder(React.cloneElement(child, { onClick: null }))\n      if (child.props.onClick) child.props.onClick()\n      if (onClick) onClick()\n    },\n  }),\n  //@ts-ignore\n  withProps(({ settings = {} }) => ({\n    //@ts-ignore\n    primaryColor: settings.primaryColor || '#e6e6e6',\n    inlineStyles: {\n      listItem: {\n        //@ts-ignore\n        minWidth: settings.minWidth || '150px',\n        //@ts-ignore\n        fontSize: settings.fontSize || '10px',\n      },\n      placeHolder: {\n        //@ts-ignore\n        paddingLeft: settings.padding || '10px',\n      },\n    },\n  })),\n  OutsideClick,\n  //@ts-ignore\n)(DropDownSimple)\n\nexport default DropDownSimpleComposed\n","import React, { Fragment } from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport {\n  lifecycle,\n  compose,\n  withProps,\n  withHandlers,\n} from 'recompose'\n\nimport map from 'lodash/map'\nimport head from 'lodash/head'\n\nimport { DropDownSimple } from 'features/DropDownSimple'\nimport { primarySportColor } from 'config/common'\nimport Loader from 'features/components/common/loader/Loader'\n\nimport './tournamentSeasonsSelect.scss'\n\ntype TProps = {\n  tournamentSeasonSelect: {\n    isLoaded: boolean,\n    //@ts-ignore\n    seasonsList: Array<{}>,\n    selectedSeason?: {\n      //@ts-ignore\n      season_name?: string | null,\n    },\n  },\n  settings: any,\n  tournamentId: number,\n  onSeasonSelect: (tournamentId: number, season_id: number) => () => void,\n}\n\nexport const SeasonSelect = ({\n  onSeasonSelect,\n  settings,\n  tournamentId,\n  tournamentSeasonSelect: {\n    isLoaded,\n    seasonsList,\n  },\n}: TProps) => (\n  <Fragment>\n    <div className='season-select-container'>\n      {isLoaded\n        ? (\n      //@ts-ignore\n          <DropDownSimple\n            //@ts-ignore\n            placeholder={head(seasonsList).season_name}\n            settings={settings}\n          >\n            {map(\n              seasonsList,\n              //@ts-ignore\n              ({ season_id, season_name }) => (\n                <div\n                  key={season_id}\n                  onClick={onSeasonSelect(tournamentId, season_id)}\n                >\n                  {season_name}\n                </div>\n              ),\n            )}\n          </DropDownSimple>\n        )\n        : <Loader />\n      }\n    </div>\n  </Fragment>\n)\n\nconst SeasonSelectComposed = compose(\n  inject('lexics', 'tournamentSeasonSelect', 'tournamentHeaderStats'),\n  //@ts-ignore\n  withHandlers({\n    onSeasonSelect: ({ tournamentSeasonSelect: { changeActiveSeason } }) =>\n      //@ts-ignore\n      (tournamentId, season_id) => () => changeActiveSeason(tournamentId, season_id),\n  }),\n  withProps(() => ({\n    settings: {\n      primaryColor: primarySportColor,\n    },\n  })),\n  lifecycle({\n    componentDidMount() {\n      const {\n        //@ts-ignore\n        tournamentId,\n        //@ts-ignore\n        tournamentSeasonSelect: { fetchSeasons },\n      } = this.props\n      fetchSeasons(tournamentId)\n    },\n  }),\n  observer,\n  //@ts-ignore\n)(SeasonSelect)\n\nexport default SeasonSelectComposed\n","import React, { Fragment } from 'react'\nimport {\n  lifecycle,\n  compose,\n  withHandlers,\n} from 'recompose'\nimport { inject, observer } from 'mobx-react'\n\nimport get from 'lodash/get'\nimport map from 'lodash/map'\n\nimport Loader from 'features/components/common/loader/Loader'\nimport { HeaderStatsItem } from 'features/HeaderStatsItem'\n\nimport { team_params } from 'config/params'\nimport './index.scss'\n\ntype TProps = {\n  getEvents: (param_id: number) => Array<number>,\n  getStat: (param_id: number) => number | string,\n  tournamentHeaderStats: { loaded: boolean },\n};\n\nconst TournamentHeaderStats = ({\n  getEvents,\n  getStat,\n  tournamentHeaderStats: { loaded },\n}: TProps) => (\n  <Fragment>\n    {loaded ? (\n      <div className='header-stats-container'>\n        {map(team_params, ({ lexic_id, param_id, percent }) => (\n          <HeaderStatsItem\n            key={param_id}\n            paramId={param_id}\n            lexicId={lexic_id}\n            percent={percent}\n            events={getEvents(param_id)}\n            statValue={getStat(param_id)}\n          />\n        ))}\n      </div>\n    ) : (\n      <Loader />\n    )}\n  </Fragment>\n)\n\nconst TournamentHeaderStatsComposed = compose(\n  inject('tournamentHeaderStats', 'tournamentSeasonSelect'),\n  observer,\n  //@ts-ignore\n  withHandlers({\n    getStat: ({ tournamentHeaderStats: { countAverageStatValue } }) =>\n      //@ts-ignore\n      param_id => get(countAverageStatValue, param_id, 0).toFixed(1),\n\n    getEvents: ({ tournamentHeaderStats: { stats } }) =>\n      //@ts-ignore\n      param_id => get(stats[param_id], 'events', []),\n  }),\n  lifecycle({\n    componentDidMount() {\n      const {\n        //@ts-ignore\n        tournamentHeaderStats: { fetchHeaderParams },\n      } = this.props\n      fetchHeaderParams()\n    },\n  }),\n  observer,\n  //@ts-ignore\n)(TournamentHeaderStats)\n\nexport default TournamentHeaderStatsComposed\n","import TournamentSeasonSelectStore from './TournamentSeasonSelectStore'\n\nexport default TournamentSeasonSelectStore.create({\n  error: null,\n  isLoaded: false,\n})\n","import React, { Fragment } from 'react'\nimport { inject, observer } from 'mobx-react'\n\nimport get from 'lodash/get'\nimport { compose, withProps } from 'recompose'\nimport { getLongSuffix } from 'module/utils/helpers'\n\nimport Avatar from 'features/components/common/Avatar'\n\ntype TProps = {\n  suffix: string,\n  //@ts-ignore\n  countryName: string | null,\n  profile: {\n    photo?: string,\n  },\n}\nconst TournamentPageInfo = ({\n  countryName,\n  profile: {\n    photo,\n    ...profile\n  },\n  suffix,\n}: TProps) => (\n  <Fragment>\n    <div className='tournament-header-left'>\n      <div className='tournament-avatar'>\n        <Avatar image={photo} name='tournament' />\n      </div>\n      <div className='tournament-name'>\n        <h1 className='tournament-header-title'>\n          <span>\n            {/*\n              //@ts-ignore */}\n            {profile[`name_${suffix}`]}\n          </span>\n        </h1>\n        <div className='tournament-header-team'>\n          <a>{countryName}</a>\n        </div>\n      </div>\n    </div>\n  </Fragment>\n)\n\nconst TournamentPageInfoComposed = compose(\n  inject('lexics'),\n  observer,\n  //@ts-ignore\n  withProps(({ lexics: { lang }, profile }) => {\n    const suffix = getLongSuffix(lang)\n    return {\n      suffix,\n      countryName: get(profile, `country.name_${suffix}`),\n    }\n  }),\n  //@ts-ignore\n)(TournamentPageInfo)\n\nexport default TournamentPageInfoComposed\n","import TournamentHeaderStatsStore from './TournamentHeaderStatsStore'\n\nexport default TournamentHeaderStatsStore.create({\n  loaded: false,\n  error: null,\n})\n","import React from 'react'\n// @ts-ignore\nimport { SeasonSelect } from 'features/TournamentSeasonSelect'\n// @ts-ignore\nimport { TournamentHeaderStats } from 'features/TournamentHeaderStats'\n// @ts-ignore\nimport Loader from 'features/components/common/loader/Loader'\nimport TournamentPageInfo from './TournamentPageInfo'\n\ntype TProps = {\n  tournamentId: number,\n  profile: {},\n  isLoaded: boolean,\n}\n\nconst TournamentPageHeader = ({ isLoaded, profile, tournamentId }: TProps) => (\n  <section className='tournament-header'>\n    <div className='tournament-header-wrapper'>\n      <div className='tournament-header__profile-info'>\n        {/*\n        //@ts-ignore */}\n        <TournamentPageInfo profile={profile} />\n      </div>\n      <div className='tournament-header__season-select'>\n        {/*\n        //@ts-ignore */}\n        {profile && <SeasonSelect tournamentId={tournamentId} />}\n      </div>\n      <div className='tournament-header__stats'>\n        {isLoaded ? <TournamentHeaderStats /> : <Loader />}\n      </div>\n    </div>\n  </section>\n)\n\nexport default TournamentPageHeader\n","import {\n  indexLexic,\n  teamLexic,\n  filtersLexic,\n  markersLexic,\n  tableParamsLexic,\n  tableParamsLexicShort,\n  tableParamsNumLexic,\n  videoCutsLexic,\n  //@ts-ignore\n} from 'config/lexics'\n\nexport default {\n  ...indexLexic,\n  ...teamLexic,\n  ...filtersLexic,\n  ...markersLexic,\n  ...tableParamsLexic,\n  ...tableParamsLexicShort,\n  ...tableParamsNumLexic,\n  ...videoCutsLexic,\n}\n","import { compose, lifecycle } from 'recompose'\nimport { inject, observer } from 'mobx-react'\n// @ts-ignore\nimport tournamentLexic from 'config/lexics/tournamentPage'\n\nexport const tournamentPageComposed = compose(\n  inject(\n    'lexics',\n    'tournamentsProfile',\n    'tournamentSeasonSelect',\n    'tournamentMatches',\n  ),\n  lifecycle({\n    componentDidMount() {\n      const {\n        //@ts-ignore\n        lexics,\n        //@ts-ignore\n        match: { params },\n        //@ts-ignore\n        tournamentsProfile: { fetchTournamentProfile },\n      } = this.props\n      lexics.appPage = {\n        page: 'tournaments',\n        phrases: tournamentLexic,\n      }\n      fetchTournamentProfile(Number(params.tournamentId))\n    },\n  }),\n  observer,\n)\n","import React, { Fragment } from 'react'\nimport { Switch, Route, Redirect } from 'react-router-dom'\n\nimport Loader from 'features/components/common/loader/Loader'\nimport { TournamentMatchesTable } from 'features/TournamentPageMatchesTable'\nimport { TournamentPlayersTable } from 'features/TournamentPagePlayersTable'\nimport { StatsTabs } from 'features/components/common/stats-tabs/StatsTabs'\n\nimport TournamentPageHeader from './TournamentPageHeader'\nimport { tournamentPageComposed } from './composed'\n\nimport './tournamentPage.scss'\n\ntype TProps = {\n  match: {\n    url: string,\n    params: {\n      tournamentId: string,\n    },\n  },\n  tournamentMatches: {\n    isLoaded: boolean,\n  },\n  tournamentsProfile: {\n    isLoaded: boolean,\n    profile: {},\n  },\n};\n\nconst TournamentPageComponent = ({\n  match: { params, ...match },\n  tournamentMatches: { isLoaded },\n  tournamentsProfile: { isLoaded: profileLoaded, profile },\n}: TProps) => (\n  <Fragment>\n    {profileLoaded ? (\n      <TournamentPageHeader\n        tournamentId={Number(params.tournamentId)}\n        profile={profile}\n        isLoaded={isLoaded}\n      />\n    ) : (\n      <Loader />\n    )}\n    <section className='main-page__details'>\n      <div className='main-page__responsive'>\n        <div className='main-page__content'>\n          <div className='main-page__content-header'>\n            <StatsTabs match={match} isStats />\n          </div>\n          <Switch>\n            <Route\n              path='/tournaments/:tournamentId/'\n              exact\n              render={() => (\n                <Redirect to={`/tournaments/${params.tournamentId}/matches`} />\n              )}\n            />\n            <Route\n              path='/tournaments/:tournamentId/matches'\n              exact\n              render={() =>\n                (isLoaded ? (\n                //@ts-ignore\n                  <TournamentMatchesTable\n                    tournamentId={Number(params.tournamentId)}\n                  />\n                ) : (\n                  <Loader />\n                ))\n              }\n            />\n            <Route\n              path='/tournaments/:tournamentId/players'\n              exact\n              render={() =>\n                (isLoaded ? (\n                //@ts-ignore\n                  <TournamentPlayersTable\n                    tournamentId={Number(params.tournamentId)}\n                  />\n                ) : (\n                  <Loader />\n                ))\n              }\n            />\n          </Switch>\n        </div>\n      </div>\n    </section>\n  </Fragment>\n)\n\n// @ts-ignore\nexport const TournamentPage = tournamentPageComposed(TournamentPageComponent)\n","import React from 'react'\nimport { Route } from 'react-router-dom'\nimport { inject, observer } from 'mobx-react'\nimport { DragDropContext } from 'react-dnd'\n\nimport HTML5Backend from 'react-dnd-html5-backend'\nimport { compose } from 'recompose'\n\nimport { Login } from 'react-sport'\n\nimport { loginLexic } from 'config/lexics'\n\nimport { Home } from 'features/components/Home/Home'\nimport { Header } from 'features/components/Header/Header'\nimport { PlayerPage } from 'features/components/PlayerPage/PlayerPage'\nimport { TeamPage } from 'features/TeamPage/components/TeamPage'\nimport MatchPage from 'features/components/MatchPage/MatchPage'\nimport { TournamentPage } from 'features/TournamentPage'\n\nimport './App.scss'\n\ntype TProps = {\n  auth: {\n    isAuth: boolean,\n  },\n  location: {\n    pathname: string,\n  },\n}\n\nconst App = ({ auth: { isAuth }, location: { pathname } }: TProps) => (\n  <div className='App'>\n    {isAuth && pathname !== '/' && <Header />}\n    <Route exact path='/' component={Home} />\n    <Route path='/login' render={() => <Login loginLexics={loginLexic} />} />\n    <Route path='/players/:playerId' component={PlayerPage} />\n    <Route path='/teams/:teamId' component={TeamPage} />\n    <Route path='/matches/:matchId' component={MatchPage} />\n    <Route path='/tournaments/:tournamentId' component={TournamentPage} />\n    <a className='download-link download-link_hidden' id='download-link'>\n      <span />\n    </a>\n  </div>\n)\n\nconst AppComposed = compose(\n  inject('auth'),\n  DragDropContext(HTML5Backend),\n  observer,\n  //@ts-ignore\n)(App)\n\nexport default AppComposed\n","import TournamentPageStore from './TournamentPageStore'\n\nexport default TournamentPageStore.create({\n  profile: {},\n  isLoaded: false,\n  error: null,\n})\n","import React from 'react'\nimport { Router, Route, Redirect } from 'react-router-dom'\nimport PropTypes from 'prop-types'\nimport { Provider } from 'mobx-react'\n\nimport stores from 'features/stores'\nimport history from 'features/history'\n\nimport App from 'features/components/App/App'\n\n// @ts-ignore\nconst onEnter = (props) => {\n  if (\n    window.localStorage.getItem('AuthUser') === null\n    && props.location.pathname !== '/login'\n  ) {\n    localStorage.setItem('backLocation', props.location.pathname)\n    return <Redirect to='/login' />\n  }\n  return <App {...props} />\n}\n\nonEnter.propTypes = {\n  location: PropTypes.object,\n}\n\nconst Features = () => (\n  <Router history={history}>\n    <Provider {...stores}>\n      <div>\n        <Route path='/' render={props => onEnter(props)} />\n      </div>\n    </Provider>\n  </Router>\n)\n\nexport default Features\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from 'features'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}